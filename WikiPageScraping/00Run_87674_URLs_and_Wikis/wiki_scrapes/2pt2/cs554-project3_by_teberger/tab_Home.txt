[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#getting-started" id="user-content-getting-started"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting Started</h1>
<p>Download the ANTLR3 Python Runtime. You can do this using <a href="https://pip.pypa.io/en/latest/installing.html" rel="nofollow">pip</a>:</p>
<p><code>pip install --allow-unverified antlr_python_runtime --allow-all-external antlr_python_runtime</code></p>
<p>If you have some other method for installing Python modules that you like, the specific version of the ANTLR Python Runtime that you <em>must</em> have is <a href="https://pypi.python.org/pypi/antlr_python_runtime/3.1.3" rel="nofollow">antlr_python_runtime 3.1.3</a>.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#guide-to-zachs-homework-code" id="user-content-guide-to-zachs-homework-code"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Guide to Zach's Homework Code</h1>
<ul>
<li>
<code>nodes.py</code>: Contains all of the node types used to construct the AST as well as LLVM code. Do not worry about <code>LlvmAdaptor</code> - it is used in conjunction with the ANTLR parser to make sure my custom nodes are used.</li>
<li>
<code>simple.py</code>: Contains the main code that generates a tree and creates an executable.</li>
<li>
<code>simple_graph.py</code>: Contains code for generated digraph of the AST.</li>
</ul>
<p>Code you don't have to interact with at all:</p>
<ul>
<li>
<code>simple.g</code>: The simple arithmetic grammar, written in ANTLR3.</li>
<li>
<code>simpleLexer.py</code>: Machine-generated lexer code.</li>
<li>
<code>simpleParser.py</code>: Machine-generated parser code.</li>
<li>
<code>simple.tokens</code>: Machine-generated file used by <code>simpleLexer.py</code> and <code>simpleParser.py</code>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#getting-an-ast-from-an-input-file" id="user-content-getting-an-ast-from-an-input-file"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting an AST From an Input File</h2>
<p>Import the <code>SimpleParse</code> function from <code>simple.py</code>. It takes one argument, a string URI pointing to an input file. It gives back the AST root node, which will always be a <code>BlockNode</code> from <code>nodes.py</code>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#understanding-the-tree-nodes" id="user-content-understanding-the-tree-nodes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Understanding the Tree Nodes</h2>
<p>Every node in <code>nodes.py</code> is a subclass of the ANTLR3 class <code>CommonTree</code>. See the official documentation <a href="http://www.antlr3.org/api/Python/classantlr3_1_1tree_1_1_common_tree.html" rel="nofollow">here</a> for a complete description, though I will describe the most important bits below.</p>
<p>The base node is the <code>EmitNode</code>, named because it is a sublcass that specifically implements the ability to emit LLVM code. No raw <code>EmitNode</code>s are ever in the AST, as it's just meant to be an abstract superclass to all of the other nodes that are defined in <code>nodes.py</code>.</p>
<p>The most important features of the nodes are as follows:</p>
<ul>
<li>
<code>node.text</code>: Returns the text from the node. For an <code>AssignmentNode</code> this would be the text ":=". For an <code>IntegerNode</code>, the text is whatever the integer is.</li>
<li>
<code>node.parent</code>: The parent node of this node.</li>
<li>
<code>node.children</code>: List of children nodes in this node.</li>
<li>
<code>node.emit()</code>: Recursively emits the subtree formed by this node to LLVM code. This function assumes a builder and module are initialized (as is done by <code>main()</code> in <code>simple.py</code>).</li>
</ul>
<p>Confusing things in these nodes that you don't need to worry about:</p>
<ul>
<li>
<code>node.scope</code>: Used only for LLVM generation. A dictionary that defines the local scope for a node's variables.</li>
<li>
<code>node.closure</code>: Used only for LLVM generation. A list of scope dictionaries (including this node's own scope dictionary) that enclose this node.</li>
<li>
<code>node.getScope()</code>: Convenience method that uses inheritance tricks - used only for LLVM generation.</li>
<li>
<code>node.getClosure()</code>: Convenience method that uses inheritance tricks - used only for LLVM generation.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#the-blocknode-and-how-it-is-used" id="user-content-the-blocknode-and-how-it-is-used"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>The BlockNode and How It Is Used</h2>
<p>To clarify, I used the word "block" in this code to describe a list of statements. A <code>BlockNode</code> does not contain any actual statement in code, rather, each of its children are a statement (or compound statement like <code>if</code> or <code>while</code>). The root of a program is a <code>BlockNode</code> as the program itself is just a list of statements. Using the following example input:</p>
<pre><code>x := 1;
y := 2;
z := 3;

if x &lt; y then
    z := 4;
else
    x := x + 1
    z := x + y;
fi;

while z &lt; 10 do
    z := z + 1;
    skip;
od;
</code></pre>
<p>Generates the following AST:
<img alt="BlockNodes in an AST" src="https://github.com/teberger/cs554-project3/raw/master/wiki/blocks.png"/></p>

        </div>

    </div>]