[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#introduction" id="user-content-introduction"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Introduction</h1>
<p>An <em>Executive</em> is a software module that acts as the highest level behaviour planner. This means that it contains an overall plan and issues orders such as: <em>"navigate to the dinner table"</em>, <em>"move the arm to this position"</em>, <em>"learn person name"</em>, among others. This page holds information on how to use and create executives.</p>
<p>One key thing to keep in mind is that <strong>every action can fail</strong>, either occasionally or frequently. States should return a transition such as "failed" when they do, and an executive should handle this correctly, and have a back-up plan.</p>
<p>Although you can create an Executive that doesn't interact with the <a href="https://github.com/tue-robotics/ed">ED world model</a>, using it allows you to make a much smarter robot.
Via the ED API, you can query where objects of a certain type and name are.
You can use <a class="internal present" href="/tue-robotics/tue_robocup/wiki/Designators">Designators</a> to define what type of objects you want to use and resolve the exact position and ID of the object only at runtime.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#creating-a-smach-challenge-executive" id="user-content-creating-a-smach-challenge-executive"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creating a SMACH Challenge Executive</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#introduction-1" id="user-content-introduction-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Introduction</h2>
<p>An Executive is a general name to the type of software module you are about to develop. You can use different languages and libraries to do this, in this example we will use Python and <a href="http://wiki.ros.org/smach" rel="nofollow">ROS Smach</a>.</p>
<p>It is advisable to have some experience with both of these tools, therefore you should start by reading a simple tutorial on Python and the official tutorials from <a href="http://wiki.ros.org/smach/Tutorials" rel="nofollow">ROS Smach Tutorials</a> (sections 1 and 2 should be enough to start with).</p>
<h2>
<a aria-hidden="true" class="anchor" href="#preparations" id="user-content-preparations"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Preparations</h2>
<p>In your user folder, create a new package called <em>challenge_</em> and add <a href="https://github.com/tue-robotics/robot_skills">robot_skills</a>, <a href="https://github.com/tue-robotics/robot_smach_states">robot_smach_states</a> to the dependencies. For example:</p>
<div class="highlight highlight-source-shell"><pre>roscreate-pkg <span class="pl-k">&lt;</span>NAME OF PACKAGE<span class="pl-k">&gt;</span> robot_skills robot_smach_states</pre></div>
<p>In the package, create the following folders:</p>
<ul>
<li>
<strong>src</strong>: this will hold the Python files</li>
<li>
<strong>launch</strong>: this will hold the launch files to start the executive</li>
</ul>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> challenge_<span class="pl-k">&lt;</span>NAME OF CHALLENGE<span class="pl-k">&gt;</span>
mkdir src launch</pre></div>
<p>An overview of the knowledge used in different environments for the various challenges can be found in <a class="internal absent" href="/tue-robotics/tue_robocup/wiki/Knowledge">Knowledge</a>.</p>
<p>Then, in the <em>src</em> folder, create a Python file with the name of the challenge, e.g.:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> src
touch challenge_<span class="pl-k">&lt;</span>NAME OF CHALLENGE<span class="pl-k">&gt;</span>.py</pre></div>
<p>and make the file executable:</p>
<div class="highlight highlight-source-shell"><pre>chmod +x challenge_<span class="pl-k">&lt;</span>NAME OF CHALLENGE<span class="pl-k">&gt;</span>.py</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#base-for-a-smach-executive" id="user-content-base-for-a-smach-executive"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Base for a SMACH Executive</h2>
<p>In order to sucessfuly run an Executive you first need to have a basic strucute that imports all necessary information and prepares the main state machine.</p>
<p>It is advisable that you use a good editor/IDE, such as Sublime or pyCharm, to edit your executioner, this will make it more readable and prevent confusions between <em>spaces</em> and <em>tabs</em>.</p>
<p>The following code snippet shows the essential things you will need to declare and prepare in order to create an executive for Amigo or Sergio. Most of the code shown bellow is not necessary on pure ROS Smach, but it is necessary in order to properly communicate with Amigo or Sergio.</p>
<p>This snippet of code shows the three main parts in which the skeleton of an executive should be divided: the imports and global variable definition (avoid globals...), the classes that will make up the state machine, and finally the main entry point.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>! /usr/bin/env python</span>
<span class="pl-k">import</span> rospy

<span class="pl-k">import</span> robot_smach_states <span class="pl-k">as</span> states

<span class="pl-k">from</span> robot_smach_states.util.startup <span class="pl-k">import</span> startup <span class="pl-c"><span class="pl-c">#</span>gives you some error handling, robot loading and introspection</span>


<span class="pl-k">class</span> <span class="pl-en">NameOfTheChallenge</span>(<span class="pl-e">smach</span>.<span class="pl-e">StateMachine</span>):
    <span class="pl-k">def</span> <span class="pl-c1">__init__</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>, <span class="pl-smi">robot</span>):
        smach.StateMachine.<span class="pl-c1">__init__</span>(<span class="pl-c1">self</span>, <span class="pl-v">outcomes</span><span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Done<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Aborted<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Failed<span class="pl-pds">"</span></span>])

        <span class="pl-k">with</span> <span class="pl-c1">self</span>:
             smach.StateMachine.add(<span class="pl-s"><span class="pl-pds">"</span>NAME_OF_STATE<span class="pl-pds">"</span></span>,
                                   states.Say(robot, <span class="pl-s"><span class="pl-pds">"</span>Hello world<span class="pl-pds">"</span></span>),
                                   <span class="pl-v">transitions</span><span class="pl-k">=</span>{<span class="pl-s"><span class="pl-pds">'</span>spoken<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Done<span class="pl-pds">'</span></span>})
<span class="pl-c"><span class="pl-c">#</span>#</span>
<span class="pl-k">if</span> <span class="pl-c1">__name__</span>  <span class="pl-s"><span class="pl-pds">'</span>__main__<span class="pl-pds">'</span></span>:
    rospy.init_node(<span class="pl-s"><span class="pl-pds">'</span>executioner<span class="pl-pds">'</span></span>)

    util.startup(NameOfTheChallenge)</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#do-not-forget" id="user-content-do-not-forget"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Do Not Forget</h2>
<ul>
<li>
<strong>Do not forget to add an initial pose to your executive!</strong>
Amigo needs an initial pose to know exactly where it is, e.g. in front of the door of the environment or arena.
To set this, you can use the Set_initial_pose-state: Set_initial_pose(robot, ).
It is included in the high-level state StartChallengeRobust</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#tips-and-notes" id="user-content-tips-and-notes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tips and notes</h2>
<ul>
<li>Remember that almost every state should have a fallback in case of failure, otherwise the challenge can fail.</li>
<li>Avoid using global variables, its makes it much harder to debug</li>
<li>To pass data between states, you an use <a class="internal present" href="/tue-robotics/tue_robocup/wiki/Designators">Designators</a> or pass around <a href="http://wiki.ros.org/smach/Tutorials/User%20Data" rel="nofollow">User Data</a>
</li>
<li>Use SMACH Containers properly, since there are several types, and whenever possible encapsulate smaller machines inside bigger machines with the <a href="http://wiki.ros.org/smach/Tutorials/StateMachine%20container" rel="nofollow">StateMachine container</a>, this will make the code more readable and the visualization in ROS Smach Viewer more explicit</li>
<li>The  <em>def <strong>init</strong>(...)</em> in a class will only be executed once, while the <em>def execute(...)</em> will be executed everytime the class is called. So whenever possible declare queries and other variables that won't change over time in the <em>def <strong>init</strong>(...)</em>
</li>
<li>Avoid using <em>sleeps</em> (rospy.sleep()), whenever possible let the Executive run as fast as it can since the timming of actions, like moving or grasping, might change after improvements in outside code</li>
<li>You should (bel able to) assume the robot is in a safe, default posture. If you put the robot in an unsafe posture, don't forget to reset it into a safe posture again so the assumption stays true.</li>
<li>Re-use state( machine)s already available. For example, to learn the name of a person (which includes asking for the name, listening and requesting confirmation):</li>
</ul>
<div class="highlight highlight-source-shell"><pre>self.response = self.ask_user_service_get_learn_person_name(<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span>, 3, rospy.Duration(60))</pre></div>
<ul>
<li>It is preferable to have more states with less complexity than less states with more complexity:</li>
<li>makes debugging easier</li>
<li>allows for composition and reusability</li>
<li>In order to make Amigo more empathic make him talk when taking some decisions (in moderation), it will help debugging whitout looking at the console and it will make him more predictable to the people watching.</li>
<li>Avoid using blocking sentences when speaking:</li>
</ul>
<div class="highlight highlight-source-shell"><pre>self.robot.speech.speak(<span class="pl-s"><span class="pl-pds">"</span>Going to the last place where I saw people.<span class="pl-pds">"</span></span>, block=False)</pre></div>
<ul>
<li>Use standard names for the most common outcomes of states, e.g. <em>Done</em>, <em>Aborted</em>, <em>Failed</em>
</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#running-a-smach-executive" id="user-content-running-a-smach-executive"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Running a SMACH Executive</h1>
<p>You can start an Executive in two ways, that are basically the same. You can execute it like you would any other ROS package:</p>
<div class="highlight highlight-source-shell"><pre>rosrun challenge_<span class="pl-k">&lt;</span>NAME OF PACKAGE<span class="pl-k">&gt;</span> <span class="pl-k">&lt;</span>NAME OF EXECUTIVE<span class="pl-k">&gt;</span></pre></div>
<p>eg:</p>
<div class="highlight highlight-source-shell"><pre>rosrun challenge_cocktail_party challenge_cocktail_party.py</pre></div>
<p>Or you can directly execute the Python script (make sure that you either provide the complete path to the file or that you are in the <em>src</em> folder :</p>
<div class="highlight highlight-source-shell"><pre>./challenge_<span class="pl-k">&lt;</span>NAME OF EXECUTIVE<span class="pl-k">&gt;</span></pre></div>
<h1>
<a aria-hidden="true" class="anchor" href="#troubleshoot-and-debugging" id="user-content-troubleshoot-and-debugging"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Troubleshoot and Debugging</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#amigo-console" id="user-content-amigo-console"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Amigo Console</h2>
<p>Amigo Console is a powerful tool that allows you to issue commands to Amigo and query ED even while running a challenge. It depends on <strong>Amigo's Middleware</strong> (<em>amiddle</em>), so make sure it is running before starting it with:</p>
<div class="highlight highlight-source-shell"><pre>amigo-console</pre></div>
<p>Amigo Console is actually a Python interpreter, with some objects and functions already set up for you. This means so you can run queries live and see their output in the command window but also use any other Python stuff you'd like.</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>:)</p>

          </div>
        </div>
    </div>]