[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h4>
<a aria-hidden="true" class="anchor" href="#automatically-following-redirects" id="user-content-automatically-following-redirects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Automatically following redirects</h4>
<p>The <code>HTTP.follow</code> option can be used for automatically following redirects:</p>
<div class="highlight highlight-source-ruby"><pre>response <span class="pl-k">=</span> <span class="pl-c1">HTTP</span>.follow
               .get(<span class="pl-s"><span class="pl-pds">"</span>https://example.com<span class="pl-pds">"</span></span>)</pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#limiting-number-of-redirects" id="user-content-limiting-number-of-redirects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Limiting number of redirects</h4>
<p>A maximum of 5 subsequent redirects will be allowed by default (anything more
will raise a <code>HTTP::Redirector::TooManyRedirectsError</code>), but you can change the
limit with the <code>:max_hops</code> option:</p>
<div class="highlight highlight-source-ruby"><pre>response <span class="pl-k">=</span> <span class="pl-c1">HTTP</span>.follow(<span class="pl-c1">max_hops:</span> <span class="pl-c1">3</span>)
               .get(<span class="pl-s"><span class="pl-pds">"</span>https://example.com<span class="pl-pds">"</span></span>)</pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#unsafe-redirects" id="user-content-unsafe-redirects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unsafe redirects</h4>
<p>If a POST, PUT or DELETE request returns a 300, 301 or 302 redirect response,
it won't be followed by default and <code>HTTP::StateError</code> will be raised. You can
set <code>:strict</code> to <code>false</code> if you want these redirects to be followed, in which
case the GET verb will be used for that redirect.</p>
<div class="highlight highlight-source-ruby"><pre>response <span class="pl-k">=</span> <span class="pl-c1">HTTP</span>.follow(<span class="pl-c1">strict:</span> <span class="pl-c1">false</span>)
               .get(<span class="pl-s"><span class="pl-pds">"</span>https://example.com<span class="pl-pds">"</span></span>)</pre></div>

        </div>

    </div>]