[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#performance" id="user-content-performance"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Performance</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#fastjet--fastjet-contrib-dependence" id="user-content-fastjet--fastjet-contrib-dependence"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>fastjet &amp; fastjet-contrib dependence</h2>
<p>Note that CMSSW 8_0_X and 9_4_X are based on fastjet 3.1.0 and fastjet-contrib 1.026.</p>
<p>HOTVR works with fastjet 3.1.0, but has a <strong>significant</strong> speedup with fastjet 3.2.1. e.g. for ttbar MC 1.21 s/evt (v3.1.0) vs 0.30 s/evt (v3.2.1).
However, due to an API change in <code>fastjet::JetDefinition</code>, CMSSW packages that create an instance of that class must be checked out &amp; recompiled (RecoBTag/SecondaryVertex, RecoJets/JetAlgorithms, RecoJets/JetProducers, PhysicsTools/JetMCAlgos).</p>
<p>The ECF modules have a <strong>significant</strong> speedup with fastjet-contrib 1.032 e.g. 0.159 s/evt (1.026) vs 0.016 s/evt (v1.032).</p>
<p>For comparison, the total event time for MC is then ~ 2.5s with the above changes (was ~4s before). For data the event time is ~ 1.8s with changes (was ~ 3s before).</p>
<h2>
<a aria-hidden="true" class="anchor" href="#event-sizes" id="user-content-event-sizes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Event sizes</h2>
<ul>
<li>plain miniAOD: 40-60kB/event, depending on sample and pileup scenario</li>
<li>old SFrame ntuple (with all jet constituents): around 10% less than plain miniAOD</li>
<li>miniAOD+topjets: around 80kB/event for high-pileup --&gt; adds around 30% to plain miniAOD (main culprit: patJetCA8CHS, so could be trimmed down a little)</li>
<li>small version of SFrame ntuple (=without jet constituents): around 5kB/event</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#runtime" id="user-content-runtime"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Runtime</h2>
<ul>
<li>running ntuplewriter only (on miniAOD+topjets sample), writing the small ntuple: 300 events/sec. This is the "baseline performance" to be expected when running AnalysisModules within CMSSW.</li>
<li>running ntuplewriter only, but writing large ntuple: 6 events/sec</li>
<li>running on miniAOD and writing both, miniAOD+topjets file AND small ntuple: 2 events/sec (for large ntuple: 1.5 events/s)</li>
</ul>
<p>The time requirement for the last item is mainly due to the additional jet collections produced in CMSSW modules, such as heptoptag, cmstoptag, ca15, ca8 jets. In the current configuration, this takes most of the time, almost 0.5s per event.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#runtime-of-next-ntuple-format" id="user-content-runtime-of-next-ntuple-format"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Runtime of <code>next-ntuple-format</code>
</h2>
<p>This section summarizes the CMSSW performance of the <code>ntuplewriter.py</code> in the <code>next-ntuple-format</code> branch with CMSSW74X, tested with a Tpime-pair sample.</p>
<p>The measured time per event is around 2.4s. This is much more than the previous version, which only used 0.5s per event. From those 2.4s, more than 1.7s are spent for Qjets volatility (half for ca8, half for ca15), another ~0.1s for each of the three categories:</p>
<ul>
<li>ca0.8 jets + gen + pruned + pruned-gen</li>
<li>ca1.5 jets + gen + filtered + filtered-gen</li>
<li>cmstoptag + gen + heptoptag + gen</li>
</ul>
<p>Some optimization could be achieved by:</p>
<ul>
<li>optimizing Qjets volatility</li>
<li>rising the pt cut to calculate Qjets for fewer jets (currently: minimum pt of 100GeV)</li>
<li>get rid of gen collection for some of the above jet algos could save ~half of the ~0.3s currently spent</li>
</ul>
<p>Note that the measurement was done on a Tprime sample; the time on other samples, esp. SM backgrounds, is probably much lower as there are fewer high-pt jets to calculate Qjets volatility for.</p>

        </div>

    </div>]