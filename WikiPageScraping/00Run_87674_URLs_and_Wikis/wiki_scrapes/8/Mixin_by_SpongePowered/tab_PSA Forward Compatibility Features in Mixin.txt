[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Mixin includes a number of features and design considerations which aim to not only provide backward compatibility but address <em>forward compatibility</em> concerns as well. Since the purpose of these might not be apparent I will endeavour to outline them here. However the emphasis of this PSA is on the usage of the <code>minVersion</code> key provided in mixin configs, and its applicability to the stability of your application.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#1-mixin-config-property-minversion" id="user-content-1-mixin-config-property-minversion"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>1. Mixin Config property <code>minVersion</code>
</h4>
<p>The <code>minVersion</code> property is the most important piece of forward-compatibility infrastructure available to you, and it should not be overlooked. A safe approach to the use of the <code>minVersion</code> property is to always set it to the version of Mixin you build against. Maintaining the value manually provides more flexibility however, if you are not utilising features in the version you are building against.</p>
<p>So what does the <code>minVersion</code> key do?</p>
<p>Let's assume that two libraries, <code>ModA</code> and <code>ModB</code>, both of which use Mixin, are loaded by an application environment. <code>ModA</code> shades version <code>0.6</code> of Mixin, and <code>ModB</code> includes version <code>0.7</code>. Both libraries specify the correct <code>minVersion</code> in their configurations.</p>
<p>If <code>ModA</code> happens to be loaded before <code>ModB</code>, the version of Mixin loaded will be <code>0.6</code>. When <code>ModB</code> attempts to add its mixin configs, the application can fail-fast because it detects that the version of Mixin loaded is too old to support the features required by <code>ModB</code>'s mixins.</p>
<p>However, if <code>ModB</code> forgets to update the <code>minVersion</code> property in the config, the application will instead fail in a non-deterministic manner later on. Depending on the situation, the later error may seem crptic and might not even imply that the issue is related to the outdated Mixin version.</p>
<p>Use of <code>minVersion</code> in the config ensures this fail-fast behaviour.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#11-general-contract-of-mixin-wrt-backward-compatibility" id="user-content-11-general-contract-of-mixin-wrt-backward-compatibility"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>1.1 General contract of Mixin wrt. backward compatibility</h5>
<p>Since the general contract of the Mixin library is that Mixin will always guarantee mixins written for an older version will either continue to work or will fail-fast in a deterministic way, the presence of a later version at runtime does not present a problem.</p>
<p>Conversely, the presence of an older version than required can have unpredictable results, which can be readily and easily remedied by including the <code>minVersion</code> property.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#12-writing-minversion-using-your-build-script" id="user-content-12-writing-minversion-using-your-build-script"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>1.2 Writing <code>minVersion</code> using your build script</h5>
<p>The <code>minVersion</code> property itself is parsed as a string into a semver-compatible version number, and ignored in all other cases. This means it is perfectly fine to use a replacement token in the <code>minVersion</code> property (eg. <code>${version}</code>) and replace the token at compile-time in your build script. The "invalid" value will simply be ignored in your development workspace, and the correct value will be present in your compiled artefact.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#2-mixin-config-property-compatibilitylevel" id="user-content-2-mixin-config-property-compatibilitylevel"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>2. Mixin config property <code>compatibilityLevel</code>
</h4>
<p>As new versions of Java are released, new features are added to Mixin to support those new language features. The <code>compatibilityLevel</code> property can be used to elevate Mixin's operating level to the required level for the feature set you wish to use. The default level is <code>JAVA_6</code>.</p>
<p>At present, each elevation is able to support all features of the language level below, and it is possible to anticipate that this situation will prevail.</p>
<p>Elevation of the compatibility level serves two purposes:</p>
<ul>
<li>Firstly, if the current runtime does not support the requested feature set (eg. attempting to elevate to <code>JAVA_9</code> whilst running Java 8) then the operation can fail fast.</li>
<li>Secondly, if a future version of Java prevents safe inter-operation with an older language version (for example if Java 12 comes along and necessitates a breaking change from Java 6 which makes Java 6 mixins unsupportable on that platform) then that sitation can also fail fast and/or partition the mixin sets into current generation and legacy mode.</li>
</ul>
<p>This means that like the <code>minVersion</code> property, maintaining the <code>compatibilityLevel</code> property is important for the long-term stability of your library. <code>compatibilityLevel</code> should always be set to the highest level required by your mixins.</p>

        </div>

    </div>]