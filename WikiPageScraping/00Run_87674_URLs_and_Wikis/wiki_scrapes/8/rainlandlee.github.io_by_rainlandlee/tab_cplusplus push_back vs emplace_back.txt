[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>For emplace_back constructor A (int x_arg) will be called. And for  push_back A (int x_arg) is called first and move A (A &amp;&amp;rhs) is called afterwards.</p>
<p>Of course constructor has to be marked explicit, but for current example is good to remove explicitness.</p>
<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span>
<span class="pl-k">class</span> <span class="pl-en">A</span>
{
<span class="pl-k">public:</span>
  <span class="pl-en">A</span> (<span class="pl-k">int</span> x_arg) : x (x_arg) { std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>A (x_arg)<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>; }
  <span class="pl-en">A</span> () { x = <span class="pl-c1">0</span>; std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>A ()<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>; }
  <span class="pl-en">A</span> (<span class="pl-k">const</span> A &amp;rhs) noexcept { x = rhs.<span class="pl-smi">x</span>; std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>A (A &amp;)<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>; }
  <span class="pl-en">A</span> (A &amp;&amp;rhs) noexcept { x = rhs.<span class="pl-smi">x</span>; std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>A (A &amp;&amp;)<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>; }

<span class="pl-k">private:</span>
  <span class="pl-k">int</span> x;
};

<span class="pl-k">int</span> <span class="pl-en">main</span> ()
{
  {
    std::vector&lt;A&gt; a;
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>call emplace_back:<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
    a.<span class="pl-c1">emplace_back</span> (<span class="pl-c1">0</span>);
  }
  {
    std::vector&lt;A&gt; a;
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>call push_back:<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
    a.<span class="pl-c1">push_back</span> (<span class="pl-c1">1</span>);
  }
  <span class="pl-k">return</span> <span class="pl-c1">0</span>;
}</pre></div>
<p>output</p>
<pre><code>call emplace_back:
A (x_arg)

call push_back:
A (x_arg)
A (A &amp;&amp;)
</code></pre>

        </div>

    </div>]