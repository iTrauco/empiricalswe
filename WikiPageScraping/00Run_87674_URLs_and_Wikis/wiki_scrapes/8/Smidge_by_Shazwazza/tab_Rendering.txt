[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#rendering" id="user-content-rendering"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Rendering</h1>
<p>The easiest way to render bundles is simply by the bundle name:</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">script</span> <span class="pl-e">src</span>=<span class="pl-s"><span class="pl-pds">"</span>my-awesome-js-bundle<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>text/javascript<span class="pl-pds">"</span></span>&gt;&lt;/<span class="pl-ent">script</span>&gt;
&lt;<span class="pl-ent">link</span> <span class="pl-e">rel</span>=<span class="pl-s"><span class="pl-pds">"</span>stylesheet<span class="pl-pds">"</span></span> <span class="pl-e">href</span>=<span class="pl-s"><span class="pl-pds">"</span>my-cool-css-bundle<span class="pl-pds">"</span></span>/&gt;</pre></div>
<p>This uses Smidge's custom tag helpers to check if the source is a bundle reference and will output the correct bundle URL.</p>
<p>You'll need to include the tag helpers with this syntax in your view or in _ViewImports.cshtml:</p>
<pre><code>@addTagHelper *, Smidge
</code></pre>
<p>Alternatively, if you want to use Razor to output output the <code>&lt;link&gt;</code> and <code>&lt;script&gt;</code> html tags for you assets, you can use the following example syntax (rendering is done async):</p>
<div class="highlight highlight-source-cs"><pre>@<span class="pl-k">await</span> <span class="pl-smi">Smidge</span>.<span class="pl-en">CssHereAsync</span>()
@<span class="pl-k">await</span> <span class="pl-smi">Smidge</span>.<span class="pl-en">JsHereAsync</span>()
@<span class="pl-k">await</span> <span class="pl-smi">Smidge</span>.<span class="pl-en">JsHereAsync</span>(<span class="pl-s"><span class="pl-pds">"</span>test-bundle-1<span class="pl-pds">"</span></span>)
@<span class="pl-k">await</span> <span class="pl-smi">Smidge</span>.<span class="pl-en">JsHereAsync</span>(<span class="pl-s"><span class="pl-pds">"</span>test-bundle-2<span class="pl-pds">"</span></span>)</pre></div>
<p>If you are using inline non-bundle named declarations you will need to use the Razor methods above: <code>Smidge.CssHereAsync()</code> and <code>Smidge.JsHereAsync()</code></p>
<h1>
<a aria-hidden="true" class="anchor" href="#debugging" id="user-content-debugging"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Debugging</h1>
<p>By default Smidge will combine/compress/minify but while you are developing you probably don't want this to happen. Each of the above rendering methods has an optional boolean 'debug' parameter. If you set this to <code>true</code> then the combine/compress/minify is disabled.</p>
<p>The methods <code>CssHereAsync</code>, <code>JsHereAsync</code>, <code>GenerateJsUrlsAsync</code> and <code>GenerateCssUrlsAsync</code> all have an optional boolean <code>debug</code> parameter. If you are using tag helpers to render your bundles you can simply include a <code>debug</code> attribute, for example:</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">script</span> <span class="pl-e">src</span>=<span class="pl-s"><span class="pl-pds">"</span>my-awesome-js-bundle<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>text/javascript<span class="pl-pds">"</span></span> <span class="pl-e">debug</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;&lt;/<span class="pl-ent">script</span>&gt;</pre></div>
<p>You can combine this functionality with environment variables, for example:</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">environment</span> <span class="pl-e">names</span>=<span class="pl-s"><span class="pl-pds">"</span>Development<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">script</span> <span class="pl-e">src</span>=<span class="pl-s"><span class="pl-pds">"</span>my-awesome-js-bundle<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>text/javascript<span class="pl-pds">"</span></span> <span class="pl-e">debug</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;<span class="pl-s1">&lt;</span>/<span class="pl-ent">script</span>&gt;
&lt;/<span class="pl-ent">environment</span>&gt;
&lt;<span class="pl-ent">environment</span> <span class="pl-e">names</span>=<span class="pl-s"><span class="pl-pds">"</span>Staging,Production<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">script</span> <span class="pl-e">src</span>=<span class="pl-s"><span class="pl-pds">"</span>my-awesome-js-bundle<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>text/javascript<span class="pl-pds">"</span></span>&gt;<span class="pl-s1">&lt;</span>/<span class="pl-ent">script</span>&gt;
&lt;/<span class="pl-ent">environment</span>&gt;</pre></div>

        </div>

    </div>]