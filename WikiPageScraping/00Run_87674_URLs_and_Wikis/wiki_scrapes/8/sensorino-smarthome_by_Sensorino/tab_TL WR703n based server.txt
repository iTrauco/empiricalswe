[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Tp-Link's TL-WR703n router model is used in many DIY projects because it's tiny in size (5cm x 5cm), cheap ($15-$20) and run Linux well supported by the <a href="https://openwrt.org/" rel="nofollow">OpenWRT Linux distribution</a>.  It is also quite power-efficient.  It only has 32MB or RAM but is capable of running python and the Sensorino Smarthome server to manage Arduino-based Sensorino nodes.</p>
<p><img alt="A TL-WR703n router disassembled" data-canonical-src="http://www.cse.dmu.ac.uk/%7Esexton/ENGD2003/web/openwrt/disassembled_tp_link_tl_wr703n.jpg" src="https://camo.githubusercontent.com/ec0c7b88236db66092297d133228605f0cd13836/687474703a2f2f7777772e6373652e646d752e61632e756b2f253745736578746f6e2f454e4744323030332f7765622f6f70656e7772742f646973617373656d626c65645f74705f6c696e6b5f746c5f77723730336e2e6a7067"/></p>
<p>Not extremely fast when running python but well usable.  Not recommended for Sensorino server development where you'd need to restart the python process often.</p>
<p>It has Wi-Fi, ethernet and USB connectivity.  If you want a single server to also service Bluetooth Low-Energy or other Radio Access Technologies you'll need to connect adapaters through USB, or use a more capable router or another machine for the server.</p>
<p>There's some space left in the enclosure for added electronics.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#steps-outline" id="user-content-steps-outline"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Steps outline</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#install-openwrt-on-the-router" id="user-content-install-openwrt-on-the-router"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Install OpenWRT on the router</h3>
<p>Follow instuctions in <a href="http://wiki.openwrt.org/toh/tp-link/tl-wr703n" rel="nofollow">relevant OpenWRT wiki page</a>, then continue with basic OpenWRT setup.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#enable-extroot" id="user-content-enable-extroot"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Enable <em>extroot</em>
</h3>
<p>The built-in flash is only 4MB in this device.  You'll definitely need to use external storage, such as a tiny USB memory, before installing any further packages from <code>opkg</code>.  Follow instuctions in <a href="http://wiki.openwrt.org/doc/howto/extroot" rel="nofollow">relevant OpenWRT Extroot wiki page</a> or <a href="http://en.code-bude.net/2013/02/16/how-to-increase-storage-on-tp-link-wr703n-with-extroot/" rel="nofollow">one of many tutorials</a> available.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#install-python-git-screen" id="user-content-install-python-git-screen"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Install python, git, screen</h3>
<p>It should be enough to simply install these two using opkg:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> opkg update</span>
<span class="pl-c"><span class="pl-c">#</span> opkg install python git screen</span></pre></div>
<p>Python is the only real dependency of the Sensorino Smarthome server.  We'll want git to check out latest source code, and <em>screen</em> for running the server processes in.  You may also want picocom or minicom to watch the serial port traffic directly, during testing, development, etc.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#connect-base-node" id="user-content-connect-base-node"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Connect Base node</h3>
<p>There are two options on this device:</p>
<ul>
<li>Connect the Base node's serial port directly to the routers serial port.  This requires some soldering skills because there's no serial connector on the outside of the WR703n enclosure but there are pins on it's main board where cables and a socket can be soldered in.  There are many tutorials for this on the web but the pinout is documented on the <a href="http://wiki.openwrt.org/toh/tp-link/tl-wr703n" rel="nofollow">OpenWRT wiki page for this router.</a>.
In my experience the hardware serial port wasn't reliable enough to talk to the Arduino.  Every some hundreds of characters a few were lost or corrupt, perhaps due to clock imprecision.  It also seems that placing the basic <a href="https://github.com/Sensorino/Sensorino/wiki/nRF24L01">nRF24L01+</a> close to the router interferes with the nRF24L01 radio enough to break most communication over it.  Perhaps modules with the non-PCB antenna work better, and can still fit inside the WR703n's enclosure.  Another possibility is to disable the Wi-Fi radio in the router and only use its Ethernet port to connect -- this may be feasible if you're already running another wireless router at home.</li>
<li>Use a USB connection either with USB-equipped Sensorino (Arduino) boards or with a USB-to-Serial converter ($2 on aliexpress.com) as you normally would to install sketches on your Arduino.  This allows you to easily use a USB extender cable to place the Base node a metre or two away from the router.</li>
</ul>
<p>If using USB:</p>
<ul>
<li>
<p>You'll need a USB hub ($4+ on aliexpress.com) to be able to connect both a USB-to-Serial adapter and the USB memory stick for extroot.</p>
</li>
<li>
<p>Additional kernel modules are needed to drive the USB-to-Serial adapter, not installed by default on OpenWRT:</p>
<div class="highlight highlight-source-shell"><pre></pre></div>
</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#opkg-install-kmod-usb-serial-kmod-usb-serial-cp210x-kmod-usb-serial-ftdi-kmod-usb-serial-pl2303" id="user-content-opkg-install-kmod-usb-serial-kmod-usb-serial-cp210x-kmod-usb-serial-ftdi-kmod-usb-serial-pl2303"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>opkg install kmod-usb-serial kmod-usb-serial-cp210x kmod-usb-serial-ftdi kmod-usb-serial-pl2303</h1>
<pre><code>
### Run the server

As in the [[quick server setup]] page:
```shell
# git clone https://github.com/Sensorino/sensorino-smarthome.git
# cd sensorino-smarthome
# ./server.py &amp;
# ./base-connect.py &amp;
</code></pre>
<p><em>Note</em>: if using OpenWRT's build of bash job control through <code>bg</code>, <code>fg</code>, etc. is not supported.  It's best to open one GNU <code>screen</code> window for <code>server.py</code> and one for <code>base-connect.py</code> and run them in the foreground.  Eventually you'll want to launch these processes automatically from init scripts of course.</p>
<p><em>Note</em>: <code>server.py</code> will take some to start up on this router, wait until it prints its "<em>Serving...</em>" line beofre starting <code>base-connect.py</code>.  Some swap space is also recommeneded when running python on this router.</p>

        </div>

    </div>]