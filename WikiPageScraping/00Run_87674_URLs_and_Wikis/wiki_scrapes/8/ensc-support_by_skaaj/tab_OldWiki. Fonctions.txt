[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Comme je le disais dans la partie sur les variables, il existe les types valeurs et les types référence.
(cf. <a href="http://msdn.microsoft.com/fr-fr/library/4d43ts61%28v=vs.90%29.aspx" rel="nofollow">MSDN</a>)</p>
<p>Les variables de types valeurs sont passés par copie à une fonction. C'est à dire que la fonction appelée va :</p>
<ol>
<li>Copier votre variable dans une nouvelle variable.</li>
<li>Exécuter son code sur cette nouvelle variable.</li>
<li>Supprimer cette nouvelle variable lorsqu'elle termine (accolade fermante « } »).</li>
</ol>
<p>Une variable de type référence quant à elle est passée par ... référence. On communique à la fonction qu'on appelle l'endroit où elle se trouve en mémoire. Son fonctionnement est donc :</p>
<ol>
<li>Créer une nouvelle variable ayant la même référence que celle passée en paramètre (ie. dans l'exemple ci-dessous <code>tableau</code> et <code>tab</code> sont deux variables différentes mais elles <strong>pointent</strong> vers le même endroit dans la mémoire vive).</li>
<li>Exécuter son code sur cette variable (et donc l'autre étant donnée qu'elles partagent la même valeur en mémoire).</li>
<li>Supprimer cette nouvelle variable lorsqu'elle se termine (mais uniquement la variable, pas l'endroit en mémoire).</li>
</ol>
<p>Voici un exemple pour mieux comprendre :</p>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">Main</span>(<span class="pl-k">string</span>[] <span class="pl-smi">args</span>)
{
    <span class="pl-c"><span class="pl-c">//</span> Type référence (int, double, struct...)</span>
    <span class="pl-k">int</span> <span class="pl-smi">entier</span> <span class="pl-k">=</span> <span class="pl-c1">111</span>;
    <span class="pl-smi">Console</span>.<span class="pl-en">WriteLine</span>(<span class="pl-smi">entier</span>); <span class="pl-c"><span class="pl-c">//</span> 111</span>
    <span class="pl-en">ChangerEntier</span>(<span class="pl-smi">entier</span>);
    <span class="pl-smi">Console</span>.<span class="pl-en">WriteLine</span>(<span class="pl-smi">entier</span>); <span class="pl-c"><span class="pl-c">//</span> 111</span>

    <span class="pl-c"><span class="pl-c">//</span> Type référence (tableaux, objets)</span>
    <span class="pl-k">int</span>[] <span class="pl-smi">tableau</span> <span class="pl-k">=</span> { <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span> };
    <span class="pl-en">AfficherTableau</span>(<span class="pl-smi">tableau</span>); <span class="pl-c"><span class="pl-c">//</span> 111</span>
    <span class="pl-en">ChangerTableau</span>(<span class="pl-smi">tableau</span>);
    <span class="pl-en">AfficherTableau</span>(<span class="pl-smi">tableau</span>); <span class="pl-c"><span class="pl-c">//</span> 007</span>

    <span class="pl-smi">Console</span>.<span class="pl-en">ReadLine</span>();
}

<span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">ChangerEntier</span>(<span class="pl-k">int</span> <span class="pl-smi">a</span>)
{
    <span class="pl-smi">a</span> <span class="pl-k">=</span> <span class="pl-c1">7</span>;
}

<span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">ChangerTableau</span>(<span class="pl-k">int</span>[] <span class="pl-smi">tab</span>)
{
    <span class="pl-k">for</span> (<span class="pl-k">int</span> <span class="pl-smi">i</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>; <span class="pl-smi">i</span> <span class="pl-k">&lt;</span> <span class="pl-smi">tab</span>.<span class="pl-smi">Length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>; <span class="pl-smi">i</span><span class="pl-k">++</span>)
        <span class="pl-smi">tab</span>[<span class="pl-smi">i</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>; <span class="pl-c"><span class="pl-c">//</span> ne met que des 0...</span>

    <span class="pl-smi">tab</span>[<span class="pl-smi">tab</span>.<span class="pl-smi">Length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">7</span>; <span class="pl-c"><span class="pl-c">//</span> ...et un 7 sur la dernière case</span>
}

<span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">AfficherTableau</span>(<span class="pl-k">int</span>[] <span class="pl-smi">tab</span>)
{
    <span class="pl-k">foreach</span> (<span class="pl-k">var</span> <span class="pl-smi">entier</span> <span class="pl-k">in</span> <span class="pl-smi">tab</span>)
        <span class="pl-smi">Console</span>.<span class="pl-en">Write</span>(<span class="pl-smi">entier</span>);

    <span class="pl-smi">Console</span>.<span class="pl-en">Write</span>(<span class="pl-smi">Environment</span>.<span class="pl-smi">NewLine</span>); <span class="pl-c"><span class="pl-c">//</span> On revient à la ligne</span>
}</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#passage-par-r%C3%A9f%C3%A9rence" id="user-content-passage-par-référence"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Passage par référence</h3>
<p>Imaginons que dans l'exemple précédent nous souhaitions que notre méthode <code>ChangerEntier</code> répercute sa modification dans le main. Un entier étant un type valeur il est par défaut passé par copie. Mais il est possible de spécifier explicitement que l'on souhaite le faire passer par référence en ajoutant le mot clé <code>ref</code>. L'exemple ci-dessous illustre ces propos.</p>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">Main</span>(<span class="pl-k">string</span>[] <span class="pl-smi">args</span>)
{
    <span class="pl-k">string</span> <span class="pl-smi">texte</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Bonjour<span class="pl-pds">"</span></span>;
            
    <span class="pl-smi">Console</span>.<span class="pl-en">WriteLine</span>(<span class="pl-smi">texte</span>); <span class="pl-c"><span class="pl-c">//</span> Affiche "Bonjour"</span>
    <span class="pl-en">ChangerTexte</span>(<span class="pl-smi">texte</span>);
    <span class="pl-smi">Console</span>.<span class="pl-en">WriteLine</span>(<span class="pl-smi">texte</span>); <span class="pl-c"><span class="pl-c">//</span> Affiche "Bonjour"</span>
    <span class="pl-en">ChangerTexte</span>(<span class="pl-k">ref</span> <span class="pl-smi">texte</span>);
    <span class="pl-smi">Console</span>.<span class="pl-en">WriteLine</span>(<span class="pl-smi">texte</span>); <span class="pl-c"><span class="pl-c">//</span> Affiche "Aurevoir"</span>

    <span class="pl-smi">Console</span>.<span class="pl-en">ReadLine</span>();
}

<span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">ChangerTexte</span>(<span class="pl-k">string</span> <span class="pl-smi">texte</span>)
{
    <span class="pl-smi">texte</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Aurevoir<span class="pl-pds">"</span></span>;
}

<span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">ChangerTexte</span>(<span class="pl-k">ref</span> <span class="pl-k">string</span> <span class="pl-smi">texte</span>)
{
    <span class="pl-smi">texte</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Aurevoir<span class="pl-pds">"</span></span>;
}</pre></div>
<p>Il existe également le mot clé <code>out</code>. La différence avec <code>ref</code> est qu'il n'est plus nécessaire d'assigner notre variable au préalable (opérateur « = »). Ajouter le mot clé dit au compilateur que « je m'engage à assigner cette variable avant la fin de la fonction ».<br/>
Voici un petit exemple :</p>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">Main</span>(<span class="pl-k">string</span>[] <span class="pl-smi">args</span>)
{
    <span class="pl-k">int</span> <span class="pl-smi">variable</span>; <span class="pl-c"><span class="pl-c">//</span> on ne met pas de " = "</span>
    <span class="pl-en">ChangerEntier</span>(<span class="pl-k">ref</span> <span class="pl-smi">variable</span>); <span class="pl-c"><span class="pl-c">//</span> ne fonctionne pas</span>
    <span class="pl-en">ChangerEntier</span>(<span class="pl-k">out</span> <span class="pl-smi">variable</span>); <span class="pl-c"><span class="pl-c">//</span> fonctionne</span>
}

<span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">ChangerEntier</span>(<span class="pl-k">ref</span> <span class="pl-k">int</span> <span class="pl-smi">a</span>)
{
    <span class="pl-smi">a</span> <span class="pl-k">=</span> <span class="pl-c1">7</span>;
}

<span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">ChangerEntier</span>(<span class="pl-k">out</span> <span class="pl-k">int</span> <span class="pl-smi">a</span>)
{
    <span class="pl-smi">a</span> <span class="pl-k">=</span> <span class="pl-c1">7</span>;
}</pre></div>

        </div>

    </div>]