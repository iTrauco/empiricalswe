[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>There is a wrapper class that helps you make transactions. Here is how to use it:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> <span class="pl-k">from</span> moneywagon.tx <span class="pl-k">import</span> Transaction
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx <span class="pl-k">=</span> Transaction(<span class="pl-s"><span class="pl-pds">'</span>btc<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_inputs(<span class="pl-v">private_key</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>KxDwaDis...<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_output(<span class="pl-s"><span class="pl-pds">'</span>1Fs3...<span class="pl-pds">'</span></span>, <span class="pl-c1">1.42</span>, <span class="pl-v">unit</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>btc<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.fee(<span class="pl-c1">4000</span>, <span class="pl-v">unit</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>satoshi<span class="pl-pds">'</span></span>) <span class="pl-c"><span class="pl-c">#</span>defaut is 10000</span>
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.get_hex() <span class="pl-c"><span class="pl-c">#</span> call this method to see the tx in hex format</span>
<span class="pl-s"><span class="pl-pds">'</span>00100137876876...<span class="pl-ii"></span></span>
&gt;&gt;&gt; tx.push()</pre></div>
<p>You can pass in a paranoid parameter to the Transaction constructor that will make
all external service calls cross checked. By default, all service calls are
only performed once. You can increase this value to get more assurance that your
blockchain source has not been compromised.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx <span class="pl-k">=</span> Transaction(<span class="pl-s"><span class="pl-pds">'</span>btc<span class="pl-pds">'</span></span>, <span class="pl-v">paranoid</span><span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p>Or if you want more fine control over which inputs go in:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> my_inputs <span class="pl-k">=</span> get_unpent_outputs(<span class="pl-s"><span class="pl-pds">'</span>1PZ3Ps9Rv...<span class="pl-pds">'</span></span>)[:<span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> just the first two</span>
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_raw_inputs(my_inputs, <span class="pl-s"><span class="pl-pds">'</span>KdEr5D1a...<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> more_inputs <span class="pl-k">=</span> [x <span class="pl-k">for</span> x <span class="pl-k">in</span> get_unpent_outputs(<span class="pl-s"><span class="pl-pds">'</span>1HWpyFJ7N...<span class="pl-pds">'</span></span>) <span class="pl-k">if</span> x[<span class="pl-s"><span class="pl-pds">'</span>amount<span class="pl-pds">'</span></span>] <span class="pl-k">&lt;</span> <span class="pl-c1">10000</span>]]
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_raw_inputs(more_inputs, <span class="pl-s"><span class="pl-pds">'</span>KxDwaDis...<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_output(<span class="pl-s"><span class="pl-pds">'</span>1Fd3...<span class="pl-pds">'</span></span>, <span class="pl-c1">1.42</span>, <span class="pl-v">unit</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>btc<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.push()</pre></div>
<p>The last input that is added (either through <code>add_raw_inputs</code> or <code>add_inputs</code>)
will be used as the change address. You can manually specify a change address by modifying
the value of <code>tx.change_address</code> before calling <code>tx.push()</code>.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_inputs(<span class="pl-v">address</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>1HWpyFJ7N...<span class="pl-pds">'</span></span>, <span class="pl-v">private_key</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>KxDwaDis...<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_output(<span class="pl-s"><span class="pl-pds">'</span>1Fd3...<span class="pl-pds">'</span></span>, <span class="pl-c1">1.42</span>, <span class="pl-v">unit</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>btc<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.change_address <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>1PZ3Ps9Rv...<span class="pl-pds">'</span></span> <span class="pl-c"><span class="pl-c">#</span> replace change address from 1HWpyFJ... -&gt; 1PZ3Ps9Rv...</span>
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.push()</pre></div>
<p>The private key argument should be a string in hex format.
You can also specify the <code>amount</code> argument to <code>add_output</code> with a unit argument:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_output(address, <span class="pl-v">amount</span><span class="pl-k">=</span><span class="pl-c1">1423</span>, <span class="pl-v">unit</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>bits<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_output(address2, <span class="pl-v">amount</span><span class="pl-k">=</span><span class="pl-c1">1.3</span>, <span class="pl-v">units</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>usd<span class="pl-pds">"</span></span>)</pre></div>
<p>All exchange rates are taken from the <code>get_current_price</code> function defined above.</p>
<p>Currently there is no way to decode transactions using moneywagon.
One day this feature will get added.</p>
<p>You can also make unsigned transactions by passing in just the address to the
<code>add_inputs</code> function. You must also pass in <code>signed=False</code> to the <code>get_hex</code>
function. This hex can't be pushed to the network until it has been signed.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_inputs(<span class="pl-v">address</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>1HWpyFJ7N...<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.add_output(<span class="pl-s"><span class="pl-pds">'</span>1Fd3...<span class="pl-pds">'</span></span>, <span class="pl-c1">1.42</span>, <span class="pl-v">unit</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>btc<span class="pl-pds">'</span></span>)
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> tx.get_hex(<span class="pl-v">signed</span><span class="pl-k">=</span><span class="pl-c1">False</span>)
<span class="pl-s"><span class="pl-pds">'</span>00100137876876...<span class="pl-ii"></span></span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#push-transaction" id="user-content-push-transaction"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Push Transaction</h2>
<p>If you have a raw transaction that you would like to push to the bitcoin network,
you can use moneywagon to do that:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> <span class="pl-k">from</span> moneywagon <span class="pl-k">import</span> PushTx
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> PushTx().push(<span class="pl-s"><span class="pl-pds">'</span>btc<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>0100000001d992c7a88...<span class="pl-pds">'</span></span>)</pre></div>
<p>If the transaction went through successfully, the <code>push</code> method will return nothing.
This functionality works much like the others. If one service is down, it falls back to another service.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#fee-estimation" id="user-content-fee-estimation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Fee Estimation</h2>
<p>Moneywagon can be used to get the optimal fee to use for a transaction based on
the current state of the network.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> <span class="pl-k">from</span> moneywagon <span class="pl-k">import</span> get_optimal_fee
<span class="pl-k">&gt;&gt;</span><span class="pl-k">&gt;</span> get_optimal_fee(<span class="pl-s"><span class="pl-pds">'</span>btc<span class="pl-pds">'</span></span>, <span class="pl-v">tx_bytes</span><span class="pl-k">=</span><span class="pl-c1">213</span>)
<span class="pl-c1">10650</span></pre></div>
<p>In the above example, a transaction that is 213 bytes that is to be confirmed in
the next block, will need a fee of 10650 satoshis.</p>
<p>Currently, btc is the only currency supported for fee estimation.</p>

        </div>

    </div>]