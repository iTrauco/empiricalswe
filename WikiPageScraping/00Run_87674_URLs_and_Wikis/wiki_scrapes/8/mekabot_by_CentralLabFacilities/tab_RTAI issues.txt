[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>For the latency test, you should run:</p>
<pre><code>cd /usr/realtime/testsuite/kern/latency/
./run
# ctrl+c to stop
</code></pre>
<pre><code>TODO: example here
</code></pre>
<p>Once you've finished checking you don't have any overruns and that your latencies are <em>acceptable</em>, check that the timers are not going crazy (the computer might hang later if so):</p>
<pre><code>dmesg | grep clock
</code></pre>
<p>Should say that the current clock is <strong>TSC</strong>, and <strong>not</strong> switched back to <strong>refined-jiffies</strong>:</p>
<pre><code>[    0.248375] Switched to clocksource refined-jiffies
[    0.257802] Switched to clocksource acpi_pm
[    0.622418] rtc_cmos 00:05: setting system clock to 2014-10-16 09:15:25 UTC (1413450925)
[    0.649505] PTP clock support registered
[    0.933432] e1000e 0000:00:19.0 eth0: registered PHC clock
[    1.543413] tsc: Refined TSC clocksource calibration: 2793.657 MHz
[    2.544694] Switched to clocksource tsc
</code></pre>
<p>You can also do the same with the m3 system:</p>
<pre><code>m3rt_insmods
m3rt_rmmods
dmesg | grep clock
</code></pre>
<p>And check if the timers stall.</p>
<p>Troubleshooting:</p>
<ul>
<li>After the latency test, the TSC timer stalls or get unstable (see some explanation <a href="https://software.intel.com/en-us/blogs/2013/06/20/eliminate-the-dreaded-clocksource-is-unstable-message-switch-to-tsc-for-a-stable" rel="nofollow">here</a>), it switches to refined-jiffies. It means that the computer is not properly configured for RTAI. You should disable every unnecessary modules (look for blacklist.conf) that might cause timers to stall.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#no-intel-chipset-found-" id="user-content-no-intel-chipset-found-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>'No Intel chipset found' :</h3>
<p>Locate the id of your chipset:</p>
<div class="highlight highlight-source-shell"><pre>lspci -vvv -nn <span class="pl-k">|</span> grep ISA</pre></div>
<p>My output is :</p>
<div class="highlight highlight-source-shell"><pre>00:1f.0 ISA bridge [0601]: Intel Corporation B75 Express Chipset LPC Controller [8086:1e49] (rev 04)</pre></div>
<p>The name of my device B75 and the id is <em><strong>1e49</strong></em> (end of the line).
So now open the following file :</p>
<div class="highlight highlight-source-shell"><pre>gedit <span class="pl-k">~</span>/rtai/base/arch/x86/calibration/smi-module.c</pre></div>
<p>And add the name and id of your device as the other ones in the file. For example :</p>
<div class="highlight highlight-source-c"><pre>#<span class="pl-k">ifndef</span> PCI_DEVICE_ID_INTEL_B75
#<span class="pl-k">define</span> <span class="pl-en">PCI_DEVICE_ID_INTEL_B75</span>  <span class="pl-c1">0x1e49</span>
#<span class="pl-k">endif</span></pre></div>
<p>AND</p>
<div class="highlight highlight-source-c"><pre>{ <span class="pl-c1">PCI_DEVICE</span>(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_B75) },
```bash


Save, re-compile and re-install:
```bash
sudo make install</pre></div>
<p>You should now see "Enabling SMI workaround" when you insert the rtai_smi module.</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <blockquote>
<p>Author: <a href="mailto:plueckin@techfak.uni-bielefeld.de">plueckin@techfak.uni-bielefeld.de</a></p>
</blockquote>

          </div>
        </div>
    </div>]