[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#baisc-concept-of-the-configuration-script" id="user-content-baisc-concept-of-the-configuration-script"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Baisc Concept of the configuration script</h1>
<p>In the file SmartSwitchConfig.json you can associate buttons with desired actions.</p>
<p>There is a python script that generates C code.</p>
<p>Basically you can execute every piece of C code from here. The main idea is to have some client plugins within the clients folder.</p>
<p>From here on, for the python script to work, you have to follow some rules and naming conventions:</p>
<ol>
<li>every clients implementation has to be placed in a folder within the clients/ folder</li>
<li>every clients implementation folder (containig the .h file) has to named same as the class (eg clients/CLASSNAME/..)</li>
<li>every clients header must be named after the class described in it (resulting path: clients/CLASSNAME/classname.h)</li>
</ol>
<h1>
<a aria-hidden="true" class="anchor" href="#adding-devices" id="user-content-adding-devices"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Adding devices</h1>
<p>If you want to add a device add it in the "devices" dictionary of the .json file.
Here the following rules have to be applied:</p>
<ol>
<li>Device name must contain exactly one "_"</li>
<li>The "_" seperates a unique identifier and the class name: foobar_CLASSNAME</li>
</ol>
<p>For configuration of IP and Port you can specify them in a dictionary. If you do so, you have to implement setIP() and setPort() accordingly.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#associating-actions-to-events" id="user-content-associating-actions-to-events"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Associating actions to events</h1>
<p>Within the "btns" dict you can associate any C code with the defined Actions a user can perform on a button.</p>
<p>You can also call methods of your devices specifided above.
To do so just call for example: foobar_CLASSNAME.someMethod();</p>
<p>ATTENTION: It is C-Code, so the Semicolons are needed. We decided to go this way and not adding them automatically as this allows you to associate more than one command with an event.</p>

        </div>

    </div>]