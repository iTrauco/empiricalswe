[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p><strong>CAG</strong> is a tool for an automated analyses of cryptographic material reachability after partial compromise. The tool enables to read files in the DOT file format or protocols CAS+, draw an attack graph and analyse it. CAG offers graphical user interface and it is possibly to use command line too. However, using CAS by command line provides fewer functionalities.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#how-to-activate" id="user-content-how-to-activate"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to activate?</h4>
<p>Analyses of CAG includes cooperations with processes dot.exe and cmd.exe. If you don't have them, you should download
and install them. You can find graphviz-2.30.1.msi, what you can install and get dot.exe, in repositary. After installation of these files you can activate CAG by file CAG.exe where you find in CAG/bin/Debug or Release.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#main-functionalities" id="user-content-main-functionalities"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Main functionalities:</h4>
<ul>
<li>interactive analyse of an attack graph and changing colors of nodes depending on state of compromitable</li>
<li>an user can choose two sets, defined set and targeted set which attacker interests about, and CAG finds minimal subset of
defined set by what attacker is able to get targeted set</li>
<li>an user can choose a set what is targeted set and CAG finds minimal subset of all nodes of the attack graph</li>
</ul>
<h4>
<a aria-hidden="true" class="anchor" href="#how-to-use" id="user-content-how-to-use"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to use?</h4>
<p><strong>1. GUI</strong></p>
<p>There are two menus File and Analyse. Some items of menus:</p>
<ul>
<li>Open file DOT/Open protocol - CAG begins to read a file/protocol and draw an attack graph by rules written in the file/protocol.</li>
<li>Save - A result of analyse is saved into the DOT file format. CAG doesn't support saving into protocol CAS+.</li>
<li>Mark all/Unmark all - All nodes are marked with red color as compromised/All nodes are marked with green color as uncompromised</li>
<li>Properties - A window, where you can set properties of every node (enthropies, subset - D as defined and A as targeted
set). The window is interactive with tool, i.e. all changes immediately are saved and have an impact on analyse.</li>
<li>Find minimal set from defined set/all nodes - A result of finding is saved as file in the PNG format. The result of this operation can be more possible subsets, therefore CAG at first ask you where you want to save and what name of file you want to have,
then CAG creates more files with the same name but they are numbered.</li>
</ul>
<p><strong>2. Command line</strong></p>
<p>Every command contains 3 or 5 parts.</p>
<ul>
<li>
<p>first part tells what operation CAG must do. Here are available 4 commands:</p>
<ul>
<li>
<strong><em>-fd</em></strong> or <strong><em>-FD</em></strong> --- searching of a minimal subset of the defined set</li>
<li>
<strong><em>-fa</em></strong> or <strong><em>-FA</em></strong> --- searching of a minimal subset of all nodes except for nodes of targeted set</li>
<li>
<strong><em>-a</em></strong> or <strong><em>-A</em></strong> --- analyse current the attack graph and find out new compromised nodes</li>
<li>
<strong><em>-r</em></strong> or <strong><em>-R</em></strong> --- run graphical user interface of CAG</li>
</ul>
</li>
<li>
<p>second part contains type of input file (DOT as <strong><em>-d</em></strong> or <strong><em>-D</em></strong>, CAS+ as <strong><em>-t</em></strong> or <strong><em>-T</em></strong>)</p>
</li>
<li>
<p>third part contains name of input file where an attack graph is described</p>
</li>
<li>
<p>fourth and fifth part work only for -fd/-FD, -fa/-FA or -a/-A. These parts contain type and name of output file. If you want to save file in the PNG format (or DOT format), you can write <strong><em>-p</em></strong> or <strong><em>-P</em></strong> (<strong><em>-d</em></strong> or <strong><em>-D</em></strong>).</p>
</li>
</ul>
<p>Correct examples:</p>
<ol>
<li>
<p>CryptoAG.exe -fa -t passExchProt.txt -p output.png</p>
</li>
<li>
<p>CryptoAG.exe -r -t passExchProt.txt</p>
</li>
</ol>
<p>After putting first command CAG begins to search minimal subsets from all nodes and generate output files. Second command only activates GUI, reads from the protocol and creates an attack graph which corresponds to the input file.</p>
<p>Bad examples:</p>
<ol>
<li>
<p>CryptoAG.exe -ac -t passExchProt.txt -d output.dot</p>
</li>
<li>
<p>CryptoAG.exe -a -t fileDoesntExist.txt -p output.png</p>
</li>
</ol>
<h4>
<a aria-hidden="true" class="anchor" href="#added-declarations-of-protocol-cas" id="user-content-added-declarations-of-protocol-cas"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Added declarations of protocol CAS+</h4>
<p>This protocol enables to write only declaration of variables in this form:</p>
<p><em>name of variables : type of variables;</em></p>
<p>If it needs to write enthropies of every values or their membership of set, this information is written next to a semicolon. Next to the semicolon char '%' must be written, then values and their properties.
For example:</p>
<p><em>Kc,Kd : public_key; %Kc:40bit,A;</em></p>
<p>Note that <strong>Kc</strong> is a node of targeted set and has 40 bits. It is necessary to write these values in the same row as their declarations.</p>
<p>If it needs to write assign original values to variables (for example key will be got as hash of two data), this information is also written next to char '%' and in the format:</p>
<p><em>name of variable &lt;- name of another variable what will be assigned to previous variable;</em></p>
<p>For example:</p>
<p><em>Key2	: key; % Key2 &lt;- hash(pass2, Long_key, nonce);</em></p>
<p>Again it is necessary to write in the same row. In addition, values of second variables (pass2, Long_key, nonce) must be defined.</p>
<p><strong>Language DOT</strong> - rules are commentated in file sample_file_DOT.gv which you can find in repositary.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#example-of-using" id="user-content-example-of-using"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Example of using</h4>
<p>Protocol Needham Schroeder Pub will be used for illustration.</p>
<ol>
<li>Let node <strong>Nb</strong> be compromised and <strong>kb_pub</strong> has 65 bits (set in Properties) - see first picture</li>
</ol>
<table>
<thead>
<tr>
<th>First picture</th>
<th>Second picture</th>
</tr>
</thead>
<tbody>
<tr>
<td><img alt="" src="https://raw.githubusercontent.com/Strigimar/CAG/master/Pictures%20for%20demonstration/ag1.jpg"/></td>
<td><img alt="" src="https://raw.githubusercontent.com/Strigimar/CAG/master/Pictures%20for%20demonstration/ag2.jpg"/></td>
</tr>
<tr>
<td>After clicking on <strong>E2(Nb, kb_pub)</strong> -- attacker gets this value -- node <strong>kb_pub</strong> get orange color (see second picture), it means that attacker can find out <strong>kb_pub</strong> by brute force but it will take him a long time. Nodes can have one of three color: red = easy compromised, orange = hard compromised, green = uncompromised.</td>
<td></td>
</tr>
</tbody>
</table>
<ol start="2">
<li>Let <strong>E2(Nb, kb_pub)</strong> be compromised and analyst wants to find out if attacker is able to compute <strong>Nb</strong> and <strong>kb_pub</strong>. Now both of nodes are uncompromised because altogether has 256 bits. If we set enthropies of both of nodes on 30 bits, both of these nodes will have orange color. Levels of compromitable:</li>
</ol>
<ul>
<li>easy compromitable &lt; 60 bits</li>
<li>hard compromitable between 60 and 80 bits</li>
<li>uncompromitable &gt; 80 bits</li>
</ul>
<ol start="3">
<li>Let <strong>Nb</strong> be node of targented set. After clicking Analyse -&gt; Find minimal set from all nodes CAG creates three files in the PNG format where nodes of minimal subset have brown color (see third picture which shows one of created files). It means that <strong>E0(Nb, hash(alice,bob),kb_pub)</strong> and <strong>kb_priv</strong> will suffice to get value <strong>Nb</strong>
</li>
</ol>
<p><img alt="" src="https://raw.githubusercontent.com/Strigimar/CAG/master/Pictures%20for%20demonstration/Nb.png"/></p>

        </div>

    </div>]