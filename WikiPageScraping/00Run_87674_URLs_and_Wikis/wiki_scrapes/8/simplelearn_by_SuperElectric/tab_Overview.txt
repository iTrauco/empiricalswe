[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The following are the main components you'll spend most of your time with as you use Simplelearn. Each header links to a more in-depth wiki page on that topic.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#data-formats" id="user-content-data-formats"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a class="internal present" href="/SuperElectric/simplelearn/wiki/Data-Formats">Data Formats</a>
</h3>
<p>Each layer in a neural network can convert the format of the data, changing its size, shape, and possibly data type. Doing these conversions by hand can be error-prone. Instead, Simplelearn specifies shape and axis order using a format object, which handles the conversion to other formats for you.</p>
<p>There is currently only one format object: <code>simplelearn.format.DenseFormat</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#nodes" id="user-content-nodes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a class="internal present" href="/SuperElectric/simplelearn/wiki/Nodes">Nodes</a>
</h3>
<p>A neural network in Simplelearn is a directed acyclic graph of computational nodes. Other libraries might call these layers, but in Simplelearn there is no assumption that you'll limit yourself to a linear chain of "layers".</p>
<p>The node classes can be found in <code>simplelearn/nodes.py</code></p>
<h3>
<a aria-hidden="true" class="anchor" href="#training" id="user-content-training"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a class="internal present" href="/SuperElectric/simplelearn/wiki/Training">Training</a>
</h3>
<p>Training involves three classes:</p>
<ul>
<li>The trainer <code>Sgd</code> loops through training data, calling callbacks and updating parameters.</li>
<li>
<code>SgdParameterUpdater</code>s compute the new value of a parameter given the gradient of the loss with respect to that parameter.</li>
<li>Callbacks monitor convergence and display intermediate results.</li>
</ul>
<p>These classes are in <code>simplelearn/training.py</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#datasets" id="user-content-datasets"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a class="internal present" href="/SuperElectric/simplelearn/wiki/Datasets">Datasets</a>
</h3>
<p>Simplelearn separates the <code>Dataset</code>, a stateless source of data, from the <code>DatasetIterator</code>, which yields batches from it, and keeps track of what epoch (loop through dataset) it's on. The iterator may also perform arbitrary transformations, such as cropping subwindows out of a dataset of large images.</p>
<p>Both classes live in <code>simplelearn.data.dataset</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples" id="user-content-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a class="internal present" href="/SuperElectric/simplelearn/wiki/Examples">Examples</a>
</h3>
<p>The examples directory contains a number of single-file programs that serve as:</p>
<ol>
<li>end-to-end tests.</li>
<li>minimal but complete working examples of using Simplelearn to train, run, and visualize neural networks.</li>
</ol>
<p>For usage instructions, run them with the <code>-h</code> command-line argument, i.e.:</p>
<pre><code>$ ./mnist_fully_connected.py -h
</code></pre>
<p>These programs can be found in <code>simplelearn/examples/</code>.</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>Copyright (c) 2015 Matthew Koichi Grimes</p>

          </div>
        </div>
    </div>]