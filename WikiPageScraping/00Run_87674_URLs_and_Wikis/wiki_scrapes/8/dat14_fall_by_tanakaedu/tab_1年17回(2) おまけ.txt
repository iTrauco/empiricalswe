[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%82%AF%E3%83%AB%E3%81%AE%E5%AE%9F%E8%A3%85" id="user-content-パーティクルの実装"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>パーティクルの実装</h1>
<p>ちょっと派手にしてみよう。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%82%AF%E3%83%AB%E3%81%AE%E6%93%8D%E4%BD%9C" id="user-content-パーティクルの操作"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>パーティクルの操作</h2>
<ul>
<li>[Assets]&gt;[Import Package]&gt;[Particles]でパーティクルを読み込む</li>
<li>適当なパーティクルを選ぶ</li>
<li>選んだパーティクルを選択して、[Inspector]内の[One Shot]と[Autodestruct]にチェックを入れる</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%82%AF%E3%83%AB%E7%94%9F%E6%88%90%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90" id="user-content-パーティクル生成オブジェクトの作成"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>パーティクル生成オブジェクトの作成</h2>
<ul>
<li>[GameObject]&gt;[Create Empty]で空のゲームオブジェクトを作成して、名前を「ParticleEmitter]に変更</li>
<li>C#スクリプトを新規に作成して、名前を「CParticle」に変更する</li>
<li>[CParticle]スクリプトを、[ParticleEmitter]オブジェクトにドラッグ＆ドロップする</li>
<li>[CParticle]をエディタで開いて、以下のコードにする。</li>
</ul>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">using</span> <span class="pl-en">UnityEngine</span>;
<span class="pl-k">using</span> <span class="pl-en">System</span>.<span class="pl-en">Collections</span>;

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">CParticle</span> : <span class="pl-en">MonoBehaviour</span> {
	<span class="pl-k">public</span> <span class="pl-en">GameObject</span> <span class="pl-smi">prefParticle</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;

	<span class="pl-c"><span class="pl-c">//</span> Use this for initialization</span>
	<span class="pl-k">void</span> <span class="pl-en">Start</span> () {
	
	}
	
	<span class="pl-c"><span class="pl-c">//</span> Update is called once per frame</span>
	<span class="pl-k">void</span> <span class="pl-en">Update</span> () {
	
	}

	<span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">Set</span>(<span class="pl-en">Vector3</span> <span class="pl-smi">pos</span>) {
		<span class="pl-en">Instantiate</span> (<span class="pl-smi">prefParticle</span>, <span class="pl-smi">pos</span>, <span class="pl-smi">Quaternion</span>.<span class="pl-smi">identity</span>);
	}
}</pre></div>
<ul>
<li>上書き保存する</li>
<li>Unityに戻り、[Hierarchy]ビューから[ParticleEmitter]を選択</li>
<li>[Inspector]ビューに表示される項目の[Pref Particle]欄に、選んだパーティクルのプレハブをドラッグ＆ドロップする</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#cplayerbase%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88" id="user-content-cplayerbaseスクリプト"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CPlayerBaseスクリプト</h2>
<p>CPlayerBaseにスクリプトを追加する。</p>
<ul>
<li>CPlayerBaseをエディタで開く</li>
<li>以下の変数を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* パーティクル発生用オブジェクト<span class="pl-c">*/</span></span>
	<span class="pl-k">protected</span> <span class="pl-en">GameObject</span> <span class="pl-smi">goParticleEmitter</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;</pre></div>
<ul>
<li>[protected void DoStart]関数を探して、関数内に以下のコードを追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-smi">goParticleEmitter</span> <span class="pl-k">=</span> <span class="pl-smi">GameObject</span>.<span class="pl-en">Find</span> (<span class="pl-s"><span class="pl-pds">"</span>ParticleEmitter<span class="pl-pds">"</span></span>);</pre></div>
<ul>
<li>[void OnCollisionEnter]関数を探して、当たった相手の名前を取り出してリストに加えるコードの下などに、以下のコードを追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>			<span class="pl-c"><span class="pl-c">//</span> パーティクルを、自分と相手の真ん中に登録する</span>
			<span class="pl-en">Vector3</span> <span class="pl-smi">poshi</span> <span class="pl-k">=</span> (<span class="pl-smi">col</span>.<span class="pl-smi">gameObject</span>.<span class="pl-smi">transform</span>.<span class="pl-smi">position</span><span class="pl-k">+</span> <span class="pl-smi">transform</span>.<span class="pl-smi">position</span>)<span class="pl-k">*</span><span class="pl-c1">0.5f</span>;
			<span class="pl-smi">goParticleEmitter</span>.<span class="pl-en">SendMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>Set<span class="pl-pds">"</span></span>,<span class="pl-smi">poshi</span>);</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#%E3%81%B6%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%9F%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E5%A0%B4%E6%89%80%E3%81%AB%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%82%AF%E3%83%AB%E3%82%92%E5%87%BA%E3%81%99" id="user-content-ぶつかったリストの場所にパーティクルを出す"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>ぶつかったリストの場所にパーティクルを出す</h2>
<p>パーティクルはぶつかった場所で発生するので、ぶつかったリストに設定されているキャラクタの場所に発生させれば他のキャラクタ同士の跳ね飛ばしにもパーティクルが出せる。</p>
<ul>
<li>CMilkcocoaをエディタで開く</li>
<li>[GameObject getPlayerByName]関数を探して、以下のようにpublicに変更する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-k">public</span> <span class="pl-en">GameObject</span> <span class="pl-en">getPlayerByName</span>(<span class="pl-k">string</span> <span class="pl-smi">nm</span>) {</pre></div>
<ul>
<li>上書き保存する</li>
<li>CEnemyCommをエディタで開く</li>
<li>[public void OnRecv]関数を見つけて、関数の最後のfor文を以下のように修正する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-c"><span class="pl-c">//</span> ぶつかった相手がプレイヤーかを確認</span>
		<span class="pl-k">for</span> (<span class="pl-k">int</span> <span class="pl-smi">i</span><span class="pl-k">=</span><span class="pl-c1">12</span>; <span class="pl-smi">i</span><span class="pl-k">&lt;</span><span class="pl-smi">st</span>.<span class="pl-smi">Length</span>; <span class="pl-smi">i</span><span class="pl-k">++</span>) {
			<span class="pl-en">CMilkcocoa</span> <span class="pl-smi">mk</span> <span class="pl-k">=</span> <span class="pl-smi">commObject</span>.<span class="pl-en">GetComponent</span>&lt;<span class="pl-en">CMilkcocoa</span>&gt; ();
			<span class="pl-k">string</span> <span class="pl-smi">chrname</span> <span class="pl-k">=</span> <span class="pl-smi">WWW</span>.<span class="pl-en">UnEscapeURL</span> (<span class="pl-smi">st</span> [<span class="pl-smi">i</span>]);
			<span class="pl-k">if</span> (<span class="pl-smi">mk</span>.<span class="pl-en">isPlayerName</span> (<span class="pl-smi">chrname</span>)) {
				<span class="pl-c"><span class="pl-c">//</span> プレイヤーが見つかったので、プレイヤーの速度をクリアする</span>
				<span class="pl-smi">commObject</span>.<span class="pl-en">SendMessage</span> (<span class="pl-s"><span class="pl-pds">"</span>SetXZZero<span class="pl-pds">"</span></span>);
			}

			<span class="pl-c"><span class="pl-c">//</span> パーティクルを設定</span>
			<span class="pl-en">GameObject</span> <span class="pl-smi">go</span> <span class="pl-k">=</span> <span class="pl-smi">mk</span>.<span class="pl-en">getPlayerByName</span> (<span class="pl-smi">chrname</span>);
			<span class="pl-k">if</span> (<span class="pl-smi">go</span> <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {
				<span class="pl-en">Vector3</span> <span class="pl-smi">pos</span> <span class="pl-k">=</span> <span class="pl-smi">go</span>.<span class="pl-smi">transform</span>.<span class="pl-smi">position</span>;
				<span class="pl-smi">goParticleEmitter</span>.<span class="pl-en">SendMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>Set<span class="pl-pds">"</span></span>,<span class="pl-smi">pos</span>);
			}
		}</pre></div>
<ul>
<li>上書き保存する</li>
<li>[File]&gt;[Build &amp; Run]を選んで、リビルドする</li>
</ul>
<p>以上で、設定完了。複数対戦をしてみて、パーティクルが飛ぶかを確認してみよう。</p>

        </div>

    </div>]