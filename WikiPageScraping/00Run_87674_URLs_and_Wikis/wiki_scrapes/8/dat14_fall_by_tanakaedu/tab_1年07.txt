[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#milkcocoa" id="user-content-milkcocoa"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Milkcocoa</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90" id="user-content-アカウントの作成"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>アカウントの作成</h2>
<ul>
<li><a href="https://mlkcca.com/?lang=en" rel="nofollow">Milkcocoaの公式ページ</a></li>
<li>[新規登録]を押して、メールアドレスとパスワードを入力してアカウント作成</li>
<li>メールの着信をチェックして、Confirmのテキストをサイトにコピーペースト</li>
<li>新規アプリを作成:名前は何でもよい</li>
<li>アプリを選択して、[アプリの概要]を表示しておく</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#github-pages%E3%81%AE%E6%BA%96%E5%82%99" id="user-content-github-pagesの準備"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>GitHub Pagesの準備</h2>
<ul>
<li>GitHubにログイン</li>
<li>[+]→[New Repository]で新しいリポジトリを作成</li>
<li>半角アルファベットで適当なリポジトリ名を入力して、「Initialize this repository with a README」にチェックを入れて[Create repository]を押す。</li>
<li>[branch:master]のドロップボックスをクリックして、「gh-pages」と入力して、[Create branch:gh-pages]を押す。</li>
<li>[+]を押して、index.htmlというファイル名を入力。</li>
<li>
<a href="https://mlkcca.com/tutorial/page1.html" rel="nofollow">Milkcocoaのチュートリアル</a>を開く。</li>
<li>画面下のindex.htmlのサンプルコードをコピーして、GitHubのNew Fileの中身に貼り付ける。</li>
<li>[Commit New File]を押す。</li>
<li>[+]を押して、main.jsというファイル名を入力。</li>
<li>Milkcocoaのチュートリアルから[main.js]タブを選択して、コードをコピー。</li>
<li>GitHubのmain.jsのファイルに貼り付ける。</li>
<li>Milkcocoaにログインして、自分のアプリのページを開き、アプリの概要から「Javascriptで始めよう！」の下の1行をコピー。</li>
<li>GitHubのmain.jsの1行目を、自分のアプリのScriptコードで上書き。</li>
<li>[Commit New File]を押す。</li>
</ul>
<p>以上で完了。以下でアクセスする。</p>
<p><a href="http://github%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%90%8D.github.io/%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%90%8D" rel="nofollow">http://githubのユーザー名.github.io/リポジトリ名</a></p>
<p>ユーザー名がtanakaeduで、リポジトリ名がmlkccaの場合は以下の通り。
<a href="http://tanakaedu.github.io/mlkcca/" rel="nofollow">http://tanakaedu.github.io/mlkcca/</a></p>
<p>初めて登録した場合は、アクセスできるまでに10分ほどかかることもあるとのこと。404のエラーなどが表示されたら、しばらく待って再アクセスしてみよう。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E5%90%8D%E5%89%8D%E6%AC%84%E3%82%92%E3%81%A4%E3%81%91%E3%81%A6%E3%81%BF%E3%82%8B" id="user-content-名前欄をつけてみる"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>名前欄をつけてみる</h2>
<ul>
<li>index.htmlに以下のタグを追加</li>
</ul>
<pre><code>&lt;input type='text' id='txtName' /&gt;
</code></pre>
<ul>
<li>main.jsを以下のように修正</li>
<li>4行目</li>
</ul>
<pre><code>var textArea, board,textName;
</code></pre>
<ul>
<li>7行目に以下を追加</li>
</ul>
<pre><code>  textName = document.getElementById("txtName");
</code></pre>
<ul>
<li>13行目を以下に修正</li>
</ul>
<pre><code>  sendText(text,textName.value);
</code></pre>
<ul>
<li>function sendText(text)以下を修正</li>
</ul>
<pre><code>function sendText(text,nm){
  chatDataStore.push({msg : text,uname:nm},function(data){
    console.log("送信完了!");
    textArea.value = "";
  });
}

chatDataStore.on("push",function(data){
  addText(data.value);
});

function addText(text){
  var msgDom = document.createElement("li");
  msgDom.innerHTML = text.uname+":"+text.msg;
  board.insertBefore(msgDom, board.firstChild);
}
</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#%E3%82%AF%E3%83%A9%E3%82%B9" id="user-content-クラス"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>クラス</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E4%BD%9C%E6%88%90" id="user-content-クラスの作成"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>クラスの作成</h2>
<ul>
<li>VisualC#を起動</li>
<li>projClassなどで新規プロジェクト作成</li>
<li>ソリューションエクスプローラからプロジェクト名を右クリック→追加→クラスで「CTest.cs」というクラスを作成</li>
<li>ボタンを１つおく</li>
<li>ボタンのプログラムに以下を入力</li>
</ul>
<pre><code>CTest test = new CTest();
</code></pre>
<ul>
<li>実行して、ボタンを押して、エラーがでないことを確認</li>
</ul>
<p>以上で、CTestクラスを定義して、そのインスタンスを作成した。まだCTestが何の機能も持っていないので、データを記録して、インスタンスの振る舞いを確認してみる。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E6%8C%AF%E3%82%8B%E8%88%9E%E3%81%84" id="user-content-インスタンスの振る舞い"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>インスタンスの振る舞い</h2>
<ul>
<li>CTest.csを開いて、以下のプログラムを入力</li>
</ul>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace projClass
{
    class CTest
    {
        // データを記録する
        private int data = 0;

        // データを設定する
        public void setData(int dt)
        {
            data = dt;
        }

        // データを返す
        public int getData()
        {
            return data;
        }
    }
}
</code></pre>
<ul>
<li>フォームのボタンをダブルクリックして、ボタンのプログラムを以下のように追加する。</li>
</ul>
<pre><code>            CTest test = new CTest();
            // ここから追加
            CTest test2 = new CTest();
            test.setData(0);
            test2.setData(1);
            MessageBox.Show("testは" + test.getData());
            MessageBox.Show("test2は" + test2.getData());
</code></pre>
<p>以上で起動してボタンを押すと、「testは0」「test2は1」と表示されて、インスタンスごとに別のデータを持つことができていることが確認できる。</p>
<h1>
<a aria-hidden="true" class="anchor" href="#static" id="user-content-static"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>static</h1>
<ul>
<li>CTest.csを以下のようにする。</li>
</ul>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace projClass
{
    class CTest
    {
        // データを記録する
        private int data = 0;
        // クラス変数
        private static int cldata = 0;

        // データを設定する
        public void setData(int dt)
        {
            data = dt;
        }

        // データを返す
        public int getData()
        {
            return data;
        }

        public static void setClData(dt) {
            cldata = dt;
        }
        public static int getClData(dt) {
            return cldata;
        }
    }
}
</code></pre>
<ul>
<li>Form1.csのボタンのブロックの最後に以下を追加</li>
</ul>
<pre><code>            CTest.setClData(2);
            MessageBox.Show("staticのデータは" + CTest.getClData());
</code></pre>
<ul>
<li>先ほどとの違いは以下の通り。</li>
<li>インスタンスのtestやtest2からはsetClData()やgetClData()は呼び出せず、CTestから直接呼び出している。</li>
<li>結果は、testやtest2に影響を与えない。</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#static%E3%82%92%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF%E3%81%A8%E3%81%97%E3%81%A6%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B" id="user-content-staticをカウンタとして利用してみる"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>staticをカウンタとして利用してみる</h2>
<ul>
<li>CTest.csを以下のように変更</li>
</ul>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace projClass
{
    class CTest
    {
        // データを記録する
        private int data = 0;
        // クラス変数
        private static int cldata = 0;

        // スタート時に呼ばれる関数
        public void Start()
        {
            cldata++;
        }

        // 終了時に呼ばれる関数
        public void OnDestroy()
        {
            cldata--;
        }

        // データを設定する
        public void setData(int dt)
        {
            data = dt;
        }

        // データを返す
        public int getData()
        {
            return data;
        }

        public static void setClData(int dt) {
            cldata = dt;
        }
        public static int getClData() {
            return cldata;
        }
    }
}
</code></pre>
<ul>
<li>Form1.csのボタンの処理を以下のように追加。</li>
</ul>
<pre><code>            CTest[] tests = new CTest[10];  // 10個の配列を生成
            for (int i = 0; i &lt; 10; i++)
            {
                tests[i] = new CTest();     // CTestのインスタンスを生成
                tests[i].Start();
                MessageBox.Show("staticのデータは" + CTest.getClData());
            }
            for (int i = 0; i &lt; 10; i++)
            {
                tests[i].OnDestroy();
                MessageBox.Show("staticのデータは" + CTest.getClData());
            }
</code></pre>

        </div>

    </div>]