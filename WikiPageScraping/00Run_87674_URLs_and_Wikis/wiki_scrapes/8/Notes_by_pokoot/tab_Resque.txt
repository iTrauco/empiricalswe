[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#tutorial" id="user-content-tutorial"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tutorial</h2>
<p><a href="http://kamisama.me/2012/10/09/background-jobs-with-php-and-resque-part-1-introduction/" rel="nofollow">Tutorial</a></p>
<h2>
<a aria-hidden="true" class="anchor" href="#installation" id="user-content-installation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Installation</h2>
<p>prerequisite: <a href="https://github.com/pokoot/Notes/wiki/Redis">Redis</a><br/>
package: <a href="https://github.com/chrisboulton/php-resque">php-resque</a></p>
<div class="highlight highlight-source-shell"><pre>{
    <span class="pl-s"><span class="pl-pds">"</span>require<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>chrisboulton/php-resque<span class="pl-pds">"</span></span> <span class="pl-c1">:</span> <span class="pl-s"><span class="pl-pds">"</span>&gt;=1.2<span class="pl-pds">"</span></span>
    }
}</pre></div>
<pre><code>// On your root directory
$ ln -s ./vendor/chrisboulton/php-resque/resque.php resque.php    

// Temporarily add aliases or add to ~/.bash_aliases
$ alias php-resque="php vendor/chrisboulton/php-resque/resque.php"
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#web-ui" id="user-content-web-ui"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Web UI</h2>
<pre><code>$ sudo apt-get install ruby 
$ sudo gem install resque

// Start
$ sudo resque-web

// To run on different redis server
$ sudo resque-web -r 10.0.0.120:6379
</code></pre>
<p>Access server: <code>http://queque.com:5678</code></p>
<h2>
<a aria-hidden="true" class="anchor" href="#parameters" id="user-content-parameters"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Parameters</h2>
<ul>
<li>
<code>QUEUE</code> : The name of the queues to poll</li>
<li>
<code>INTERVAL</code> : The polling interval (waiting time in seconds between each polling). Default to 5 seconds.</li>
<li>
<code>APP_INCLUDE</code> : Path to your application autoloader. Workers need to know where to find your jobs classes</li>
<li>
<code>COUNT</code> : Number of workers to create. All workers will have the same properties. Will always create one worker by default.</li>
<li>
<code>REDIS_BACKEND</code> : Address of your Redis server, formatted as hostname:port. e.g: 127.0.0.1:6379, or localhost:6379. Default to localhost:6379</li>
<li>
<code>VERBOSE</code> : 1 to enable verbose, will print basic debugging informations</li>
<li>
<code>VVERBOSE</code> : 1 to enable advanced verbose, will print detailed debugging informations</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#sample" id="user-content-sample"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Sample</h2>
<pre><code>$ QUEUE=notification php-resque
$ QUEUE=notification VERBOSE=1 php-resque
$ QUEUE=notification VVERBOSE=1 php-resque

// As a daemon
$ QUEUE=notification php-resque &amp;

// Runs the queue even if the user is logged out.
$ nohup QUEUE=notification php-resque &amp;

// Logs output
$ nohup QUEUE=notification php-resque &gt;&gt; /tmp/log_resque.php 2&gt;&amp;1 &amp;

// Avoid worker permissions
$ nohup sudo -u www-data QUEUE=notification php-resque &gt;&gt; /tmp/log_resque.php 2&gt;&amp;1 &amp;

// Creates multiple queue
$ QUEUE=* COUNT=2 APP_INCLUDE="../index.php" php-resque

// 10 Seconds polling
$ INTERVAL=10 QUEUE=default php-resque

// 5 Workers
$ QUEUE=default COUNT=5 php-resque

// Priority queues
$ QUEUE=achievement,notification php-resque

// Poll existing queues
$ QUEUE=* php-resque

// Application autoloader
$ QUEUE=default APP_INCLUDE=/path/to/autoloader.php php-resque
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#worker-commands" id="user-content-worker-commands"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Worker Commands</h2>
<p><code>Note</code>:<br/>
The worker id can be found by: <code>$ ps aux | grep resque</code>
Or via the webui process number.</p>
<pre><code>// To wait for all the jobs in the middle of processing to finish
$ kill -QUIT YOUR-WORKER-PID 

// Kill only the child, but keep the worker 
$ kill -USR1 YOUR-WORKER-PID

// Pause worker
$ kill -USR2 YOUR-WORKER-PID

// Resume a paused worker
$ kill -CONT YOUR-WORKER-PID
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#example" id="user-content-example"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Example.</h2>
<pre><code>$ QUEUE=test:email INTERVAL=10 COUNT=2 APP_INCLUDE='worker.php' php vendor/chrisboulton/php-resque/resque.php
</code></pre>
<p><code>job.php</code></p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-pse">&lt;?php</span><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">'</span>./vendor/autoload.php<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"><span class="pl-c1">Resque</span><span class="pl-k">::</span>setBackend(<span class="pl-s"><span class="pl-pds">'</span>localhost:6379<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1"><span class="pl-c1">Resque</span><span class="pl-k">::</span>enqueue(<span class="pl-s"><span class="pl-pds">'</span>test:email<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Mail<span class="pl-pds">'</span></span>, <span class="pl-c1">array</span>(</span>
<span class="pl-s1">    <span class="pl-s"><span class="pl-pds">'</span>to<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>pokoot@mail.com<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">    <span class="pl-s"><span class="pl-pds">'</span>subject<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>hi!<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">    <span class="pl-s"><span class="pl-pds">'</span>body<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>this is a test content<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">    <span class="pl-s"><span class="pl-pds">'</span>time<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">time</span>()</span>
<span class="pl-s1">));</span></pre></div>
<p><code>worker.php</code></p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-pse">&lt;?php</span><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">'</span>./vendor/autoload.php<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Mail</span></span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">perform</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$to</span>      <span class="pl-k">=</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">args</span>[<span class="pl-s"><span class="pl-pds">'</span>to<span class="pl-pds">'</span></span>];</span>
<span class="pl-s1">        <span class="pl-smi">$subject</span> <span class="pl-k">=</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">args</span>[<span class="pl-s"><span class="pl-pds">'</span>subject<span class="pl-pds">'</span></span>];</span>
<span class="pl-s1">        <span class="pl-smi">$body</span>    <span class="pl-k">=</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">args</span>[<span class="pl-s"><span class="pl-pds">'</span>body<span class="pl-pds">'</span></span>];</span>
<span class="pl-s1">        <span class="pl-smi">$time</span>    <span class="pl-k">=</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">args</span>[<span class="pl-s"><span class="pl-pds">'</span>time<span class="pl-pds">'</span></span>];</span>
<span class="pl-s1">        <span class="pl-c1">file_put_contents</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$time</span>.log<span class="pl-pds">"</span></span>, <span class="pl-smi">$to</span> <span class="pl-k">.</span> <span class="pl-c1">time</span>() );</span>
<span class="pl-s1">		<span class="pl-c1">mail</span>(<span class="pl-smi">$to</span>, <span class="pl-smi">$subject</span>, <span class="pl-smi">$body</span>);</span>
<span class="pl-s1">		<span class="pl-c1">sleep</span>(<span class="pl-c1">20</span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1">}</span></pre></div>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>Author: Harold Kim Cantil</p>

          </div>
        </div>
    </div>]