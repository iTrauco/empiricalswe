[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>This document describes how Inexor code should be documented.
New code must always adhere to those rules.</p>
<p>The source code of Sauerbraten is mainly uncommented at the moment, but we are about to change that. Every new populated code should be clearly understandable, not only for you. The goal is to be get a quick overview by just reading the comments.</p>
<p>Commenting is not a hard task, but an important one. Your future self and other developers will appreciate the minutes you spend commenting.</p>
<p>Furthermore a tool generates the documentation in HTML format which will be <a href="https://docs.inexor.org" rel="nofollow">published on the website</a>.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#generating-documentation" id="user-content-generating-documentation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Generating Documentation</h1>
<p>To generate the HTML documentation, install Doxygen and
run it in the document root:</p>
<p>$ doxygen doxygen.conf</p>
<h1>
<a aria-hidden="true" class="anchor" href="#what-should-be-documented" id="user-content-what-should-be-documented"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>What should be documented</h1>
<p>In General the interface anything exposes must be documented,
in C++ code this would include the following:</p>
<ul>
<li>
<p>Classes/Structs should have a description header</p>
</li>
<li>
<p>Functions, Methods and Macros should be commented in terms of</p>
<ul>
<li>Arguments</li>
<li>Return Value</li>
<li>Side Effects (what state does this function alter)</li>
<li>Possible exceptions/Error Flags</li>
<li>Overloads</li>
</ul>
</li>
<li>
<p>Class/Global Variables should have a description</p>
</li>
<li>
<p>Typedefs should also have a description</p>
</li>
<li>
<p>Templates in general should have an extensive documentation</p>
</li>
<li>
<p>Files should have a documentation, describing roughly what kind of stuff the file contains.</p>
<ul>
<li>if the file name is a bit cryptic, for instance <code>skelmdl.h</code>, the first lines should contain something like:</li>
</ul>
<blockquote>
<p>/// Skeletal Models Header:<br/>
/// Header for model file formats with embedded skeletons</p>
</blockquote>
<ul>
<li>Files that are implicitly documented do not need a documentation, this includes
<ul>
<li>implementations of header files (<code>Fnord.cpp</code>is already commented in <code>Fnord.h</code>)</li>
<li>
<a href="https://github.com/inexorgame/code/issues/70" title="Suggestion for a code module structure">Module</a> headers (<code>inexur/gui/gui.h</code>), because the module should already be documented (<code>inexur/gui/readme.md</code>)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#comment-style" id="user-content-comment-style"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Comment Style</h1>
<p>Comments that are not <em>Documentation</em> (e.g. inside a method, sometimes implementation details) should always use C-Style online comments</p>
<div class="highlight highlight-source-c++"><pre>    <span class="pl-c"><span class="pl-c">//</span> This describes some implementation detail that is only</span>
    <span class="pl-c"><span class="pl-c">//</span> important for people touching this code, not for people</span>
    <span class="pl-c"><span class="pl-c">//</span> who only need to call this function we're inside.</span></pre></div>
<p>Classes, functions, methods, fields must have API documentation,
this style uses triple-slash style.<br/>
This is made up of a short description (The first line until
the dot) and some more elaborate documentation (The short
description and any text after that).
In addition to the description, some semantic information can
be added; these tags use javadoc at notation and are primarily
used to declare the input and output of functions.</p>
<div class="highlight highlight-source-c++"><pre>    <span class="pl-c"><span class="pl-c">//</span>/ Safety dance.</span>
    <span class="pl-c"><span class="pl-c">//</span>/</span>
    <span class="pl-c"><span class="pl-c">//</span>/ You can leave your friends if you want to,</span>
    <span class="pl-c"><span class="pl-c">//</span>/ you can leave them all behind.</span>
    <span class="pl-c"><span class="pl-c">//</span>/</span>
    <span class="pl-c"><span class="pl-c">//</span>/ @tparam I am a dirty object.</span>
    <span class="pl-c"><span class="pl-c">//</span>/ @param Something old, which I will wear on my head.</span>
    <span class="pl-c"><span class="pl-c">//</span>/ @param Something borrowed, which I will wear on my foot.</span>
    <span class="pl-c"><span class="pl-c">//</span>/ @sideeffects Takes an object away from the fire.</span>
    <span class="pl-c"><span class="pl-c">//</span>/ @return A pair of new things, the first made with the</span>
    <span class="pl-c"><span class="pl-c">//</span>/         old object and something from the fire; the</span>
    <span class="pl-c"><span class="pl-c">//</span>/         second made by combining the old and the new thing.</span>
    <span class="pl-c"><span class="pl-c">//</span>/ @see fire</span>
    <span class="pl-c"><span class="pl-c">//</span>/ @see std::pair</span>
    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt; std::pair&lt;T,T&gt; <span class="pl-en">dance</span>(T old_, T new_) {
      T flaming = fire-&gt;<span class="pl-c1">takeFlaimigObject</span>();
      <span class="pl-k">return</span> <span class="pl-c1">std::makepair</span>(old_+flaiming, new_+old_);
    }</pre></div>
<p>Any documentation and any comments in general may be formatted using markdown syntax.</p>
<p><a href="https://github.com/inexorgame/code/issues/70" title="Suggestion for a code module structure">Modules</a> should have a documentation inside a readme.md file.</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>Need help? <a class="internal present" href="/inexorgame/inexor-core/wiki/Contact">Contact</a> us.</p>

          </div>
        </div>
    </div>]