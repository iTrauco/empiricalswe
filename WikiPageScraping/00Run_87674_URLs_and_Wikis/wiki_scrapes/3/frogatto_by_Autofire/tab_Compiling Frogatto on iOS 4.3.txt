[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>(work in progress)</p>
<h2>
<a aria-hidden="true" class="anchor" href="#acquiring-and-packaging-libraries-and-frameworks" id="user-content-acquiring-and-packaging-libraries-and-frameworks"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Acquiring and Packaging Libraries and Frameworks:</h2>
<p>For undisclosed reasons (likely security) Apple has disable dynamic-library inclusion in an app bundle, as you would do on Mac OS X.  Nor can you link to any system dylibs besides those provided by apple; thus, any libraries need to be either statically linked or need to have their source files directly compiled into the application.  Solutions for each library are a bit different, and are posted as follows:</p>
<h3>
<a aria-hidden="true" class="anchor" href="#opengl" id="user-content-opengl"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>OpenGl</h3>
<p>Apple provides OpenGL ES as part of the OS.  OpenGL ES requires different includes than OpenGL; Desktop OpenGL typically requires inclusion of GL/gl.h;  whereas OpenGL ES requires inclusion of TODO.  In order to have a minimal impact on our source code, and also to conveniently integrate something SDL 1.3 already includes via its OpenGL backend, we forego what would be the usual solution:  a compiler directive which detects if we are running on iOS, and selectively includes either</p>
<h3>
<a aria-hidden="true" class="anchor" href="#libboost_regexdylib-libboost_iostreamsdylib-libboost_systemdylib" id="user-content-libboost_regexdylib-libboost_iostreamsdylib-libboost_systemdylib"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>libboost_regex.dylib, libboost_iostreams.dylib, libboost_system.dylib</h3>
<p>Acquire these files from <a href="http://www.boost.org/" rel="nofollow">http://www.boost.org/</a> The latest version as of this writing is 1.47.0.  You're looking for a large zip file full of source code files and such.  Unlike for the mac version, you won't be compiling these into libraries using boost's built-in tool; you'll instead be putting the source files for the libraries we want, directly into XCode.</p>
<p>The source files for each of these, by the subnames "regex", "system", and "iostreams", can be found in e.g. boost_1_47_0/libs/regex/src; drag everything in each folder into a new group in XCode's file listing.</p>
<p>To reference the header files, assuming the above "boost_1_47_0" folder extracted from the archive is present in the same folder as our XCode project, then add the header path "./boost_1_47_0/"</p>
<h3>
<a aria-hidden="true" class="anchor" href="#glut--as-iphone-glu-or-iglu" id="user-content-glut--as-iphone-glu-or-iglu"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>GLUT  (as iphone-glu, or iGLU)</h3>
<p>(Not to be confused with GLEW.)  Unlike for desktop macs, GLUT is not available as a direct part of the OpenGLES available on iOS; we use some parts of it, though.  Someone with a similar problem has made a re-creation of it which covers everything we need.  You can download the files from <a href="http://code.google.com/p/iphone-glu/" rel="nofollow">http://code.google.com/p/iphone-glu/</a> - it's suggested you grab the iGLU-1.0.0.tar.gz release.  From that, we want to make a libGLU.a file by running their makefile, and we want to have the library's headers accessible in a local directory to our project file.  Their makefile is hard-coded for a specific release of the iOS SDK.  You can find and correct this file at iGLU-1.0.0/configs/darwin-iphone.  It also only builds for one architecture, and we need a combined "fat binary" containing both armv6 and armv7.  To do this, we'll need to first build copies for the library for each architecture using the suggested makefile invocation on their website:  make ARCH=armv6 PLATFORM=iPhoneOS  Note that between invocations of make, you'll need to "make clean" to remove your armv6 files before building the armv7 ones - otherwise even though you issue the command to rebuild the library with ARCH=armv7, it will naively build it from the already-constructed armv6 object code.</p>
<p>I suggest doing this for both armv6 and armv7, and putting the resulting libGLU.a file from each in a respectively-named folder, for the combination step.  Apple provides a tool named lipo to combine libraries of one architecture into libraries containing multiple architectures.  If we use the following line, it'll combine both of the libraries we just created into a fat binary suitable for use:  lipo -arch armv6 armv6/libGLU.a -arch armv7 armv7/libGLU.a -output libGLU.a -create</p>
<p>Once this fat binary libGLU.a file is created, drag it into the "Frameworks" group in the left-hand-side XCode file navigation sidebar.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#libsdla" id="user-content-libsdla"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>libSDL.a</h3>
<p>SDL needs to be compiled from source;  at the moment, we're using the development builds of 1.3 from <a href="http://www.libsdl.org/hg.php" rel="nofollow">http://www.libsdl.org/hg.php</a>  Download the zip file, and the resulting archive will come with makefiles for various platforms, including an xcode file for iOS.  Consult their readme, but loosely you'll want to open that xcode file, and select the build scheme that targets the product "libSDL.a";  to find the products of this, right-click on the "Products-&gt;libSDL.a" item in the left-hand navigation bar in XCode, and select "Show in Finder"; this will reveal a folder containing both a libSDLa file, and nested directory usr/local/include/* with a bunch of header files in the bottom-most folder; since this bottom-most folder is all we want, and the other folders were empty, I put both the "libSDL.a" file, and the "includes" folder in a new directory at the same location as the XCode project file for Frogatto, named "SDL".  The header search path for this was "./SDL/include".  Note that SDL's XCode project will by default create a fat binary; if in doubt, "lipo -info filename.a" will display what's in a library.</p>
<p>Once this libSDL.a file is created, drag it into the "Frameworks" group in the left-hand-side XCode file navigation sidebar.</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>More help can be found via IRC, <a href="irc://irc.freenode.net/#frogatto" rel="nofollow">#Frogatto</a> on freenode.net. This wiki is not a complete reference.</p>

          </div>
        </div>
    </div>]