[<div class="wiki-body gollum-creole-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#user-options" id="user-content-user-options"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>User Options</h2><ul><li>
<strong>--config-path="PATH"</strong> - Sets the path to the user configuration area.</li></ul><ul><li>
<strong>--difficulty</strong> - Sets the game to a given difficulty value; i.e. difficulty=0 or difficulty=casual; can use constants from /data/difficulty.cfg which map to integers. Typically used with --level, a later level far into the game, and a cheat code (see frogatto_playable.cfg) to test a later level in the game at a high difficulty level.</li></ul><ul><li>
<strong>--fullscreen</strong> - Sets the game to start in fullscreen mode.</li></ul><ul><li>
<strong>-h, --help</strong> - Displays command line usage text.</li></ul><ul><li>
<strong>--joystick, --no-joystick</strong> - Enables/disables joystick support.</li></ul><ul><li>
<strong>--level "LEVEL_FILE"</strong> - Starts the game on the specified level. The "LEVEL_FILE" is a path to a file, relative to the "~/data/levels/" directory.</li></ul><ul><li>
<strong>--module=modulename</strong> - Frogatto's "Anura" engine is now a general 2d game-making system, and has an add-on system which lets us separate packs of game-data into folders; these folders can contain entire individual games (with all of their data, levels, art and sound collected together in one folder), or add-ons for other existing games (such as additional levels for frogatto). We've applied this to frogatto itself, and turned it into a folder just like the others (in fact, the game uses this very option, set in the file <tt>~/master-config.cfg</tt> to indicate that it should launch frogatto when you launch the engine. The value passed to this option is the name of a folder inside <tt>~/modules/</tt>. Inside that folder there should be a file which automatically sets any other options (like screen size, what other modules it depends on, etc) for that given module, with the intention that a game made in our engine can be launched with just one option.</li></ul><ul><li>
<strong>--music, --no-music</strong> - Enables/disables the background music. This is a persistent value recorded in the preferences/settings file, and will continue its effect on subsequent launches unless the opposite setting is passed.</li></ul><ul><li>
<strong>--native</strong> - Sets game resolution to the native resolution of the screen, with one game pixel corresponding to one screen pixel, instead of the default double-sized mode where one game pixel is enlarged to a 2x2 square of 4 pixels. This should be set after the window dimensions are set; without setting them, this defaults to the normal 800x600 screen.</li></ul><ul><li>
<strong>--reload-modified-objects</strong> - Reload .cfg files that have changed, regardless of if you are in the editor or not. If an object is instantiated from a class, only the base class will get reloaded - the individual instances will not, but they will have the type_updated event fired on them. (example: <tt>on_type_updated: "fire_event('create')"</tt>)</li></ul><ul><li>
<strong>--resizable, --no-resizable</strong> - Allows/disallows to resize the game window.</li></ul><ul><li>
<strong>--scale</strong> - turns on a special pixel-art interpolation algorithm (custom, loosely based on 2xSaI) to upscale the game to 2x the size, rather than using the blocky nearest-neighbor interpolation the game currently defaults to. Currently has some visual issues with text and transparent edges; we want to fix the algorithm to categorically solve them, rather than altering content to work around them.</li></ul><ul><li>
<strong>--no-send-stats</strong> - We phone home anonymous data about a few in-game values: what levels players die on, what levels they quit the game on (intended to diagnose rage-quits), and any asserts/crashes the player has. This disables sending that data entirely.</li></ul><ul><li>
<strong>--sound, --no-sound</strong> - Enables/disables sound entirely, including music. This doesn't just mute the sound, but completely deactivates the sound-playing code, so audio files will not be loaded (This can save a great deal of ram if you're trying to run on a mobile device.) This is a persistent value recorded in the preferences/settings file, and will continue its effect on subsequent launches unless the opposite setting is passed.</li></ul><ul><li>
<strong>--widescreen</strong> - Activates widescreen mode; rather than the default 800x600 (4:3) screen size, the game launches with a size of 1066x600 (16:9, with a slight rounding error). The zoom factor stays the same, and the viewable area of the game world increases on the sides to show more content.</li></ul><ul><li>
<strong>--width "int"</strong>, <strong>--height "int"</strong> - Sets the game window to these dimensions, and stretches the graphics up (or down) to that size.</li></ul><ul><li>
<strong>--windowed</strong> - Starts in windowed mode.</li></ul><ul><li>
<strong>--wvga</strong> - Sets the display size to 800x480.</li></ul><h2>
<a aria-hidden="true" class="anchor" href="#diagnostic-options" id="user-content-diagnostic-options"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Diagnostic Options</h2><ul><li>
<strong>--debug, --no-debug</strong> - Enables/disables the onscreen display of "debug" output. We have an onscreen console which can be triggered by debug() commands in FFL (our in-game scripting language), and which can be invoked to type in expressions with control-d. This option silences the display of this text, or if the display has been disabled by default (as it is on mobile devices), this can turn it back on.</li></ul><ul><li>
<strong>--fps, --no-fps</strong> - Enables/disables framerate display; displaying framerate by default was something we used to do, but the current default is not to display the FPS indicator, so the latter option is useless at the moment.</li></ul><ul><li>
<strong>--potonly</strong> - Use power of two-sized textures only. <strong>TODO:</strong> determine whether this asserts, or pads textures to meet the requirement.</li></ul><ul><li>
<strong>--textures16</strong> - This option downsamples our textures to 16bpp, using a 5,5,5,1 rgba scheme if a given texture has nothing more than binary transparency, or a 4,4,4,4 rgba scheme otherwise. This is the default on iOS/mobile devices if you have less than 512mb of ram.</li></ul><ul><li>
<strong>--textures32</strong> - This will override a per-platform default to use 16bpp textures and force the game to use our native 32 bpp textures. This is the default on nearly all platforms.</li></ul><h2>
<a aria-hidden="true" class="anchor" href="#developer-options" id="user-content-developer-options"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Developer Options</h2><ul><li>
<strong>--benchmarks</strong> - runs all the game's benchmarks (intended to measure the speed of certain low-level functions), prints the results to the console, and then immediately exits the program. Generally only useful if you're actually hacking on the engine to optimize the speed of these.</li></ul><ul><li>
<strong>--benchmarks=name</strong> - runs just the named benchmark, rather than all of them.</li></ul><ul>
<li>
<strong>--compiled</strong> - Uses precalculated tile patterns and object data, rather than calculating which individual graphics should be used for each tile on startup. This is used for performance and memory optimization. Requires that you have an up-to-date set of compiled tile data, which is created by running the game with <strong>--utilities=compile_levels</strong>.</li>
<li><strong>--max_ffl_recursion=10 - Get a shorter stack trace when recursing to death.</strong></li>
</ul><ul><li>
<strong>--no-compiled</strong> - Disables <strong>--compiled</strong> if the setting defaults to true on a given platform (currently true only on mobile devices), which causes the game to load the regular game data and images instead.</li></ul><ul><li>
<strong>--set-fps=10</strong> - Sets the framerate to 10 frames per second (or whatever value you provide), slowing down the action proportionally. This is useful for diagnosing the behavior of high-speed animations to make sure things happen in proper sequence.</li></ul><ul><li>
<strong>--show-hitboxes</strong> - Shows the collision boxes for all of the in-game objects. Useful for tweaking said collision boxes to line up right with the actual graphics.</li></ul><ul><li>
<strong>--simipad</strong> - Changes various options to emulate an iPad environment (mostly screen size and touch-control display).</li></ul><ul><li>
<strong>--simiphone</strong> - Changes various options to emulate an iPhone environment (mostly screen size and touch-control display).</li></ul><ul><li>
<strong>--tests</strong> - runs all of the unit tests, prints the results to the console, and then immediately exits the program. Unit tests are sanity checks to make sure you're not breaking something already finished in the game when you add something new. Our default is to run the tests and then launch the game; this differs from that by immediately quitting the game after running the tests.</li></ul><ul><li>
<strong>--notests</strong> - Normally, our unit tests are run automatically on each launch (although they don't exit the program like in the "--tests" option. This causes them not to be run at all.</li></ul><ul><li>
<strong>--utility=xx</strong> - Allows you to run any chunk of code defined in an instance of "UTILITY(xx) { ...bunch of code... }" in the existing C++ code. These are documented below.</li></ul><ul><li>
<strong>--level-path="path"</strong> - Sets the folder to look for levels in. Useful for mod writers.</li></ul><ul><li>
<strong>--reload-modified-objects</strong> - Watches object files for edits (from an external editor), and immediately reloads them upon being altered.</li></ul><h2>
<a aria-hidden="true" class="anchor" href="#experimental-mp-options" id="user-content-experimental-mp-options"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Experimental MP Options</h2><p>Frogatto has a functional but unfinished multiplayer system; these set options </p><ul><li>
<strong>--host</strong> - Sets the game server host address.</li></ul><ul><li>
<strong>--relay</strong> - Use the server as a relay in multiplayer rather than trying to initiate direct connections through hole-punching.</li></ul><ul><li>
<strong>--utility=hole_punch_test</strong> <strong>TODO</strong>
</li></ul><h2>
<a aria-hidden="true" class="anchor" href="#developer-utilities" id="user-content-developer-utilities"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Developer Utilities</h2><ul><li>
<strong>--utility=document_object_functions</strong> - Our FFL scripting language has a collection of functions accessible in it, written in C++. Each of these has inline documentation written in the C++ code; passing this option <strong>TODO</strong> does something to output this data; I need to determine what.</li></ul><ul><li>
<strong>--utility=object_definition</strong> - This option launches our in-game code editor, and opens the script file corresponding to this particular object, allowing you to immediately edit it. <strong>TODO</strong> this is a complete guess, we need to verify if this is true.</li></ul><ul><li>
<strong>--utility=correct_solidity</strong> - modifies all of our levels, moving any objects which overlap solid terrain (which causes the game to assert) onto open space. Useful if you've modified some object to have a larger hitbox, and most instances of it which were sitting flush on the ground, now overlap the ground. See also <strong>--edit</strong>, which can be used to get at a broken level by immediately launching the game into the editor (which bypasses the assert).</li></ul><ul><li>
<strong>--utility=compile_levels</strong> - Precompiles all of our autotiling data into the "~/data/compiled/" directory in the current module, and precompiles all of our image data into texture atlases at <tt>~/images/tiles-compiled*.png</tt> (note; this should be in the current module, but at the time of this writing there's a bug which leaves it at the root engine level). This should be passed immediately <strong>before</strong> compile_objects.</li></ul><ul><li>
<strong>--utility=compile_objects</strong> - Precompiles all of our object data into the <tt>~/data/compiled/}} directory of the current module, putting the images in texture atlases at {{{~/images/compiled*.png</tt> in the current module. This should be passed immediately <strong>after</strong> compile_levels, and must be run as a separate launch of the game (i.e. run compile_levels, let the game finish and exit, and then run again with compile_objects instead).</li></ul><ul><li>
<strong>--utility=generate_scaling_code</strong> - Based on a series of patterns specified in <tt>~/surface_scaling.cfg</tt> we auto-generate a C++ file which scales an image to 2x size based on these rules; this gives us a more convenient way to experiment with pixel-art scaling algorithms.</li></ul><ul><li>
<strong>--utility=object_editor</strong> - <strong>TODO</strong>
</li></ul><ul><li>
<strong>--utility=render_level</strong> - This generates a PNG, showing the full layout of a given level, useful for walkthroughs, stat-display, or other such things. The background on a level will be drawn as black. Tiles and objects will be drawn in their initial state at cycle 0. <strong>TODO</strong> lots of guessing here, someone who's used this verify it.</li></ul><ul><li>
<strong>--utility=query</strong> Example syntax: <tt>data/level/ "map(filter(doc.character, value.type = 'ant_black'), add(value.y, -20))"</tt> This runs an FFL formula against all levels, allowing us to globally modify data; this can access any FSON value, allowing us to apply nearly any modification to all instances of an object, a tileset, or anything. <tt>doc</tt> represents the current level, and any sub-values there are the same as nested values in the FSON document.</li></ul><h2>
<a aria-hidden="true" class="anchor" href="#note-on-" id="user-content-note-on-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Note on ~/</h2><p> When we refer to: "~/", we mean the root level of your frogatto folder. On windows, or unix-built-from-source, this is the same folder the executable is in. On a mac, this is inside the double-clickable Frogatto application, and can be accessed by right clicking on the application, and selecting the menu option "Show Package Contents". This shows a secret folder of what's inside the program, and the "~/" folder is the one inside "Contents" called "Resources".</p>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>More help can be found via IRC, <a href="irc://irc.freenode.net/#frogatto" rel="nofollow">#Frogatto</a> on freenode.net. This wiki is not a complete reference.</p>

          </div>
        </div>
    </div>]