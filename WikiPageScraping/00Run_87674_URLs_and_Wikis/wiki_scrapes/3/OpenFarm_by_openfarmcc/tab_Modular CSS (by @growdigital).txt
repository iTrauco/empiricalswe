[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p><em>I'm dumping this here because I keep on having to search the slack history for it.</em> - Simon</p>
<p>Modular CSS abstracts CSS functionality into re-usable classes. It also plays nicely with folder structure and style guide.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#re-usable-css" id="user-content-re-usable-css"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Re-usable CSS</h2>
<p>Only use classes, not IDs, when defining styles.</p>
<p>Keep the specificity as flat as possible, by which I mean that you should not specify the element type in addition to the class unless this is necessary. For example, if you style a button with:</p>
<pre><code>.Button          { border-radius: 3px; }
.Button--primary { background-color: blue; }
</code></pre>
<p>You can then use these styles on a variety of button-like elements without regard to their HTML element type, for example:</p>
<pre><code>&lt;input class="Button" type="submit"&gt;
&lt;button class="Button"&gt;PushMe&lt;/button&gt;
&lt;a class="Button" href="somewhereovertherainbow.html"&gt;I Am A Button&lt;/a&gt;
</code></pre>
<p>For a label plus the accompanying input field, you’d have a file called <code>TextField.scss</code>. This would style all text fields, along with their labels.</p>
<ul>
<li>A class name for a <strong>component</strong> looks like <tt>.<i>componentName</i></tt>, for example: <code>.TextField</code>
</li>
<li>A class name for a component <strong>modifier</strong> looks like <tt>.<i>componentName</i>--<i>modifier</i></tt>, for example: <code>.TextField--special</code>
</li>
<li>A class name for a component <strong>descendant</strong> looks like <tt>.<i>componentName</i>-<i>descendentName</i></tt>, for example: <code>.TextField-label</code>:</li>
</ul>
<pre><code>.TextField          { background-color: yellow; }
.TextField--special { outline: 10px dotted red; }
.TextField-label    { display: inline-block; margin-right: 3px; }
.TextField-input    { display: inline-block; }
</code></pre>
<p>An example of HTML containing such components would look something like this:</p>
<pre><code>&lt;div class="TextField TextField--special"&gt;
  &lt;label class="TextField-label"&gt;Name&lt;/label&gt;
  &lt;input class="TextField-input" type="text"&gt;
&lt;/div&gt;
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#folder-structure" id="user-content-folder-structure"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Folder structure</h2>
<p>By using <a href="https://github.com/chriseppstein/sass-globbing">Sass globbing</a> you can organize the individual CSS modules in some sensible way. Currently, I divide up modules into <code>Components</code> (big blocks that are made up of other modules), <code>Graphics</code> (the “look and feel” elements), <code>Objects</code> (the layout and positioning parts) and <code>UI</code> (form elements, buttons, navigation, widgety things).</p>
<pre><code>── modules
   ├── Components
   │   └── Header
   │     └── Header.scss
   ├── Graphics
   │   └── Branding
   │     └── Branding.scss
   │   └── Icon
   │     ├── Icon.scss
   │     └── menu.svg
   ├── Objects
   │   └── Media
   │     └── Media.scss
   ├── UI
   │   └── forms
   │     └── TextField
   │       └── TextField.scss
   └── app.scss
</code></pre>
<p>The beauty of this method is that it makes it easy for you to find stuff. Do you want to style a new button style? <code>Button.scss</code> in your favourite text editor.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#style-guide" id="user-content-style-guide"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Style guide</h2>
<p>This also means that is a relative breeze to generate a style guide app <strong>from the directory structure itself</strong>. It also means that if the directory structure doesn’t fit, you can move and rename directories with relative impunity.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#further-reading" id="user-content-further-reading"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Further reading</h2>
<ul>
<li><a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" rel="nofollow">CSS Wizardry</a></li>
<li><a href="https://suitcss.github.io/" rel="nofollow">SUIT CSS</a></li>
<li><a href="http://bem.info/" rel="nofollow">BEM</a></li>
<li><a href="http://oocss.org/" rel="nofollow">OOCSS</a></li>
</ul>

        </div>

    </div>]