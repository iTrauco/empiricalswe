[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Atomic features realtime performance and memory metrics on desktop and mobile devices. Profiling can be selected from the Atomic Editor Tools menu, enabled in code, or specified on the command line.</p>
<p>Once enabled in the Atomic Editor, you will see profiling data for the editor itself.  While profiling is on, player sessions will also display profiling data by default.</p>
<p><img src="/AtomicGameEngine/AtomicGameEngine/wiki/images/repo/profiler/ToolProfilerMenu.jpg"/></p>
<h2>
<a aria-hidden="true" class="anchor" href="#performance-profiling" id="user-content-performance-profiling"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Performance Profiling</h2>
<p>Profiling performance gives a hierarchical breakdown of individual engine methods</p>
<p><img alt="" data-canonical-src="https://cdn-standard4.discourse.org/uploads/atomicgameengine/original/1X/35debac7f5c08baca4854ba52d53263c21286ef9.jpg" src="https://camo.githubusercontent.com/482a443e3c28747883a54eabaaa7ae4c67ac41e2/68747470733a2f2f63646e2d7374616e64617264342e646973636f757273652e6f72672f75706c6f6164732f61746f6d696367616d65656e67696e652f6f726967696e616c2f31582f333564656261633766356330386261636134383534626135326435333236336332313238366566392e6a7067"/></p>
<blockquote>
<p>Hierarchical application performance profiling of a basic 3d scene</p>
</blockquote>
<p>Atomic is using <a href="https://github.com/yse/easy_profiler">easy_profiler</a> (<a href="https://github.com/yse/easy_profiler/wiki/Basic-API">documentation</a>). You can see not only how long application spends executing certain code blocks, but also exact times when code was executed. This is very convenient for pinpointing less obvious performance issues like microstuttering.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#building-with-profiler-support" id="user-content-building-with-profiler-support"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Building with profiler support</h3>
<p>In order to build profiler you need to install Qt5.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#linux" id="user-content-linux"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Linux</h4>
<p>Use package manager to install packages providing Qt5. Package names may vary by distribution.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#macos" id="user-content-macos"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>MacOS</h4>
<p>Use homebrew to install latest available Qt. For example: <code>brew install qt@5.7</code>. Then set <code>CMAKE_PREFIX_PATH</code> to the root folder of Qt installation, for example <code>./CMake_makefile.sh -DCMAKE_PREFIX_PATH=/opt/Qt5.7</code>.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#windows" id="user-content-windows"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Windows</h4>
<p>Download Qt from <a href="https://www.qt.io/download-open-source/#section-2" rel="nofollow">official website</a> and install SDK. Pay attention to runtime Qt links against. For example if you are building project using <code>Visual Studio 2017</code> make sure you get Qt that links against <code>msvc2017</code> runtime. Then set <code>CMAKE_PREFIX_PATH</code> to the root folder of Qt installation, for example <code>CMake_VS2017.bat -DCMAKE_PREFIX_PATH=C:/Qt/Qt5.9.1/msvc2017_64</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#profiler-usage" id="user-content-profiler-usage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Profiler usage</h3>
<p>In order to profile your own code you have to wrap portions of the code as profiler blocks. Then you should start your application and profiler GUI tool. Tool is built to <code>AtomicGameEngine/Artifacts/Build/Profiler</code> folder. Press <code>Connect</code> button in profiler application toolbar to connect to application. You may need to change address and port should you set custom port in application when calling <code>Profiler::StartListen(&lt;your_port&gt;)</code> or if you would like to profile application running on other device (like mobile phone).</p>
<p>In order to display block hierarchy in lower panel hold <code>Shift</code> and right-click-select blocks in upper panel.</p>
<p>If you would like to profile blocks on other threads than main one consider naming your threads by adding <code>ATOMIC_PROFILE_THREAD(ThreadName)</code> statement before any profiled blocks.</p>
<p>Examples how to mark sections of code for profiling:</p>
<h3>
<a aria-hidden="true" class="anchor" href="#c" id="user-content-c"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>C++</h3>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">void</span> <span class="pl-en">Application::Start</span>()
{
    GetSubsystem&lt;Profiler&gt;()-&gt;<span class="pl-c1">StartListen</span>();
}

<span class="pl-k">void</span> <span class="pl-en">Function</span>()
{
    <span class="pl-c1">ATOMIC_PROFILE</span>(MyBlock)
    <span class="pl-c"><span class="pl-c">//</span> Your code named "MyBlock"</span>
    <span class="pl-c1">ATOMIC_PROFILE_END</span>()

    <span class="pl-c"><span class="pl-c">//</span> Code that will not show up as profiler block</span>

    <span class="pl-c1">ATOMIC_PROFILE</span>(MyOtherBlock)
    <span class="pl-c"><span class="pl-c">//</span> Your code named as "MyOtherBlock"</span>
}</pre></div>
<p>In c++ it is not necessary to terminate blocks with <code>ATOMIC_PROFILE_END()</code> as it will be done automatically when execution leaves current scope.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#c-1" id="user-content-c-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>C#</h3>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">void</span> <span class="pl-en">Start</span>()
{
    <span class="pl-en">GetSubsystem</span>&lt;<span class="pl-en">Profiler</span>&gt;().<span class="pl-en">StartListen</span>();
}

<span class="pl-k">void</span> <span class="pl-en">SomeMethod</span>()
{
    <span class="pl-smi">Profiler</span>.<span class="pl-en">Block</span>(<span class="pl-s"><span class="pl-pds">"</span>SomeBlock<span class="pl-pds">"</span></span>, () <span class="pl-k">=&gt;</span> {
        <span class="pl-c"><span class="pl-c">//</span> Code named "SomeBlock".</span>
    });

    <span class="pl-c"><span class="pl-c">//</span> Unprofiled code.</span>

    <span class="pl-smi">Profiler</span>.<span class="pl-en">BeginBlock</span>(<span class="pl-s"><span class="pl-pds">"</span>OtherBlock<span class="pl-pds">"</span></span>);
    <span class="pl-c"><span class="pl-c">//</span> Code named "OtherBlock".</span>
    <span class="pl-smi">Profiler</span>.<span class="pl-en">EndBlock</span>();
}</pre></div>
<p>In C# every block started with <code>Profiler.BeginBlock()</code> must be terminated with <code>Profiler.EndBlock()</code>, otherwise application will crash.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#memory-metrics" id="user-content-memory-metrics"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Memory Metrics</h2>
<p>Atomic has robust object tracking to help catch object leaks and related memory issues. The Metrics subsystem also tracks whether native, C#, or JavaScript/TypeScript code instantiated objects.  Metrics tracking is selected in the Atomic Editor Tools menu in the Profiler submenu.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#object-tracking" id="user-content-object-tracking"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Object Tracking</h4>
<p><img src="/AtomicGameEngine/AtomicGameEngine/wiki/images/repo/profiler/ProfileMetrics.jpg"/></p>
<blockquote>
<p>When memory metrics are enabled, objects are tracked and instance counts can be displayed</p>
</blockquote>
<h4>
<a aria-hidden="true" class="anchor" href="#enabling-metrics-from-code" id="user-content-enabling-metrics-from-code"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Enabling metrics from code</h4>
<p>Example C# to enable metrics subsystem</p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span> Objects instances created from this point will be tracked</span>
<span class="pl-en">GetSubsystem</span>&lt;<span class="pl-en">Metrics</span>&gt;().<span class="pl-en">Enable</span>();

<span class="pl-c"><span class="pl-c">//</span> Show the hud</span>
<span class="pl-k">var</span> <span class="pl-smi">ui</span> <span class="pl-k">=</span> <span class="pl-en">GetSubsystem</span>&lt;<span class="pl-en">UI</span>&gt;();
<span class="pl-smi">ui</span>.<span class="pl-en">ShowDebugHud</span>(<span class="pl-c1">true</span>);
<span class="pl-smi">ui</span>.<span class="pl-en">SetDebugHudProfileMode</span>(<span class="pl-smi">DebugHudProfileMode</span>.<span class="pl-smi">DEBUG_HUD_PROFILE_METRICS</span>);</pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#autometrics-and-player-metrics-advanced" id="user-content-autometrics-and-player-metrics-advanced"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Autometrics and Player Metrics (Advanced)</h4>
<p>The <code>--autometrics</code> command line option can be specified for both the Atomic Editor and player applications.  This will automatically enable the Metrics subsystem and begin tracking objects starting with the Engine subsystem.  When running the Atomic Editor with autometrics enabled, player sessions will also have autometrics enabled.</p>
<p>The <code>--playermetrics</code> command line option can be specified for player applications.  This will automatically enable the Metrics subsystem and begin tracking objects starting at the beginning of application code (after the engine subsystems are created).</p>
<p><img src="/AtomicGameEngine/AtomicGameEngine/wiki/images/repo/profiler/deepmetrics.jpg"/></p>
<blockquote>
<p>When autometrics are enabled, object tracking begins with the Engine subsystem for deep tracking of core objects</p>
</blockquote>
<p>Example C# of setting autometrics from code</p>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">Program</span>
{
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">Main</span>(<span class="pl-k">string</span>[] <span class="pl-smi">args</span>)
    {
        <span class="pl-c"><span class="pl-c">//</span> Capture all metrics, including engine subsystems, etc</span>
        <span class="pl-c"><span class="pl-c">//</span> Autometrics must be set before the Application instance is created</span>
        <span class="pl-smi">Application</span>.<span class="pl-en">SetAutoMetrics</span>(<span class="pl-c1">true</span>);

        <span class="pl-smi">Application</span>.<span class="pl-en">Run</span>&lt;<span class="pl-en">AtomicMain</span>&gt;(<span class="pl-smi">args</span>);
    }
}</pre></div>
<p>Metrics command line options also work when launching from Visual Studio</p>
<p><img src="/AtomicGameEngine/AtomicGameEngine/wiki/images/repo/profiler/autometrics.jpg"/></p>
<blockquote>
<p>Example of adding --autometrics to Visual Studio C# command line options to track all engine objects</p>
</blockquote>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><img align="left" data-canonical-src="https://atomicwiki.us/atomicwiki_imgs/atomicLogo.png" height="22" src="https://camo.githubusercontent.com/221d0a11732835c9763ed76a29958208a863bdfd/68747470733a2f2f61746f6d696377696b692e75732f61746f6d696377696b695f696d67732f61746f6d69634c6f676f2e706e67"/><a href="https://github.com/AtomicGameEngine/AtomicGameEngine/wiki">Home</a> | Copyright (c) 2014 - 2017 THUNDERBEAST GAMES LLC</p>

          </div>
        </div>
    </div>]