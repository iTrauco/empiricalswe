[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>GWP uses <a href="https://github.com/phingofficial/phing">Phing</a> as its build system , and you are completely free to use it or not. but it is Recommended. cause it will help you automate the whole process from building your theme to deploying you app in staging or production servers.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#available-phing-targets" id="user-content-available-phing-targets"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Available Phing Targets</h2>
<p>running <code>bin/phing</code> command will display available phing targets :</p>
<div class="highlight highlight-source-shell"><pre>$ bin/phing
Buildfile: C:<span class="pl-cce">\U</span>sers<span class="pl-cce">\H</span>yyan<span class="pl-cce">\D</span>esktop<span class="pl-cce">\g</span>wp<span class="pl-cce">\b</span>uild.xml

Gwp Project <span class="pl-k">&gt;</span> help:

Buildfile: C:<span class="pl-cce">\U</span>sers<span class="pl-cce">\H</span>yyan<span class="pl-cce">\D</span>esktop<span class="pl-cce">\g</span>wp<span class="pl-cce">\b</span>uild.xml
Default target:
-------------------------------------------------------------------------------
 <span class="pl-c1">help</span>                 Display <span class="pl-c1">help</span> message about available targets

Main targets:
-------------------------------------------------------------------------------
 build                Basic build target
 ftp-deploy           Basic ftp deploy target
 gwp:apache-htaccess  Create htaccess file to handle domain to web redirect
 gwp:archive          Build new archive file <span class="pl-k">for</span> the project
 gwp:clean            Clean the build dir
 gwp:composer         Install dependencies using composer
 gwp:copy             Copy required files to clean dir
 gwp:env              Copy the .env.X file to given copy dir
 gwp:fetch            Fetch project <span class="pl-c1">source</span> code
 gwp:ftp-generate     Generate the deployment file
 gwp:ftp-sync         Synchronize files throw FTP
 <span class="pl-c1">help</span>                 Display <span class="pl-c1">help</span> message about available targets
 package              Basic package target


BUILD FINISHED

Total time: 6.2761 seconds</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#understand-build-workflow" id="user-content-understand-build-workflow"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Understand Build Workflow</h2>
<blockquote>
<p>The default workflow expects you are using Git to version your app and (ftp/sftp/ftps) for deployment .</p>
</blockquote>
<h3>
<a aria-hidden="true" class="anchor" href="#properties-file" id="user-content-properties-file"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Properties File</h3>
<p><code>build/build.properties</code> is the main build configuration file , and all its properties can be overridden by other environments by using the file in <code>build/environments/{ENV_NAME}/{ENV_NAME}.properties</code>.</p>
<p>Almost all properties were set to make sense for all environments , if you have to change something then it will be the following properties :</p>
<div class="highlight highlight-source-ini"><pre><span class="pl-c"><span class="pl-c">#</span> The repository to clone</span>
<span class="pl-k">fetch.repo</span> = git@github.com:hyyan/gwp.git
<span class="pl-c"><span class="pl-c">#</span> the command to use to clone the repo </span>
<span class="pl-k">fetch.cmd</span> = git

<span class="pl-c"><span class="pl-c">#</span> path for composer file </span>
<span class="pl-k">composer.path</span> = C:/ProgramData/Composer/bin/composer.phar</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#build-steps" id="user-content-build-steps"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Build steps</h3>
<p>After setting up the correct build properties , you can run the following command to build your project :</p>
<p><code>bin/phing build -D env=staging -D version=master</code></p>
<p>The previous command will run the following steps in order :</p>
<ol>
<li>
<code>gwp:clean</code> : will clean the <code>.build</code> dir , which contains fetched repo content</li>
<li>
<code>gwp:fetch</code> : Will fetch your app with given version from Git repo into <code>.build</code> dir</li>
<li>
<code>gwp:composer</code> : Will install app dependencies using composer</li>
<li>
<code>gwp:copy</code> : copy app required files from <code>.build</code> into <code>dist/deploy</code> dir using patterns file placed in the <code>build/excludes/copy.txt</code>
</li>
<li>
<code>gwp:env</code> : copy the write <code>.env.ENV_NAME</code> file into <code>dist/deploy</code> folder</li>
<li>
<code>gwp:apache-htaccess</code> : generate the correct .htaccess file for current environment</li>
</ol>
<p>Now , you have clean build in the <code>dist/deploy</code> dir</p>
<p>###Packaging App</p>
<p>If you want to package you app in zip file , you can replace the build command with following one :</p>
<p><code>bin/phing package -D env=staging -D version=master</code></p>
<blockquote>
<p>You can control which files to exclude from package using patterns in the <code>build/excludes/archive.txt</code> file</p>
</blockquote>
<h3>
<a aria-hidden="true" class="anchor" href="#deploying-app" id="user-content-deploying-app"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Deploying App</h3>
<p>GWP , comes with only one way for deploying using the <a href="https://github.com/dg/ftp-deployment">dg/ftp-deployment</a>.</p>
<blockquote>
<p><strong>FTP Deployment</strong> : tool for automated deployment of web applications to an FTP server(ftp,sftp,ftps) , which will upload only changed files.</p>
</blockquote>
<p>In order to deploy your build from <code>dist/deploy</code> folder to your server , you need to follow these two steps :</p>
<ol>
<li>
<p>Create the deployment config file in your app root : <code>{ENV_NAME}-deploy.ini</code>
the content of this file , will contains your ftp credential.</p>
</li>
<li>
<p>run the following command to build and deploy :</p>
</li>
</ol>
<p><code>bin/phing ftp-deploy -D env=staging -D version=master</code></p>
<p><strong>How is <code>{ENV_NAME}-deploy.ini</code> looks like ?</strong></p>
<div class="highlight highlight-source-ini"><pre><span class="pl-en">[Staging Deploy]</span> 
<span class="pl-c"><span class="pl-c">;</span> remote FTP server</span>
<span class="pl-k">remote</span> = ftp://user:secretpassword@ftp.example.com/directory
<span class="pl-c"><span class="pl-c">;</span> you can use ftps:// or sftp:// protocols (sftp requires SSH2 extension)</span>

<span class="pl-c"><span class="pl-c">;</span> FTP passive mode</span>
<span class="pl-k">passivemode</span> = yes

<span class="pl-c"><span class="pl-c">;</span> local path (optional)</span>
<span class="pl-k">local</span> = ./dist/deploy

<span class="pl-c"><span class="pl-c">;</span> files to preprocess (defaults to *.js *.css)</span>
<span class="pl-k">preprocess</span> = no
</pre></div>

        </div>

    </div>]