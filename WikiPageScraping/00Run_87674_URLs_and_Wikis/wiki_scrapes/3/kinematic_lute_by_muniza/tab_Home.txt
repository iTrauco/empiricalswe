[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <hr/>
<h1>
<a aria-hidden="true" class="anchor" href="#about" id="user-content-about"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>About</h1>
<p>The kinematic lute is a project part of the Orpheus and Eurydice: Electromechanical Redux show at the Slought Foundation in Philadelphia. More info on the show can be found <a href="https://slought.org/resources/orpheus_and_eurydice" rel="nofollow">here</a>. The show was the final project for MEAM516 - Advanced Mechatronics in Reactive Spaces - taught by Professor Mark Yim. Basically, it makes sound and lights in response to button presses on a remote.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#team-members" id="user-content-team-members"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Team Members:</h3>
<ul>
<li><a href="http://muniza.github.io" rel="nofollow">Alfredo Muniz</a></li>
<li><a href="http://www.sadeoba.com/" rel="nofollow">Sade Oba</a></li>
<li><a href="https://github.com/nlab">Nicholas LaBarbera</a></li>
<li>Nino Amazzurco</li>
<li>Eunil Kim</li>
</ul>
<hr/>
<h1>
<a aria-hidden="true" class="anchor" href="#gallery" id="user-content-gallery"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Gallery</h1>
<p>Video Demonstration (Click Image):</p>
<p><a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=C4zP0aUcJtM%0A" rel="nofollow"><img alt="Click for Video" border="10" data-canonical-src="http://img.youtube.com/vi/C4zP0aUcJtM/0.jpg" height="540" src="https://camo.githubusercontent.com/28d724fb0387970c42d9f254a6a0f5633c934471/687474703a2f2f696d672e796f75747562652e636f6d2f76692f43347a50306155634a744d2f302e6a7067" width="720"/></a></p>
<p>In the Dark:<img alt="Dark" src="https://github.com/muniza/kinematic_lute/raw/master/images/base_dark.jpg"/></p>
<p>In the Light:<img alt="Light" src="https://github.com/muniza/kinematic_lute/raw/master/images/base_light.jpg"/></p>
<p>Architect's Vision:<img alt="side view" src="https://github.com/muniza/kinematic_lute/raw/master/images/base_start.png"/></p>
<p>Architect's Rendering:<img alt="side view" src="https://github.com/muniza/kinematic_lute/raw/master/images/base_architect.png"/></p>
<p>Side View Rendering:<img alt="side view" src="https://github.com/muniza/kinematic_lute/raw/master/images/base_side.png"/></p>
<p>Top View Rendering:<img alt="side view" src="https://github.com/muniza/kinematic_lute/raw/master/images/base_top.png"/></p>
<p>Side View Cross Section:<img alt="side view" src="https://github.com/muniza/kinematic_lute/raw/master/images/base_open.png"/></p>
<hr/>
<h1>
<a aria-hidden="true" class="anchor" href="#technical-details" id="user-content-technical-details"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Technical Details</h1>
<p><img alt="System Overview" src="https://github.com/muniza/kinematic_lute/raw/master/images/system.jpg"/></p>
<p>The system consists of two large parts: Remote and Base Station.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#remote" id="user-content-remote"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Remote</h2>
<p>The remote is made of PLA and 3d printed on a makerbot. It was designed to house a 1Ah 2 cell lipo battery, a lightly sanded acrlic rod for lighting effects, a SPST switch, a 5v voltage regulator, three push buttons, a single neopixel led, an atmega32u4 development board, and a wireless module designed for that development board. The microcontroller powers on when the switch is set to the on position. It runs code that sets the light to white and waits for a button press. When a button is pressed, it triggers an interrupt that then checks which pin is high and sends that data over a wireless link to the base station. Details can be found below:</p>
<ul>
<li><a href="https://github.com/muniza/kinematic_lute/blob/master/schematics/bom_remote.csv">BOM for Remote</a></li>
<li><a href="https://github.com/muniza/kinematic_lute/blob/master/tx/main.c">Code for Wireless TX</a></li>
<li><a href="https://github.com/muniza/kinematic_lute/blob/master/mechanical/Lute_Handheld2.zip?raw=true">Mechanical Design Files</a></li>
<li><a href="https://raw.githubusercontent.com/muniza/kinematic_lute/master/schematics/remote.sch" rel="nofollow">Electrical Schematic</a></li>
</ul>
<p>Remote electrical schematic is below:
<img alt="Remote Schematic" src="https://github.com/muniza/kinematic_lute/raw/master/images/remote_schematic.png"/></p>
<h2>
<a aria-hidden="true" class="anchor" href="#base-station" id="user-content-base-station"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Base Station</h2>
<p>The base station is made from ABS and 3d printed on a dimension elite 3d printer in six different pieces and molded together by melting acetone and sanding/painting the interface. It was designed to house a 2.2Ah 2 cell lipo battery, 53 lightly sanded acrylic rods for lighting effects, 53 neopixel leds, a SPST switch, four 5v regulators, two atmega32u4 development boards, a wireless module for the atmega32u4, a beaglebone black development board, a <a href="https://github.com/surveycorps/e_apro/tree/master/audio">custom-made usb audio codec</a>, a 3.1W audio amplifier, and 2W RMS speakers. When the switch is activated, it powers on the wireless microcontroller that checks for signals on the link caused by button presses on the remote. When a signal is caught, it sets three pins high/low. The microcontroller that controls the lights checks its pins for high/low and runs a light sequence that corresponds to the music that will be played. At the same time, the beaglebone black runs a startup script that checks its pins for high/low and plays music depending on the pins' signals. This way, when a button is pressed, there is both lights and sound. The atmega32u4 that controls the lights is programmed through the Arduino IDE because Adafruit wrote a nice library that makes controlling the LED's very easy. Details on parts used and microcontroller code can be found below:</p>
<ul>
<li><a href="https://github.com/muniza/kinematic_lute/blob/master/schematics/bom_base.csv">BOM for Base Station</a></li>
<li><a href="https://github.com/muniza/kinematic_lute/blob/master/lights/lute_lightshow.ino">Code for Light Microcontroller</a></li>
<li><a href="https://github.com/muniza/kinematic_lute/blob/master/rx/main.c">Code for Wireless RX</a></li>
<li><a href="https://github.com/muniza/kinematic_lute/blob/master/mechanical/Lute_Assem1.zip?raw=true">Mechanical Design Files</a></li>
<li><a href="https://raw.githubusercontent.com/muniza/kinematic_lute/master/schematics/base_station.sch" rel="nofollow">Electrical Schematic</a></li>
</ul>
<p>Base Station Schematic is below:
<img alt="Base Station Schematic" src="https://github.com/muniza/kinematic_lute/raw/master/images/base_schematic.png"/></p>
<h3>
<a aria-hidden="true" class="anchor" href="#programming-the-microcontrollers" id="user-content-programming-the-microcontrollers"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Programming the Microcontrollers</h3>
<p>The atmega32u4 can be programmed by flashing hex files to it. We first need to install a few packages: <code>sudo apt-get install gcc-avr avrdude avr-libc dfu-programmer</code>. We can then cd to the kinematic_lute directory and run <code>make</code>. Then we can connect the board and put it into bootloader mode and run <code>sudo make flash</code> to put the hex file on the atmega32u4. This works for the tx and the rx. The microcontroller that handles the lights works a little differently. We are running the arduino ide which can be installed by <code>sudo apt-get install arduino-core</code>. Then we can get the adafruit neopixel library <code>git clone https://github.com/adafruit/Adafruit_NeoPixel</code> and add the library to our arduino library path. Then we can setup the arduino program to show us where the hex file is being produced by checking the <code>file-&gt;preferences-&gt;show verbose output during compilation</code>. We can then open the light.ino file and compile it. We should see a location <code>/tmp/build8192839214***/light.cpp.hex</code>. We can cd to that directory and run <code>sudo dfu-programmer atmega32u4 erase</code> and then <code>sudo dfu-programmer atmega32u4 flash light.cpp.hex</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#beaglebone-black-setup" id="user-content-beaglebone-black-setup"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Beaglebone Black Setup</h3>
<p>We used the beaglebone black revision C. We ran everything off the SD card and not the eMMC so that we can easily modify the files. To always boot off of the SD card, we need to remove the MLO boot file from the eMMC. To do this we first burn an image to the SD card. We used the <a href="https://s3.amazonaws.com/angstrom/demo/beaglebone/Angstrom-Cloud9-IDE-GNOME-eglibc-ipk-v2012.12-beaglebone-2013.06.20.img.xz" rel="nofollow">latest angstrom image</a> found on beagleboard website. Once we boot off the SD card, we can make a tmp directory for mounting the eMMC image and then mount it. It should be located at /dev/mmcblk1p1. We just need to mount that to tmp and rename MLO to MLO.old. Then we can unmount it. We can test by restarting the beaglebone and ensuring that it always boots off the sd card and not the eMMC.</p>
<p>Next we need to automatically login so we edit the file
<code>/etc/systemd/system/getty.target.wants/serial-getty@ttyO*.service</code>
and change the line
<code>ExecStart=-/sbin/getty 115200 %I</code>
to
<code>ExecStart=-/sbin/getty -a root 115200 %I</code>
We can then run <code>reboot</code> and it should say we automatically logged in.</p>
<p>We now need to install the Adafruit BBIO library so that we can easily use interrupts on the beaglebone black. To do this we need internet and the easiest way is internet tethering through the usb cable. We can connect the beaglebone to our computer through a usb and run <code>ifconfig</code>. We should see the beaglebone pop up as an ethernet (mine was eth7). We can then setup our internet route <code>sudo iptables --table nat --append POSTROUTING --out-interface eth0 -j MASQUERADE</code>. We replace eth0 with our ethernet interface (not the beaglebone one). We can setup forwarding on iptables <code>sudo iptables --append FORWARD --in-interface eth7 -j ACCEPT</code>. We replace eth7 with the beaglebone ethernet numeration. Then we can turn on ip forwarding by writing a <code>1</code> to <code>/proc/sys/net/ipv4/ip_forward</code> in sudo. Then just to be sure we can run <code>sudo iptables -A POSTROUTING -t nat -j MASQUERADE</code>.</p>
<p>On the beaglebone black, we can run <code>route add default gw 192.168.7.1</code> and add <code>nameserver 8.8.8.8</code> as a newline to <code>/etc/resolve.conf</code>. We can then test by <code>ping google.com</code>. We should receive packets.</p>
<p>Now we can install the Adafruit BBIO library by running <code>/usr/bin/ntpdate -b -s -u pool.ntp.org</code>. If no errors, then we can install the Adafruit BBIO with <code>opkg update &amp;&amp; opkg install python-pip python-setuptools python-smbus</code>. Once that clears, we can run <code>pip install Adafruit_BBIO</code>. If there are no errors then the install should be working fine.</p>
<p>We can now setup the startup script to run our python file everytime we startup using a crontab. First we can clone the repository on the beaglebone <code>git clone https://github.com/muniza/kinematic_lute</code>. Then we can cd to the kinematic_lute directory and run <code>crontab -e</code>. We can then add the lines <code>@reboot python /home/root/kinematic_lute/launcher.py &amp;</code>. We can now reset the beaglebone and it should run the script automatically.</p>
<p>Lastly we need to setup mixing by copying the file <code>/home/root/kinematic_lute/.asoundrc</code> to <code>/home/root/.asoundrc</code>. This sets up sound to be mixed using the native alsa mixer plugin on the usb audio codec.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#problems-and-solutions" id="user-content-problems-and-solutions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Problems and Solutions</h2>
<p>The automatic gain control on the TPA2017D2 amplifier requires some "warm-up" time before it can reach the peak volume. It is recommended to play a few sounds before the performance.</p>
<p>Although we had a charging port for the base station, it was covered up by paint so could not be used. It is recommened to have a charging port as the base station draws about 1.3 Amps when all the lights are on so can readily drain batteries.</p>
<p>The remote is set to only send one packet for every button pressed. If the packet misses due to a noisy area or being out of range, then the lights and sound will not activate. During the show this caused many problems because the actor would press the button a number of times but the base station never received anything due to the large amount of noise in the room. A way to fix this is to set a flag for acknowledgement of a button press. This requires us to set the link as full duplex instead of simplex so that if a packet misses, the remote will continue to send the same data until the base station receives it and sends back an acknowledgment.</p>

        </div>

    </div>]