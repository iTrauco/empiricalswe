[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#usage" id="user-content-usage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Usage</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#importing-the-correct-class" id="user-content-importing-the-correct-class"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Importing the correct class</h2>
<p>In <code>ensemblrest</code> library there are two interfaces for interact with <a href="http://rest.ensembl.org/" rel="nofollow">ensembl</a> and <a href="http://rest.ensemblgenomes.org/" rel="nofollow">ensemblgenome</a>
rest API; The two methods works similarly, the only difference is that in <a href="http://ensemblgenomes.org/" rel="nofollow">ensemblgenomes</a> we can search for
genomes not included in <a href="http://www.ensembl.org/index.html" rel="nofollow">ensembl</a> core database, like <em>plants</em> or <em>bacteria</em>. So if you are interested in a specie
included in the <a href="http://www.ensembl.org/index.html" rel="nofollow">ensembl</a> core database, like <em>human</em> for example, you have to deal with <code>EnsemblRest</code> class:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">from</span> ensemblrest <span class="pl-k">import</span> EnsemblRest
ensRest <span class="pl-k">=</span> EnsemblRest()</pre></div>
<p>If yo need to work with a specie not included in ensembl core database, you have to deal
with <code>EnsemblGenomeRest</code> class</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">from</span> ensemblrest <span class="pl-k">import</span> EnsemblGenomeRest
ensGenomeRest <span class="pl-k">=</span> EnsemblGenomeRest()</pre></div>
<p>The two class are very similar. <code>EnsemblGenomeRest</code> implements some few methods specific
for the <a href="http://ensemblgenomes.org/" rel="nofollow">ensemblgenomes</a> rest API.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#search-for-go-terms" id="user-content-search-for-go-terms"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Search for GO terms</h2>
<p>Suppose you need to get the GO annotation for a known ensembl gene. Those type of annotations
are external to ensembl annotation pipeline, and so they are parts of <strong>Cross References</strong> endpoints.
Take a look at the <a href="http://rest.ensemblgenomes.org/documentation/info/xref_id" rel="nofollow">GET xrefs/id/:id</a> endpoint and its parameters: it needs
the <em>EnsEMBL stable id</em> as required parameters; other parameters are optional but could
be specified as described by this endpoint. The <code>ensemblrest</code> methods are named with
<code>get</code>, the name of the endpoints, the word <code>By</code> and the required parameter, so to get xref by id,
I need to search for <code>getXrefById</code> method (the first element of each word after get is in capital
letter). Methods with <code>Multiple</code> words inside name, act as the others but implement <code>POST</code> requests,
and could search for multiple values at the same time. By inspecting the <a href="http://rest.ensemblgenomes.org/documentation/info/xref_id" rel="nofollow">GET xrefs/id/:id</a>
endpoint, you can find such description for the <code>all_levels</code> parameter:</p>
<blockquote>
<p>Set to find all genetic features linked to the stable ID, and fetch all external references for them.
Specifying this on a gene will also return values from its transcripts and translations</p>
</blockquote>
<p>And this information can be useful. So, if I need to get all Xref annotations for a
gene, I could do like this:</p>
<div class="highlight highlight-source-python"><pre>xrefs <span class="pl-k">=</span> ensGenomeRest.getXrefsById(<span class="pl-v">id</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>OS11G0485200<span class="pl-pds">'</span></span>, <span class="pl-v">all_levels</span><span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<p>In such example, I used an <code>EnsemblGenomeRest</code> object since <code>OS11G0485200</code>
is a <em>O. Sativa</em> stable gene ID; If you need to search for a <em>Human</em> stable id you can use
an <code>EnsemblRest</code> instance. Parameters are specified as <code>key=value</code>, where keys have the
same names of parameters specified by the ensembl endpoints, and values need to have
the same values of types described by ensembl endpont. In the example above, <code>xrefs</code>
is a list of dictionaries in which all external annotation defined for <code>OS11G0485200</code>
are reported. To restrict annotation on only GO terms, I could filter using the <code>external_db</code>
parameter:</p>
<div class="highlight highlight-source-python"><pre>xrefs <span class="pl-k">=</span> ensGenomeRest.getXrefsById(<span class="pl-v">id</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>OS11G0485200<span class="pl-pds">'</span></span>, <span class="pl-v">all_levels</span><span class="pl-k">=</span><span class="pl-c1">1</span>, <span class="pl-v">external_db</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>GO<span class="pl-pds">'</span></span>)</pre></div>
<p>The description of each GO annotation could be incomplete. So, you may want to use
the <strong>Ontologies and Taxonomy</strong> endpoints to integrate your annotation, for example the
<a href="http://rest.ensemblgenomes.org/documentation/info/ontology_id" rel="nofollow">GET ontology/id/:id</a> method can do the work. The proper <code>ensemblrest</code>
method is called <code>getOntologyById</code>. If I am not interested, I could filter out children
and parents by setting the <code>simple=1</code> parameter. In the following example, I will use
the first result found by <code>getXrefsById</code>:</p>
<div class="highlight highlight-source-python"><pre>xref <span class="pl-k">=</span> xrefs[<span class="pl-c1">0</span>]
<span class="pl-c1">print</span>(xref)
<span class="pl-c"><span class="pl-c">#</span> {u'display_id': u'GO:0000166', u'description': u'nucleotide binding', u'db_display_name': u'GO', u'info_text': u'Generated via main', u'linkage_types': [u'IEA'], u'info_type': u'DEPENDENT', u'primary_id': u'GO:0000166', u'synonyms': [], u'version': u'0', u'dbname': u'GO'}</span>
ontology <span class="pl-k">=</span> ensGenomeRest.getOntologyById(<span class="pl-v">id</span><span class="pl-k">=</span>xref[<span class="pl-s"><span class="pl-pds">'</span>display_id<span class="pl-pds">'</span></span>], <span class="pl-v">simple</span><span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">print</span>(ontologies)
<span class="pl-c"><span class="pl-c">#</span>{u'definition': u'"Interacting selectively and non-covalently with a nucleotide, any compound consisting of a nucleoside that is esterified with (ortho)phosphate or an oligophosphate at any hydroxyl group on the ribose or deoxyribose." [GOC:mah, ISBN:0198547684]', u'name': u'nucleotide binding', u'subsets': [u'goslim_chembl', u'goslim_metagenomics', u'goslim_pir', u'goslim_plant', u'gosubset_prok'], u'namespace': u'molecular_function', u'accession': u'GO:0000166', u'synonyms': [], u'ontology': u'GO'}</span></pre></div>


        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>pyEnsemblRest - A wrapper for the EnsEMBL REST API</p>
<p>Copyright (C) 2013-2016, Steve Moss</p>
<p>pyEnsemblRest is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>pyEnsemblRest is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with pyEnsemblRest.  If not, see <a href="http://www.gnu.org/licenses/" rel="nofollow">http://www.gnu.org/licenses/</a>.</p>

          </div>
        </div>
    </div>]