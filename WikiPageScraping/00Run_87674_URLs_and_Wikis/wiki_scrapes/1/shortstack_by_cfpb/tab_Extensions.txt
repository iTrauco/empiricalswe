[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#shortstack-extensions" id="user-content-shortstack-extensions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Shortstack Extensions</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#shortstackextendcontext" id="user-content-shortstackextendcontext"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>shortstack.extendcontext</h2>
<p>This is the work-horse of the extension system. <code>extendcontext</code> provides the mechanism for adding new objects to the template context, on a global basis, or in response to particular URL patterns.</p>
<p>If you're used to traditional frameworks, this may seem weird: these functions <em>aren't</em> taking ownership of the response(in general) the way a Django view does, but just being given the opportunity to contribute to it. There could be multiple functions (across many extensions) that are extending a given URL.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">from</span> shortstack <span class="pl-k">import</span> extendcontext

<span class="pl-c"><span class="pl-c">#</span> add an object to the template context, regardless of URL:</span>
<span class="pl-en">@extendcontext</span>
<span class="pl-k">def</span> <span class="pl-en">some_function_name</span>():
   <span class="pl-c1">...</span>
   <span class="pl-k">return</span> {<span class="pl-s"><span class="pl-pds">'</span>newcontextvar<span class="pl-pds">'</span></span>:<span class="pl-c1">42</span>}

<span class="pl-c"><span class="pl-c">#</span> or, to specific URL patterns:</span>
<span class="pl-en">@extendcontext</span>(<span class="pl-s"><span class="pl-pds">'</span>/agents/&lt;organization&gt;/&lt;name&gt;/<span class="pl-pds">'</span></span>)
<span class="pl-k">def</span> <span class="pl-en">some_function_name</span>(<span class="pl-smi">organization</span>, <span class="pl-smi">name</span>):
    <span class="pl-c1">...</span>
    <span class="pl-k">return</span> {<span class="pl-s"><span class="pl-pds">'</span>agent<span class="pl-pds">'</span></span>: agent}, <span class="pl-s"><span class="pl-pds">'</span>_layouts/<span class="pl-c1">%s</span>_agent.html<span class="pl-pds">'</span></span> <span class="pl-k">%</span> organization

<span class="pl-c"><span class="pl-c">#</span>or, a filename pattern (using Python's fnmatch syntax)</span>
<span class="pl-en">@extendcontext</span>(<span class="pl-v">fnmatch</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>*.html<span class="pl-pds">"</span></span>)
<span class="pl-k">def</span> <span class="pl-en">some_function</span>():
    <span class="pl-c1">...</span>
    <span class="pl-k">return</span> {<span class="pl-s"><span class="pl-pds">'</span>title<span class="pl-pds">'</span></span>: doc_title, <span class="pl-s"><span class="pl-pds">'</span>body<span class="pl-pds">'</span></span>: markdown(<span class="pl-v">file</span>.read())}, <span class="pl-s"><span class="pl-pds">'</span>_layouts/page.html<span class="pl-pds">'</span></span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#extendcontext-return-values" id="user-content-extendcontext-return-values"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>extendcontext return values</h3>
<p>We'll accept the following return values:</p>
<ul>
<li>a dictionary (the contents of which are incorporated into the template context)</li>
<li>A tuple, containing the dictionary and a string template path</li>
<li>A tuple, containing the dictionary and an iterable that provides zero or more template paths</li>
<li>An object of class (or a subclass of) [Werkzeug's response object], like any valid Flask response (<a href="http://werkzeug.pocoo.org/docs/0.9/wrappers/#werkzeug.wrappers.Response" rel="nofollow">http://werkzeug.pocoo.org/docs/0.9/wrappers/#werkzeug.wrappers.Response</a>)</li>
</ul>
<p>That last option will short-circuit all further processing: the response object you return is what will be sent to the user.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#shortstackurl_generator" id="user-content-shortstackurl_generator"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>shortstack.url_generator</h2>
<p>If your extension exposes new URL's to a site, the static site generator (<code>shorts build</code>) won't know about them. Use this decorator to register a generator to provide those URL's.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">from</span> shortstack <span class="pl-k">import</span> url_generator

<span class="pl-en">@url_generator</span>
<span class="pl-k">def</span> <span class="pl-en">blog_urls</span>():
    <span class="pl-k">for</span> post <span class="pl-k">in</span> Post.published.all():
        <span class="pl-k">yield</span> post.url()</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#shortstackadd_flask_blueprints" id="user-content-shortstackadd_flask_blueprints"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>shortstack.add_flask_blueprints</h2>
<p>Behind the scenes, Shortstack is powered by Flask. With this decorator, you can register a function that injects any <a href="http://flask.pocoo.org/docs/0.10/blueprints/" rel="nofollow">Flask blueprint</a> into your site.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">from</span> shortstack <span class="pl-k">import</span> add_flask_blueprints

<span class="pl-en">@add_flask_blueprints</span>
<span class="pl-k">def</span> <span class="pl-en">my_blueprints</span>():
   <span class="pl-c1">...</span>
   blueprints<span class="pl-k">=</span> {
    <span class="pl-s"><span class="pl-pds">"</span>flask_govdelivery<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>flask_govdelivery.govdelivery.controllers<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>module<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>govdelivery<span class="pl-pds">"</span></span>
    },
    <span class="pl-s"><span class="pl-pds">"</span>flask_pdfreactor<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>flask_pdfreactor.controllers<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>module<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>reactorapp<span class="pl-pds">"</span></span>
    }
    }
    <span class="pl-k">return</span> blueprints</pre></div>
<p>There's nothing stopping you from building a <code>url_generator</code> for your blueprints, either!</p>

        </div>

    </div>]