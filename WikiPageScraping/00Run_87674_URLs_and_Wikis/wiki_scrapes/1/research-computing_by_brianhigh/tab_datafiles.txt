[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <div>
<h2 id="user-content-data-files">
<a aria-hidden="true" class="anchor" href="#data-files" id="user-content-data-files"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Data Files</h2>
<div>
<div>
<h3 id="user-content-learning-objectives">
<a aria-hidden="true" class="anchor" href="#learning-objectives" id="user-content-learning-objectives"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Learning Objectives</h3>
<div>
<p>This module will help you:</p>
</div>
<div>
<ul>
<li>
<p>Understand the difference between various file types.</p>
</li>
<li>
<p>Learn how to name files to facilitate opening in suitable software.</p>
</li>
<li>
<p>Understand common character encoding standards and how to work with them.</p>
</li>
<li>
<p>Learn how to characterize a document’s structure to identify processing strategies.</p>
</li>
<li>
<p>Become familiar with common data file formats and their advantages and disadvantages.</p>
</li>
<li>
<p>Understand the importance of good table layout and how to achieve it.</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="user-content-data-file-types-binary-vs-plain-text">
<a aria-hidden="true" class="anchor" href="#data-file-types-binary-vs-plain-text" id="user-content-data-file-types-binary-vs-plain-text"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Data File Types: Binary vs. Plain Text</h3>
<div>
<p>There are essentially two main categories of digital file types,
<em>binary</em> and <em>plain text</em>.</p>
</div>
<div>
<p>If a file is binary, the file just contains "zeros and ones". While this
is technically true of <em>any</em> digital file stored within a binary
computer system, the contents of a binary file will not necessarily
conform to any <em>standard</em>
<a href="http://en.wikipedia.org/wiki/Character_encoding" rel="nofollow">character encoding</a>
system. The binary format may be highly efficient for storage or
processing, but is essentially <em>opaque</em>, in that by simply looking at a
binary file’s contents, you can’t really know what the format is or how
to read it.<sup>[<a href="#_footnote_1" id="user-content-_footnoteref_1" title="View footnote.">1</a>]</sup> Examples of binary files are database files,
most multimedia files, and compressed files (such as <code>zip</code> files).</p>
</div>
<div>
<p>Plain text files, on the other hand, are composed of <em>characters</em>.
Typically they are <a href="http://en.wikipedia.org/wiki/ASCII" rel="nofollow">ASCII</a> or
<a href="http://en.wikipedia.org/wiki/Unicode" rel="nofollow">Unicode</a> characters represented by
one or more bytes, where a byte is (generally) 8 bits. A bit can be
considered either <em>zero</em> (off) or <em>one</em> (on). Plain text file
formats are usually open and standard. Examples are web pages
(<a href="http://en.wikipedia.org/wiki/HTML" rel="nofollow">HTML</a>),
<a href="http://en.wikipedia.org/wiki/XML" rel="nofollow">XML</a>, and
<a href="http://en.wikipedia.org/wiki/Comma-separated_values" rel="nofollow">CSV</a> (comma
separated value) data files.</p>
</div>
</div>
<div>
<h3 id="user-content-file-name-extensions">
<a aria-hidden="true" class="anchor" href="#file-name-extensions" id="user-content-file-name-extensions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>File Name Extensions</h3>
<div>
<p>Filenames generally have an
<a href="http://en.wikipedia.org/wiki/Filename_extension" rel="nofollow">extension</a>, which is the
part at the end ("suffix") of the filename, consisting of the last dot
(.) and the characters that follow it.<sup>[<a href="#_footnote_2" id="user-content-_footnoteref_2" title="View footnote.">2</a>]</sup></p>
</div>
<div>
<p>Examples of binary filename extensions for images are <code>.png</code> and
<code>.jpeg</code>. To launch "executable" programs on Windows systems you will
often launch an <code>.exe</code> file. The <code>.dmg</code> ("disk image") filename
extension is used on OS X. Common extensions for binary data files are
<code>.xls</code> and <code>.sas7bdat</code>.</p>
</div>
<div>
<p>Plain text file formats for data files include <code>.csv</code>, <code>.tsv</code>, <code>.txt</code>,
<code>.xml</code>, and <code>.json</code>, among others. Program source code is usually stored
in plain text files, with extensions such as <code>.R</code>, <code>.py</code>, <code>.pl</code>, <code>.c</code>,
<code>.sh</code>, <code>.bat</code>, and <code>.do</code>.</p>
</div>
<div>
<p>The extension is used to determine which "default application" should
open it. Within the operating system, the extention is mapped to default
applications. Mappings such as these are called
<a href="http://en.wikipedia.org/wiki/File_association" rel="nofollow">file type
associations</a>.<sup>[<a href="#_footnote_3" id="user-content-_footnoteref_3" title="View footnote.">3</a>]</sup></p>
</div>
</div>
<div>
<h3 id="user-content-viewing-binary-and-plain-text-files">
<a aria-hidden="true" class="anchor" href="#viewing-binary-and-plain-text-files" id="user-content-viewing-binary-and-plain-text-files"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Viewing Binary and Plain Text Files</h3>
<div>
<p>When viewing the <em>raw</em> contents of files, whether they are
binary or text files, we will often make use of a <em>hexidecimal dump</em>.</p>
</div>
<div>
<p><a href="http://en.wikipedia.org/wiki/Hexadecimal" rel="nofollow">Hexdecimal</a> is a base-16 number
system with digits 0-F:</p>
</div>
<div>
<div>
<pre>0 1 2 3 4 5 6 7 8 9 A B C D E F</pre>
</div>
</div>
<div>
<p>Whereas binary has two possibilities, 0 and 1, hexadecimal has 16,
including the ten decimal digits plus the letters A-F.</p>
</div>
<div>
<p>Let’s "dump" files in "hex" with
<a href="http://en.wikipedia.org/wiki/Hex_dump" rel="nofollow">hexdump</a>…</p>
</div>
<div>
<div>
<pre>$ hexdump -C -n 64 filename</pre>
</div>
</div>
<div>
<p>Where the options we are using is this example are:</p>
</div>
<div>
<ul>
<li>
<p><code>-C</code> = display in hex and ASCII</p>
</li>
<li>
<p><code>-n 64</code> = show the first 64 characters</p>
</li>
<li>
<p><code>filename</code> = name of file to view</p>
</li>
</ul>
</div>
<div>
<p>In this example, we will view the first 64 bytes of an
<a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics" rel="nofollow">SVG</a> image file.
The file format stores information about the image in text, even though
the file is displayed as a graphical image. Our filename is <code>pie.svg</code>.<sup>[<a href="#_footnote_4" id="user-content-_footnoteref_4" title="View footnote.">4</a>]</sup></p>
</div>
<div>
<div>
<pre>$ hexdump -C -n 64 pie.svg</pre>
</div>
</div>
<div>
<div>
<pre>00000000  3c 3f 78 6d 6c 20 76 65  72 73 69 6f 6e 3d 22 31  |&lt;?xml version="1|
00000010  2e 30 22 20 65 6e 63 6f  64 69 6e 67 3d 22 75 74  |.0" encoding="ut|
00000020  66 2d 38 22 3f 3e 0a 3c  21 44 4f 43 54 59 50 45  |f-8"?&gt;.&lt;!DOCTYPE|
00000030  20 73 76 67 20 50 55 42  4c 49 43 20 22 2d 2f 2f  | svg PUBLIC "-//|
00000040</pre>
</div>
</div>
<div>
<p>We see a column of numbers on the left which show the character numbers
in hexadecimal. Each line shows the hexadecimal number for each of 16
characters, in the center of the output, and on the right is the text
equivalent (in "ASCII") of those character numbers.</p>
</div>
<div>
<p>We can see that this is an "XML" document with a version number, and the
character encoding is shown as "UTF-8". The document type ("DOCTYPE") is
"svg". All of this is contained in XML tags, similar in structure to
HTML (the language of most web pages). The hexadecimal numbers correlate
to the ASCII characters because the first 128 characters of the UTF-8
encoding scheme are the same as the ASCII character set. (We go into more
detail on this matter later in this module.)</p>
</div>
<div>
<p>Even if the file was not a text file, and the ASCII printout looked like
random characters, we would still be able to look at the hexadecimal
dump to learn about the file.</p>
</div>
<div>
<p>For example, here is the
<a href="http://en.wikipedia.org/wiki/Portable_Network_Graphics" rel="nofollow">PNG</a> (binary)
version of that same image. We will use the same syntax with hexdump,
but look inside the <code>pie.png</code> file.</p>
</div>
<div>
<div>
<pre>$ hexdump -C -n 64 pie.png</pre>
</div>
</div>
<div>
<div>
<pre>00000000  89 50 4e 47 0d 0a 1a 0a  00 00 00 0d 49 48 44 52  |.PNG........IHDR|
00000010  00 00 01 2c 00 00 02 26  10 04 00 00 00 13 97 a3  |...,...&amp;........|
00000020  46 00 00 00 04 67 41 4d  41 00 00 b1 8f 0b fc 61  |F....gAMA......a|
00000030  05 00 00 00 20 63 48 52  4d 00 00 7a 26 00 00 80  |.... cHRM..z&amp;...|
00000040</pre>
</div>
</div>
<div>
<p>We have the same format of output. On the right, we see that the file is
identified<sup>[<a href="#_footnote_5" id="user-content-_footnoteref_5" title="View footnote.">5</a>]</sup> as a PNG file, as shown in the first few ASCII
characters, but all other ASCII characters appear random (meaningless).
Dots are shown for "non-printing" characters. Since the file is binary,
and not encoded as characters, the ASCII which has been interpreted by
<code>hexdump</code> is not very useful for learning anything more about the image.
(As the file is not ASCII encoded, the ASCII interpretation is invalid.)
We will just have to open the image in a graphics viewer to see what it
is. Although both image files would display the same, you can see that
there is a big difference between the contents of plain text and binary
file formats.</p>
</div>
</div>
<div>
<h3 id="user-content-character-encodings">
<a aria-hidden="true" class="anchor" href="#character-encodings" id="user-content-character-encodings"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Character Encodings</h3>
<div>
<p>We will now take a closer look at the most popular character encoding
standards for text files: ASCII, Extended ASCII, and Unicode.</p>
</div>
<div>
<p>ASCII was the primary standard text file encoding for many years. ASCII
was then extended to include more characters, giving us "Extended
ASCII". Lately, in the last couple of decades, Unicode has become
dominant because it allows for thousands of characters (because it uses
more bytes). Whereas ASCII was originally a seven bit encoding system,
Extended ASCII just adds one more bit (to make a complete eight bit
"byte"), and Uncode uses up to four bytes.</p>
</div>
<div>
<h4 id="user-content-ascii">
<a aria-hidden="true" class="anchor" href="#ascii" id="user-content-ascii"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>ASCII</h4>
<div>
<p>The <a href="http://en.wikipedia.org/wiki/ASCII" rel="nofollow">ASCII</a> ("American Standard Code for
Information Interchange"<sup>[<a href="#_footnote_6" id="user-content-_footnoteref_6" title="View footnote.">6</a>]</sup>) standard was published a long time ago in 1963 and the current
version is from 1986
(<a href="http://en.wikipedia.org/wiki/American_National_Standards_Institute" rel="nofollow">ANSI</a>
X3.4-1986). It was internationalized in 1983
(<a href="http://en.wikipedia.org/wiki/ISO/IEC_646" rel="nofollow">ISO 646:1983</a>). ASCII originally used
a seven-bit character set, so there were 128 characters (which is two to the
seventh power).</p>
</div>
</div>
<div>
<h4 id="user-content-ascii-table">
<a aria-hidden="true" class="anchor" href="#ascii-table" id="user-content-ascii-table"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>ASCII Table</h4>
<div>
<p>Often we will refer to an ASCII table. There is a command that you can
use to generate one. The <code>ascii</code> command prints all 128 ASCII
characters.</p>
</div>
<div>
<div>
<pre>$ ascii</pre>
</div>
</div>
<div>
<div>
<pre>Usage: ascii [-dxohv] [-t] [char-alias...]
   -t = one-line output  -d = Decimal table  -o = octal table  -x = hex table
   -h = This help screen -v = version information
Prints all aliases of an ASCII character. Args may be chars, C \-escapes,
English names, ^-escapes, ASCII mnemonics, or numerics in decimal/octal/hex.

Dec Hex    Dec Hex    Dec Hex  Dec Hex  Dec Hex  Dec Hex   Dec Hex   Dec Hex
  0 00 NUL  16 10 DLE  32 20    48 30 0  64 40 @  80 50 P   96 60 `  112 70 p
  1 01 SOH  17 11 DC1  33 21 !  49 31 1  65 41 A  81 51 Q   97 61 a  113 71 q
  2 02 STX  18 12 DC2  34 22 "  50 32 2  66 42 B  82 52 R   98 62 b  114 72 r
  3 03 ETX  19 13 DC3  35 23 #  51 33 3  67 43 C  83 53 S   99 63 c  115 73 s
  4 04 EOT  20 14 DC4  36 24 $  52 34 4  68 44 D  84 54 T  100 64 d  116 74 t
  5 05 ENQ  21 15 NAK  37 25 %  53 35 5  69 45 E  85 55 U  101 65 e  117 75 u
  6 06 ACK  22 16 SYN  38 26 &amp;  54 36 6  70 46 F  86 56 V  102 66 f  118 76 v
  7 07 BEL  23 17 ETB  39 27 '  55 37 7  71 47 G  87 57 W  103 67 g  119 77 w
  8 08 BS   24 18 CAN  40 28 (  56 38 8  72 48 H  88 58 X  104 68 h  120 78 x
  9 09 HT   25 19 EM   41 29 )  57 39 9  73 49 I  89 59 Y  105 69 i  121 79 y
 10 0A LF   26 1A SUB  42 2A *  58 3A :  74 4A J  90 5A Z  106 6A j  122 7A z
 11 0B VT   27 1B ESC  43 2B +  59 3B ;  75 4B K  91 5B [  107 6B k  123 7B {
 12 0C FF   28 1C FS   44 2C ,  60 3C &lt;  76 4C L  92 5C \  108 6C l  124 7C |
 13 0D CR   29 1D GS   45 2D -  61 3D =  77 4D M  93 5D ]  109 6D m  125 7D }
 14 0E SO   30 1E RS   46 2E .  62 3E &gt;  78 4E N  94 5E ^  110 6E n  126 7E ~
 15 0F SI   31 1F US   47 2F /  63 3F ?  79 4F O  95 5F _  111 6F o  127 7F DEL</pre>
</div>
</div>
<div>
<p>You will see that there is a header showing the command usage followed
by an ASCII table listing. The listing is arranged in 8 sets of columns,
with each set showing the decimal (Dec) and hexadecimal (Hex) value for
each character. Starting from zero (0), the first 32 characters (and the
128th) are the so-called "non-printing" characters, so those are shown
with 2-3 letter codes describing the character. The 33rd character is
the "Space" so nothing is shown. All other characters are symbols which
appear on the standard <a href="http://en.wikipedia.org/wiki/Keyboard_layout" rel="nofollow">US
keyboard</a>. The punctuation characters and decimal digits are followed by
capital letters, more punctuation, lower-case letters, more punctuation,
and finally ending with "DEL" (Delete), the 128th character (numbered
127, or 7F in hexadecimal). To have more characters, we would need more
bits in our encoding standard, which we will look into next.</p>
</div>
</div>
<div>
<h4 id="user-content-extended-ascii">
<a aria-hidden="true" class="anchor" href="#extended-ascii" id="user-content-extended-ascii"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Extended ASCII</h4>
<div>
<p>Extended ASCII, first published as the
<a href="http://en.wikipedia.org/wiki/ISO/IEC_8859-1" rel="nofollow">ISO-8859-1</a> ("ISO Latin 1") standard
in 1987, adds another bit to ASCII, allowing for 191 characters, adding several rows of new characters to the end of the table.</p>
</div>
<div>
<div>
<a href="http://czyborra.com/charsets/iso8859.html" rel="nofollow"><img alt="ISO-8859-1" height="151" src="images/iso8859-1.gif" width="401"/></a>
</div>
<div>ISO-8859-1 (Latin1) - Image: Roman Czyborra</div>
</div>
<hr/>
<div>
<h5 id="user-content-windows-latin-1-windows-1252">
<a aria-hidden="true" class="anchor" href="#windows-latin-1-windows-1252" id="user-content-windows-latin-1-windows-1252"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Windows Latin 1 (Windows-1252)</h5>
<div>
<p>Extended ASCII (ISO-8859-1) was extended even further to
<a href="http://en.wikipedia.org/wiki/Windows-1252" rel="nofollow">Windows-1252</a>, sometimes (incorrectly)
called "ANSI"<sup>[<a href="#_footnote_7" id="user-content-_footnoteref_7" title="View footnote.">7</a>]</sup></p>
</div>
<div>
<p>Here is a listing of the Windows-1252 character set. You will see that there are
extra characters at the top of this table that we did not have in the Extended ASCII ("ISO Latin 1") character set, beginning with the the relatively new euro sign (€).</p>
</div>
<div>
<div>
<a href="http://czyborra.com/charsets/codepages.html" rel="nofollow"><img alt="Windows-1252" height="150" src="images/cp1252.gif" width="300"/></a>
</div>
<div>Windows-1252 (WinLatin1) - Image: Roman Czyborra</div>
</div>
<hr/>
</div>
</div>
<div>
<h4 id="user-content-why-character-encoding-matters">
<a aria-hidden="true" class="anchor" href="#why-character-encoding-matters" id="user-content-why-character-encoding-matters"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Why Character Encoding Matters</h4>
<div>
<div>
<a href="https://github.com/brianhigh/research-computing"><img alt="Mojibake example: garbled Smart Quotes in email reply" height="47" src="images/mojibake_in_email.png" width="235"/></a>
</div>
<div>Mojibake example: garbled Smart Quotes in email reply</div>
</div>
<hr/>
<div>
<p>If a file is created using one character encoding, but is viewed using
another, the characters are likely to display incorrectly.<sup>[<a href="#_footnote_8" id="user-content-_footnoteref_8" title="View footnote.">8</a>]</sup> The resulting
garbled text is sometimes called <a href="http://en.wikipedia.org/wiki/Mojibake" rel="nofollow">mojibake</a>.</p>
</div>
<div>
<div>
<a href="https://github.com/brianhigh/research-computing"><img alt="Mojibake: example in MS-Word" height="260" src="images/mojibake_sm.png" width="400"/></a>
</div>
<div>Mojibake example: in MS-Word</div>
</div>
<hr/>
<div>
<p>We can see how differences in character encodings can matter with a few
simple examples. Let’s first generate a table of characters with Python.</p>
</div>
<div>
<div>Example 1. Printing the Windows-1252 character set with Python</div>
<div>
<div>
<p>The following Python script will show the printable characters of
the Windows-1252 character set when run on a Windows system using a
graphical Python interpreter such as <em>IDLE</em> or <em>PyScripter</em>.</p>
</div>
<div>
<div>
<a href="https://github.com/brianhigh/research-computing"><img alt="Windows-1252 Table Python Script" height="202" src="images/asciitable_output_windows-1252.png" width="460"/></a>
</div>
<div>Windows-1252 Table Python Script</div>
</div>
<hr/>
<div>
<p>Here is the full code listing for that Python script.</p>
</div>
<div>
<div>asciitable.py</div>
<div>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span> If run on a Windows system in a graphical environment such as</span>
<span class="pl-c"><span class="pl-c">#</span> IDLE's Python Shell, by default, this will print the Windows</span>
<span class="pl-c"><span class="pl-c">#</span> Latin 1 character set, a.k.a. Windows-1252 (WinLatin1).</span>

<span class="pl-k">import</span> sys

<span class="pl-c"><span class="pl-c">#</span> Print Extended ASCII table from character 32 to 256.</span>
<span class="pl-c"><span class="pl-c">#</span> (Skip non-printing characters numbered 1-31.)</span>
start <span class="pl-k">=</span> <span class="pl-c1">32</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">range</span>(start, <span class="pl-c1">256</span>):
    <span class="pl-c"><span class="pl-c">#</span> Replace each non-printing character with a space.</span>
    <span class="pl-k">if</span> i <span class="pl-k">not</span> <span class="pl-k">in</span> [<span class="pl-c1">129</span>, <span class="pl-c1">127</span>, <span class="pl-c1">141</span>, <span class="pl-c1">143</span>, <span class="pl-c1">144</span>, <span class="pl-c1">157</span>, <span class="pl-c1">160</span>]:
        sys.stdout.write(<span class="pl-c1">chr</span>(i))
    <span class="pl-k">else</span>:
        sys.stdout.write(<span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>)
    <span class="pl-c"><span class="pl-c">#</span> Print a newline every 16 characters.</span>
    <span class="pl-k">if</span> i <span class="pl-k">&gt;</span> start <span class="pl-k">and</span> (i <span class="pl-k">+</span> <span class="pl-c1">1</span>) <span class="pl-k">%</span> <span class="pl-c1">16</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>:
        <span class="pl-c1">print</span></pre></div>
</div>
</div>
</div>
</div>
<div>
<div>Example 2. Changing the Character Encoding within your application</div>
<div>
<div>
<p>We can see the characters properly in a non-Windows environment if we
specifically set the character encoding in the application.</p>
</div>
<div>
<div>
<a href="https://github.com/brianhigh/research-computing"><img alt="Changing Character Encoding in Mac OS X Terminal" height="262" src="images/mac-terminal-encoding_sm.png" width="400"/></a>
</div>
<div>Changing Character Encoding in Mac OS X Terminal</div>
</div>
<div>
<div>
<a href="https://github.com/brianhigh/research-computing"><img alt="Changing Character Encoding in Linux Terminal" height="339" src="images/asciitable_linux2.png" width="398"/></a>
</div>
<div>Changing Character Encoding in Linux Terminal</div>
</div>
<hr/>
<div>
<p>However, this is not the default setting. Without knowing the output was
encoded as Windows-1252, we might have thought our program had a bug.</p>
</div>
</div>
</div>
<div>
<p>So, how can we know the character encoding of "plain text" output? Let’s
save the output as a file and test the file for it’s character encoding.</p>
</div>
<div>
<div>Example 3. Saving the output to a file with redirection</div>
<div>
<div>
<p>To save program output as a file, we can use <em>file redirection</em>. We will
run the program on the Windows computer in a <em>DOS</em> shell and redirect
with the '&gt;' operator.<sup>[<a href="#_footnote_9" id="user-content-_footnoteref_9" title="View footnote.">9</a>]</sup></p>
</div>
<div>
<div>
<pre>C:\&gt; python asciitable.py &gt; asciitable.txt</pre>
</div>
</div>
</div>
</div>
<div>
<p>Redirection allows us to save to a file, but that file just contains the
numeric codes for the characters. There is nothing in the file stating
the actual character encoding format. We will have to guess, using the
<code>file</code> command.</p>
</div>
<div>
<div>Example 4. Testing the file type with <code>file</code>
</div>
<div>
<div>
<p>We can check the character encoding and other file properties using
the <code>file</code> command. This command is available on Unix, Linux, and OS X
systems. Here we will run the <code>file</code> command from a <em>Bash</em> shell.</p>
</div>
<div>
<div>
<pre>$ file asciitable.txt
asciitable.txt: Non-ISO extended-ASCII text, with CRLF, NEL line terminators</pre>
</div>
</div>
</div>
</div>
<div>
<p>While this tells us a little about the text format, we still don’t know
the specific encoding standard used.</p>
</div>
<div>
<p>As you can see, dealing with various character encodings on different
computing systems can be tricky.<sup>[<a href="#_footnote_10" id="user-content-_footnoteref_10" title="View footnote.">10</a>]</sup> Is there a universal character
encoding standard? Yes, <em>Unicode</em>! In the next section, we’ll see how
we can convert our file to Unicode.<sup>[<a href="#_footnote_11" id="user-content-_footnoteref_11" title="View footnote.">11</a>]</sup></p>
</div>
</div>
<div>
<h4 id="user-content-unicode">
<a aria-hidden="true" class="anchor" href="#unicode" id="user-content-unicode"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unicode</h4>
<div>
<p><a href="http://en.wikipedia.org/wiki/Unicode" rel="nofollow">Unicode</a> provides an
<a href="http://en.wikipedia.org/wiki/Internationalization_and_localization" rel="nofollow">internationalized</a> character encoding <strong>standard</strong>, to "encompass the characters of all the world’s living languages".<sup>[<a href="#_footnote_12" id="user-content-_footnoteref_12" title="View footnote.">12</a>]</sup></p>
</div>
<div>
<ul>
<li>
<p>Like ASCII, but supports over 110,000 characters</p>
</li>
<li>
<p>Unicode standard was published in 1991</p>
</li>
<li>
<p>Most commonly used <strong>encodings</strong> are UTF-8 and
UTF-16<sup>[<a href="#_footnote_13" id="user-content-_footnoteref_13" title="View footnote.">13</a>]</sup></p>
</li>
</ul>
</div>
<div>
<p>You can browse the Unicode <a href="http://www.unicode.org/charts/" rel="nofollow">code charts</a> to get an idea of the many character sets available.</p>
</div>
<div>
<h5 id="user-content-unicode-symbol-example-the-micro-sign">
<a aria-hidden="true" class="anchor" href="#unicode-symbol-example-the-micro-sign" id="user-content-unicode-symbol-example-the-micro-sign"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unicode Symbol Example: the Micro Sign</h5>
<div>
<div>Example 5. Encoding the Micro Sign</div>
<div>
<div>
<p>The character <em>µ</em>, with Unicode<sup>[<a href="#_footnote_14" id="user-content-_footnoteref_14" title="View footnote.">14</a>]</sup> <strong>name</strong> "MICRO SIGN" is encoded:</p>
</div>
<table>
<colgroup>
<col/>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th>Encodings</th>
<th>Decimal</th>
<th>Hex</th>
</tr>
</thead>
<tbody>
<tr>
<td><p>Unicode</p></td>
<td><p>181</p></td>
<td><p>U+00B5</p></td>
</tr>
<tr>
<td><p>Extended ASCII</p></td>
<td><p>181</p></td>
<td><p>B5</p></td>
</tr>
<tr>
<td><p>HTML <strong>numeric</strong> character reference</p></td>
<td><p>&amp;#181;</p></td>
<td><p>&amp;#xB5;</p></td>
</tr>
<tr>
<td><p>HTML <strong>named</strong> character entity</p></td>
<td colspan="2"><p>&amp;micro;</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<div>Example 6. Typing the Micro Sign</div>
<div>
<div>
<p>How do you type the <em>µ</em> character into your computer?</p>
</div>
<div>
<p>Use these character codes:</p>
</div>
<table>
<colgroup>
<col/>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th>Name</th>
<th>Decimal</th>
<th>Hex</th>
</tr>
</thead>
<tbody>
<tr>
<td><p>MICRO SIGN</p></td>
<td><p>181</p></td>
<td><p>00B5</p></td>
</tr>
</tbody>
</table>
<div>
<p>With these operating systems:<sup>[<a href="#_footnote_15" id="user-content-_footnoteref_15" title="View footnote.">15</a>]</sup></p>
</div>
<div>
<ul>
<li>
<p><strong>Windows</strong>: [Alt]<strong>decimal</strong> (using numeric keypad) … <em>or</em> … <strong>hex</strong>[Alt][x] (does not require numeric keypad)</p>
</li>
<li>
<p><strong>OS X</strong>: for µ, you can simply use [Opt][m] … <em>or</em> … [Command][Ctrl][Space] … Search by <strong>name</strong> … <em>or</em> … use <strong>Unicode Hex Input</strong> (Input Source) and <strong>hex</strong></p>
</li>
<li>
<p><strong>Linux</strong>: [Shift][Ctrl]<strong>hex</strong></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div>
<h5 id="user-content-some-other-useful-symbols">
<a aria-hidden="true" class="anchor" href="#some-other-useful-symbols" id="user-content-some-other-useful-symbols"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Some Other Useful Symbols</h5>
<table>
<caption>Table 1. HTML Entities for Common Math Symbol Characters</caption>
<colgroup>
<col/>
<col/>
<col/>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th>Character Name</th>
<th>Char.</th>
<th>Entity</th>
<th>Num. Entity</th>
<th>Hex. Entity</th>
</tr>
</thead>
<tbody>
<tr>
<td><p>DEGREE SYMBOL</p></td>
<td><p>°</p></td>
<td><p>&amp;deg;</p></td>
<td><p>&amp;#176;</p></td>
<td><p>&amp;#xB0;</p></td>
</tr>
<tr>
<td><p>MICRO MU SYMBOL</p></td>
<td><p>µ</p></td>
<td><p>&amp;micro;</p></td>
<td><p>&amp;#181;</p></td>
<td><p>&amp;#xB5;</p></td>
</tr>
<tr>
<td><p>LOWER CASE SIGMA</p></td>
<td><p>σ</p></td>
<td><p>&amp;sigma;</p></td>
<td><p>&amp;#963;</p></td>
<td><p>&amp;#x3C3;</p></td>
</tr>
<tr>
<td><p>N-ARY SUMMATION</p></td>
<td><p>∑</p></td>
<td><p>&amp;sum;</p></td>
<td><p>&amp;#8721;</p></td>
<td><p>&amp;#x2211;</p></td>
</tr>
<tr>
<td><p>GREEK SMALL LETTER PI</p></td>
<td><p>π</p></td>
<td><p>&amp;pi;</p></td>
<td><p>&amp;#960;</p></td>
<td><p>&amp;#x3C0;</p></td>
</tr>
<tr>
<td><p>GREEK SMALL LETTER ALPHA</p></td>
<td><p>α</p></td>
<td><p>&amp;alpha;</p></td>
<td><p>&amp;#945;</p></td>
<td><p>&amp;#x3B1;</p></td>
</tr>
<tr>
<td><p>GREEK SMALL LETTER BETA</p></td>
<td><p>β</p></td>
<td><p>&amp;beta;</p></td>
<td><p>&amp;#946;</p></td>
<td><p>&amp;#x3B2;</p></td>
</tr>
<tr>
<td><p>GREEK SMALL LETTER GAMMA</p></td>
<td><p>γ</p></td>
<td><p>&amp;gamma;</p></td>
<td><p>&amp;#947;</p></td>
<td><p>&amp;#x3B3;</p></td>
</tr>
<tr>
<td><p>INCREMENT</p></td>
<td><p>Δ</p></td>
<td><p>&amp;Delta;</p></td>
<td><p>&amp;#8710;</p></td>
<td><p>&amp;#x2206;</p></td>
</tr>
<tr>
<td><p>GREEK SMALL LETTER EPSILON</p></td>
<td><p>ε</p></td>
<td><p>&amp;epsilon;</p></td>
<td><p>&amp;#949;</p></td>
<td><p>&amp;#x3B5;</p></td>
</tr>
<tr>
<td><p>INFINITY</p></td>
<td><p>∞</p></td>
<td><p>&amp;infin;</p></td>
<td><p>&amp;#8734;</p></td>
<td><p>&amp;#x221E;</p></td>
</tr>
<tr>
<td><p>PLUS OR MINUS</p></td>
<td><p>±</p></td>
<td><p>&amp;plusmn;</p></td>
<td><p>&amp;#177;</p></td>
<td><p>&amp;#xB1;</p></td>
</tr>
<tr>
<td><p>NOT EQUALS</p></td>
<td><p>≠</p></td>
<td><p>&amp;ne;</p></td>
<td><p>&amp;#8800;</p></td>
<td><p>&amp;#x2260;</p></td>
</tr>
<tr>
<td><p>ALMOST EQUAL</p></td>
<td><p>≈</p></td>
<td><p>&amp;asymp;</p></td>
<td><p>&amp;#8776;</p></td>
<td><p>&amp;#x2248;</p></td>
</tr>
<tr>
<td><p>GREATER THAN OR EQUAL TO</p></td>
<td><p>≥</p></td>
<td><p>&amp;ge;</p></td>
<td><p>&amp;#8805;</p></td>
<td><p>&amp;#x2265;</p></td>
</tr>
<tr>
<td><p>LESS THAN OR EQUAL TO</p></td>
<td><p>≤</p></td>
<td><p>&amp;le;</p></td>
<td><p>&amp;#8804;</p></td>
<td><p>&amp;#x2264;</p></td>
</tr>
<tr>
<td><p>DIVISION SIGN</p></td>
<td><p>÷</p></td>
<td><p>&amp;divide;</p></td>
<td><p>&amp;#247;</p></td>
<td><p>&amp;#xF7;</p></td>
</tr>
<tr>
<td><p>SUPERSCRIPT TWO</p></td>
<td><p>²</p></td>
<td><p>&amp;sup2;</p></td>
<td><p>&amp;#178;</p></td>
<td><p>&amp;#xB2;</p></td>
</tr>
<tr>
<td><p>SUPERSCRIPT THREE</p></td>
<td><p>³</p></td>
<td><p>&amp;sup3;</p></td>
<td><p>&amp;#179;</p></td>
<td><p>&amp;#xB3;</p></td>
</tr>
</tbody>
</table>
<div>
<p>For example, in Windows, you can use the "Num. Entity" column for [Alt]
codes such as [Alt]946 for β (beta).</p>
</div>
</div>
</div>
<div>
<h4 id="user-content-utf-8-encoding-the-unicode-code-space">
<a aria-hidden="true" class="anchor" href="#utf-8-encoding-the-unicode-code-space" id="user-content-utf-8-encoding-the-unicode-code-space"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>UTF-8: Encoding the Unicode Code Space</h4>
<div>
<p>As Unicode is an encoding <em>system</em>, it depends on various character sets, such
as UTF-8 (and UTF-16) for practical use.</p>
</div>
<div>
<p><a href="http://en.wikipedia.org/wiki/UTF-8" rel="nofollow">UTF-8</a> (1993) is a variable-length 8-bit
character encoding, which means that it can use one to four 8-bit bytes to
represent each character. The first group of 128 characters in UTF-8 are the
original 128 ASCII characters. This means that software configured to use
Unicode will also be able to work with ASCII
(<a href="http://en.wikipedia.org/wiki/ISO/IEC_646" rel="nofollow">ISO 646:1983</a>) files.</p>
</div>
<div>
<p>The popularity of UTF-8 has increased since it was released. As of 2007, UTF-8
has became more dominant on the web than ASCII itself. UTF-8 is also the default
encoding for HTML5 and JSON.</p>
</div>
<div>
<blockquote>
<div>
<p>UTF-8 and UTF-16 are the standard encodings for Unicode text in HTML
documents, with UTF-8 as the preferred and most used encoding.<sup>[<a href="#_footnote_16" id="user-content-_footnoteref_16" title="View footnote.">16</a>]</sup></p>
</div>
</blockquote>
<div>
— Wikipedia<br/>
<cite>UTF-8</cite>
</div>
</div>
<div>
<h5 id="user-content-character-encoding-conversion-example">
<a aria-hidden="true" class="anchor" href="#character-encoding-conversion-example" id="user-content-character-encoding-conversion-example"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Character Encoding Conversion Example</h5>
<div>
<p>We can convert a file encoded as Windows-1252 into UTF-8 with <code>iconv</code>.<sup>[<a href="#_footnote_17" id="user-content-_footnoteref_17" title="View footnote.">17</a>]</sup></p>
</div>
<div>
<div>Example 7. Converting a Windows-1252 file into UTF-8</div>
<div>
<div>
<div>
<pre>$ iconv -f windows-1252 -t utf-8 asciitable.txt &gt; asciitable2.txt
$ file asciitable2.txt
asciitable2.txt: UTF-8 Unicode text</pre>
</div>
</div>
</div>
</div>
<div>
<p>As you can see, you can use <code>file</code> to verify that this is a Unicode file
encoded as UTF-8.</p>
</div>
<div>
<table>
<tbody><tr>
<td>
<div>Tip</div>
</td>
<td>
"Normalize" text datafiles to a common, universal encoding format
like UTF-8 to ensure characters are displayed with the intended symbols.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div>
<h3 id="user-content-data-structure">
<a aria-hidden="true" class="anchor" href="#data-structure" id="user-content-data-structure"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Data Structure</h3>
<div>
<ul>
<li>
<p><a href="http://en.wikipedia.org/wiki/Data_model" rel="nofollow">Structured</a>: Formal and
rigorous design</p>
<div>
<ul>
<li>
<p>Example: <a href="http://en.wikipedia.org/wiki/Relational_database" rel="nofollow">Relational
database</a></p>
</li>
</ul>
</div>
</li>
<li>
<p><a href="http://en.wikipedia.org/wiki/Semi-structured_data" rel="nofollow">Semi-structured</a>:
<a href="http://en.wikipedia.org/wiki/Self-documenting" rel="nofollow">Self-describing</a>,
validatable</p>
<div>
<ul>
<li>
<p><a href="http://en.wikipedia.org/wiki/Markup_language" rel="nofollow">Markup</a> using
<a href="http://en.wikipedia.org/wiki/HTML_element" rel="nofollow">tags</a> or
<a href="http://en.wikipedia.org/wiki/Attribute%E2%80%93value_pair" rel="nofollow">key-value
pairs</a></p>
</li>
<li>
<p>Examples: <a href="http://en.wikipedia.org/wiki/XML" rel="nofollow">XML</a> and
<a href="http://en.wikipedia.org/wiki/JSON" rel="nofollow">JSON</a></p>
</li>
</ul>
</div>
</li>
<li>
<p><a href="http://en.wikipedia.org/wiki/Unstructured_data" rel="nofollow">Unstructured</a>:</p>
<div>
<ul>
<li>
<p>Multimedia and text document files</p>
</li>
<li>
<p>Any internal structure, if present, is assumed or unreliable</p>
</li>
<li>
<p>Example: email "body" ("header" is semi-structured)</p>
</li>
<li>
<p>May have "implied" structure, like "delimited text"</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div>
<p>You can store data in structured, semi-structured, or unstructured
formats.</p>
</div>
<div>
<p>A structured data formal is a rigorous design like you would have in a
relational database. Semi-structed is self-describing and can be
automatically validated using software. It is validated through markup
or key-value pairs. Examples of semi-structured file formats are XML
and JSON. By having this self-describing format, programs can be run
which can validate the document and make sure that it’s in the proper
format. Unstructured documents include the majority of documents that
you might be using in typical office work, such as multimedia and text
document files.</p>
</div>
<div>
<p>You might say, "My documents <em>are</em> structured — with paragraphs,
sentences and words." The idea is that any type of internal structure
such as this is <em>assumed</em>. You might not have been consistent in using
your "format". Or maybe you and your office-mates do not agree exactly
on the "company standard" format’s details. Maybe you indent your
paragraphs, but your co-worker does not. Maybe you leave one space
between sentences or maybe you have two. Perhaps you made a "typo" by
having two periods at the end of a sentence instead of one. A person
would know this was just one sentence, but a program might see two. (A
normal sentence and one with no words, but just a period.)</p>
</div>
<div>
<p>There is really no viable way to validate these kinds of documents,
because there is no assurance that they conform to any specific and
sufficiently detailed standard, so they are simply called
"unstructured". They may be electronically parsed using heuristics and
"artificial intelligence", but not as reliably as is if they were
"self-describing" as to the <em>meaning</em> (symantics) of each part of the
document. A self-describing format like XML would allow you to embed
meta-data "tags" to indicate a person’s name as an "employee", a place
name as a "location", or a postal code as such and not just a series of
seemingly random digits.</p>
</div>
<div>
<p>Another example of unstructured text is the body of an email, where you
could type <em>any</em> text content into the body that you wanted. The email
header, however, is semi-structured because an email header <em>does</em>
consist of key-value pairs, much like a JSON document. So the email,
taken is as a whole, is semi-structured, but the email body is
unstructured.</p>
</div>
<div>
<p>A controversial example might be a comma-separated-value (CSV) file.
There are delimiters (commas) separating the fields and there is a
header line at the top "describing" the values in each column, (much
like key-value pairs). So, since this seems sort of like a database
table (structured) or at least similar to a JSON file (semi-structured)
you might <em>not</em> think it is <em>unstructured</em>. But the structure is <em>implied</em>,
not <em>explicit</em>. The document does not tell you that it is in any
particular format. You are <em>assuming</em> this format based on the filename
suffix (extension) of .csv, the prevalence of a lot of commas, or the
assurance of the person who gave you the file. It might just contain a
list of items that does not conform to any particular standard. You have
some rows with more or less values, or that don’t match the header line
(if present). Any sort of structure is applied or assumed, but isn’t
reliable. You could open a CSV file with a variable number of columns
per row, or without a header in many software packages without getting
an error or warning. You would have to discover and address any such
issues yourself. The CSV data "format" is not (universally) validated.</p>
</div>
</div>
<div>
<h3 id="user-content-xml">
<a aria-hidden="true" class="anchor" href="#xml" id="user-content-xml"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>XML</h3>
<div>
<ul>
<li>
<p>Self-describing<sup>[<a href="#_footnote_18" id="user-content-_footnoteref_18" title="View footnote.">18</a>]</sup></p>
</li>
<li>
<p>Structured</p>
</li>
<li>
<p>Standard</p>
</li>
<li>
<p>Parsable with libraries</p>
</li>
<li>
<p>Examples:</p>
<div>
<ul>
<li>
<p><a href="http://en.wikipedia.org/wiki/XHTML" rel="nofollow">XHTML</a></p>
</li>
<li>
<p><a href="http://en.wikipedia.org/wiki/Keyhole_Markup_Language" rel="nofollow">KML</a></p>
</li>
<li>
<p><a href="http://en.wikipedia.org/wiki/Office_Open_XML" rel="nofollow">XLSX</a></p>
</li>
<li>
<p><a href="http://en.wikipedia.org/wiki/Property_list#Mac_OS_X" rel="nofollow">p-list</a></p>
</li>
<li>
<p><a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics" rel="nofollow">SVG</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div>
<div>
<a href="http://commons.wikimedia.org/wiki/File:XHTML.svg" rel="nofollow"><img alt="XML" height="240" src="images/211px-XHTML.png" width="211"/></a>
</div>
<div>XML - Image: Dreftymac, CC BY 2.5</div>
</div>
<hr/>
<div>
<p>XML is self-describing, standard, and parsable, meaning there are
automated means (libraries) of reading it in — loading in the values
and the keys into a data structure. Examples are XHTML and KML (used
with maps), XLSX is the (newer) MS-Excel format, the p-list is an OS X
"property list" used for configuration, and SVG is an image file format.</p>
</div>
<div>
<p>For example, XHTML is an XML-compliant form of HTML that includes an XML
version number, with a DOCTYPE specification, and an "xmlns" namespace.
The rest of the document looks a like like any other HTML, such as
HTML5, but all of the tags are also XML-compliant so that the file can
be validated as XML by an automated parser. It is self describing
because the structure of the document and the meaning of the elements
are encoded in these tags.</p>
</div>
</div>
<div>
<h3 id="user-content-json">
<a aria-hidden="true" class="anchor" href="#json" id="user-content-json"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>JSON</h3>
<div>
<ul>
<li>
<p><a href="http://en.wikipedia.org/wiki/JSON" rel="nofollow">JavaScript Object Notation</a></p>
</li>
<li>
<p>Open format (ISO and ECMA standards)</p>
</li>
<li>
<p>Human-readable text</p>
</li>
<li>
<p>For transmitting data objects</p>
</li>
<li>
<p>Attribute–value pairs</p>
</li>
<li>
<p>Often used in
<a href="http://en.wikipedia.org/wiki/Ajax_%28programming%29" rel="nofollow">Ajax</a> web
applications</p>
</li>
</ul>
</div>
<div>
<p>Another self-describing, semi-structired file format is JSON. It is an
open format and standard recognized by two standards bodies (ISO and
ECMA). Like XML, is is human-readable because it is plain-text, (though
some may find it more readable than XML). It is used for transmitting
data objects, meaning sending data structures between programs. It is
organized into a nested structure of attribute:value (key-value)
pairs. It is often used in Ajax web applications for transmitting data
back and forth between the clients (web browsers or locally-installed
"apps") and the server (server-hosted web application).</p>
</div>
<div>
<div>Example 8. JSON data structure for a person (John Smith)<sup>[<a href="#_footnote_19" id="user-content-_footnoteref_19" title="View footnote.">19</a>]</sup>
</div>
<div>
<div>
<div>
<pre>{
  "firstName": "John",
  "lastName": "Smith",
  "isAlive": true,
  "age": 25,
  "height_cm": 167.6,
  "address": {
    "streetAddress": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postalCode": "10021-3100"
  },
  "phoneNumbers": [
    {
      "type": "home",
      "number": "212 555-1234"
    },
    {
      "type": "office",
      "number": "646 555-4567"
    }
  ],
  "children": [],
  "spouse": null
}</pre>
</div>
</div>
</div>
</div>
<div>
<p>In this example, we have braces enclosing information about a person.
Sub-sections are also enclosed by braces and/or brackets. The "address"
attribute has it’s value enclosed in braces and contains a list of
attribute:value pairs. The "phoneNumbers" attribute has a value which is
an array of lists of attribute:value pairs. The "children" attribute’s
value is an empty array and the value for the "spouse" attribute is
"null" which means "no value". So instead of having tags to enclose data
values, we have a braces, brackets, and attribute names to provide
a nested structure and describe the data values.</p>
</div>
</div>
<div>
<h3 id="user-content-delimited-text-files">
<a aria-hidden="true" class="anchor" href="#delimited-text-files" id="user-content-delimited-text-files"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Delimited Text Files</h3>
<div>
<p>Files formatted with
<a href="http://en.wikipedia.org/wiki/Delimiter-separated_values" rel="nofollow">delimiter
separated values</a> use:</p>
</div>
<div>
<ul>
<li>
<p>Comma (e.g., "CSV")</p>
</li>
<li>
<p>Tab (e.g., "TSV")</p>
</li>
<li>
<p>Pipe (vertical bar: |)</p>
</li>
</ul>
</div>
<div>
<p>… or other single character as a separator (delimiter) between values.</p>
</div>
<div>
<p>The CSV is the best-known of these, but TSVs are still very common, with
pipe-delimited files being less common. A benefit of the latter type,
however, is that the pipe symbol is the least likely to be found in most
typical data values. Unlike the tab, the pipe (|) and comma (,) are
visible to the eye.</p>
</div>
<div>
<p>Taking the example of a CSV, since commas are often found in data
values, there needs to be a way to differentate the comma as the
delimter in a CSV file and the comma present merely as data. This is
done by "escaping" — adding more characters to indicate the special
treatment. In a CSV, this is often called "comma-quote-delimited". But
what happens when the escape character also needs to be escaped? Now you
can see why using a tab or pipe makes the job a lot simpler, because
there is far less need for adding escape characters. As you might
imagine, the addition and parsing of these characters is more
complicated and thus more prone to error (bugs). For this reason, a TSV
may be a better choice than a CSV in many situations. Many data-import
functions assume TSV by default.</p>
</div>
<div>
<p>The records (rows) are separated by
<a href="http://en.wikipedia.org/wiki/Newline" rel="nofollow">line-ending</a> characters (newlines):</p>
</div>
<div>
<ul>
<li>
<p>Carriage-return (CR)</p>
</li>
<li>
<p>Line-feed (LF)</p>
</li>
<li>
<p>Carriage-return, Line-feed (CRLF)</p>
</li>
</ul>
</div>
<div>
<p>On the original MacOS systems, the standard line-ending character was
the Carriage-return (CR), on Unix, OS X, and Linux systems, the
line-ending character is a Line-feed (LF), and on Windows, both are
combined together as Carriage-return, Line-feed (CRLF). As you might
guess, (or have experienced first hand), sharing files between these
systems can create problems, so various automatic conversions are built
into file-transfer applications. You may see a prompt during software
installation (such as for Git) as to whether or not you wish for such
conversions to take place by default.</p>
</div>
<div>
<p>For example, if the server is running Unix, and some of the clients run
OS X and some run Windows, the technique is often to configure the
client software to standardize on the line-ending format of the server.
In this case, the server running Unix and the client running OS X would
both use LF, but the Windows client would need to convert LF to CRLF
when receiving files and then convert CRLF back again to LF when sending
files back to the server.</p>
</div>
</div>
<div>
<h3 id="user-content-fixed-width-text-files">
<a aria-hidden="true" class="anchor" href="#fixed-width-text-files" id="user-content-fixed-width-text-files"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Fixed-Width Text Files</h3>
<div>
<p>Instead of using a single character as a delimiter, you can also neatly
line up your columns into a format called "fixed-width". The space
between columns is filled with as many "whitespace" characters (spaces
or tabs) as needed. Because the number of these delimiting characters
can vary from one field to the next, this format is a little harder to
parse (automatically), but has the benefit of greater (human)
readability. The lines (records, rows) are separated by newlines. Since
the columns must line up, the fields must be limited in length, often to
some arbitrary value. For this reason, this format is not as commonly
used as a data exchange format, but is often seen in text-based tabular
reports. Since databases often enforce field-length restrictions anyway,
a fixed-width format may be used by such systems for data storage.</p>
</div>
<div>
<p>Here is an example:</p>
</div>
<div>
<div>
<pre>                   mpg cyl disp
Mazda RX4         21.0   6  160
Mazda RX4 Wag     21.0   6  160
Datsun 710        22.8   4  108
Hornet 4 Drive    21.4   6  258
Hornet Sportabout 18.7   8  360
Valiant           18.1   6  225</pre>
</div>
</div>
<div>
<p>(Data from
<a href="https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html" rel="nofollow">mtcars</a>,
<em>The R Datasets Package</em>, R Core Team.)<sup>[<a href="#_footnote_20" id="user-content-_footnoteref_20" title="View footnote.">20</a>]</sup></p>
</div>
<hr/>
<div>
<p>You can see that the columns are neatly aligned and the table is more
readable than if each value was sepated by a single comma or space.</p>
</div>
</div>
<div>
<h3 id="user-content-multi-line-text-files">
<a aria-hidden="true" class="anchor" href="#multi-line-text-files" id="user-content-multi-line-text-files"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Multi-line Text Files</h3>
<div>
<p>You should know that there are also multi-line text file formats. Some
popular genomics file formats use multi-line records, for example.</p>
</div>
<div>
<p>If you look carefully at these, you’ll see that each record starts off
with a header line.</p>
</div>
<div>
<ul>
<li>
<p><a href="http://en.wikipedia.org/wiki/FASTA_format" rel="nofollow">FASTA</a><sup>[<a href="#_footnote_21" id="user-content-_footnoteref_21" title="View footnote.">21</a>]</sup></p>
</li>
</ul>
</div>
<div>
<div>
<pre>&gt;gi|5524211|gb|AAD44166.1| cytochrome b [Elephas maximus maximus]
LCLYTHIGRNIYYGSYLYSETWNTGIMLLLITMATAFMGYVLPWGQMSFWGATVITNLFSAIPYIGTNLV
EWIWGGFSVDKATLNRFFAFHFILPFTMVALAGVHLTFLHETGSNNPLGLTSDSDKIPFHPYYTIKDFLG
LLILILLLLLLALLSPDMLGDPDNHMPADPLNTPLHIKPEWYFLFAYAILRSVPNKLGGVLALFLSIVIL
GLMPFLHTSKHRSMMLRPLSQALFWTLTMDLLTLTWIGSQPVEYPYTIIGQMASILYFSIILAFLPIAGX
IENY</pre>
</div>
</div>
<div>
<p>In the case of the FASTA file, the record’s first line begins with an
angle bracket (&gt;) followed by a pipe-delimited string containing various
codes, and finally ends with a name enclosed in brackets. After this
first header line, you have a few lines that look like random gibberish,
but they are meant to represent the biomolecular sequence information.</p>
</div>
<div>
<ul>
<li>
<p><a href="http://en.wikipedia.org/wiki/FASTQ_format" rel="nofollow">FASTQ</a><sup>[<a href="#_footnote_22" id="user-content-_footnoteref_22" title="View footnote.">22</a>]</sup></p>
</li>
</ul>
</div>
<div>
<div>
<pre>@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=36
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACC
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=36
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9IC</pre>
</div>
</div>
<div>
<p>This FASTQ record’s header line begins with an "at symbol" (@) followed
by an alphanumeric code and a space-delimited list of values. The first
value appears to be another code containing underscores and colons as
delimiters, but it is hard to be sure from just looking at it. The last
value is actually a key=value pair specifying that the string of
nucleotides listed on the next line will contain 36 letters. The third
line is another header, just like the first line, but starting instead
with a "+". That difference can be used when parsing the file to know
the difference between the two types of headers.</p>
</div>
<div>
<p>Unfortunately, the fourth line, which is the "Phred quality" line,
contains a quality-character for each nucleotide listed in the second
line. A variety of alphanumeric and punctuation characters are used for
Phred quality codes.<sup>[<a href="#_footnote_23" id="user-content-_footnoteref_23" title="View footnote.">23</a>]</sup>
This could lead to parsing problems, especially with fragmented (incomplete) records.
What if a particular quality line starts with a "+" or an "@"? A parsing
program might assume this is a header line and attempt to read it as a new record.</p>
</div>
<div>
<p>Are these multi-line text files structured, semi-structured, or
unstructured? As before, there is no explicit information in the file
telling you which format or standard the file structure would adhere to,
and there is nothing self-describing about the contents of the file,
with the exception of the "length=36" part. So, like delimited and
fixed-width files, these are actually "unstructured", despite a lot of
implied structure, or "structure by convention".</p>
</div>
<div>
<p>Regardless, unstructured files are still very useful and are usually
structured enough to serve their purpose. The only reason we have been
drawing these distinctions about structure has been to help us
categorize and evaluate the various alternatives — to appreciate the
tradeoffs and provide clues as to possible processing strategies.</p>
</div>
</div>
<div>
<h3 id="user-content-data-file-layout-tidy-data">
<a aria-hidden="true" class="anchor" href="#data-file-layout-tidy-data" id="user-content-data-file-layout-tidy-data"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Data File Layout: Tidy Data</h3>
<div>
<p>Now that we have an understanding of the types of file formats, we will
discuss a little of what to <em>do</em> with data. In particular, we will see that
following a few simple <em>layout</em> guidelines can help immensely when it
comes time for data analysis later on.</p>
</div>
<div>
<p>Whether your data comes from an XML, CSV, or other file format, you can
hopefully view it as a single table of columns and rows, with a single
value in each "cell" (row-column intersection). If so, that should be
fairly tidy.</p>
</div>
<div>
<h4 id="user-content-a-table-of-columns-and-rows">
<a aria-hidden="true" class="anchor" href="#a-table-of-columns-and-rows" id="user-content-a-table-of-columns-and-rows"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>A Table of Columns and Rows</h4>
<div>
<p>We want to structure each data file as a single table of "columns and
rows" …</p>
</div>
<table>
<caption>Table 2. A table of columns and rows</caption>
<colgroup>
<col/>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th>subID</th>
<th>height</th>
<th>weight</th>
</tr>
</thead>
<tbody>
<tr>
<td><p>1</p></td>
<td><p>58</p></td>
<td><p>115</p></td>
</tr>
<tr>
<td><p>2</p></td>
<td><p>59</p></td>
<td><p>117</p></td>
</tr>
<tr>
<td><p>3</p></td>
<td><p>60</p></td>
<td><p>120</p></td>
</tr>
</tbody>
</table>
<div>
<p>… to make them easier to import and analyze.</p>
</div>
<div>
<p>(Data from
<a href="https://stat.ethz.ch/R-manual/R-patched/library/datasets/html/women.html" rel="nofollow">women</a>,
<em>The R Datasets Package</em>, R Core Team.)<sup>[<a href="#_footnote_24" id="user-content-_footnoteref_24" title="View footnote.">24</a>]</sup></p>
</div>
<hr/>
<div>
<p>If you need to, you can link multiple tables together on common "key"
columns, once you have imported them into your database or analysis
software.</p>
</div>
</div>
<div>
<h4 id="user-content-tidy-data-basic-tenets">
<a aria-hidden="true" class="anchor" href="#tidy-data-basic-tenets" id="user-content-tidy-data-basic-tenets"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tidy Data Basic Tenets</h4>
<div>
<p>The basic tenets of <em><a href="http://vita.had.co.nz/papers/tidy-data.pdf" rel="nofollow">tidy
data</a></em> are:<sup>[<a href="#_footnote_25" id="user-content-_footnoteref_25" title="View footnote.">25</a>]</sup></p>
</div>
<div>
<ul>
<li>
<p>Each variable forms a column.</p>
</li>
<li>
<p>Each observation forms a row.</p>
</li>
<li>
<p>Each type of observational unit forms a table</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="user-content-tidy-or-not">
<a aria-hidden="true" class="anchor" href="#tidy-or-not" id="user-content-tidy-or-not"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tidy or Not?</h4>
<div>
<p>Is this
spreadsheet<sup>[<a href="#_footnote_26" id="user-content-_footnoteref_26" title="View footnote.">26</a>]</sup>
<em>tidy data</em> or not? Why or why not?</p>
</div>
<div>
<p><span><img alt="spreadsheet" src="images/spreadsheet.jpg"/></span></p>
</div>
<div>
<p>We have what looks like columns and rows, but you might notice that
there are apparently several rows of headers at the top (with levels and
sublevels) and a nested hierarchy of "causes" on the left (listed in
outline form). It would be confusing to import this table into data
analysis software that did not know how to interpret those various
levels.</p>
</div>
<div>
<p>There is also color-coding for various columns and rows, which we presume
must carry some additional meaning, but which might easily be lost upon
import into our preferred software application.</p>
</div>
<div>
<p>How would you go about tidying this dataset?</p>
</div>
</div>
</div>
<div>
<h3 id="user-content-wide-and-long-which-table-is-tidier">
<a aria-hidden="true" class="anchor" href="#wide-and-long-which-table-is-tidier" id="user-content-wide-and-long-which-table-is-tidier"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Wide and Long: Which Table is Tidier?</h3>
<div>
<p>Once we have a table in a nice column and row format, we may further
tidy the data by checking that each column should indeed be a column — or rearrange the table as needed to achieve this.</p>
</div>
<div>
<p>A table layout can be seen as "wide" or "long". Wide data has lots of
columns (variables) and long data has lots of rows (cases, records,
observations).</p>
</div>
<div>
<p>Here is an example in "wide" format:</p>
</div>
<table>
<caption>Table 3. Iris data in "wide" format</caption>
<colgroup>
<col/>
<col/>
<col/>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th>Sepal.Length</th>
<th>Sepal.Width</th>
<th>Petal.Length</th>
<th>Petal.Width</th>
<th>Species</th>
</tr>
</thead>
<tbody>
<tr>
<td><p>5.1</p></td>
<td><p>3.5</p></td>
<td><p>1.4</p></td>
<td><p>0.2</p></td>
<td><p>setosa</p></td>
</tr>
<tr>
<td><p>5.7</p></td>
<td><p>2.8</p></td>
<td><p>4.1</p></td>
<td><p>1.3</p></td>
<td><p>versicolor</p></td>
</tr>
</tbody>
</table>
<div>
<p>Here the same table has been rearranged into "long" format:</p>
</div>
<table>
<caption>Table 4. Iris data in "long" format</caption>
<colgroup>
<col/>
<col/>
<col/>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th>Flower.Id</th>
<th>Species</th>
<th>Flower.Part</th>
<th>Length</th>
<th>Width</th>
</tr>
</thead>
<tbody>
<tr>
<td><p>1</p></td>
<td><p>setosa</p></td>
<td><p>Petal</p></td>
<td><p>1.4</p></td>
<td><p>0.2</p></td>
</tr>
<tr>
<td><p>1</p></td>
<td><p>setosa</p></td>
<td><p>Sepal</p></td>
<td><p>5.1</p></td>
<td><p>3.5</p></td>
</tr>
<tr>
<td><p>100</p></td>
<td><p>versicolor</p></td>
<td><p>Petal</p></td>
<td><p>4.1</p></td>
<td><p>1.3</p></td>
</tr>
<tr>
<td><p>100</p></td>
<td><p>versicolor</p></td>
<td><p>Sepal</p></td>
<td><p>5.7</p></td>
<td><p>2.8</p></td>
</tr>
</tbody>
</table>
<div>
<p>(Data from
<a href="https://stat.ethz.ch/R-manual/R-patched/library/datasets/html/iris.htmll" rel="nofollow">iris</a>,
<em>The R Datasets Package</em>, R Core Team.)<sup>[<a href="#_footnote_27" id="user-content-_footnoteref_27" title="View footnote.">27</a>]</sup>
'''</p>
</div>
<div>
<p>The "long" layout may be tidier if you consider the "species" such as
<em>versicolor</em> or the "part" of a flower such as <em>Sepal</em> as observations
rather than as a variables. But in many cases, both wide and long
formats are fine if they make sense and suit your analytical needs. The
main idea is that you want to spend a little time tidying data so that
you don’t waste a lot of time trying to analyze untidy data.</p>
</div>
</div>
<div>
<h3 id="user-content-why-does-tidiness-matter">
<a aria-hidden="true" class="anchor" href="#why-does-tidiness-matter" id="user-content-why-does-tidiness-matter"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Why does tidiness matter?</h3>
<div>
<p>If "wide" or "long" layout choices seem rather "subjective", consider
which layout will better facilitate your analysis.</p>
</div>
<div>
<p>Because we have "tidied" our example data into a "long" layout, we can
easily "facet" our plot by <code>Species</code> and <code>Flower.Part</code>.</p>
</div>
<div>
<div>
<pre>ggplot(data=iris, aes(x=Width, y=Length)) +
    geom_point() + facet_grid(Species ~ Flower.Part, scale="free") +
    geom_smooth(method="lm") + theme_bw(base_size=16)</pre>
</div>
</div>
<div>
<div>
<a href="https://github.com/brianhigh/research-computing"><img alt="Plot using tidy iris data" height="246" src="images/iris.png" width="344"/></a>
</div>
<div>Plot using tidy iris data</div>
</div>
<hr/>
</div>
<div>
<h3 id="user-content-data-files-conclusion">
<a aria-hidden="true" class="anchor" href="#conclusion" id="user-content-conclusion"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Conclusion</h3>
<div>
<p>In this module, we have explored file naming, types, and organization.
We hope that by gaining an understanding of key concepts of data files,
that you are better equipped to tackle your data-wrangling needs. We
will build upon this knowledge in later data management modules, such as
"databases", "programming", and "analysis tools".</p>
</div>
</div>
</div>
</div>
<div>
<hr/>
<div>
<a href="#_footnoteref_1">1</a>. Actually, byte sequences called <a href="http://en.wikipedia.org/wiki/File_format#Magic_number" rel="nofollow">magic numbers</a> or <a href="http://en.wikipedia.org/wiki/List_of_file_signatures" rel="nofollow">file signatures</a> may be used to identify file formats, but their use is not completely standardized or universal.
</div>
<div>
<a href="#_footnoteref_2">2</a>. <em>Filename extension</em>, <a href="http://en.wikipedia.org/wiki/Filename_extension" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_3">3</a>. file association, <a href="http://en.wikipedia.org/wiki/File_association" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_4">4</a>. While OS X, Linux and Unix systems come with <code>hexdump</code>, Windows systems no longer come with something comparable. Instead, you may wish use PowerShell, which does come with recent versions of Windows, download the <a href="http://www.fileformat.info/tool/hexdump/hexdump.exe" rel="nofollow">hexdump.exe</a> utility and use a command like this: <code>hexdump.exe pie.svg | select -First 5</code> …​ though it will not produce exactly the same output as <code>hexdump</code>.
</div>
<div>
<a href="#_footnoteref_5">5</a>. The first few bytes of a file are often used to identify the file type.
</div>
<div>
<a href="#_footnoteref_6">6</a>. <em>ASCII</em>, <a href="http://en.wikipedia.org/wiki/ASCII" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_7">7</a>. <em>Windows-1252</em>, <a href="http://en.wikipedia.org/wiki/Windows-1252" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_8">8</a>. Our first example of mojibake which begins this section is from the reply window of Thunderbird when replying to a message from a Mailman email-list post. The original message was sent from a person using the Mutt email client. The message was PGP-signed. A quick internet search for the unintended characters brings up a <a href="http://forums.mozillazine.org/viewtopic.php?t=626263" rel="nofollow">useful help page</a>. Apparently, this character sequence representing "curly quotes" or "Smart Quotes" is a <a href="https://askleo.com/why_do_i_get_odd_characters_instead_of_quotes_in_my_documents/" rel="nofollow">common problem</a>.
</div>
<div>
<a href="#_footnoteref_9">9</a>. We would use the same <code>python</code> command from the <em>Bash</em> shell in Unix, Linux, or OS X.
</div>
<div>
<a href="#_footnoteref_10">10</a>. You will find many cases of this issue discussed on help forums such as <a href="http://stackoverflow.com/questions/tagged/mojibake" rel="nofollow">stackoverflow</a>. There are modules in programming languages such as <a href="https://github.com/dekellum/mojibake">Ruby</a> and <a href="https://github.com/LuminosoInsight/python-ftfy">Python</a> which help address these problems. Applications like MS-Word also allow you to set or <a href="https://support.office.com/en-gb/article/Choose-text-encoding-when-you-open-and-save-files-00c46cde-83a4-437d-be83-aca280ff9174" rel="nofollow">convert</a> encodings.
</div>
<div>
<a href="#_footnoteref_11">11</a>. For a more thorough treatment of dealing with character encoding problems, see "Bad Data Lurking in Plain Text" by Josh Levy, PhD, which is the fourth chapter of Q. Ethan McCallum’s <em>Bad Data Handbook</em> (O’Reilly Media, Inc., 2012).
</div>
<div>
<a href="#_footnoteref_12">12</a>. Joe Becker, <a href="http://www.unicode.org/history/unicode88.pdf" rel="nofollow">Unicode 88</a>
</div>
<div>
<a href="#_footnoteref_13">13</a>. <em>Unicode</em>, <a href="http://en.wikipedia.org/wiki/Unicode" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_14">14</a>. <em>Unicode</em>, <a href="http://en.wikipedia.org/wiki/Unicode" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_15">15</a>. <em>Unicode input</em>, <a href="http://en.wikipedia.org/wiki/Unicode_input" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_16">16</a>. <em>UTF-8</em>,   <a href="http://en.wikipedia.org/wiki/UTF-8" rel="nofollow">Wikipedia</a>,   <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC   BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_17">17</a>. <code>iconv</code> is another tool originally developed for Unix, Linux and OS X systems, though Windows versions are available and can be found with an Internet search.
</div>
<div>
<a href="#_footnoteref_18">18</a>. <em>XML</em>, <a href="http://en.wikipedia.org/wiki/XML" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_19">19</a>. <em>JSON</em>, <a href="http://en.wikipedia.org/wiki/JSON" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_20">20</a>. Extracted from the 1974 <em>Motor Trend</em> US magazine. Source: Henderson and Velleman (1981), Building multiple regression models interactively. <em>Biometrics</em>, 37, 391–411.
</div>
<div>
<a href="#_footnoteref_21">21</a>. <em>FASTA format</em>, <a href="http://en.wikipedia.org/wiki/FASTA_format" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_22">22</a>. <em>FASTQ format</em>, <a href="http://en.wikipedia.org/wiki/FASTQ_format" rel="nofollow">Wikipedia</a>, <a href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="nofollow">CC BY-SA 3.0</a>
</div>
<div>
<a href="#_footnoteref_23">23</a>. See <a href="http://en.wikipedia.org/wiki/FASTQ_format#Encoding" rel="nofollow">FASTQ format encoding, Wikipedia</a>
</div>
<div>
<a href="#_footnoteref_24">24</a>. <em>The World Almanac and Book of Facts</em>, 1975. Reference: McNeil, D. R. (1977) <em>Interactive Data Analysis</em>. Wiley.
</div>
<div>
<a href="#_footnoteref_25">25</a>. Hadley Wickham, <a href="http://vita.had.co.nz/papers/tidy-data.pdf" rel="nofollow">Tidy Data</a>
</div>
<div>
<a href="#_footnoteref_26">26</a>. <a href="http://www.who.int/healthinfo/statistics/bodgbddeathdalyestimates.xls" rel="nofollow">WHO</a>
</div>
<div>
<a href="#_footnoteref_27">27</a>. Anderson, Edgar (1935). The irises of the Gaspe Peninsula, <em>Bulletin of the American Iris Society</em>, 59, 2–5. Reference: Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems. <em>Annals of Eugenics</em>, 7, Part II, 179–188.
</div>
</div>
        </div>

        <div class="wiki-footer gollum-asciidoc-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <div>
<p>The latest version of this document is online at:
<a href="https://github.com/brianhigh/research-computing/wiki">https://github.com/brianhigh/research-computing/wiki</a> Copyright © The
<a href="https://github.com/brianhigh/research-computing">Research Computing Team</a>.
This information is provided for educational purposes only. See
<a href="https://github.com/brianhigh/research-computing/blob/master/LICENSE">LICENSE</a>
for more information.
<a href="https://creativecommons.org/licenses/by/4.0/" rel="nofollow">Creative Commons
Attribution 4.0 International Public License</a>.</p>
</div>
          </div>
        </div>
    </div>]