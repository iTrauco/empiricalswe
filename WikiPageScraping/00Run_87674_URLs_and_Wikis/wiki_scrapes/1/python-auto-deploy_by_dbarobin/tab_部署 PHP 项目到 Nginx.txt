[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#%E8%BD%AF%E4%BB%B6%E6%A6%82%E8%A6%81" id="user-content-软件概要"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>软件概要</h3>
<p>Nginx版本目录结构如下：</p>
<pre><code>tree auto_deploy_app_to_nginx
</code></pre>
<blockquote>
<p>auto_deploy_app_to_nginx <br/>
├── auto_deploy_app_remote.py <br/>
├── auto_deploy_app_v_final.py <br/>
├── auto_execute_shop.sh <br/>
├── auto_scp_nginx_log.sh <br/>
├── config.conf <br/>
└── crontab <br/></p>
<p>0 directories, 6 files</p>
</blockquote>
<p>该脚本实现的功能如下：</p>
<ul>
<li>打印帮助</li>
<li>检出Shop项目</li>
<li>更新Shop项目</li>
<li>部署Shop项目</li>
<li>启动、关闭、重启Nginx服务器</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E8%84%9A%E6%9C%AC%E5%B8%AE%E5%8A%A9" id="user-content-脚本帮助"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>脚本帮助</h3>
<pre><code>./auto_deploy_app_remote.py -h
</code></pre>
<div class="highlight highlight-source-shell"><pre> Auto deploy application to the remote web server. Write <span class="pl-k">in</span> Python.
Version 1.0. By Robin Wen. Email:dbarobinwen@gmail.com

Usage auto_deploy_app.py [-hcustrd]
  [-h <span class="pl-k">|</span> --help] Prints this <span class="pl-c1">help</span> and usage message
  [-c <span class="pl-k">|</span> --svn-co-shop] Checkout the shop repo via svn
  [-u <span class="pl-k">|</span> --svn-update-shop] Update the shop repo via svn
  [-s <span class="pl-k">|</span> --shutdown-nginx] Shutdown the shop via the nginx shutdown and startup scripts
  [-t <span class="pl-k">|</span> --startup-nginx] Startup the shop  via the nginx shutdown and startup scripts
  [-r <span class="pl-k">|</span> --restart-nginx] Restart the shop via the nginx shutdown and startup scripts
  [-d <span class="pl-k">|</span> --deploy-shop] Deploy shop to nginx server.
</pre></div>
<p>在脚本名后加上「-h 或者 --help」表示打印帮助。
同理，加上「 -c | --svn-co-shop」表示检出Shop项目，加上「-u | --svn-update-shop」表示更新Shop项目，加上「-s | --shutdown-nginx」表示关闭Nginx服务器，加上「-t | --startup-nginx」表示启动Nginx服务器，加上「-r | --restart-nginx」表示重启Nginx服务器，加上「-d | --deploy-shop]」表示部署Mall API项目。</p>
<h3>
<a aria-hidden="true" class="anchor" href="#%E8%84%9A%E6%9C%AC%E6%A6%82%E8%BF%B0" id="user-content-脚本概述"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>脚本概述</h3>
<p>如前所述，「auto_deploy_app_remote.py」是主执行脚本，用于显示帮助以及调用相应函数。「auto_deploy_app_v_final.py」是核心执行脚本，实现所有的相关功能。核心执行脚本采用Fabric实现远程执行命令，主执行脚本再通过<strong>fab -f 脚本名 任务名</strong>调用相应方法。</p>
<p>主执行脚本和核心执行脚本的方法名基本一致，主执行脚本包括如下方法：main(argv)、usage()、svn_co_shop()、svn_update_shop()、shutdown_nginx()、startup_nginx()、restart_nginx()和deploy_shop()。</p>
<p>核心执行脚本包括如下方法：svn_co_shop()、svn_update_shop()、shutdown_nginx()、startup_nginx()、restart_nginx()、deploy_shop()和getConfig()。</p>
<p><strong>主执行脚本：</strong></p>
<ul>
<li>main(argv) 主函数</li>
<li>usage() 使用说明函数</li>
<li>svn_co_shop() 检出Shop项目</li>
<li>svn_update_shop() 更新Shop项目</li>
<li>shutdown_nginx() 关闭Nginx服务器</li>
<li>startup_nginx() 启动Nginx服务器</li>
<li>restart_nginx() 重启Nginx服务器</li>
<li>deploy_shop() 部署Shop项目</li>
</ul>
<p><strong>主执行脚本</strong></p>
<p>主执行脚本内容如下：
参考脚本auto_deploy_app_remote.py。</p>
<p><strong>核心执行脚本</strong></p>
<p>方法和主执行脚本基本一致，相同的不赘述。核心执行脚本还提供getConfig()方法，用于读取配置文件。</p>
<p>核心执行脚本内容如下：
参考脚本auto_deploy_app_v_final.py。</p>
<p><code>auto_execute_shop.sh</code>脚本实现了自动从SVN检出项目，自动部署到Nginx。</p>
<p>参考auto_execute_shop.sh脚本。</p>
<p><code>auto_scp_nginx_log.sh</code>脚本实现了从Nginx服务器自动拉取日志。为了更好的查看日志，拉取了access log和error log。</p>
<p>参考auto_scp_nginx_log.sh脚本。</p>
<h3>
<a aria-hidden="true" class="anchor" href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0" id="user-content-配置文件概述"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>配置文件概述</h3>
<p>完整配置文件内容如下：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> Remote server section.</span>
[remote]
<span class="pl-c"><span class="pl-c">#</span> Remote server ip.</span>
remote_ip=
<span class="pl-c"><span class="pl-c">#</span> Remote server port.</span>
remote_port=
<span class="pl-c"><span class="pl-c">#</span> Remote server username.</span>
remote_usr=
<span class="pl-c"><span class="pl-c">#</span> Remote server password.</span>
remote_pwd=

<span class="pl-c"><span class="pl-c">#</span> SVN path section.</span>
[svn_path]
<span class="pl-c"><span class="pl-c">#</span> Svn main directory of repo.</span>
svn_shop_dir=

<span class="pl-c"><span class="pl-c">#</span> Shop svn configuration section. </span>
[svn]
<span class="pl-c"><span class="pl-c">#</span> Shop svn url.</span>
svn_url=
<span class="pl-c"><span class="pl-c">#</span> Shop svn username.</span>
svn_username=
<span class="pl-c"><span class="pl-c">#</span> Shop svn password.</span>
svn_password=

<span class="pl-c"><span class="pl-c">#</span> Nginx section.</span>
[nginx]
<span class="pl-c"><span class="pl-c">#</span> Nginx webapps path.</span>
nginx_path=

<span class="pl-c"><span class="pl-c">#</span> Other configuration section.</span>
[other]
<span class="pl-c"><span class="pl-c">#</span> Remote log path.</span>
remote_log_path=</pre></div>
<p>接下来，我逐一进行讲解。</p>
<p>配置文件包括以下段：remote、svn_path、svn_admin、svn_api、tomcat和other。</p>
<p>每个段的说明如下：</p>
<ul>
<li>remote 该段定义远程服务器登录信息。
<ul>
<li>remote_ip 部署远程服务器IP。</li>
<li>remote_port 部署远程服务器端口。</li>
<li>remote_usr 部署远程服务器用户名。</li>
<li>remote_pwd 部署远程服务器密码。</li>
</ul>
</li>
<li>svn_path 该段定义SVN的相关路径。
<ul>
<li>svn_shop_dir 该段定义SVN的Shop目录。</li>
</ul>
</li>
<li>svn 该段定义Shop项目的SVN相关信息。
<ul>
<li>svn_url Shop SVN的URL。</li>
<li>svn_username Shop SVN的URL。</li>
<li>svn_password Shop VN的密码。</li>
</ul>
</li>
<li>nginx 该段定义Nginx相关信息。
<ul>
<li>nginx_path Nginx的webapps路径。</li>
</ul>
</li>
<li>other 该段定义其他配置信息。
<ul>
<li>remote_log_path 远程服务器Log路径。</li>
</ul>
</li>
</ul>
<p>如有需要，请酌情修改。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8" id="user-content-脚本使用"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>脚本使用</h2>
<p><strong>Step 1：</strong> 把以auto_开头的四个脚本以及config.conf配置文件放到远程服务器，脚本中的路径（YOUR_PATH）、Nginx access log（access_log）、Nginx error log（error_log）、用户名（YOUR_NAME）、密码（YOUR_IP）请酌情修改。</p>
<p><strong>Step 2：</strong> 添加crontab计划任务。</p>
<pre><code>crontab -e
</code></pre>
<p>crontab 任务如下。</p>
<pre><code>crontab -l
</code></pre>
<blockquote>
<p>00 00 * * * bash YOUR_PATH/auto_execute_shop.sh
00 01 * * * bash YOUR_PATH/auto_scp_nginx_log.sh
*/1 * * * * ntpdate pool.ntp.org</p>
</blockquote>
<p>该任务定义了凌晨0点部署项目，以及凌晨1点拷贝日志。</p>
<p><strong>Step 3：</strong> 早晨上班就可以看到昨晚的部署日志了，如果有问题，把日志给开发人员，再做调试。So easy, 妈妈再也不用担心我加班了！:)</p>

        </div>

    </div>]