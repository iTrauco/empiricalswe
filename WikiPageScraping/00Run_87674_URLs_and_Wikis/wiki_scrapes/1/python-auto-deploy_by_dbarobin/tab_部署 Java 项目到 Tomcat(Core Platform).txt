[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#%E8%BD%AF%E4%BB%B6%E6%A6%82%E8%A6%81" id="user-content-软件概要"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>软件概要</h3>
<p>Linux 版目录结构如下：</p>
<pre><code>tree auto_deploy_app_v2
</code></pre>
<blockquote>
<p>auto_deploy_app_v2 <br/>
|-- auto_deploy_app_remote.py <br/>
|-- auto_deploy_app_v_final.py <br/>
`-- config.conf <br/>
<br/>
0 directories, 3 files</p>
</blockquote>
<p>其中，「auto_deploy_app_remote.py」是主执行脚本，用于显示帮助以及调用相应函数。「auto_deploy_app_v_final.py」是核心执行脚本，实现所有的相关功能。「config.conf」是脚本的配置文件。</p>
<p>该脚本实现的功能如下：</p>
<ul>
<li>打印帮助</li>
<li>部署准备</li>
<li>检出项目</li>
<li>更新项目</li>
<li>部署业务平台</li>
<li>部署认证平台</li>
<li>启动、关闭、重启业务平台</li>
<li>启动、关闭、重启认证平台</li>
<li>修改数据库配置</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E8%84%9A%E6%9C%AC%E5%B8%AE%E5%8A%A9" id="user-content-脚本帮助"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>脚本帮助</h3>
<p>我们通过如下命令可以获得该脚本的帮助。</p>
<pre><code>./auto_deploy_app_remote.py -h
</code></pre>
<div class="highlight highlight-source-shell"><pre>Auto deploy application to the remote web server. Write <span class="pl-k">in</span> Python.
 Version 1.0. By Robin Wen. Email:dbarobinwen@gmail.com
 
 Usage auto_deploy_app.py [-hcustrakgdwp]
   [-h <span class="pl-k">|</span> --help] Prints this <span class="pl-c1">help</span> and usage message
   [-p <span class="pl-k">|</span> --deploy-prepare] Deploy prepared. Run as root
   [-c <span class="pl-k">|</span> --svn-co] Checkout the newarkstg repo via svn
   [-u <span class="pl-k">|</span> --svn-update] Update the newarkstg repo via svn
   [-s <span class="pl-k">|</span> --shutdown-core] Shutdown the core platform via the stop.sh scripts
   [-t <span class="pl-k">|</span> --startup-core] Startup the core platform via the startup.sh scripts
   [-r <span class="pl-k">|</span> --restart-core] Restart the core platform via the restart.sh scripts
   [-a <span class="pl-k">|</span> --shutdown-auth] Shutdown the auth platform via the stop.sh scripts
   [-k <span class="pl-k">|</span> --startup-auth] Startup the auth platform via the startup.sh scripts
   [-g <span class="pl-k">|</span> --restart-auth] Restart the auth platform via the restart.sh scripts
   [-d <span class="pl-k">|</span> --deploy-core-platform] Deploy core platform via mvn
   [-w <span class="pl-k">|</span> --deploy-auth-platform] Deploy auth platform via mvn
   [-x <span class="pl-k">|</span> --update-database-setting] Update the database setting</pre></div>
<p>在脚本名后加上「-h 或者 --help」表示打印帮助。
同理，加上「-p | --deploy-prepare」表示部署准备，加上「-c | --svn-co」表示检出项目，加上「-u | --svn-update」表示更新项目，加上「-s | --shutdown-core」表示关闭业务平台，加上「-t | --startup-core」表示启动业务平台，加上「-r | --restart-core」表示重启业务平台，加上「-a | --shutdown-auth」表示关闭认证平台，加上「--startup-auth」表示启动认证平台，加上「-g | --restart-auth」表示重启认证平台，加上「-d | --deploy-core-platform」表示部署业务平台，加上「-w | --deploy-auth-platform」表示部署认证平台，加上[-x | --update-database-setting]表示修改数据库配置。</p>
<h3>
<a aria-hidden="true" class="anchor" href="#%E8%84%9A%E6%9C%AC%E6%A6%82%E8%BF%B0" id="user-content-脚本概述"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>脚本概述</h3>
<p>如前所述，「auto_deploy_app_remote.py」是主执行脚本，用于显示帮助以及调用相应函数。「auto_deploy_app_v_final.py」是核心执行脚本，实现所有的相关功能。核心执行脚本采用 Fabric 实现远程执行命令，主执行脚本再通过 <strong>fab -f 脚本名 任务名</strong> 调用相应方法。</p>
<p>主执行脚本和核心执行脚本的方法名基本一致，主执行脚本包括如下方法：main(argv)、usage()、svn_co()、svn_update()、shutdown_core()、startup_core()、restart_core()、shutdown_auth()、startup_auth()、restart_auth()、deploy_core_platform()、deploy_auth_plaform()、deploy_prepare()和updata_database_setting()。</p>
<p>核心执行脚本包括如下方法：svn_co()、svn_update()、shutdown_core()、startup_core()、restart_core()、shutdown_auth()、startup_auth()、restart_auth()、deploy_core_platform()、deploy_auth_platform()、deploy_prepare()、updata_database_setting()和getConfig()。</p>
<p><strong>主执行脚本：</strong></p>
<ul>
<li>main(argv) 主函数</li>
<li>usage() 使用说明函数</li>
<li>svn_co() 检出项目函数</li>
<li>svn_update() 更新项目函数</li>
<li>shutdown_core() 关闭业务平台方法</li>
<li>startup_core() 启动业务平台方法</li>
<li>restart_core() 重启业务平台方法</li>
<li>shutdown_auth() 关闭认证平台方法</li>
<li>startup_auth() 启动认证平台方法</li>
<li>restart_auth() 重启认证平台方法</li>
<li>deploy_core_platform() 部署业务平台方法</li>
<li>deploy_auth_platform() 部署认证平台方法</li>
<li>deploy_prepare() 部署准备方法</li>
<li>updata_database_setting() 修改数据库配置方法。</li>
</ul>
<p><strong>主执行脚本</strong></p>
<p>主执行脚本内容如下：
参考脚本 <code>auto_deploy_app_remote.py</code>。</p>
<p><strong>核心执行脚本</strong></p>
<p>方法和主执行脚本基本一致，相同的不赘述。核心执行脚本还提供 getConfig() 方法，用于读取配置文件。</p>
<p>核心执行脚本内容如下：
参考脚本 <code>auto_deploy_app_v_final.py</code>。</p>
<h3>
<a aria-hidden="true" class="anchor" href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0" id="user-content-配置文件概述"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>配置文件概述</h3>
<p>完整配置文件内容如下：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> Database config section.</span>
[database]
<span class="pl-c"><span class="pl-c">#</span> Database address.</span>
db_addr=
<span class="pl-c"><span class="pl-c">#</span> Database port.</span>
db_port=
<span class="pl-c"><span class="pl-c">#</span> Database username.</span>
db_usr=
<span class="pl-c"><span class="pl-c">#</span> Datbase password.</span>
db_pwd=

<span class="pl-c"><span class="pl-c">#</span> Remote server section.</span>
[remote]
<span class="pl-c"><span class="pl-c">#</span> Remote server ip.</span>
remote_ip=
<span class="pl-c"><span class="pl-c">#</span> Remote server port.</span>
remote_port=
<span class="pl-c"><span class="pl-c">#</span> Remote server username.</span>
remote_usr=
<span class="pl-c"><span class="pl-c">#</span> Remote server password.</span>
remote_pwd=

<span class="pl-c"><span class="pl-c">#</span> SVN path section.</span>
[svn_path]
<span class="pl-c"><span class="pl-c">#</span> Svn main directory of newarkstg repo.</span>
svn_ns_dir=
<span class="pl-c"><span class="pl-c">#</span> Svn core platform path.</span>
svn_core_platform_path=
<span class="pl-c"><span class="pl-c">#</span> Svn core platform path config path</span>
svn_core_platform_config_path=
<span class="pl-c"><span class="pl-c">#</span> Svn core platform path config auth path</span>
svn_core_platform_config_auth_path=
<span class="pl-c"><span class="pl-c">#</span> Svn core platform path config api path</span>
svn_core_platform_config_api_path=
<span class="pl-c"><span class="pl-c">#</span> Svn core platform dao path</span>
svn_core_platform_dao_path=
<span class="pl-c"><span class="pl-c">#</span> Svn core platform target path.</span>
svn_core_platform_target_path=

<span class="pl-c"><span class="pl-c">#</span> SVN configuration section. </span>
[svn]
svn_username=
svn_password=
svn_url=

<span class="pl-c"><span class="pl-c">#</span> Core platform path config section.</span>
[core_path]
<span class="pl-c"><span class="pl-c">#</span> Core platform path.</span>
core_platform_path=
<span class="pl-c"><span class="pl-c">#</span> Core platform config path.</span>
core_platform_config_path=
<span class="pl-c"><span class="pl-c">#</span> Core platform config api path</span>
core_platform_config_api_path=
<span class="pl-c"><span class="pl-c">#</span> Core platform config auth path</span>
core_platform_config_auth_path=
<span class="pl-c"><span class="pl-c">#</span> Core platform bundles path</span>
core_platform_bundles_path=

<span class="pl-c"><span class="pl-c">#</span> Auth platform path config section.</span>
[auth_path]
<span class="pl-c"><span class="pl-c">#</span> Auth platform path.</span>
auth_path=
<span class="pl-c"><span class="pl-c">#</span> Auth platform configuration path.</span>
auth_platform_config_path=
<span class="pl-c"><span class="pl-c">#</span> Auth platform configuration api path.</span>
auth_platform_config_api_path=
<span class="pl-c"><span class="pl-c">#</span> Auth platform configuration auth path.</span>
auth_platform_config_auth_path=
<span class="pl-c"><span class="pl-c">#</span> Authplatform bundles path</span>
auth_platform_bundles_path=

<span class="pl-c"><span class="pl-c">#</span> Memcached configuration section.</span>
[memcached]
<span class="pl-c"><span class="pl-c">#</span> Memcached server ip.</span>
memcached_ip=
<span class="pl-c"><span class="pl-c">#</span> Memcached server port.</span>
memcached_port=

<span class="pl-c"><span class="pl-c">#</span> Other configuration section</span>
[other]
<span class="pl-c"><span class="pl-c">#</span> Core platform version.</span>
core_version=
<span class="pl-c"><span class="pl-c">#</span> Remote log path</span>
remote_log_path=
<span class="pl-c"><span class="pl-c">#</span> Api port</span>
api_port=
<span class="pl-c"><span class="pl-c">#</span> Core platform jar name</span>
core_platform_jar=
<span class="pl-c"><span class="pl-c">#</span> Auth platform jar name</span>
auth_platform_jar=
<span class="pl-c"><span class="pl-c">#</span> Core jar</span>
core_jar=
<span class="pl-c"><span class="pl-c">#</span> Auth jar</span>
auth_jar=</pre></div>
<p>接下来，我逐一进行讲解。</p>
<p>配置文件包括以下段：database、remote、svn_path、svn、core_path、auth_path、memcached 和 other。</p>
<p>每个段的说明如下：</p>
<ul>
<li>database 该段定义数据库配置。
<ul>
<li>db_addr MySQL 数据库地址。</li>
<li>db_usr MySQL 数据库用户名。</li>
<li>db_pwd MySQL 数据库密码。</li>
<li>db_port MySQL 数据库端口，默认为 3306。</li>
</ul>
</li>
<li>remote 该段定义远程服务器登录信息。
<ul>
<li>remote_ip 部署远程服务器 IP。</li>
<li>remote_port 部署远程服务器端口。</li>
<li>remote_usr 部署远程服务器用户名。</li>
<li>remote_pwd 部署远程服务器密码。</li>
</ul>
</li>
<li>svn_path 该段定义远程服务器 SVN 目录。
<ul>
<li>svn_ns_dir 项目主 SVN 目录。</li>
<li>svn_core_platform_path 业务平台 SVN 目录。</li>
<li>svn_core_platform_config_path 业务平台主配置文件目录。</li>
<li>svn_core_platform_config_auth_path 业务平台 AUTH 配置文件目录。</li>
<li>svn_core_platform_config_api_path 业务平台 API 配置文件目录。</li>
<li>svn_core_platform_dao_path 业务平台 DAO 目录。</li>
<li>svn_core_platform_target_path 业务平台 Target 目录，用于存放打包后的文件。</li>
</ul>
</li>
<li>svn 该段定义 SVN 的账户信息。
<ul>
<li>svn_username SVN 用户名。</li>
<li>svn_password SVN 密码。</li>
<li>svn_url SVN 地址。</li>
</ul>
</li>
<li>core_path 该段定义部署后的业务平台目录。
<ul>
<li>core_platform_path 业务平台主目录。</li>
<li>core_platform_config_path 业务平台配置文件目录。</li>
<li>core_platform_config_api_path 业务平台 API 配置文件目录。</li>
<li>core_platform_config_auth_path 业务平台 AUTH 配置文件目录。</li>
<li>core_platform_bundles_path 业务平台 Bundles 目录。</li>
</ul>
</li>
<li>auth_path 该段定义部署后的认证平台目录。
<ul>
<li>auth_path 认证平台主目录。</li>
<li>auth_platform_config_path 认证平台配置文件目录。</li>
<li>auth_platform_config_api_path 认证平台 API 配置文件目录。</li>
<li>auth_platform_config_auth_path 认证平台 AUTH 配置文件目录。</li>
<li>auth_platform_bundles_path 认证平台 Bundles 目录。</li>
</ul>
</li>
<li>memcached 该段定义Memcached相关信息。
<ul>
<li>memcached_ip Memcached服务器 IP。</li>
<li>memcached_port Memcached服务器端口。</li>
</ul>
</li>
<li>other 该段定义其他配置信息。
<ul>
<li>core_version 业务平台版本号。</li>
<li>remote_log_path 远程服务器日志文件目录，用于存放部署业务平台产生的日志。</li>
<li>api_port 业务平台的 API 端口。</li>
<li>core_platform_jar 打包生成的业务平台 jar 包，完整文件名。</li>
<li>auth_platform_jar 认证平台 jar 包，完整文件名。</li>
<li>core_jar 业务平台 jar 包，不带后缀。</li>
<li>auth_jar 认证平台 jar 包，不带后缀。</li>
</ul>
</li>
</ul>
<p><strong>注：以上是所有的配置项，请酌情修改。</strong></p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8" id="user-content-脚本使用"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>脚本使用</h2>
<p>如果您是第一次使用该脚本打包，请依次执行如下命令：</p>
<pre><code># 第一步，编辑配置文件；
vim config.conf

# 第二步，显示帮助；
./auto_deploy_app_remote.py -h

# 第三步，准备部署（此步可以略过，因为环境已经搭建好）；
./auto_deploy_app_remote.py -p

# 第四步，检出项目；
./auto_deploy_app_remote.py -c

# 第五步，部署业务平台；
./auto_deploy_app_remote.py -d

# 第六步，部署认证平台；
./auto_deploy_app_remote.py -w

# 第七步，修改数据库配置；
./auto_deploy_app_remote.py -x

# 第八步，启动认证平台
./auto_deploy_app_remote.py -k

# 第九布，启动业务平台
./auto_deploy_app_remote.py -t
</code></pre>
<p><strong>注：第八步可以使用「./auto_deploy_app_remote.py -g」代替，第九步可以使用「./auto_deploy_app_remote.py -r」代替。</strong></p>
<p>如果您是使用该脚本更新项目，请依次执行如下命令：</p>
<pre><code># 第一步，如有需要，编辑配置文件；
vim config.conf

# 第二步，显示帮助；
./auto_deploy_app_remote.py -h

# 第三步，更新项目；
./auto_deploy_app_remote.py -u

# 第四步，关闭认证平台；
./auto_deploy_app_remote.py -a

# 第五步，关闭业务平台
./auto_deploy_app_remote.py -s

# 第六步，部署业务平台；
./auto_deploy_app_remote.py -d

# 第七步，部署认证平台；
./auto_deploy_app_remote.py -w

# 第八步，修改数据库配置；
./auto_deploy_app_remote.py -x

# 第九步，启动认证平台
./auto_deploy_app_remote.py -k

# 第十布，启动业务平台
./auto_deploy_app_remote.py -t
</code></pre>
<p><strong>注：第九步可以使用「./auto_deploy_app_remote.py -g」代替，第十步可以使用「./auto_deploy_app_remote.py -r」代替。</strong></p>

        </div>

    </div>]