[<div class="wiki-body gollum-textile-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#stakeholder-requirements" id="user-content-stakeholder-requirements"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Stakeholder Requirements</h1>
<p>Nexon 분산된 key-value storage<br/>
프로젝트 Team J</p>
<p>컴퓨터공학부 2008-11572 김재찬<br/>
컴퓨터공학부 2008-11662 유재성<br/>
컴퓨터공학부 2012-11256 염지혜</p>
<p>{{toc}}</p>
<h2>
<a aria-hidden="true" class="anchor" href="#1-executive-summary" id="user-content-1-executive-summary"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>1. <span>EXECUTIVE</span> <span>SUMMARY</span>
</h2>
<ul>
	<li>Introduction
	<ul>
		<li>조장 : 유재성</li>
		<li>조원 : 김재찬, 염지혜</li>
	</ul>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#2-goalproblem--requirement" id="user-content-2-goalproblem--requirement"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>2. <span>GOAL</span>/<span>PROBLEM</span> &amp; <span>REQUIREMENT</span>
</h2>
<p>본 프로젝트에서는</p>
<ul>
	<li>분산된 환경에서</li>
	<li>대량의 key-value 데이터를</li>
	<li>동적으로 밸런싱하여</li>
	<li>메모리에 저장하는 저장소를</li>
</ul>
<p>구현하고자 한다.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#3-technology-assessment" id="user-content-3-technology-assessment"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>3. <span>TECHNOLOGY</span> <span>ASSESSMENT</span>
</h2>
<p>본 프로젝트는 크게 In Memory Storage 와 Distributed System 이라는 두가지 키워드에 집중한다.</p>
<ul>
	<li>In Memory Storage<br/>
메모리를 저장소로 쓰는 데이터베이스는 디스크를 저장소로 쓰는 데이터베이스에 비해 성능이 크게 뛰어나다. 하지만 아직까지 분산처리 기능을 완벽히 지원하는 In memory storage product가 없어 분산처리 환경에서 사용하기엔 아직 불편하다.</li>
	<li>Distributed System<br/>
저장하고 처리 해야 할 데이터의 양이 늘어남에 따라 효율적인 분산 처리 방법에 대한 연구가 활발히 진행되고 있는데, 데이터베이스의 경우 부하를 줄이기 위해 scale-out storage를 많이 사용한다. scale-out storage는 여러개의 노드를 저장소로 쓰고, 데이터 처리량을 적절히 나누어 각각의 저장소에 가해지는 부하가 균형있게 배분되도록 하는 저장소이다. 이 때 데이터 처리를 나누기 위해 많이 쓰는 방법이 sharding 이다. 노드 갯수를 정해놓고, static sharding을 하는 것이 구현하기 간단하기 때문에 널리 쓰이고 있다. 그러나 static sharding은 데이터 처리량에 따라 노드를 추가하거나 제거할 때 데이터를 재배치해야 하기 때문에 비용이 크고, 동적으로 수행할 수 없다는 단점이 있다.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#4-approach" id="user-content-4-approach"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>4. <span>APPROACH</span>
</h2>
<p>static sharding은 위와 같은 한계가 있기 때문에 데이터를 동적으로 밸런싱하기 위해 Consistent Hashing 을 사용하기로 했다. Consistent Hashing은 하나의 노드가 일정 범위의 해쉬값을 가지는 데이터들을 각각 처리하도록 하는 모델이다. 이 모델에서 노드가 추가되면 인접한 다른 노드에서 적절한 양의 데이터를 할당받고, 노드가 제거되면 마찬가지로 인접한 다른 노드들이 제거된 노드의 데이터를 적절히 나눠 할당받기 때문에 다른 노드들은 영향을 받지 않는다는 장점이 있다.</p>
<p>{{thumbnail(그림1.png, size=600, title=Thumbnail)}}</p>
<p>본 프로젝트의 저장소 시스템은 일부 노드가 정상 작동하지 않아도 전체 시스템이 정상적으로 작동되어야 하기 때문에 각 노드마다 해당 노드의 데이터를 백업하고, 복원할 수 있는 방법이 있어야 한다. 때문에 각 Node에 Master-Slave 모델을 적용하여 보통은 Master가 Overlords와 통신을 하고 slave는 Master의 데이터를 주기적으로 백업하여 저장하도록 했다. Master가 정상작동 하지 않으면 Overlords는 slaves 중에 하나를 선택하여 Master로서의 역할을 수행하도록 한다.</p>
<p>{{thumbnail(그림2.png, size=600, title=Thumbnail)}}</p>
<p>추가적으로 각 노드의 변경 사항을 관리하고 노드들끼리 싱크를 맞추는 것은 직접 구현할 필요가 없고 ZooKeeper라는 좋은 관리 툴이 있기 때문에 분산 처리 환경 구축을 위해 해당 라이브러리를 사용하기로 했다. 또한 low level에서 네트워크로 통신하는 것도 직접 구현해야할 만한 이슈가 아니므로 ZeroMQ 라는 Message Queue를 사용하여 통신 구현을 쉽게 할 수 있도록 한다.</p>
<p>{{thumbnail(그림3.jpg, size=300, title=Thumbnail)}} {{thumbnail(그림4.jpg, size=300, title=Thumbnail)}}</p>
<h2>
<a aria-hidden="true" class="anchor" href="#5-development-environment" id="user-content-5-development-environment"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>5. <span>DEVELOPMENT</span> <span>ENVIRONMENT</span>
</h2>
<ul>
	<li>Os
	<ul>
		<li>unix (ubuntu 14.04)</li>
	</ul>
</li>
	<li>Programming Language
	<ul>
		<li>Python 3
		<ul>
			<li>For flexible type system</li>
		</ul>
</li>
	</ul>
</li>
	<li>Library
	<ul>
		<li>ZeroMQ
		<ul>
			<li>For end-to-end communication</li>
		</ul>
</li>
		<li>Zookeeper
		<ul>
			<li>Managing Nodes</li>
		</ul>
</li>
		<li>Flask
		<ul>
			<li>For Dimint Test Client</li>
		</ul>
</li>
	</ul>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#6-architecture" id="user-content-6-architecture"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>6. <span>ARCHITECTURE</span>
</h2>
<ul>
	<li>
<strong>Application (DiMint Client)</strong><br/>
Overlord의 IP를 알고 있으며 해당 IP로 library 에서 제공하는 커맨드를 이용하여 DiMint Server System과 통신한다. DiMint Server에 관해서 IP 이외의 정보를 알 필요가 없기 때문에 사용하기 편리하다.</li>
</ul>
<ul>
	<li>
<strong>DiMint Server System</strong>
	<ul>
		<li>
<strong>Overlords</strong><br/>
세개의 서버로 구성되어 있으며 DiMint Client에서 보내는 모든 커맨드를 처리한다. 세개인 이유는 Overlords가 시스템의 핵심이기 때문에 서버가 세개인 경우 한 개의 서버가 정상 작동 하지 않아도 전체 시스템은 정상적으로 작동할 수 있기 때문이다. Overlords는 서비스를 요청한 Client의 정보를 가지고 consistent hashing을 하여 어떤 노드에 access하여 명령을 처리할 지 결정한다. 또한 항상 Node들의 부하를 체크하여 모니터링을 할 수 있도록 하며 관리자가 노드를 추가하거나 제거하는 경우에 필요한 처리들을 수행한다.</li>
		<li>
<strong>Nodes</strong><br/>
실제적인 데이터 저장소이다. 각 노드는 Overlords에 직접적으로 연결되어있고, 필요한 경우 Overlord에서 다른 노드의 정보를 받아와서 노드들끼리 서로 통신하여 data rebalancing을 수행한다.</li>
	</ul>
</li>
</ul>
<p>{{thumbnail(그림5.png, size=600, title=Thumbnail)}}</p>
<h2>
<a aria-hidden="true" class="anchor" href="#7-basic-spec" id="user-content-7-basic-spec"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>7. <span>BASIC</span> <span>SPEC</span>
</h2>
<ul>
	<li>소켓 라이브러리를 이용하여 End-to-end 통신을 구현한다.</li>
	<li>Node에 다양한 형태의 key-value 데이터 저장할 수 있도록 한다.</li>
	<li>Overlord 서버에서 hashing을 이용한 sharding을 구현한다.</li>
	<li>Overlord 서버에 Node들을 (동적)추가/제거하는 기능을 구현한다.
	<ul>
		<li>Node가 추가/제거되었을 때 리밸런싱을 수행하도록 한다.</li>
	</ul>
</li>
	<li>Master Node에서 Slave Node로 replication을 수행하도록 한다.</li>
	<li>Write할 때는 Master Node에서, read할 때는 Slave Node에서 처리한다.(Query off loading)</li>
	<li>Node에 장애 발생 시 장애를 극복할 수 있도록 처리한다.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#8-current-status" id="user-content-8-current-status"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>8. <span>CURRENT</span> <span>STATUS</span>
</h2>
<ul>
	<li>key-value storage 정의
	<ul>
		<li>key-value storage 특징 확인</li>
		<li>다른 종류의 database의 정의와 특징 확인</li>
		<li>대표적인 key-value storage 파악, 어떻게 쓰이고 있는지 확인</li>
	</ul>
</li>
	<li>소켓 라이브러리 선택</li>
	<li>분산 스토리지 정의
	<ul>
		<li>분산 스토리지 특징 확인</li>
		<li>다른 형태의 스토리지의 정의와 특징 확인</li>
		<li>다른 형태의 스토리지와 비교, 분산 스토리지의 장/단점 파악</li>
		<li>대표적인 분산 스토리지 파악, 어떻게 쓰이고 있는지 확인</li>
	</ul>
</li>
	<li>Zookeeper의 동작 방식 확인</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#9-further-plan" id="user-content-9-further-plan"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>9. <span>FURTHER</span> <span>PLAN</span>
</h2>
<ul>
	<li>통신 프로토콜 정의 및 구현</li>
	<li>노드의 read/write 구현</li>
	<li>Zookeeper 노드 연결 구현</li>
	<li>노드 추가/제거/장애 알림 구현</li>
	<li>Consistent hashing 구현</li>
	<li>데이터 rebalancing 구현</li>
	<li>Slave replicate 구현</li>
	<li>Query off Loading 구현</li>
	<li>Master election 구현</li>
	<li>모니터링 기능 구현</li>
	<li>테스트 클라이언트 구현</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#10-division-and-assignment-of-work" id="user-content-10-division-and-assignment-of-work"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>10. <span>DIVISION</span> <span>AND</span> <span>ASSIGNMENT</span> OF <span>WORK</span>
</h2>
<p>11개의 태스크를 Pair programming 으로 수행하도록 한다.</p>
<ul>
	<li>통신 프로토콜 정의 및 구현 : 김재찬 유재성</li>
	<li>노드의 read/write 구현 : 유재성 염지혜</li>
	<li>Zookeeper 노드 연결 구현 : 김재찬 염지혜</li>
	<li>노드 추가/제거/장애 알림 구현 : 유재성 염지혜</li>
	<li>Consistent hashing 구현 : 김재찬 유재성</li>
	<li>데이터 rebalancing 구현 : 유재성 염지혜</li>
	<li>Slave replicate 구현 : 김재찬 염지혜</li>
	<li>Query off Loading 구현 : 김재찬 유재성</li>
	<li>Master election 구현 : 유재성 염지혜</li>
	<li>모니터링 기능 구현 : 김재찬 염지혜</li>
	<li>테스트 클라이언트 구현 : 김재찬 유재성</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#11-schedule" id="user-content-11-schedule"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>11. <span>SCHEDULE</span>
</h2>
<p>{{thumbnail(schedule.png, size=600, title=Thumbnail)}}</p>
        </div>

    </div>]