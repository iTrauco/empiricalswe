[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#tutorial-format-tut" id="user-content-tutorial-format-tut"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tutorial Format (.tut)</h1>
<p>The .tut format is a simple directory-based format.</p>
<p>A valid .tut directory must contain the following files:</p>
<p><code>example.tut/</code></p>
<ul>
<li>
<code>analysis.py</code>
<ul>
<li>contains static analysis code</li>
<li>must define <code>ANALYSER</code> to contain a <code>CodeAnalyser</code> subclass
<ul>
<li>
<code>CodeAnalyser</code> will be injected into the namespace when run</li>
</ul>
</li>
</ul>
</li>
<li>
<code>config.py</code>
<ul>
<li>defines configuration information for the tutorial</li>
<li>
<code>SHORT_DESCRIPTION</code>: a one-line explanation of the task, shown prominently on the UI</li>
<li>
<code>WRAP_STUDENT_CODE</code>: <code>True</code> if the student is not writing a function; can be omitted otherwise</li>
<li>
<code>HINTS</code>: a list of hints (as strings)</li>
<li>
<code>TIMEOUT</code>: the maximum time to permit to run all tests and perform static analysis on the tutorial (optional)</li>
</ul>
</li>
<li>
<code>description.html</code>
<ul>
<li>the tutorial task description</li>
</ul>
</li>
<li>
<code>preload.py</code>
<ul>
<li>the code which should be loaded into the MyPyTutor editor window when the tutorial is first run (or is reset)</li>
</ul>
</li>
<li>
<code>support.py</code>
<ul>
<li>any code in this file will be executed before testing the student's submission</li>
<li>use to define any required functions/classes</li>
</ul>
</li>
<li>
<code>tests.py</code>
<ul>
<li>test cases for the student submission</li>
<li>must define <code>TEST_CLASSES</code> as a list of test case classes (not instances)</li>
<li>each test case must inherit from <code>StudentTestCase</code>
<ul>
<li>
<code>StudentTestCase</code> will be injected into the namespace when run</li>
<li>test cases must define two class variables:
<ul>
<li>
<code>DESCRIPTION</code>: a description of the test case, as a string, eg: <code>add(1, 2) -&gt; 3</code> or <code>Does not modify input</code>
</li>
<li>
<code>MAIN_TEST</code>: the name of the method corresponding to the description</li>
</ul>
</li>
<li>test cases must contain at least one test method
<ul>
<li>output from this main test method will be shown to the student</li>
<li>additional methods may be added to prevent students simply writing code which retursn the right values to meet the visible tests</li>
</ul>
</li>
<li>student code may be executed by calling <code>self.run_student_code</code>
<ul>
<li>
<code>input_text</code> may be used to prove a string as stdin</li>
<li>
<code>*args</code> and <code>**kwargs</code> will be passed directly to the student's function</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>For a further explanation of how to add tutorial problems, see #15.</p>

        </div>

    </div>]