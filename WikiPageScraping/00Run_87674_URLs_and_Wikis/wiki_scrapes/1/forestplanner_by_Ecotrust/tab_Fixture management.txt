[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>This app relies on a lot of pre-loaded data, much of it required for basic operation.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#models-with-fixtures-installed-with-import_data-command" id="user-content-models-with-fixtures-installed-with-import_data-command"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Models with fixtures installed with import_data command:</h3>
<ul>
<li>RasterDataset</li>
<li>IdbSummary</li>
<li>County</li>
<li>FVSSpecies</li>
<li>TreeliveSummary</li>
<li>FVSAggregate [1]</li>
<li>ConditionVariantLookup [1]</li>
</ul>
<ol>
<li>
<p><a href="https://github.com/Ecotrust/land_owner_tools/wiki/Fixture-management#fvsaggregate-and-conditionvariantlookup-the-multi-csv-way-for-production-machines">Procedures for updating these from new GYBatch runs</a></p>
</li>
<li>
<p>All of these data are downloaded from <code>http://labs.ecotrust.org/forestplanner/data/*</code> if they are not already on your local drive. The <code>labs</code> url should be considered the authoritative source for this info.</p>
</li>
</ol>
<h3>
<a aria-hidden="true" class="anchor" href="#models-with-fixtures-installed-with-initial_datajson-happens-automatically-on-migrate" id="user-content-models-with-fixtures-installed-with-initial_datajson-happens-automatically-on-migrate"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Models with fixtures installed with initial_data.json (happens automatically on migrate):</h3>
<ul>
<li>FVSVariant</li>
<li>Rx</li>
<li>TimberPrice</li>
</ul>
<p>If the data get updated, re-create the initial_data fixture and commit it:
<code>python manage.py dumpdata --indent=2 trees.fvsvariant trees.rx trees.timberprice &gt; trees/fixtures/initial_data.json</code></p>
<h3>
<a aria-hidden="true" class="anchor" href="#models-with-fixtures-that-you-may-want-to-install-manually" id="user-content-models-with-fixtures-that-you-may-want-to-install-manually"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Models with fixtures that you MAY want to install manually:</h3>
<h5>
<a aria-hidden="true" class="anchor" href="#fvsaggregate-and-conditionvariantlookup" id="user-content-fvsaggregate-and-conditionvariantlookup"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>FVSAggregate and ConditionVariantLookup</h5>
<ul>
<li>prep the data per the <code>growth-yield-batch</code> docs</li>
<li><code>build_keys</code></li>
<li><code>batch_fvs</code></li>
<li>fix errors; if not fixable, remove the entire cond</li>
</ul>
<pre><code>    DELETE 
    FROM trees_fvsaggregate
    WHERE var = 'EC' and cond in (34101,34179,11385,34175,34194,11385);
</code></pre>
<ul>
<li>QC row count</li>
</ul>
<pre><code>    sqlite&gt; select sum(cnt) 
            from (select var, 
                         count(distinct(cond)),
                         count(distinct(rx)),
                         count(distinct(cond)) * count(distinct(rx)) as cnt 
                  from trees_fvsaggregate group by var) as foo;
    8179
    sqlite&gt; select 8179 * 21;  -- 21 time periods
    171759
    sqlite&gt; select count(*) from trees_fvsaggregate;
    171759
</code></pre>
<ul>
<li>determine FP schema (on dbshell, fp dev machine)</li>
</ul>
<pre><code>SELECT column_name 
from information_schema.columns 
where table_name='trees_fvsaggregate'
order by ordinal_position;
</code></pre>
<p>which, after joining with commas and quotes, looks like:</p>
<pre><code>"id", "agl", "bgl", "calc_carbon", "cond", "dead", "offset", "rx", "site", "total_stand_carbon", "var", "year", "merch_carbon_removed", "merch_carbon_stored", "cedr_bf", "cedr_hrv", "ch_cf", "ch_hw", "ch_tpa", "cut_type", "df_bf", "df_hrv", "es_btl", "firehzd", "hw_bf", "hw_hrv", "lg_cf", "lg_hw", "lg_tpa", "lp_btl", "mnconbf", "mnconhrv", "mnhw_bf", "mnhw_hrv", "nsodis", "nsofrg", "nsonest", "pine_bf", "pine_hrv", "pp_btl", "sm_cf", "sm_hw", "sm_tpa", "spprich", "sppsimp", "sprc_bf", "sprc_hrv", "wj_bf", "wj_hrv", "ww_bf", "ww_hrv", "after_ba", "after_merch_bdft", "after_merch_ft3", "after_total_ft3", "after_tpa", "age", "removed_merch_bdft", "removed_merch_ft3", "removed_total_ft3", "removed_tpa", "start_ba", "start_merch_bdft", "start_merch_ft3", "start_total_ft3", "start_tpa"
</code></pre>
<ul>
<li>
<p>query data.db to match this schema, remove "id", ******** note "site" cast to int</p>
<p>** RUN THE QUERY SEEN BELOW **</p>
</li>
<li>
<p>output to csv</p>
</li>
</ul>
<pre><code>.mode tabs
.headers off
.output ../fvsaggregate_batch3.tsv

    SELECT "agl", "bgl", "calc_carbon", "cond", "dead", "offset", "rx", cast("site" as integer) as "site", "total_stand_carbon", "var", "year", "merch_carbon_removed", "merch_carbon_stored", "cedr_bf", "cedr_hrv", "ch_cf", "ch_hw", "ch_tpa", "cut_type", "df_bf", "df_hrv", "es_btl", "firehzd", "hw_bf", "hw_hrv", "lg_cf", "lg_hw", "lg_tpa", "lp_btl", "mnconbf", "mnconhrv", "mnhw_bf", "mnhw_hrv", "nsodis", "nsofrg", "nsonest", "pine_bf", "pine_hrv", "pp_btl", "sm_cf", "sm_hw", "sm_tpa", "spprich", "sppsimp", "sprc_bf", "sprc_hrv", "wj_bf", "wj_hrv", "ww_bf", "ww_hrv", "after_ba", "after_merch_bdft", "after_merch_ft3", "after_total_ft3", "after_tpa", "age", "removed_merch_bdft", "removed_merch_ft3", "removed_total_ft3", "removed_tpa", "start_ba", "start_merch_bdft", "start_merch_ft3", "start_total_ft3", "start_tpa" FROM trees_fvsaggregate;
</code></pre>
<ul>
<li>transfer tsv to dev server</li>
<li>load new data, dbshell on dev server</li>
</ul>
<pre><code>    DELETE from trees_fvsaggregate;  -- takes several minutes

    COPY trees_fvsaggregate ("agl", "bgl", "calc_carbon", "cond", "dead", "offset", "rx", "site", "total_stand_carbon", "var", "year", "merch_carbon_removed", "merch_carbon_stored", "cedr_bf", "cedr_hrv", "ch_cf", "ch_hw", "ch_tpa", "cut_type", "df_bf", "df_hrv", "es_btl", "firehzd", "hw_bf", "hw_hrv", "lg_cf", "lg_hw", "lg_tpa", "lp_btl", "mnconbf", "mnconhrv", "mnhw_bf", "mnhw_hrv", "nsodis", "nsofrg", "nsonest", "pine_bf", "pine_hrv", "pp_btl", "sm_cf", "sm_hw", "sm_tpa", "spprich", "sppsimp", "sprc_bf", "sprc_hrv", "wj_bf", "wj_hrv", "ww_bf", "ww_hrv", "after_ba", "after_merch_bdft", "after_merch_ft3", "after_total_ft3", "after_tpa", "age", "removed_merch_bdft", "removed_merch_ft3", "removed_total_ft3", "removed_tpa", "start_ba", "start_merch_bdft", "start_merch_ft3", "start_total_ft3", "start_tpa") 
    FROM '/usr/local/apps/land_owner_tools/lot/fixtures/try_batch3/fvsaggregate_batch3.tsv'
    WITH NULL AS '';

   -- Note COPY &lt;&lt;line number&gt;&gt; and compare to counts above
</code></pre>
<ul>
<li>refresh indicies</li>
</ul>
<pre><code>    REINDEX TABLE trees_fvsaggregate;
    CLUSTER trees_fvsaggregate USING idx_trees_fvsaggregate_cond;
    VACUUM ANALYZE;
</code></pre>
<ul>
<li>refresh condvarlookup</li>
</ul>
<pre><code>    DELETE FROM trees_conditionvariantlookup;

    INSERT INTO trees_conditionvariantlookup(cond_id, variant_code)
      SELECT cond as cond_id, var as variant_code
      FROM trees_fvsaggregate
      GROUP BY cond, var
</code></pre>
<ul>
<li>refresh indicies</li>
</ul>
<pre><code>    REINDEX TABLE trees_conditionvariantlookup;
    VACUUM ANALYZE;
</code></pre>
<ul>
<li>check_integrity</li>
</ul>
<pre><code>python manage.py check_integrity
</code></pre>
<ul>
<li>Data migration</li>
</ul>
<pre><code>    python manage.py clear_cache
    python manage.py shell
</code></pre>
<ul>
<li>In the django python shell...</li>
</ul>
<pre><code>    from trees.models import Scenario, Stand, ScenarioNotRunnable
    from trees.utils import fake_scenariostands

    # how many don't currently have cond_ids
    missing_before = [x.id for x in Stand.objects.filter(cond_id=None)]
    print len(missing_before)

    # Rerun impute_nearest_neighbor task on all existing stands
    for stand in Stand.objects.all():   #  or filter(...):
        stand.cond_id = None
        stand.save()

    # Wait for all stand.cond_id to be reimputed. 
    Stand.objects.filter(cond_id=None).exclude(id__in=missing_before).count()  # should be zero, if not still working or failure

    # investigate failures and fix
    for stand in Stand.objects.filter(cond_id=None).exclude(id__in=missing_before):
        print "--------------------------------"
        print stand, stand.user.username
        try:
            stand.get_cond_id()
        except Exception as e:
            print e

    # Rerun scenarios IF necessary
    for scenario in Scenario.objects.all():
        print "-" * 80
        print scenario, scenario.user, scenario.name
        try:
            fake_scenariostands(scenario)
            scenario.run()
        except ScenarioNotRunnable:
            print "\tNOT RUNNABLE"
</code></pre>
<ul>
<li>
<strong>TODO</strong> Create fixtures and upload to server</li>
</ul>
<p>For dev machines where you want a smaller chunk of test data, use the <code>import_data</code> management command then follow the appropriate migration procedures.</p>

        </div>

    </div>]