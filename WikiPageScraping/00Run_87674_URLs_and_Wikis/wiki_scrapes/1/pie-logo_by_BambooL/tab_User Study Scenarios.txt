[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>In order to test how well new users can acquaint themselves with PiE versus Python, we need to have an engaging and interesting case study that grabs the subject's interest, and tests all the abilities of PiE.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#how-it-works" id="user-content-how-it-works"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How it works</h2>
<p>This scenario is similar to a game, or Mars rover control system. You complete tasks with goals and obstacles, so this might require a special variant version of the PiE LOGO website system.</p>
<blockquote>
<p><strong>Note:</strong> <em>Perhaps we should change the icon to a Mars Rover, though on the other hand, I felt that the idea of a turtle moving around in space is an amusing concept.</em></p>
</blockquote>
<p>Although the base scenario is the same for both groups, the difference is that one group uses PiE natural language and one group (the control) uses exact LOGO equivalents.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#what-to-log" id="user-content-what-to-log"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>What to Log</h3>
<p>Log these features for both control and test groups:</p>
<ul>
<li>Average Length of time needed to complete a tutorial section</li>
<li>Average Length of time needed to complete a puzzle</li>
<li>Final Case Study results</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#what-has-to-be-added" id="user-content-what-has-to-be-added"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>What has to be added</h3>
<ul>
<li>Walls and obstacles - If the turtle hits these, it will literally "crash", and program execution will terminate. This allows us to teach exception handling in a very visual way.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#scenario-space-turtle" id="user-content-scenario-space-turtle"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Scenario: Space Turtle</h2>
<p>We've invented a simulator, designed to train you (the user) to tell a turtle to complete tasks. Sort of like puzzles in a game.</p>
<p>This simulator uses our (patent-pending) Natural Language Interpreter, which will convert your English-language statements into commands for the turtle to do.</p>
<p>Now, if you're wondering why we have to send a batch of commands to the turtle, instead of just directly controlling it with the arrow keys or something, that's because it's in...</p>
<p><strong>SPACE.</strong></p>
<p>You see, this turtle will travel to Mars. This space turtle will be sent there to make interesting track patterns on the surface of the moon to win the Google X-Prise or something.</p>
<p>Notice that Even the speed of light, the radio latency between Earth and Mars is at least three minutes between radio transmission and reception. As a result, we want to make sure that every move is calculated ahead of time, and every obstacle is accounted for. Because if your turtle flips over on Mars, nothing in space can pick it back up again.</p>
<p>So we developed this simulator to give you some practice before you command the real thing. Let's start out by solving a few case study puzzles.</p>
<p>Once you've finished all the tutorial puzzles, you can try your hand at the main puzzles.</p>
<p>Finally, once you're comfortable with directing the turtle, you can try to solve the <strong>Actual Task</strong> (Final Case Study) using the commands you've learned.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#tutorial-case-studies" id="user-content-tutorial-case-studies"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tutorial Case Studies</h2>
<p><em>The tutorial case studies are designed to teach users to utilize each element of PiE/LOGO. These should be solvable with only one type of command per case (as much as possible).</em></p>
<h3>
<a aria-hidden="true" class="anchor" href="#case-1-moving-the-turtle" id="user-content-case-1-moving-the-turtle"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Case 1: Moving the Turtle</h3>
<p>(how to push the turtle around the area)</p>
<p>The simplest command that you can make the turtle do is to tell it to move somewhere else.</p>
<p>This case study should show the user how to move the turtle forwards, backwards, left and right. It should also show how to rotate.</p>
<p>Also, a short intro on the (pen up/pen down) command should be made. The goal of the little cases should be to draw some shapes.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#case-2-creating-automated-movement-patterns" id="user-content-case-2-creating-automated-movement-patterns"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Case 2: Creating Automated Movement Patterns</h3>
<p>(basically creating patterns of movement, using loops. Maybe a "mining" action?)</p>
<p>Now that we know how to move the turtle, we must figure out how to tell the turtle to repeat an action over and over again.</p>
<p>The goal of this case study should be to create repeating fractals from simple loops.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#case-3-condition-checking" id="user-content-case-3-condition-checking"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Case 3: Condition Checking</h3>
<p>(if statements, specifically with walls and rock obstacles)</p>
<p>Think about it. The turtle follows your commands down to the letter. And if your turtle hits a rock or a cliff, it could flip over and that would be the end of it. But it's a pain to manually plan out your moves to avoid rocks. The turtle has eyes, so why not give the turtle a few commands to turn once it hits an obstacle?</p>
<p>The goal of this case study should be to make the turtle detect objects and give it basic logic to figure out what to do if it ever meets a certain situation.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#case-4-functions" id="user-content-case-4-functions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Case 4: Functions</h3>
<p>(functions with parameters)</p>
<p>Now that we know how to command the turtle, wouldn't it be nice to batch up all the commands needed to, say, <em>move forward</em>? It would be a pain (as well as error-prone) to tell the turtle to avoid rocks, and exactly how much to move, every single time.</p>
<ul>
<li>
<strong>Move</strong>: (forward, backward, left, right) - One parameter, distance.</li>
<li>
<strong>Draw</strong>: (square, rectangle, circle) - Square has length parameter, Rectangle has length and width parameter, circle has radius parameter.</li>
<li>
<strong>Mine</strong> - Start digging in the current area. Alternatively, a coordinates parameter can be given to send the turtle to a different area to dig in.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#puzzle-case-studies" id="user-content-puzzle-case-studies"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Puzzle Case Studies</h2>
<p>The Puzzle Case studies are designed to check the user's comprehension of a certain element of LOGO programming.</p>
<p>There should be Tutorial Puzzles, which only require the one element of LOGO taught in the Tutorial.</p>
<p>There are also Main Puzzles, which require various elements of LOGO programming to be used in conjunction to finish the test. After the Main Puzzles, the Final Case Study</p>
<h3>
<a aria-hidden="true" class="anchor" href="#testing" id="user-content-testing"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Testing</h3>
<p>The Puzzles give us the bulk of the data from the user study. The length of time taken to complete a puzzle, a ranking of how many puzzles were completed or not finished, and whether the user actually succeeded.</p>
<p>In order to see if the user actually succeeded at the puzzle, but also allow the user to develop any method  they prefer, the user is given exact perameters of the output, and their output is checked again</p>
<h3>
<a aria-hidden="true" class="anchor" href="#final-puzzle" id="user-content-final-puzzle"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Final Puzzle</h3>
<p>Each section has a final case, where the wanted output is not shown to the user, and a final submission is requested. It must be able to be automatically graded.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#final-case-study" id="user-content-final-case-study"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Final Case Study</h2>
<p>The final case study is a puzzle designed to test whether a participant has learned to use PiE effectively enough to lead the turtle to complete a task.</p>
<p>There is only a prompt here, no sample code or instructions. The participant must devise their own unique solution. The participant is allowed to "simulate" the results of his actions. However, once they press "Submit Commands", their turtle only has once chance to complete the task, and the scenario ends whether they succeed or fail on that try.</p>
<hr/>
<blockquote>
<p>"Alright, now that you've gone through many rounds in the simulator, it's time to send the Space Turtle on a mission. For real. And you're at the controls. Try your best, and simulate your moves throughly. But remember, once you submit the final actions, there is no turning back. Your Space Turtle will only have once chance to complete the task. Good Luck."</p>
</blockquote>
<hr/>
<p>The final case study is the ultimate test of PiE's ease of adoption. If PiE users score higher than LOGO users, we will tentatively prove that PiE's natural language programming is easier to pick up than traditional commands.</p>

        </div>

    </div>]