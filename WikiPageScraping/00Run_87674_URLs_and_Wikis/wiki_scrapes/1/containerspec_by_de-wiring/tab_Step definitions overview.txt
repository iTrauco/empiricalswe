[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>This page describes step definitions for images and containers.</p>
<p>A good overview can also be found in the test cases:</p>
<ul>
<li><a href="https://github.com/de-wiring/containerspec/tree/master/tests/core-tests/features">tests/core-tests/features</a></li>
<li><a href="https://github.com/de-wiring/containerspec/tree/master/tests/example-tests/features">tests/example-tests/features</a></li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#images" id="user-content-images"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Images</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#given" id="user-content-given"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Given</h3>
<p>Given clauses are optional, in case images need to be pulled first.</p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>Given i pull '([^:]+)'</td>
<td>Add tags latests, pulls the image :latest from docker index</td>
</tr>
<tr>
<td>Given i pull '(.*):(.*)'</td>
<td>Pulls the image from docker index</td>
</tr>
</tbody>
</table>
<h3>
<a aria-hidden="true" class="anchor" href="#when" id="user-content-when"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>When</h3>
<p>All images on local docker storage can be tested, probably not all at once, but only subsets. A <em>When</em> matcher is needed to select images for further inspection. Only images matching the When-criteria are considered.</p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>When there are images</td>
<td>selects all images on local storage for further inspection</td>
</tr>
<tr>
<td>When there are images with repo '(.*)'</td>
<td>Selects all images with given repository (i.e. 'debian', 'debian:latest', 'debian:jessie') that are on local storage, for further inspection</td>
</tr>
<tr>
<td>When there are images with tags like '(.*)'</td>
<td>Uses parameter as a <em>regular expression</em> and select all images on local storage which Repository/Tag Strings match it, for further inspection, i.e. 'web[0-9]'</td>
</tr>
<tr>
<td>When there are images tagged '(.*)'/</td>
<td>Selects image with exact matching tag, i.e. 'my_nginx:1.2.3.4'</td>
</tr>
</tbody>
</table>
<h3>
<a aria-hidden="true" class="anchor" href="#then" id="user-content-then"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Then</h3>
<p>After selecting subsets of images with <em>When</em>, <em>Then</em> tests for fields to be present (or not present). It internally makes an api call to <code>docker inspect</code> after finding out what fields to look for. Images where given patterns do NOT apply are collected and printed out in error message.</p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>Then '(.*)' should be set</td>
<td>checks if given field is set (non-null, not empty if array or map), i.e. 'Author'</td>
</tr>
<tr>
<td>Then '(.*)' should not be set</td>
<td>checks if given image field is not set</td>
</tr>
<tr>
<td>Then '(.*)' should be '(.*)'</td>
<td>checks if image field is exact string, i.e. 'Author' should be '<a href="mailto:me@me.com">me@me.com</a>'</td>
</tr>
<tr>
<td>Then '(.*)' should not be '(.*)'</td>
<td>checks if image field is not exact string, i.e. 'Author' should not be '<a href="mailto:me@me.com">me@me.com</a>'</td>
</tr>
<tr>
<td>Then '(.*)' should be like '(.*)'</td>
<td>checks if image field matches regular expression, i.e. 'Author' should be like '.*@mycompany'</td>
</tr>
<tr>
<td>Then '(.*)' should not be like '(.*)'</td>
<td>checks if image field matches regular expression, i.e. 'Author' should not be like '.*@mycompany'</td>
</tr>
</tbody>
</table>
<p>Fields in a result of <code>docker inspect</code> are hierarchical, some fields are contained in sections name 'Config' oder 'ContainerConfig'. The keyword <code>within</code> points to subsections.</p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>Then within ([^ ]*), '(.*)' should be like '(.*)'</td>
<td>Looks in subsection (1st param) for (2nd) param, treats 3rd param as regular expression and checks for a match, i.e. within Config, 'Env' should be like 'NGINX_VERSION=1.7.8-1~wheezy'</td>
</tr>
<tr>
<td>Then within ([^ ]*), '(.*)' should not be like '(.*)'</td>
<td>inverse of the above</td>
</tr>
<tr>
<td>Then within ([^ ]*), '(.*)' should be '(.*)'</td>
<td>Looks in subsection (1st param) for (2nd) param,checks if 3rd param matches the field value exactly, i.e. within Config, 'Workdir' should be '/data'</td>
</tr>
<tr>
<td>Then within ([^ ]*), '(.*)' should not be '(.*)'</td>
<td>inverse of the above</td>
</tr>
<tr>
<td>Then within ([^ ]*), '(.*)' should be set</td>
<td>Looks in subsection (1st param) for (2nd) param,checks if field value is set and not-empty, i.e. within Config, 'Env' should be set</td>
</tr>
<tr>
<td>Then within ([^ ]*), '(.*)' should not be set</td>
<td>inverse of the above</td>
</tr>
</tbody>
</table>
<h1>
<a aria-hidden="true" class="anchor" href="#containers" id="user-content-containers"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Containers</h1>
<p>Clauses containers work on existing (not-running) and running containers. They are selected using <em>When</em>-Clauses</p>
<h2>
<a aria-hidden="true" class="anchor" href="#when-1" id="user-content-when-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>When</h2>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>when there is a ([running ]*)container named '(.*)'</td>
<td>Select running/existings containers (1st param) with exact name matches, i.e. when there is a running container name 'nginx_1_of_10' / when there is a container named 'registry'</td>
</tr>
<tr>
<td>when there are ([running ]*)containers named like '(.*)'</td>
<td>Same as above, but selects multiple containers by treating 2nd param as a regular expression, i.e. when there are running containers named 'web[0-9]'</td>
</tr>
</tbody>
</table>
<h2>
<a aria-hidden="true" class="anchor" href="#then-1" id="user-content-then-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Then</h2>
<p>Likewise to image clauses, <em>Then</em> clauses use <code>docker inspect</code> to evaluate fields and compare the results.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#generic-field-comparison" id="user-content-generic-field-comparison"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Generic field comparison</h3>
<p>For top-level fields and fields in subsections.</p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>then container '(.*)' should be like '(.*)'</td>
<td>Inspection field (1st param) should match 2nd parameter, treated as a regexp</td>
</tr>
<tr>
<td>then container '(.*)' should not be like '(.*)'</td>
<td>Inverse of the above</td>
</tr>
<tr>
<td>then within container ([^ ]*), '(.*)' should be '(.*)'</td>
<td>i.e.  then within container HostConfig, 'Privileged' should be 'false'</td>
</tr>
<tr>
<td>then within container ([^ ]*), '(.*)' should not be '(.*)'</td>
<td>inverse of the above, i.e.  within container HostConfig, 'Privileged' should not be 'true'</td>
</tr>
<tr>
<td>then within container ([^ ]*), '(.*)' should be like '(.*)'</td>
<td>as above, but treats 3rd param as a regular expression i.e.  within container Config, 'Env' should be like 'TESTKEY1=TESTVALUE1'</td>
</tr>
<tr>
<td>then within container ([^ ]*), '(.*)' should not be like '(.*)'</td>
<td>inverse of the above, i.e.  within container Config, 'Env' should not be like 'non=existing'</td>
</tr>
</tbody>
</table>
<p>This sounds too generic, so additional matchers are helpful for better readability:</p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>then (it|they) should run privileged</td>
<td>Checks if container(s) run(s) 'privileged'</td>
</tr>
<tr>
<td>then (it|they) should not run privileged</td>
<td>Inverse of the above</td>
</tr>
<tr>
<td>(it|they) should run on image '(.*)'</td>
<td>Checks that containers are created from given image, i.e. they should run on image 'debian:jessie'</td>
</tr>
</tbody>
</table>
<p><strong>Environment</strong></p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>then its environment should include '(.*)'</td>
<td>Checks if container environment variables include given one, i.e. Then its environment should include 'TESTKEY1'</td>
</tr>
<tr>
<td>then its environment should not include '(.*)'</td>
<td>Inverse, i.e. Then its environment should not include 'nonexisting'</td>
</tr>
</tbody>
</table>
<p><strong>Volumes</strong></p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>then container volume '(.*)' should be mounted</td>
<td>Checks if container defines a volume mount with given name, i.e. Then container volume '/media' should be mounted</td>
</tr>
<tr>
<td>then container volume '(.*)' should not be mounted</td>
<td>Inverse, i.e.  container volume '/var' should not be mounted</td>
</tr>
<tr>
<td>then container volume '(.*)' should be mounted read-only</td>
<td>As above, but additionaly checks for volume being mounted read-only</td>
</tr>
<tr>
<td>then container volume '(.*)' should be mounted to host volume '(.*)'</td>
<td>As above, but additionally checks host-side of volume mount, i.e. container volume '/media' should be mounted to host volume '/tmp'</td>
</tr>
<tr>
<td>(it|they) should have volumes from '(.*)'</td>
<td>Checks if containers mount volumes from other containers, i.e. it should have volumes from 'db'</td>
</tr>
<tr>
<td>(it|they) should not have volumes from '(.*)'</td>
<td>Inverse</td>
</tr>
</tbody>
</table>
<p><strong>Ports</strong></p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>then container[s]* should expose port '([^ ]*)'</td>
<td>Checks if port expose map include given port, i.e. container should expose port '9090'</td>
</tr>
<tr>
<td>then container[s]* should not expose port '([^ ]*)'</td>
<td>Inverse, i.e. container should not expose port '22'</td>
</tr>
<tr>
<td>then container[s]* should expose port '([^ ]*)' on host port '(.*)'</td>
<td>Checks host side of port, i.e.  container should expose port '9090' on host port '8080'</td>
</tr>
</tbody>
</table>
<p><strong>User</strong></p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>(it|they) should run as user '(.*)'</td>
<td>Checks if containers run under given user identity, i.e. it should not run as user 'tomcat'</td>
</tr>
<tr>
<td>(it|they) should not run as user '(.*)'</td>
<td>Inverse, i.e. it should not run as user 'root'</td>
</tr>
<tr>
<td>(it|they) should not run as root</td>
<td>as above, short form for root</td>
</tr>
</tbody>
</table>
<p><strong>Linking</strong></p>
<table>
<thead>
<tr>
<th>Definition/Example</th>
<th>what it does</th>
</tr>
</thead>
<tbody>
<tr>
<td>(it|they) should be linked to '([^ ]+)'</td>
<td>Checks if containers are linked to another container, i.e. it should be linked to 'amb1'</td>
</tr>
<tr>
<td>(it|they) should be not linked to '([^ ]+)'</td>
<td>Inverse.</td>
</tr>
<tr>
<td>(it|they) should be linked to '([^ ]+)' with name '(.*)'</td>
<td>As above, but also check for link name, i.e. it should be linked to 'amb1' with name 'ambassador'</td>
</tr>
</tbody>
</table>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>de-wiring are Andreas Schmidt, Dustin Huptas. © 2014,2015</p>

          </div>
        </div>
    </div>]