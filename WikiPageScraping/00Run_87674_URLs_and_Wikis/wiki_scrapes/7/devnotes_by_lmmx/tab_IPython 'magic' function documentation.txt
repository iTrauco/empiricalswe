[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <table>
<thead>
<tr>
<th>IPython's</th>
<th><em>'magic'</em></th>
<th>functions</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#alias"><code>%alias</code></a></td>
<td><a href="#alias_magic"><code>%alias_magic</code></a></td>
<td><a href="#autocall"><code>%autocall</code></a></td>
</tr>
<tr>
<td><a href="#autoindent"><code>%autoindent</code></a></td>
<td><a href="#automagic"><code>%automagic</code></a></td>
<td><a href="#bookmark"><code>%bookmark</code></a></td>
</tr>
<tr>
<td><a href="#cat"><code>%cat</code></a></td>
<td><a href="#cd"><code>%cd</code></a></td>
<td><a href="#clear"><code>%clear</code></a></td>
</tr>
<tr>
<td><a href="#colors"><code>%colors</code></a></td>
<td><a href="#config"><code>%config</code></a></td>
<td><a href="#cp"><code>%cp</code></a></td>
</tr>
<tr>
<td><a href="#cpaste"><code>%cpaste</code></a></td>
<td><a href="#dhist"><code>%dhist</code></a></td>
<td><a href="#dirs"><code>%dirs</code></a></td>
</tr>
<tr>
<td><a href="#doctest_mode"><code>%doctest_mode</code></a></td>
<td><a href="#ed"><code>%ed</code></a></td>
<td><a href="#edit"><code>%edit</code></a></td>
</tr>
<tr>
<td><a href="#gui"><code>%gui</code></a></td>
<td><a href="#hist"><code>%hist</code></a></td>
<td><a href="#history"><code>%history</code></a></td>
</tr>
<tr>
<td><a href="#install_default_config"><code>%install_default_config</code></a></td>
<td><a href="#install_ext"><code>%install_ext</code></a></td>
<td><a href="#install_profiles"><code>%install_profiles</code></a></td>
</tr>
<tr>
<td><a href="#killbgscripts"><code>%killbgscripts</code></a></td>
<td><a href="#ldir"><code>%ldir</code></a></td>
<td><a href="#less"><code>%less</code></a></td>
</tr>
<tr>
<td><a href="#lf"><code>%lf</code></a></td>
<td><a href="#lk"><code>%lk</code></a></td>
<td><a href="#ll"><code>%ll</code></a></td>
</tr>
<tr>
<td><a href="#load"><code>%load</code></a></td>
<td><a href="#load_ext"><code>%load_ext</code></a></td>
<td><a href="#loadpy"><code>%loadpy</code></a></td>
</tr>
<tr>
<td><a href="#logoff"><code>%logoff</code></a></td>
<td><a href="#logon"><code>%logon</code></a></td>
<td><a href="#logstart"><code>%logstart</code></a></td>
</tr>
<tr>
<td><a href="#logstate"><code>%logstate</code></a></td>
<td><a href="#logstop"><code>%logstop</code></a></td>
<td><a href="#ls"><code>%ls</code></a></td>
</tr>
<tr>
<td><a href="#lsmagic"><code>%lsmagic</code></a></td>
<td><a href="#lx"><code>%lx</code></a></td>
<td><a href="#macro"><code>%macro</code></a></td>
</tr>
<tr>
<td><a href="#magic"><code>%magic</code></a></td>
<td><a href="#man"><code>%man</code></a></td>
<td><a href="#matplotlib"><code>%matplotlib</code></a></td>
</tr>
<tr>
<td><a href="#mkdir"><code>%mkdir</code></a></td>
<td><a href="#more"><code>%more</code></a></td>
<td><a href="#mv"><code>%mv</code></a></td>
</tr>
<tr>
<td><a href="#notebook"><code>%notebook</code></a></td>
<td><a href="#page"><code>%page:</code></a></td>
<td><a href="#paste"><code>%paste</code></a></td>
</tr>
<tr>
<td><a href="#pastebin"><code>%pastebin</code></a></td>
<td><a href="#pdb"><code>%pdb</code></a></td>
<td><a href="#pdef"><code>%pdef</code></a></td>
</tr>
<tr>
<td><a href="#pdoc"><code>%pdoc</code></a></td>
<td><a href="#pfile"><code>%pfile</code></a></td>
<td><a href="#pinfo"><code>%pinfo</code></a></td>
</tr>
<tr>
<td><a href="#pinfo2"><code>%pinfo2</code></a></td>
<td><a href="#popd"><code>%popd</code></a></td>
<td><a href="#pprint"><code>%pprint</code></a></td>
</tr>
<tr>
<td><a href="#precision"><code>%precision</code></a></td>
<td><a href="#profile"><code>%profile</code></a></td>
<td><a href="#prun"><code>%prun</code></a></td>
</tr>
<tr>
<td><a href="#psearch"><code>%psearch</code></a></td>
<td><a href="#psource"><code>%psource</code></a></td>
<td><a href="#pushd"><code>%pushd</code></a></td>
</tr>
<tr>
<td><a href="#pwd"><code>%pwd</code></a></td>
<td><a href="#pycat"><code>%pycat</code></a></td>
<td><a href="#pylab"><code>%pylab</code></a></td>
</tr>
<tr>
<td><a href="#quickref"><code>%quickref</code></a></td>
<td><a href="#recall"><code>%recall</code></a></td>
<td><a href="#rehashx"><code>%rehashx</code></a></td>
</tr>
<tr>
<td><a href="#rerun"><code>%rerun</code></a></td>
<td><a href="#reset"><code>%reset</code></a></td>
<td><a href="#reset_selective"><code>%reset_selective</code></a></td>
</tr>
<tr>
<td><a href="#rm"><code>%rm</code></a></td>
<td><a href="#rmdir"><code>%rmdir</code></a></td>
<td><a href="#run"><code>%run</code></a></td>
</tr>
<tr>
<td><a href="#save"><code>%save</code></a></td>
<td><a href="#sc"><code>%sc</code></a></td>
<td><a href="#set_env"><code>%set_env</code></a></td>
</tr>
<tr>
<td><a href="#store"><code>%store</code></a></td>
<td><a href="#sx"><code>%sx</code></a></td>
<td><a href="#system"><code>%system</code></a></td>
</tr>
<tr>
<td><a href="#tb"><code>%tb</code></a></td>
<td><a href="#time"><code>%time</code></a></td>
<td><a href="#timeit"><code>%timeit</code></a></td>
</tr>
<tr>
<td><a href="#unalias"><code>%unalias:</code></a></td>
<td><a href="#unload_ext"><code>%unload_ext:</code></a></td>
<td><a href="#who"><code>%who</code></a></td>
</tr>
<tr>
<td><a href="#who_ls"><code>%who_ls</code></a></td>
<td><a href="#whos"><code>%whos</code></a></td>
<td><a href="#xdel"><code>%xdel</code></a></td>
</tr>
<tr>
<td><a href="#xmode"><code>%xmode</code></a></td>
<td><code>%%!</code></td>
<td></td>
</tr>
</tbody>
</table>
<p>The magic function system provides a series of functions which allow you to control the behavior of IPython itself, plus a lot of system-type features. There are
two kinds of magics, line-oriented and cell-oriented.  Line magics are prefixed with the % character and work much like OS command-line calls: they get as an argument
the rest of the line, where arguments are passed without parentheses or quotes.  For example, this will time the given statement:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">%</span>timeit <span class="pl-c1">range</span>(<span class="pl-c1">1000</span>)</pre></div>
<p>Cell magics are prefixed with a double %%, and they are functions that get as an argument not only the rest of the line, but also the lines below it
in a separate argument.  These magics are called with two arguments: the rest of the call line and the body of the cell, consisting of the lines below the first.</p>
<p>For example:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">%%</span>timeit x <span class="pl-k">=</span> numpy.random.randn((<span class="pl-c1">100</span>, <span class="pl-c1">100</span>))
numpy.linalg.svd(x)</pre></div>
<p>will time the execution of the numpy svd routine, running the assignment of x as part of the setup phase, which is not timed.</p>
<p>In a line-oriented client (the terminal or Qt console IPython), starting a new input with %% will automatically enter cell mode, and IPython will
continue reading input until a blank line is given.  In the notebook, simply type the whole cell as one entity, but keep in mind that the %% escape
can only be at the very start of the cell.</p>
<p>NOTE: If you have 'automagic' enabled (via the command line option or with the %automagic function), you don't need to type in the % explicitly for
line magics; cell magics always require an explicit '%%' escape.  By default, IPython ships with automagic on, so you should only rarely need the % escape.</p>
<p>Example: typing '%cd mydir' (without the quotes) changes you working directory to 'mydir', if it exists.</p>
<p>For a list of the available magic functions, use %lsmagic. For a description of any of them, type %magic_name?, e.g. '%cd?'.</p>
<p>Currently the magic system has the following functions:</p>
<h2>
<a aria-hidden="true" class="anchor" href="#alias" id="user-content-alias"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%alias</h2>
<p>Define an alias for a system command.</p>
<p>'%alias alias_name cmd' defines 'alias_name' as an alias for 'cmd'</p>
<p>Then, typing 'alias_name params' will execute the system command 'cmd params' (from your underlying operating system).</p>
<p>Aliases have lower precedence than magic functions and Python normal variables, so if 'foo' is both a Python variable and an alias, the alias can not be executed until 'del foo' removes the Python variable.</p>
<p>You can use the %l specifier in an alias definition to represent the whole line when the alias is called.  For example:</p>
<pre><code>  In [2]: alias bracket echo "Input in brackets: &lt;%l&gt;"
  In [3]: bracket hello world
  Input in brackets: &lt;hello world&gt;
</code></pre>
<p>You can also define aliases with parameters using %s specifiers (one per parameter):</p>
<pre><code>  In [1]: alias parts echo first %s second %s
  In [2]: %parts A B
  first A second B
  In [3]: %parts A
  Incorrect number of arguments: 2 expected.
  parts is an alias to: 'echo first %s second %s'
</code></pre>
<p>Note that %l and %s are mutually exclusive.  You can only use one or the other in your aliases.</p>
<p>Aliases expand Python variables just like system calls using ! or !!  do: all expressions prefixed with '$' get expanded.  For details of the semantic rules,
see PEP-215: <a href="http://www.python.org/peps/pep-0215.html" rel="nofollow">http://www.python.org/peps/pep-0215.html</a>.  This is the library used by IPython for variable expansion.</p>
<p>If you want to access a true shell variable, an extra $ is necessary to prevent its expansion by IPython:</p>
<pre><code>  In [6]: alias show echo
  In [7]: PATH='A Python string'
  In [8]: show $PATH
  A Python string
  In [9]: show $$PATH
  /usr/local/lf9560/bin:/usr/local/intel/compiler70/ia32/bin:...
</code></pre>
<p>You can use the alias facility to acess all of $PATH.  See the %rehash and %rehashx functions, which automatically create aliases for the contents of your $PATH.</p>
<p>If called with no parameters, %alias prints the current alias table.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#alias_magic" id="user-content-alias_magic"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%alias_magic</h2>
<pre><code>  %alias_magic [-l] [-c] name target
</code></pre>
<p>Create an alias for an existing line or cell magic.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples" id="user-content-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>  In [1]: %alias_magic t timeit
  Created `%t` as an alias for `%timeit`.
  Created `%%t` as an alias for `%%timeit`.

  In [2]: %t -n1 pass
  1 loops, best of 3: 954 ns per loop

  In [3]: %%t -n1
     ...: pass
     ...:
  1 loops, best of 3: 954 ns per loop

  In [4]: %alias_magic --cell whereami pwd
  UsageError: Cell magic function `%%pwd` not found.
  In [5]: %alias_magic --line whereami pwd
  Created `%whereami` as an alias for `%pwd`.

  In [6]: %whereami
  Out[6]: u'/home/testuser'
</code></pre>
<p>positional arguments:</p>
<pre><code>  name        Name of the magic to be created.
  target      Name of the existing line or cell magic.
</code></pre>
<p>optional arguments:</p>
<pre><code>  -l, --line  Create a line magic alias.
  -c, --cell  Create a cell magic alias.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#autocall" id="user-content-autocall"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%autocall</h2>
<p>Make functions callable without having to type parentheses.</p>
<p>Usage:</p>
<pre><code>   %autocall [mode]
</code></pre>
<p>The mode can be one of: 0-&gt;Off, 1-&gt;Smart, 2-&gt;Full.  If not given, the value is toggled on and off (remembering the previous state).</p>
<p>In more detail, these values mean:</p>
<ul>
<li>
<p>0 -&gt; fully disabled</p>
</li>
<li>
<p>1 -&gt; active, but do not apply if there are no arguments on the line.</p>
</li>
</ul>
<p>In this mode, you get:</p>
<pre><code>  In [1]: callable
  Out[1]: &lt;built-in function callable&gt;

  In [2]: callable 'hello'
  ------&gt; callable('hello')
  Out[2]: False
</code></pre>
<ul>
<li>
<p>2 -&gt; Active always.  Even if no arguments are present, the callable object is called:</p>
<pre><code>In [2]: float
------&gt; float()
Out[2]: 0.0
</code></pre>
</li>
</ul>
<p>Note that even with autocall off, you can still use '/' at the start of a line to treat the first argument on the command line as a function and add parentheses to it:</p>
<pre><code>  In [8]: /str 43
  ------&gt; str(43)
  Out[8]: '43'

# all-random (note for auto-testing)
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#autoindent" id="user-content-autoindent"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%autoindent</h2>
<p>Toggle autoindent on/off (if available).</p>
<h2>
<a aria-hidden="true" class="anchor" href="#automagic" id="user-content-automagic"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%automagic</h2>
<p>Make magic functions callable without having to type the initial %.</p>
<p>Without argumentsl toggles on/off (when off, you must call it as %automagic, of course).  With arguments it sets the value, and you can use any of (case insensitive):</p>
<ul>
<li>
<p>on, 1, True: to activate</p>
</li>
<li>
<p>off, 0, False: to deactivate.</p>
</li>
</ul>
<p>Note that magic functions have lowest priority, so if there's a variable whose name collides with that of a magic fn, automagic won't work for that function (you get the variable instead). However, if you delete the variable (del var), the previously shadowed magic function becomes visible to automagic again.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#bookmark" id="user-content-bookmark"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%bookmark</h2>
<p>Manage IPython's bookmark system.</p>
<pre><code>%bookmark &lt;name&gt;       - set bookmark to current dir
%bookmark &lt;name&gt; &lt;dir&gt; - set bookmark to &lt;dir&gt;
%bookmark -l           - list all bookmarks
%bookmark -d &lt;name&gt;    - remove bookmark
%bookmark -r           - remove all bookmarks
</code></pre>
<p>You can later on access a bookmarked folder with:</p>
<pre><code>%cd -b &lt;name&gt;
</code></pre>
<p>or simply '%cd ' if there is no directory called  AND there is such a bookmark defined.</p>
<p>Your bookmarks persist through IPython sessions, but they are associated with each profile.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#cat" id="user-content-cat"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%cat</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#cd" id="user-content-cd"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%cd</h2>
<p>Change the current working directory.</p>
<p>This command automatically maintains an internal list of directories you visit during your IPython session, in the variable _dh. The command %dhist shows this history nicely formatted. You can also do 'cd -' to see directory history conveniently.</p>
<pre><code>Usage:

  cd 'dir': changes to directory 'dir'.

  cd -: changes to the last visited directory.

  cd -&lt;n&gt;: changes to the n-th directory in the directory history.

  cd --foo: change to directory that matches 'foo' in history

  cd -b &lt;bookmark_name&gt;: jump to a bookmark set by %bookmark
     (note: cd &lt;bookmark_name&gt; is enough if there is no
      directory &lt;bookmark_name&gt;, but a bookmark with the name exists.)
      'cd -b &lt;tab&gt;' allows you to tab-complete bookmark names.

Options:

-q: quiet.  Do not print the working directory after the cd command is
executed.  By default IPython's cd command does print this directory,
since the default prompts do not display path information.

Note that !cd doesn't work for this purpose because the shell where
!command runs is immediately discarded after executing 'command'.
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-1" id="user-content-examples-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>  In [10]: cd parent/child
  /home/tsuser/parent/child
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#clear" id="user-content-clear"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%clear</h2>
<pre><code>Callable object storing the details of one alias.

Instances are registered as magic functions to allow use of aliases.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#colors" id="user-content-colors"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%colors</h2>
<pre><code>Switch color scheme for prompts, info system and exception handlers.

Currently implemented schemes: NoColor, Linux, LightBG.

Color scheme names are not case-sensitive.
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-2" id="user-content-examples-2"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>To get a plain black and white terminal:

  %colors nocolor
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#config" id="user-content-config"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%config</h2>
<pre><code>configure IPython

    %config Class[.trait=value]

This magic exposes most of the IPython config system. Any
Configurable class should be able to be configured with the simple
line:

    %config Class.trait=value

Where `value` will be resolved in the user's namespace, if it is an
expression or variable name.
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-3" id="user-content-examples-3"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>To see what classes are available for config, pass no arguments:

    In [1]: %config
    Available objects for config:
        TerminalInteractiveShell
        HistoryManager
        PrefilterManager
        AliasManager
        IPCompleter
        PromptManager
        DisplayFormatter

To view what is configurable on a given class, just pass the class
name:

    In [2]: %config IPCompleter
    IPCompleter options
    -----------------
    IPCompleter.omit__names=&lt;Enum&gt;
        Current: 2
        Choices: (0, 1, 2)
        Instruct the completer to omit private method names
        Specifically, when completing on ``object.&lt;tab&gt;``.
        When 2 [default]: all names that start with '_' will be excluded.
        When 1: all 'magic' names (``__foo__``) will be excluded.
        When 0: nothing will be excluded.
    IPCompleter.merge_completions=&lt;CBool&gt;
        Current: True
        Whether to merge completion results into a single list
        If False, only the completion results from the first non-empty
        completer will be returned.
    IPCompleter.limit_to__all__=&lt;CBool&gt;
        Current: False
        Instruct the completer to use __all__ for the completion
        Specifically, when completing on ``object.&lt;tab&gt;``.
        When True: only those names in obj.__all__ will be included.
        When False [default]: the __all__ attribute is ignored
    IPCompleter.greedy=&lt;CBool&gt;
        Current: False
        Activate greedy completion
        This will enable completion on elements of lists, results of
        function calls, etc., but can be unsafe because the code is
        actually evaluated on TAB.
</code></pre>
<p>but the real use is in setting values:</p>
<pre><code>    In [3]: %config IPCompleter.greedy = True
</code></pre>
<p>and these values are read from the user_ns if they are variables:</p>
<pre><code>    In [4]: feeling_greedy=False

    In [5]: %config IPCompleter.greedy = feeling_greedy
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#cp" id="user-content-cp"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%cp</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#cpaste" id="user-content-cpaste"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%cpaste</h2>
<p>Paste &amp; execute a pre-formatted code block from clipboard.</p>
<p>You must terminate the block with '--' (two minus-signs) or Ctrl-D
alone on the line. You can also provide your own sentinel with '%paste
-s %%' ('%%' is the new sentinel for this operation).</p>
<p>The block is dedented prior to execution to enable execution of method
definitions. '&gt;' and '+' characters at the beginning of a line are
ignored, to allow pasting directly from e-mails, diff files and
doctests (the '...' continuation prompt is also stripped).  The
executed block is also assigned to variable named 'pasted_block' for
later editing with '%edit pasted_block'.</p>
<p>You can also pass a variable name as an argument, e.g. '%cpaste foo'.
This assigns the pasted block to variable 'foo' as string, without
dedenting or executing it (preceding &gt;&gt;&gt; and + is still stripped)</p>
<p>'%cpaste -r' re-executes the block previously entered by cpaste.
'%cpaste -q' suppresses any additional output messages.</p>
<p>Do not be alarmed by garbled output on Windows (it's a readline bug).
Just press enter and type -- (and press enter again) and the block
will be what was just pasted.</p>
<p>IPython statements (magics, shell escapes) are not supported (yet).</p>
<h3>
<a aria-hidden="true" class="anchor" href="#see-also" id="user-content-see-also"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>See also</h3>
<ul>
<li>paste: automatically pull code from clipboard.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-4" id="user-content-examples-4"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>In [8]: %cpaste
Pasting code; enter '--' alone on the line to stop.
:&gt;&gt;&gt; a = ["world!", "Hello"]
:&gt;&gt;&gt; print " ".join(sorted(a))
:--
Hello world!
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#debug" id="user-content-debug"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%debug</h3>
<pre><code>%debug [--breakpoint FILE:LINE] [statement [statement ...]]
</code></pre>
<p>Activate the interactive debugger.</p>
<p>This magic command support two ways of activating debugger.
One is to activate debugger before executing code.  This way, you
can set a break point, to step through the code from the point.
You can use this mode by giving statements to execute and optionally
a breakpoint.</p>
<p>The other one is to activate debugger in post-mortem mode.  You can
activate this mode simply running %debug without any argument.
If an exception has just occurred, this lets you inspect its stack
frames interactively.  Note that this will always work only on the last
traceback that occurred, so you must call this quickly after an
exception that you wish to inspect has fired, because if another one
occurs, it clobbers the previous one.</p>
<p>If you want IPython to automatically do this on every exception, see
the %pdb magic for more details.</p>
<p>positional arguments:</p>
<pre><code>  statement             Code to run in debugger. You can omit this in cell
                        magic mode.
</code></pre>
<p>optional arguments:</p>
<pre><code>  --breakpoint &lt;FILE:LINE&gt;, -b &lt;FILE:LINE&gt;

  Set break point at LINE in FILE.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#dhist" id="user-content-dhist"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%dhist</h2>
<p>Print your history of visited directories.</p>
<pre><code>%dhist       -&gt; print full history
%dhist n     -&gt; print last n entries only
%dhist n1 n2 -&gt; print entries between n1 and n2 (n2 not included)
</code></pre>
<p>This history is automatically maintained by the %cd command, and
always available as the global list variable _dh. You can use %cd -
to go to directory number .</p>
<p>Note that most of time, you should view directory history by entering
cd -.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#dirs" id="user-content-dirs"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%dirs</h2>
<pre><code>Return the current directory stack.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#doctest_mode" id="user-content-doctest_mode"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%doctest_mode</h2>
<p>Toggle doctest mode on and off.</p>
<p>This mode is intended to make IPython behave as much as possible like a
plain Python shell, from the perspective of how its prompts, exceptions
and output look.  This makes it easy to copy and paste parts of a
session into doctests.  It does so by:</p>
<ul>
<li>Changing the prompts to the classic <code>&gt;&gt;&gt;</code> ones.</li>
<li>Changing the exception reporting mode to 'Plain'.</li>
<li>Disabling pretty-printing of output.</li>
</ul>
<p>Note that IPython also supports the pasting of code snippets that have
leading '&gt;&gt;&gt;' and '...' prompts in them.  This means that you can paste
doctests from files or docstrings (even if they have leading
whitespace), and the code will execute correctly.  You can then use
'%history -t' to see the translated history; this will give you the
input after removal of all the leading prompts and whitespace, which
can be pasted back into an editor.</p>
<p>With these features, you can switch into this mode easily whenever you
need to do testing and changes to doctests, without having to leave
your existing IPython session.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#ed" id="user-content-ed"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%ed</h2>
<p>Alias for <code>%edit</code>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#edit" id="user-content-edit"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%edit</h2>
<p>Bring up an editor and execute the resulting code.</p>
<p>Usage:</p>
<pre><code>%edit [options] [args]
</code></pre>
<p>%edit runs IPython's editor hook. The default version of this hook is
set to call the editor specified by your $EDITOR environment variable.
If this isn't found, it will default to vi under Linux/Unix and to
notepad under Windows. See the end of this docstring for how to change
the editor hook.</p>
<p>You can also set the value of this editor via the
<code>TerminalInteractiveShell.editor</code> option in your configuration file.
This is useful if you wish to use a different editor from your typical
default with IPython (and for Windows users who typically don't set
environment variables).</p>
<p>This command allows you to conveniently edit multi-line code right in
your IPython session.</p>
<p>If called without arguments, %edit opens up an empty editor with a
temporary file and will execute the contents of this file when you
close it (don't forget to save it!).</p>
<p>Options:</p>
<pre><code>-n &lt;number&gt;: open the editor at a specified line number.  By default,
the IPython editor hook uses the unix syntax 'editor +N filename', but
you can configure this by providing your own modified hook if your
favorite editor supports line-number specifications with a different
syntax.

-p: this will call the editor with the same data as the previous time
it was used, regardless of how long ago (in your current session) it
was.

-r: use 'raw' input.  This option only applies to input taken from the
user's history.  By default, the 'processed' history is used, so that
magics are loaded in their transformed version to valid Python.  If
this option is given, the raw input as typed as the command line is
used instead.  When you exit the editor, it will be executed by
IPython's own processor.

-x: do not execute the edited code immediately upon exit. This is
mainly useful if you are editing programs which need to be called with
command line arguments, which you can then do using %run.
</code></pre>
<p>Arguments:</p>
<p>If arguments are given, the following possibilities exist:</p>
<ul>
<li>
<p>If the argument is a filename, IPython will load that into the
editor. It will execute its contents with execfile() when you exit,
loading any code in the file into your interactive namespace.</p>
</li>
<li>
<p>The arguments are ranges of input history,  e.g. "7 ~1/4-6".
The syntax is the same as in the %history magic.</p>
</li>
<li>
<p>If the argument is a string variable, its contents are loaded
into the editor. You can thus edit any string which contains
python code (including the result of previous edits).</p>
</li>
<li>
<p>If the argument is the name of an object (other than a string),
IPython will try to locate the file where it was defined and open the
editor at the point where it is defined. You can use <code>%edit function</code>
to load an editor exactly at the point where 'function' is defined,
edit it and have the file be executed automatically.</p>
</li>
<li>
<p>If the object is a macro (see %macro for details), this opens up your
specified editor with a temporary file containing the macro's data.
Upon exit, the macro is reloaded with the contents of the file.</p>
</li>
</ul>
<p>Note: opening at an exact line is only supported under Unix, and some
editors (like kedit and gedit up to Gnome 2.8) do not understand the
'+NUMBER' parameter necessary for this feature. Good editors like
(X)Emacs, vi, jed, pico and joe all do.</p>
<p>After executing your code, %edit will return as output the code you
typed in the editor (except when it was an existing file). This way
you can reload the code in further invocations of %edit as a variable,
via _ or Out[], where  is the prompt number of
the output.</p>
<p>Note that %edit is also available through the alias %ed.</p>
<p>This is an example of creating a simple function inside the editor and
then modifying it. First, start up the editor:</p>
<pre><code>In [1]: edit
Editing... done. Executing edited code...
Out[1]: 'def foo():\n    print "foo() was defined in an editing
session"\n'
</code></pre>
<p>We can then call the function foo():</p>
<pre><code>In [2]: foo()
foo() was defined in an editing session
</code></pre>
<p>Now we edit foo.  IPython automatically loads the editor with the
(temporary) file where foo() was previously defined:</p>
<pre><code>In [3]: edit foo
Editing... done. Executing edited code...
</code></pre>
<p>And if we call foo() again we get the modified version:</p>
<pre><code>In [4]: foo()
foo() has now been changed!
</code></pre>
<p>Here is an example of how to edit a code snippet successive
times. First we call the editor:</p>
<pre><code>In [5]: edit
Editing... done. Executing edited code...
hello
Out[5]: "print 'hello'\n"
</code></pre>
<p>Now we call it again with the previous output (stored in _):</p>
<pre><code>In [6]: edit _
Editing... done. Executing edited code...
hello world
Out[6]: "print 'hello world'\n"
</code></pre>
<p>Now we call it with the output #8 (stored in _8, also as Out[8]):</p>
<pre><code>In [7]: edit _8
Editing... done. Executing edited code...
hello again
Out[7]: "print 'hello again'\n"
</code></pre>
<p>Changing the default editor hook:</p>
<p>If you wish to write your own editor hook, you can put it in a
configuration file which you load at startup time.  The default hook
is defined in the IPython.core.hooks module, and you can use that as a
starting example for further modifications.  That file also has
general instructions on how to set a new hook for use once you've
defined it.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#env" id="user-content-env"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%env</h3>
<p>Get, set, or list environment variables.</p>
<p>Usage:</p>
<pre><code>%env: lists all environment variables/values
%env var: get value for var
%env var val: set value for var
%env var=val: set value for var
%env var=$val: set value for var, using python expansion if possible
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#gui" id="user-content-gui"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%gui</h2>
<p>Enable or disable IPython GUI event loop integration.</p>
<pre><code>%gui [GUINAME]
</code></pre>
<p>This magic replaces IPython's threaded shells that were activated
using the (pylab/wthread/etc.) command line flags.  GUI toolkits
can now be enabled at runtime and keyboard
interrupts should work without any problems.  The following toolkits
are supported:  wxPython, PyQt4, PyGTK, Tk and Cocoa (OSX):</p>
<pre><code>%gui wx      # enable wxPython event loop integration
%gui qt4|qt  # enable PyQt4 event loop integration
%gui qt5     # enable PyQt5 event loop integration
%gui gtk     # enable PyGTK event loop integration
%gui gtk3    # enable Gtk3 event loop integration
%gui tk      # enable Tk event loop integration
%gui osx     # enable Cocoa event loop integration
             # (requires %matplotlib 1.1)
%gui         # disable all event loop integration
</code></pre>
<p>WARNING:  after any of these has been called you can simply create
an application object, but DO NOT start the event loop yourself, as
we have already handled that.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#hist" id="user-content-hist"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%hist</h2>
<p>Alias for <code>%history</code>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#history" id="user-content-history"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%history</h2>
<pre><code>%history [-n] [-o] [-p] [-t] [-f FILENAME] [-g [PATTERN [PATTERN ...]]]
             [-l [LIMIT]] [-u]
             [range [range ...]]
</code></pre>
<p>Print input history (_i&lt;n&gt; variables), with most recent last.</p>
<p>By default, input history is printed without line numbers so it can be
directly pasted into an editor. Use -n to show them.</p>
<p>By default, all input history from the current session is displayed.
Ranges of history can be indicated using the syntax:</p>
<pre><code>``4``
    Line 4, current session
``4-6``
    Lines 4-6, current session
``243/1-5``
    Lines 1-5, session 243
``~2/7``
    Line 7, session 2 before current
``~8/1-~6/5``
    From the first line of 8 sessions ago, to the fifth line of 6
    sessions ago.
</code></pre>
<p>Multiple ranges can be entered, separated by spaces</p>
<p>The same syntax is used by %macro, %save, %edit, %rerun</p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-5" id="user-content-examples-5"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>In [6]: %history -n 4-6
4:a = 12
5:print a**2
6:%history -n 4-6
</code></pre>
<p>positional arguments:</p>
<pre><code>range
</code></pre>
<p>optional arguments:</p>
<pre><code>-n                    print line numbers for each input. This feature is
                      only available if numbered prompts are in use.
-o                    also print outputs for each input.
-p                    print classic '&gt;&gt;&gt;' python prompts before each input.
                      This is useful for making documentation, and in
                      conjunction with -o, for producing doctest-ready
                      output.
-t                    print the 'translated' history, as IPython understands
                      it. IPython filters your input and converts it all
                      into valid Python source before executing it (things
                      like magics or aliases are turned into function calls,
                      for example). With this option, you'll see the native
                      history instead of the user-entered version: '%cd /'
                      will be seen as 'get_ipython().magic("%cd /")' instead
                      of '%cd /'.
-f FILENAME           FILENAME: instead of printing the output to the
                      screen, redirect it to the given file. The file is
                      always overwritten, though *when it can*, IPython asks
                      for confirmation first. In particular, running the
                      command 'history -f FILENAME' from the IPython
                      Notebook interface will replace FILENAME even if it
                      already exists *without* confirmation.
-g &lt;[PATTERN [PATTERN ...]]&gt;
                      treat the arg as a glob pattern to search for in
                      (full) history. This includes the saved history
                      (almost all commands ever written). The pattern may
                      contain '?' to match one unknown character and '*' to
                      match any number of unknown characters. Use '%hist -g'
                      to show full saved history (may be very long).
-l &lt;[LIMIT]&gt;          get the last n lines from all sessions. Specify n as a
                      single arg, or the default is the last 10 lines.
-u                    when searching history using `-g`, show only unique
                      history.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#install_default_config" id="user-content-install_default_config"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%install_default_config</h2>
<p>%install_default_config has been deprecated.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#install_ext" id="user-content-install_ext"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%install_ext</h2>
<p>Download and install an extension from a URL, e.g.:</p>
<pre><code>    %install_ext https://bitbucket.org/birkenfeld/ipython-physics/raw/d1310a2ab15d/physics.py

The URL should point to an importable Python module - either a .py file
or a .zip file.

Parameters:

  -n filename : Specify a name for the file, rather than taking it from
                the URL.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#install_profiles" id="user-content-install_profiles"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%install_profiles</h2>
<p>%install_profiles has been deprecated.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#killbgscripts" id="user-content-killbgscripts"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%killbgscripts</h2>
<p>Kill all BG processes started by %%script and its family.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#ldir" id="user-content-ldir"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%ldir</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#less" id="user-content-less"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%less</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#lf" id="user-content-lf"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%lf</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#lk" id="user-content-lk"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%lk</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#ll" id="user-content-ll"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%ll</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#load" id="user-content-load"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%load</h2>
<p>Load code into the current frontend.</p>
<p>Usage:</p>
<pre><code>%load [options] source
</code></pre>
<p>where source can be a filename, URL, input history range, macro, or
element in the user namespace</p>
<p>Options:</p>
<pre><code>-r &lt;lines&gt;: Specify lines or ranges of lines to load from the source.
Ranges could be specified as x-y (x..y) or in python-style x:y 
(x..(y-1)). Both limits x and y can be left blank (meaning the 
beginning and end of the file, respectively).

-s &lt;symbols&gt;: Specify function or classes to load from python source. 

-y : Don't ask confirmation for loading source above 200 000 characters.

-n : Include the user's namespace when searching for source code.
</code></pre>
<p>This magic command can either take a local filename, a URL, an history
range (see %history) or a macro as argument, it will prompt for
confirmation before loading source with more than 200 000 characters, unless
-y flag is passed or if the frontend does not support raw_input:</p>
<pre><code>%load myscript.py
%load 7-27
%load myMacro
%load http://www.example.com/myscript.py
%load -r 5-10 myscript.py
%load -r 10-20,30,40: foo.py
%load -s MyClass,wonder_function myscript.py
%load -n MyClass
%load -n my_module.wonder_function
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#load_ext" id="user-content-load_ext"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%load_ext</h2>
<p>Load an IPython extension by its module name.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#loadpy" id="user-content-loadpy"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%loadpy</h2>
<p>Alias of <code>%load</code></p>
<p><code>%loadpy</code> has gained some flexibility and dropped the requirement of a <code>.py</code>
extension. So it has been renamed simply into %load. You can look at
<code>%load</code>'s docstring for more info.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#logoff" id="user-content-logoff"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%logoff</h2>
<p>Temporarily stop logging.</p>
<p>You must have previously started logging.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#logon" id="user-content-logon"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%logon</h2>
<p>Restart logging.</p>
<p>This function is for restarting logging which you've temporarily
stopped with %logoff. For starting logging for the first time, you
must use the %logstart function, which allows you to specify an
optional log filename.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#logstart" id="user-content-logstart"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%logstart</h2>
<p>Start logging anywhere in a session.</p>
<pre><code>%logstart [-o|-r|-t] [log_name [log_mode]]
</code></pre>
<p>If no name is given, it defaults to a file named 'ipython_log.py' in your
current directory, in 'rotate' mode (see below).</p>
<p>'%logstart name' saves to file 'name' in 'backup' mode.  It saves your
history up to that point and then continues logging.</p>
<p>%logstart takes a second optional parameter: logging mode. This can be one
of (note that the modes are given unquoted):</p>
<pre><code>append
    Keep logging at the end of any existing file.

backup
    Rename any existing file to name~ and start name.

global
    Append to  a single logfile in your home directory.

over
    Overwrite any existing log.

rotate
    Create rotating logs: name.1~, name.2~, etc.
</code></pre>
<p>Options:</p>
<pre><code>-o
  log also IPython's output. In this mode, all commands which
  generate an Out[NN] prompt are recorded to the logfile, right after
  their corresponding input line. The output lines are always
  prepended with a '#[Out]# ' marker, so that the log remains valid
  Python code.
</code></pre>
<p>Since this marker is always the same, filtering only the output from
a log is very easy, using for example a simple awk call:</p>
<pre><code>awk -F'#\[Out\]# ' '{if($2) {print $2}}' ipython_log.py

-r
  log 'raw' input.  Normally, IPython's logs contain the processed
  input, so that user lines are logged in their final form, converted
  into valid Python.  For example, %Exit is logged as
  _ip.magic("Exit").  If the -r flag is given, all input is logged
  exactly as typed, with no transformations applied.

-t
  put timestamps before each input line logged (these are put in
  comments).
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#logstate" id="user-content-logstate"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%logstate</h2>
<p>Print the status of the logging system.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#logstop" id="user-content-logstop"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%logstop</h2>
<p>Fully stop logging and close log file.</p>
<p>In order to start logging again, a new %logstart call needs to be made,
possibly (though not necessarily) with a new filename, mode and other
options.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#ls" id="user-content-ls"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%ls</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#lsmagic" id="user-content-lsmagic"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%lsmagic</h2>
<pre><code>List currently available magic functions.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#lx" id="user-content-lx"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%lx</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#macro" id="user-content-macro"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%macro</h2>
<p>Define a macro for future re-execution. It accepts ranges of history,
filenames or string objects.</p>
<p>Usage:</p>
<pre><code>%macro [options] name n1-n2 n3-n4 ... n5 .. n6 ...
</code></pre>
<p>Options:</p>
<pre><code>-r: use 'raw' input.  By default, the 'processed' history is used,
so that magics are loaded in their transformed version to valid
Python.  If this option is given, the raw input as typed at the
command line is used instead.

-q: quiet macro definition.  By default, a tag line is printed 
to indicate the macro has been created, and then the contents of 
the macro are printed.  If this option is given, then no printout
is produced once the macro is created.
</code></pre>
<p>This will define a global variable called <code>name</code> which is a string
made of joining the slices and lines you specify (n1,n2,... numbers
above) from your input history into a single string. This variable
acts like an automatic function which re-executes those lines as if
you had typed them. You just type 'name' at the prompt and the code
executes.</p>
<p>The syntax for indicating input ranges is described in %history.</p>
<p>Note: as a 'hidden' feature, you can also use traditional python slice
notation, where N:M means numbers N through M-1.</p>
<p>For example, if your history contains (print using %hist -n ):</p>
<pre><code>44: x=1
45: y=3
46: z=x+y
47: print x
48: a=5
49: print 'x',x,'y',y
</code></pre>
<p>you can create a macro with lines 44 through 47 (included) and line 49
called my_macro with:</p>
<pre><code>In [55]: %macro my_macro 44-47 49
</code></pre>
<p>Now, typing <code>my_macro</code> (without quotes) will re-execute all this code
in one pass.</p>
<p>You don't need to give the line-numbers in order, and any given line
number can appear multiple times. You can assemble macros with any
lines from your input history in any order.</p>
<p>The macro is a simple object which holds its value in an attribute,
but IPython's display system checks for macros and executes them as
code instead of printing them when you type their name.</p>
<p>You can view a macro's contents by explicitly printing it with:</p>
<pre><code>  print macro_name
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#magic" id="user-content-magic"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%magic</h2>
<p>Print information about the magic function system.</p>
<p>Supported formats: -latex, -brief, -rest</p>
<h2>
<a aria-hidden="true" class="anchor" href="#man" id="user-content-man"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%man</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#matplotlib" id="user-content-matplotlib"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%matplotlib</h2>
<pre><code>%matplotlib [-l] [gui]
</code></pre>
<p>Set up matplotlib to work interactively.</p>
<p>This function lets you activate matplotlib interactive support
at any point during an IPython session. It does not import anything
into the interactive namespace.</p>
<p>If you are using the inline matplotlib backend in the IPython Notebook
you can set which figure formats are enabled using the following:</p>
<pre><code>In [1]: from IPython.display import set_matplotlib_formats

In [2]: set_matplotlib_formats('pdf', 'svg')
</code></pre>
<p>The default for inline figures sets <code>bbox_inches</code> to 'tight'. This can
cause discrepancies between the displayed image and the identical
image created using <code>savefig</code>. This behavior can be disabled using the
<code>%config</code> magic:</p>
<pre><code>In [3]: %config InlineBackend.print_figure_kwargs = {'bbox_inches':None}
</code></pre>
<p>In addition, see the docstring of
<code>IPython.display.set_matplotlib_formats</code> and
<code>IPython.display.set_matplotlib_close</code> for more information on
changing additional behaviors of the inline backend.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-6" id="user-content-examples-6"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<p>To enable the inline backend for usage with the IPython Notebook:</p>
<pre><code>In [1]: %matplotlib inline
</code></pre>
<p>In this case, where the matplotlib default is TkAgg:</p>
<pre><code>In [2]: %matplotlib
Using matplotlib backend: TkAgg
</code></pre>
<p>But you can explicitly request a different GUI backend:</p>
<pre><code>In [3]: %matplotlib qt
</code></pre>
<p>You can list the available backends using the -l/--list option:</p>
<pre><code> In [4]: %matplotlib --list
 Available matplotlib backends: ['osx', 'qt4', 'qt5', 'gtk3', 'notebook', 'wx', 'qt', 'nbagg',
 'gtk', 'tk', 'inline']
</code></pre>
<p>positional arguments:</p>
<pre><code>  gui         Name of the matplotlib backend to use ('gtk', 'gtk3', 'inline',
              'nbagg', 'notebook', 'osx', 'qt', 'qt4', 'qt5', 'tk', 'wx'). If
              given, the corresponding matplotlib backend is used, otherwise
              it will be matplotlib's default (which you can set in your
              matplotlib config file).
</code></pre>
<p>optional arguments:</p>
<pre><code>  -l, --list  Show available matplotlib backends
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#mkdir" id="user-content-mkdir"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%mkdir</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#more" id="user-content-more"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%more</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#mv" id="user-content-mv"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%mv</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#notebook" id="user-content-notebook"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%notebook</h2>
<pre><code>%notebook [-e] filename
</code></pre>
<p>Export and convert IPython notebooks.</p>
<p>This function can export the current IPython history to a notebook file.
For example, to export the history to "foo.ipynb" do "%notebook -e foo.ipynb".
To export the history to "foo.py" do "%notebook -e foo.py".</p>
<p>positional arguments:</p>
<pre><code>filename      Notebook name or filename
</code></pre>
<p>optional arguments:
-e, --export  Export IPython history as a notebook. The filename argument is
used to specify the notebook name and format. For example a
filename of notebook.ipynb will result in a notebook name of
"notebook" and a format of "json". Likewise using a ".py" file
extension will write the notebook as a Python script</p>
<h2>
<a aria-hidden="true" class="anchor" href="#page" id="user-content-page"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%page:</h2>
<p>Pretty print the object and display it through a pager.</p>
<pre><code>%page [options] OBJECT
</code></pre>
<p>If no object is given, use _ (last output).</p>
<p>Options:</p>
<pre><code>  -r: page str(object), don't pretty-print it.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#paste" id="user-content-paste"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%paste</h2>
<p>Paste &amp; execute a pre-formatted code block from clipboard.</p>
<p>The text is pulled directly from the clipboard without user
intervention and printed back on the screen before execution (unless
the -q flag is given to force quiet mode).</p>
<p>The block is dedented prior to execution to enable execution of method
definitions. '&gt;' and '+' characters at the beginning of a line are
ignored, to allow pasting directly from e-mails, diff files and
doctests (the '...' continuation prompt is also stripped).  The
executed block is also assigned to variable named 'pasted_block' for
later editing with '%edit pasted_block'.</p>
<p>You can also pass a variable name as an argument, e.g. '%paste foo'.
This assigns the pasted block to variable 'foo' as string, without
executing it (preceding &gt;&gt;&gt; and + is still stripped).</p>
<p>Options:</p>
<pre><code>-r: re-executes the block previously entered by cpaste.

-q: quiet mode: do not echo the pasted text back to the terminal.
</code></pre>
<p>IPython statements (magics, shell escapes) are not supported (yet).</p>
<h3>
<a aria-hidden="true" class="anchor" href="#see-also-1" id="user-content-see-also-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>See also</h3>
<pre><code>cpaste: manually paste code into terminal until you mark its end.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#pastebin" id="user-content-pastebin"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pastebin</h2>
<p>Upload code to Github's Gist paste bin, returning the URL.</p>
<p>Usage:</p>
<pre><code>%pastebin [-d "Custom description"] 1-7
</code></pre>
<p>The argument can be an input history range, a filename, or the name of a
string or macro.</p>
<p>Options:</p>
<pre><code>-d: Pass a custom description for the gist. The default will say
    "Pasted from IPython".
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#pdb" id="user-content-pdb"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pdb</h2>
<p>Control the automatic calling of the pdb interactive debugger.</p>
<p>Call as '%pdb on', '%pdb 1', '%pdb off' or '%pdb 0'. If called without
argument it works as a toggle.</p>
<p>When an exception is triggered, IPython can optionally call the
interactive pdb debugger after the traceback printout. %pdb toggles
this feature on and off.</p>
<p>The initial state of this feature is set in your configuration
file (the option is <code>InteractiveShell.pdb</code>).</p>
<p>If you want to just activate the debugger AFTER an exception has fired,
without having to type '%pdb on' and rerunning your code, you can use
the %debug magic.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#pdef" id="user-content-pdef"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pdef</h2>
<p>Print the call signature for any callable object.</p>
<p>If the object is a class, print the constructor information.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-7" id="user-content-examples-7"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>  In [3]: %pdef urllib.urlopen
  urllib.urlopen(url, data=None, proxies=None)
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#pdoc" id="user-content-pdoc"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pdoc</h2>
<p>Print the docstring for an object.</p>
<p>If the given object is a class, it will print both the class and the
constructor docstrings.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#pfile" id="user-content-pfile"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pfile</h2>
<p>Print (or run through pager) the file where an object is defined.</p>
<p>The file opens at the line where the object definition begins. IPython
will honor the environment variable PAGER if set, and otherwise will
do its best to print the file in a convenient form.</p>
<p>If the given argument is not an object currently defined, IPython will
try to interpret it as a filename (automatically adding a .py extension
if needed). You can thus use %pfile as a syntax highlighting code
viewer.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#pinfo" id="user-content-pinfo"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pinfo</h2>
<p>Provide detailed information about an object.</p>
<p>'%pinfo object' is just a synonym for object? or ?object.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#pinfo2" id="user-content-pinfo2"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pinfo2</h2>
<p>Provide extra detailed information about an object.</p>
<p>'%pinfo2 object' is just a synonym for object?? or ??object.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#popd" id="user-content-popd"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%popd</h2>
<p>Change to directory popped off the top of the stack.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#pprint" id="user-content-pprint"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pprint</h2>
<p>Toggle pretty printing on/off.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#precision" id="user-content-precision"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%precision</h2>
<p>Set floating point precision for pretty printing.</p>
<p>Can set either integer precision or a format string.</p>
<p>If numpy has been imported and precision is an int,
numpy display precision will also be set, via <code>numpy.set_printoptions</code>.</p>
<p>If no argument is given, defaults will be restored.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-8" id="user-content-examples-8"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>In [1]: from math import pi

In [2]: %precision 3
Out[2]: u'%.3f'

In [3]: pi
Out[3]: 3.142

In [4]: %precision %i
Out[4]: u'%i'

In [5]: pi
Out[5]: 3

In [6]: %precision %e
Out[6]: u'%e'

In [7]: pi**10
Out[7]: 9.364805e+04

In [8]: %precision
Out[8]: u'%r'

In [9]: pi**10
Out[9]: 93648.047476082982
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#profile" id="user-content-profile"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%profile</h2>
<p>Print your currently active IPython profile.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#see-also-2" id="user-content-see-also-2"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>See Also</h3>
<pre><code>prun : run code using the Python profiler
       (:meth:`~IPython.core.magics.execution.ExecutionMagics.prun`)
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#prun" id="user-content-prun"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%prun</h2>
<p>Run a statement through the python code profiler.</p>
<p>Usage, in line mode:</p>
<pre><code>%prun [options] statement
</code></pre>
<p>Usage, in cell mode:</p>
<pre><code>%%prun [options] [statement]
code...
code...
</code></pre>
<p>In cell mode, the additional code lines are appended to the (possibly
empty) statement in the first line.  Cell mode allows you to easily
profile multiline blocks without having to put them in a separate
function.</p>
<p>The given statement (which doesn't require quote marks) is run via the
python profiler in a manner similar to the profile.run() function.
Namespaces are internally managed to work correctly; profile.run
cannot be used in IPython because it makes certain assumptions about
namespaces which do not hold under IPython.</p>
<p>Options:</p>
<pre><code>-l &lt;limit&gt;
  you can place restrictions on what or how much of the
  profile gets printed. The limit value can be:
</code></pre>
<ul>
<li>
<p>A string: only information for function names containing this string
is printed.</p>
</li>
<li>
<p>An integer: only these many lines are printed.</p>
</li>
<li>
<p>A float (between 0 and 1): this fraction of the report is printed
(for example, use a limit of 0.4 to see the topmost 40% only).</p>
</li>
</ul>
<p>You can combine several limits with repeated use of the option. For
example, <code>-l __init__ -l 5</code> will print only the topmost 5 lines of
information about class constructors.</p>
<pre><code>-r
  return the pstats.Stats object generated by the profiling. This
  object has all the information about the profile in it, and you can
  later use it for further analysis or in other functions.

-s &lt;key&gt;
  sort profile by given key. You can provide more than one key
  by using the option several times: '-s key1 -s key2 -s key3...'. The
  default sorting key is 'time'.
</code></pre>
<p>The following is copied verbatim from the profile documentation
referenced below:</p>
<p>When more than one key is provided, additional keys are used as
secondary criteria when the there is equality in all keys selected
before them.</p>
<p>Abbreviations can be used for any key names, as long as the
abbreviation is unambiguous.  The following are the keys currently
defined:</p>
<pre><code>  ============  =====================
  Valid Arg     Meaning
  ============  =====================
  "calls"       call count
  "cumulative"  cumulative time
  "file"        file name
  "module"      file name
  "pcalls"      primitive call count
  "line"        line number
  "name"        function name
  "nfl"         name/file/line
  "stdname"     standard name
  "time"        internal time
  ============  =====================
</code></pre>
<p>Note that all sorts on statistics are in descending order (placing
most time consuming items first), where as name, file, and line number
searches are in ascending order (i.e., alphabetical). The subtle
distinction between "nfl" and "stdname" is that the standard name is a
sort of the name as printed, which means that the embedded line
numbers get compared in an odd way.  For example, lines 3, 20, and 40
would (if the file names were the same) appear in the string order
"20" "3" and "40".  In contrast, "nfl" does a numeric compare of the
line numbers.  In fact, sort_stats("nfl") is the same as
sort_stats("name", "file", "line").</p>
<pre><code>-T &lt;filename&gt;
  save profile results as shown on screen to a text
  file. The profile is still shown on screen.

-D &lt;filename&gt;
  save (via dump_stats) profile statistics to given
  filename. This data is in a format understood by the pstats module, and
  is generated by a call to the dump_stats() method of profile
  objects. The profile is still shown on screen.

-q
  suppress output to the pager.  Best used with -T and/or -D above.
</code></pre>
<p>If you want to run complete programs under the profiler's control, use
<code>%run -p [prof_opts] filename.py [args to program]</code> where prof_opts
contains profiler specific options as described here.</p>
<p>You can read the complete documentation for the profile module with:</p>
<pre><code>  In [1]: import profile; profile.help()
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#psearch" id="user-content-psearch"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%psearch</h2>
<pre><code>Search for object in namespaces by wildcard.

%psearch [options] PATTERN [OBJECT TYPE]
</code></pre>
<p>Note: ? can be used as a synonym for %psearch, at the beginning or at
the end: both a*? and ?a* are equivalent to '%psearch a*'.  Still, the
rest of the command line must be unchanged (options come first), so
for example the following forms are equivalent</p>
<pre><code>%psearch -i a* function
-i a* function?
?-i a* function
</code></pre>
<p>Arguments:</p>
<pre><code>PATTERN

where PATTERN is a string containing * as a wildcard similar to its
use in a shell.  The pattern is matched in all namespaces on the
search path. By default objects starting with a single _ are not
matched, many IPython generated objects have a single
underscore. The default is case insensitive matching. Matching is
also done on the attributes of objects and not only on the objects
in a module.

[OBJECT TYPE]

Is the name of a python type from the types module. The name is
given in lowercase without the ending type, ex. StringType is
written string. By adding a type here only objects matching the
given type are matched. Using all here makes the pattern match all
types (this is the default).
</code></pre>
<p>Options:</p>
<pre><code>-a: makes the pattern match even objects whose names start with a
single underscore.  These names are normally omitted from the
search.

-i/-c: make the pattern case insensitive/sensitive.  If neither of
these options are given, the default is read from your configuration
file, with the option ``InteractiveShell.wildcards_case_sensitive``.
If this option is not specified in your configuration file, IPython's
internal default is to do a case sensitive search.

-e/-s NAMESPACE: exclude/search a given namespace.  The pattern you
specify can be searched in any of the following namespaces:
'builtin', 'user', 'user_global','internal', 'alias', where
'builtin' and 'user' are the search defaults.  Note that you should
not use quotes when specifying namespaces.
</code></pre>
<p>'Builtin' contains the python module builtin, 'user' contains all
user data, 'alias' only contain the shell aliases and no python
objects, 'internal' contains objects used by IPython.  The
'user_global' namespace is only used by embedded IPython instances,
and it contains module-level globals.  You can add namespaces to the
search with -s or exclude them with -e (these options can be given
more than once).</p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-9" id="user-content-examples-9"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>%psearch a*            -&gt; objects beginning with an a
%psearch -e builtin a* -&gt; objects NOT in the builtin space starting in a
%psearch a* function   -&gt; all functions beginning with an a
%psearch re.e*         -&gt; objects beginning with an e in module re
%psearch r*.e*         -&gt; objects that start with e in modules starting in r
%psearch r*.* string   -&gt; all strings in modules beginning with r
</code></pre>
<p>Case sensitive search:</p>
<pre><code>%psearch -c a*         list all object beginning with lower case a
</code></pre>
<p>Show objects beginning with a single _:</p>
<pre><code>  %psearch -a _*         list objects beginning with a single underscore
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#psource" id="user-content-psource"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%psource</h2>
<pre><code>Print (or run through pager) the source code for an object.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#pushd" id="user-content-pushd"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pushd</h2>
<pre><code>Place the current dir on stack and change directory.

Usage:
  %pushd ['dirname']
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#pwd" id="user-content-pwd"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pwd</h2>
<pre><code>Return the current working directory path.
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-10" id="user-content-examples-10"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>In [9]: pwd
Out[9]: '/home/tsuser/sprint/ipython'
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#pycat" id="user-content-pycat"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pycat</h2>
<p>Show a syntax-highlighted file through a pager.</p>
<p>This magic is similar to the cat utility, but it will assume the file
to be Python source and will show it with syntax highlighting.</p>
<p>This magic command can either take a local filename, an url,
an history range (see %history) or a macro as argument :</p>
<pre><code>%pycat myscript.py
%pycat 7-27
%pycat myMacro
%pycat http://www.example.com/myscript.py
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#pylab" id="user-content-pylab"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%pylab</h2>
<pre><code>%pylab [--no-import-all] [gui]
</code></pre>
<p>Load numpy and matplotlib to work interactively.</p>
<p>This function lets you activate pylab (matplotlib, numpy and
interactive support) at any point during an IPython session.</p>
<p>%pylab makes the following imports:</p>
<pre><code>import numpy
import matplotlib
from matplotlib import pylab, mlab, pyplot
np = numpy
plt = pyplot

from IPython.display import display
from IPython.core.pylabtools import figsize, getfigs

from pylab import *
from numpy import *
</code></pre>
<p>If you pass <code>--no-import-all</code>, the last two <code>*</code> imports will be excluded.</p>
<p>See the %matplotlib magic for more details about activating matplotlib
without affecting the interactive namespace.</p>
<p>positional arguments:</p>
<pre><code>gui              Name of the matplotlib backend to use ('gtk', 'gtk3',
                 'inline', 'nbagg', 'notebook', 'osx', 'qt', 'qt4', 'qt5',
                 'tk', 'wx'). If given, the corresponding matplotlib backend
                 is used, otherwise it will be matplotlib's default (which
                 you can set in your matplotlib config file).
</code></pre>
<p>optional arguments:</p>
<pre><code>--no-import-all  Prevent IPython from performing ``import *`` into the
                 interactive namespace. You can govern the default behavior
                 of this flag with the InteractiveShellApp.pylab_import_all
                 configurable.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#quickref" id="user-content-quickref"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%quickref</h2>
<p>Show a quick reference sheet</p>
<h2>
<a aria-hidden="true" class="anchor" href="#recall" id="user-content-recall"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%recall</h2>
<p>Repeat a command, or get command to input line for editing.</p>
<p>%recall and %rep are equivalent.</p>
<pre><code>%recall (no arguments):
</code></pre>
<p>Place a string version of last computation result (stored in the
special '_' variable) to the next input prompt. Allows you to create
elaborate command lines without using copy-paste:</p>
<pre><code>     In[1]: l = ["hei", "vaan"]
     In[2]: "".join(l)
    Out[2]: heivaan
     In[3]: %recall
     In[4]: heivaan_ &lt;== cursor blinking
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-11" id="user-content-examples-11"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples:</h3>
<pre><code>%recall 45
</code></pre>
<p>Place history line 45 on the next input prompt. Use %hist to find
out the number.</p>
<pre><code>%recall 1-4
</code></pre>
<p>Combine the specified lines into one cell, and place it on the next
input prompt. See %history for the slice syntax.</p>
<pre><code>%recall foo+bar
</code></pre>
<p>If foo+bar can be evaluated in the user namespace, the result is
placed at the next input prompt. Otherwise, the history is searched
for lines which contain that substring, and the most recent one is
placed at the next input prompt.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#rehashx" id="user-content-rehashx"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%rehashx</h2>
<p>Update the alias table with all executable files in $PATH.</p>
<p>This version explicitly checks that every entry in $PATH is a file
with execute access (os.X_OK), so it is much slower than %rehash.</p>
<p>Under Windows, it checks executability as a match against a
'|'-separated string of extensions, stored in the IPython config
variable win_exec_ext.  This defaults to 'exe|com|bat'.</p>
<p>This function also resets the root module cache of module completer,
used on slow filesystems.</p>
<pre><code>%reload_ext
</code></pre>
<p>Reload an IPython extension by its module name.</p>
<pre><code>%rep
</code></pre>
<p>Alias for <code>%recall</code>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#rerun" id="user-content-rerun"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%rerun</h2>
<p>Re-run previous input</p>
<p>By default, you can specify ranges of input history to be repeated
(as with %history). With no arguments, it will repeat the last line.</p>
<p>Options:</p>
<pre><code>-l &lt;n&gt; : Repeat the last n lines of input, not including the
current command.

-g foo : Repeat the most recent line which contains foo
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#reset" id="user-content-reset"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%reset</h2>
<pre><code>Resets the namespace by removing all names defined by the user, if
called without arguments, or by removing some types of objects, such
as everything currently in IPython's In[] and Out[] containers (see
the parameters for details).
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#parameters" id="user-content-parameters"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Parameters</h3>
<pre><code>-f : force reset without asking for confirmation.

-s : 'Soft' reset: Only clears your namespace, leaving history intact.
    References to objects may be kept. By default (without this option),
    we do a 'hard' reset, giving you a new session and removing all
    references to objects from the current session.

in : reset input history

out : reset output history

dhist : reset directory history

array : reset only variables that are NumPy arrays
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#see-also-3" id="user-content-see-also-3"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>See Also</h3>
<p>reset_selective : invoked as <code>%reset_selective</code></p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-12" id="user-content-examples-12"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>In [6]: a = 1

In [7]: a
Out[7]: 1

In [8]: 'a' in _ip.user_ns
Out[8]: True

In [9]: %reset -f

In [1]: 'a' in _ip.user_ns
Out[1]: False

In [2]: %reset -f in
Flushing input history

In [3]: %reset -f dhist in
Flushing directory history
Flushing input history
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#notes" id="user-content-notes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Notes</h3>
<p>Calling this magic from clients that do not implement standard input,
such as the ipython notebook interface, will reset the namespace
without confirmation.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#reset_selective" id="user-content-reset_selective"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%reset_selective</h2>
<p>Resets the namespace by removing names defined by the user.</p>
<p>Input/Output history are left around in case you need them.</p>
<pre><code>%reset_selective [-f] regex
</code></pre>
<p>No action is taken if regex is not included</p>
<p>Options</p>
<pre><code>  -f : force reset without asking for confirmation.
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#see-also-4" id="user-content-see-also-4"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>See Also</h3>
<pre><code>reset : invoked as ``%reset``
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-13" id="user-content-examples-13"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<p>We first fully reset the namespace so your output looks identical to
this example for pedagogical reasons; in practice you do not need a
full reset:</p>
<pre><code>In [1]: %reset -f
</code></pre>
<p>Now, with a clean namespace we can make a few variables and use
<code>%reset_selective</code> to only delete names that match our regexp:</p>
<pre><code>In [2]: a=1; b=2; c=3; b1m=4; b2m=5; b3m=6; b4m=7; b2s=8

In [3]: who_ls
Out[3]: ['a', 'b', 'b1m', 'b2m', 'b2s', 'b3m', 'b4m', 'c']

In [4]: %reset_selective -f b[2-3]m

In [5]: who_ls
Out[5]: ['a', 'b', 'b1m', 'b2s', 'b4m', 'c']

In [6]: %reset_selective -f d

In [7]: who_ls
Out[7]: ['a', 'b', 'b1m', 'b2s', 'b4m', 'c']

In [8]: %reset_selective -f c

In [9]: who_ls
Out[9]: ['a', 'b', 'b1m', 'b2s', 'b4m']

In [10]: %reset_selective -f b

In [11]: who_ls
Out[11]: ['a']
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#notes-1" id="user-content-notes-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Notes</h3>
<p>Calling this magic from clients that do not implement standard input,
such as the ipython notebook interface, will reset the namespace
without confirmation.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#rm" id="user-content-rm"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%rm</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#rmdir" id="user-content-rmdir"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%rmdir</h2>
<p>Callable object storing the details of one alias.</p>
<p>Instances are registered as magic functions to allow use of aliases.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#run" id="user-content-run"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%run</h2>
<p>Run the named file inside IPython as a program.</p>
<p>Usage:</p>
<pre><code>%run [-n -i -e -G]
     [( -t [-N&lt;N&gt;] | -d [-b&lt;N&gt;] | -p [profile options] )]
     ( -m mod | file ) [args]
</code></pre>
<p>Parameters after the filename are passed as command-line arguments to
the program (put in sys.argv). Then, control returns to IPython's
prompt.</p>
<p>This is similar to running at a system prompt <code>python file args</code>,
but with the advantage of giving you IPython's tracebacks, and of
loading all variables into your interactive namespace for further use
(unless -p is used, see below).</p>
<p>The file is executed in a namespace initially consisting only of
<code>__name__=='__main__'</code> and sys.argv constructed as indicated. It thus
sees its environment as if it were being run as a stand-alone program
(except for sharing global objects such as previously imported
modules). But after execution, the IPython interactive namespace gets
updated with all variables defined in the program (except for <strong>name</strong>
and sys.argv). This allows for very convenient loading of code for
interactive work, while giving each program a 'clean sheet' to run in.</p>
<p>Arguments are expanded using shell-like glob match.  Patterns
'*', '?', '[seq]' and '[!seq]' can be used.  Additionally,
tilde '~' will be expanded into user's home directory.  Unlike
real shells, quotation does not suppress expansions.  Use <em>two</em> back slashes (e.g. <code>\\*</code>) to suppress expansions.
To completely disable these expansions, you can use -G flag.</p>
<p>Options:</p>
<pre><code>-n
</code></pre>
<p><strong>name</strong> is NOT set to '<strong>main</strong>', but to the running file's name
without extension (as python does under import).  This allows running
scripts and reloading the definitions in them without calling code
protected by an <code>if __name__ == "__main__"</code> clause.</p>
<pre><code>-i
</code></pre>
<p>run the file in IPython's namespace instead of an empty one. This
is useful if you are experimenting with code written in a text editor
which depends on variables defined interactively.</p>
<pre><code>-e
</code></pre>
<p>ignore sys.exit() calls or SystemExit exceptions in the script
being run.  This is particularly useful if IPython is being used to
run unittests, which always exit with a sys.exit() call.  In such
cases you are interested in the output of the test results, not in
seeing a traceback of the unittest module.</p>
<pre><code>-t
</code></pre>
<p>print timing information at the end of the run.  IPython will give
you an estimated CPU time consumption for your script, which under
Unix uses the resource module to avoid the wraparound problems of
time.clock().  Under Unix, an estimate of time spent on system tasks
is also given (for Windows platforms this is reported as 0.0).</p>
<p>If -t is given, an additional <code>-N&lt;N&gt;</code> option can be given, where 
must be an integer indicating how many times you want the script to
run.  The final timing report will include total and per run results.</p>
<p>For example (testing the script uniq_stable.py):</p>
<pre><code>    In [1]: run -t uniq_stable

    IPython CPU timings (estimated):
      User  :    0.19597 s.
      System:        0.0 s.

    In [2]: run -t -N5 uniq_stable

    IPython CPU timings (estimated):
    Total runs performed: 5
      Times :      Total       Per run
      User  :   0.910862 s,  0.1821724 s.
      System:        0.0 s,        0.0 s.
    
-d
</code></pre>
<p>run your program under the control of pdb, the Python debugger.
This allows you to execute your program step by step, watch variables,
etc.  Internally, what IPython does is similar to calling:</p>
<pre><code>pdb.run('execfile("YOURFILENAME")')
</code></pre>
<p>with a breakpoint set on line 1 of your file.  You can change the line
number for this automatic breakpoint to be  by using the -bN option
(where N must be an integer). For example:</p>
<pre><code>%run -d -b40 myscript
</code></pre>
<p>will set the first breakpoint at line 40 in myscript.py.  Note that
the first breakpoint must be set on a line which actually does
something (not a comment or docstring) for it to stop execution.</p>
<p>Or you can specify a breakpoint in a different file:</p>
<pre><code>%run -d -b myotherfile.py:20 myscript
</code></pre>
<p>When the pdb debugger starts, you will see a (Pdb) prompt.  You must
first enter 'c' (without quotes) to start execution up to the first
breakpoint.</p>
<p>Entering 'help' gives information about the use of the debugger.  You
can easily see pdb's full documentation with "import pdb;pdb.help()"
at a prompt.</p>
<pre><code>-p
</code></pre>
<p>run program under the control of the Python profiler module (which
prints a detailed report of execution times, function calls, etc).</p>
<p>You can pass other options after -p which affect the behavior of the
profiler itself. See the docs for %prun for details.</p>
<p>In this mode, the program's variables do NOT propagate back to the
IPython interactive namespace (because they remain in the namespace
where the profiler executes them).</p>
<p>Internally this triggers a call to %prun, see its documentation for
details on the options available specifically for profiling.</p>
<p>There is one special usage for which the text above doesn't apply:
if the filename ends with .ipy[nb], the file is run as ipython script,
just as if the commands were written on IPython prompt.</p>
<pre><code>-m
</code></pre>
<p>specify module name to load instead of script path. Similar to
the -m option for the python interpreter. Use this option last if you
want to combine with other %run options. Unlike the python interpreter
only source modules are allowed no .pyc or .pyo files.
For example:</p>
<pre><code>%run -m example
</code></pre>
<p>will run the example module.</p>
<pre><code>-G
</code></pre>
<p>disable shell-like glob expansion of arguments.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#save" id="user-content-save"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%save</h2>
<p>Save a set of lines or a macro to a given filename.</p>
<p>Usage:</p>
<pre><code>%save [options] filename n1-n2 n3-n4 ... n5 .. n6 ...
</code></pre>
<p>Options:</p>
<pre><code>-r: use 'raw' input.  By default, the 'processed' history is used,
so that magics are loaded in their transformed version to valid
Python.  If this option is given, the raw input as typed as the
command line is used instead.

-f: force overwrite.  If file exists, %save will prompt for overwrite
unless -f is given.

-a: append to the file instead of overwriting it.
</code></pre>
<p>This function uses the same syntax as %history for input ranges,
then saves the lines to the filename you specify.</p>
<p>It adds a '.py' extension to the file if you don't do so yourself, and
it asks for confirmation before overwriting existing files.</p>
<p>If <code>-r</code> option is used, the default extension is <code>.ipy</code>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#sc" id="user-content-sc"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%sc</h2>
<p>Shell capture - run shell command and capture output (DEPRECATED use !).</p>
<p><strong>DEPRECATED</strong>. Suboptimal, retained for backwards compatibility.</p>
<p>You should use the form 'var = !command' instead. Example:</p>
<pre><code> "%sc -l myfiles = ls ~"
</code></pre>
<p>should now be written as</p>
<pre><code> "myfiles = !ls ~"
</code></pre>
<p>myfiles.s, myfiles.l and myfiles.n still apply as documented
below.</p>
<pre><code>%sc [options] varname=command
</code></pre>
<p>IPython will run the given command using commands.getoutput(), and
will then update the user's interactive namespace with a variable
called varname, containing the value of the call.  Your command can
contain shell wildcards, pipes, etc.</p>
<p>The '=' sign in the syntax is mandatory, and the variable name you
supply must follow Python's standard conventions for valid names.</p>
<p>(A special format without variable name exists for internal use)</p>
<p>Options:</p>
<pre><code>-l: list output.  Split the output on newlines into a list before
assigning it to the given variable.  By default the output is stored
as a single string.

-v: verbose.  Print the contents of the variable.
</code></pre>
<p>In most cases you should not need to split as a list, because the
returned value is a special type of string which can automatically
provide its contents either as a list (split on newlines) or as a
space-separated string.  These are convenient, respectively, either
for sequential processing or to be passed to a shell command.</p>
<p>For example:</p>
<pre><code># Capture into variable a
In [1]: sc a=ls *py

# a is a string with embedded newlines
In [2]: a
Out[2]: 'setup.py\nwin32_manual_post_install.py'

# which can be seen as a list:
In [3]: a.l
Out[3]: ['setup.py', 'win32_manual_post_install.py']

# or as a whitespace-separated string:
In [4]: a.s
Out[4]: 'setup.py win32_manual_post_install.py'

# a.s is useful to pass as a single command line:
In [5]: !wc -l $a.s
  146 setup.py
  130 win32_manual_post_install.py
  276 total

# while the list form is useful to loop over:
In [6]: for f in a.l:
  ...:      !wc -l $f
  ...:
146 setup.py
130 win32_manual_post_install.py
</code></pre>
<p>Similarly, the lists returned by the -l option are also special, in
the sense that you can equally invoke the .s attribute on them to
automatically get a whitespace-separated string from their contents:</p>
<pre><code>In [7]: sc -l b=ls *py

In [8]: b
Out[8]: ['setup.py', 'win32_manual_post_install.py']

In [9]: b.s
Out[9]: 'setup.py win32_manual_post_install.py'
</code></pre>
<p>In summary, both the lists and strings used for output capture have
the following special attributes:</p>
<pre><code>.l (or .list) : value as list.
.n (or .nlstr): value as newline-separated string.
.s (or .spstr): value as space-separated string.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#set_env" id="user-content-set_env"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%set_env</h2>
<p>Set environment variables.  Assumptions are that either "val" is a
name in the user namespace, or val is something that evaluates to a
string.</p>
<p>Usage:</p>
<pre><code>%set_env var val: set value for var
%set_env var=val: set value for var
%set_env var=$val: set value for var, using python expansion if possible
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#store" id="user-content-store"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%store</h2>
<p>Lightweight persistence for python variables.</p>
<p>Example:</p>
<pre><code>In [1]: l = ['hello',10,'world']
In [2]: %store l
In [3]: exit
</code></pre>
<p>(IPython session is closed and started again...)</p>
<pre><code>ville@badger:~$ ipython
In [1]: l
NameError: name 'l' is not defined
In [2]: %store -r
In [3]: l
Out[3]: ['hello', 10, 'world']
</code></pre>
<p>Usage:</p>
<pre><code>* ``%store``          - Show list of all variables and their current
                        values
* ``%store spam``     - Store the *current* value of the variable spam
                        to disk
* ``%store -d spam``  - Remove the variable and its value from storage
* ``%store -z``       - Remove all variables from storage
* ``%store -r``       - Refresh all variables from store (overwrite
                        current vals)
* ``%store -r spam bar`` - Refresh specified variables from store
                           (delete current val)
* ``%store foo &gt;a.txt``  - Store value of foo to new file a.txt
* ``%store foo &gt;&gt;a.txt`` - Append value of foo to file a.txt

It should be noted that if you change the value of a variable, you
need to %store it again if you want to persist the new value.

Note also that the variables will need to be pickleable; most basic
python types can be safely %store'd.

Also aliases can be %store'd across sessions.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#sx" id="user-content-sx"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%sx</h2>
<p>Shell execute - run shell command and capture output (!! is short-hand).</p>
<pre><code>%sx command
</code></pre>
<p>IPython will run the given command using commands.getoutput(), and
return the result formatted as a list (split on '\n').  Since the
output is <em>returned</em>, it will be stored in ipython's regular output
cache Out[N] and in the '_N' automatic variables.</p>
<p>Notes:</p>
<ol>
<li>
<p>If an input line begins with '!!', then %sx is automatically
invoked.  That is, while:</p>
<p>!ls</p>
</li>
</ol>
<p>causes ipython to simply issue system('ls'), typing:</p>
<pre><code>!!ls

is a shorthand equivalent to:

  %sx ls

2) %sx differs from %sc in that %sx automatically splits into a list,
like '%sc -l'.  The reason for this is to make it as easy as possible
to process line-oriented shell output via further python commands.
%sc is meant to provide much finer control, but requires more
typing.

3) Just like %sc -l, this is a list with special attributes:

  .l (or .list) : value as list.
  .n (or .nlstr): value as newline-separated string.
  .s (or .spstr): value as whitespace-separated string.

This is very useful when trying to use such lists as arguments to
system commands.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#system" id="user-content-system"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%system</h2>
<p>Shell execute - run shell command and capture output (!! is short-hand).</p>
<pre><code>%sx command
</code></pre>
<p>IPython will run the given command using commands.getoutput(), and
return the result formatted as a list (split on '\n').  Since the
output is <em>returned</em>, it will be stored in ipython's regular output
cache Out[N] and in the '_N' automatic variables.</p>
<p>Notes:</p>
<ol>
<li>
<p>If an input line begins with '!!', then %sx is automatically
invoked.  That is, while:</p>
<p>!ls</p>
</li>
</ol>
<p>causes ipython to simply issue system('ls'), typing:</p>
<pre><code>!!ls
</code></pre>
<p>is a shorthand equivalent to:</p>
<pre><code>%sx ls
</code></pre>
<ol start="2">
<li>
<p>%sx differs from %sc in that %sx automatically splits into a list,
like '%sc -l'.  The reason for this is to make it as easy as possible
to process line-oriented shell output via further python commands.
%sc is meant to provide much finer control, but requires more
typing.</p>
</li>
<li>
<p>Just like %sc -l, this is a list with special attributes:</p>
<p>.l (or .list) : value as list.
.n (or .nlstr): value as newline-separated string.
.s (or .spstr): value as whitespace-separated string.</p>
</li>
</ol>
<p>This is very useful when trying to use such lists as arguments to
system commands.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#tb" id="user-content-tb"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%tb</h2>
<p>Print the last traceback with the currently active exception mode.</p>
<p>See %xmode for changing exception reporting modes.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#time" id="user-content-time"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%time</h2>
<p>Time execution of a Python statement or expression.</p>
<p>The CPU and wall clock times are printed, and the value of the
expression (if any) is returned.  Note that under Win32, system time
is always reported as 0, since it can not be measured.</p>
<p>This function can be used both as a line and cell magic:</p>
<pre><code>- In line mode you can time a single-line statement (though multiple
  ones can be chained with using semicolons).

- In cell mode, you can time the cell body (a directly 
  following statement raises an error).

This function provides very basic timing functionality.  Use the timeit 
magic for more control over the measurement.
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-14" id="user-content-examples-14"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>  In [1]: %time 2**128
  CPU times: user 0.00 s, sys: 0.00 s, total: 0.00 s
  Wall time: 0.00
  Out[1]: 340282366920938463463374607431768211456L

  In [2]: n = 1000000

  In [3]: %time sum(range(n))
  CPU times: user 1.20 s, sys: 0.05 s, total: 1.25 s
  Wall time: 1.37
  Out[3]: 499999500000L

  In [4]: %time print 'hello world'
  hello world
  CPU times: user 0.00 s, sys: 0.00 s, total: 0.00 s
  Wall time: 0.00
</code></pre>
<p>Note that the time needed by Python to compile the given expression
will be reported if it is more than 0.1s.  In this example, the
actual exponentiation is done by Python at compilation time, so while
the expression can take a noticeable amount of time to compute, that
time is purely due to the compilation:</p>
<pre><code>In [5]: %time 3**9999;
CPU times: user 0.00 s, sys: 0.00 s, total: 0.00 s
Wall time: 0.00 s

In [6]: %time 3**999999;
CPU times: user 0.00 s, sys: 0.00 s, total: 0.00 s
Wall time: 0.00 s
Compiler : 0.78 s
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#timeit" id="user-content-timeit"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%timeit</h2>
<p>Time execution of a Python statement or expression</p>
<p>Usage, in line mode:</p>
<pre><code>%timeit [-n&lt;N&gt; -r&lt;R&gt; [-t|-c] -q -p&lt;P&gt; -o] statement
</code></pre>
<p>or in cell mode:</p>
<pre><code>%%timeit [-n&lt;N&gt; -r&lt;R&gt; [-t|-c] -q -p&lt;P&gt; -o] setup_code
code
code...

Time execution of a Python statement or expression using the timeit
module.  This function can be used both as a line and cell magic:
</code></pre>
<ul>
<li>
<p>In line mode you can time a single-line statement (though multiple
ones can be chained with using semicolons).</p>
</li>
<li>
<p>In cell mode, the statement in the first line is used as setup code
(executed but not timed) and the body of the cell is timed.  The cell
body has access to any variables created in the setup code.</p>
</li>
</ul>
<p>Options:</p>
<pre><code>-n&lt;N&gt;: execute the given statement &lt;N&gt; times in a loop. If this value
is not given, a fitting value is chosen.

-r&lt;R&gt;: repeat the loop iteration &lt;R&gt; times and take the best result.
Default: 3

-t: use time.time to measure the time, which is the default on Unix.
This function measures wall time.

-c: use time.clock to measure the time, which is the default on
Windows and measures wall time. On Unix, resource.getrusage is used
instead and returns the CPU user time.

-p&lt;P&gt;: use a precision of &lt;P&gt; digits to display the timing result.
Default: 3

-q: Quiet, do not print result.

-o: return a TimeitResult that can be stored in a variable to inspect
    the result in more details.
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-15" id="user-content-examples-15"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<pre><code>  In [1]: %timeit pass
  10000000 loops, best of 3: 53.3 ns per loop

  In [2]: u = None

  In [3]: %timeit u is None
  10000000 loops, best of 3: 184 ns per loop

  In [4]: %timeit -r 4 u == None
  1000000 loops, best of 4: 242 ns per loop

  In [5]: import time

  In [6]: %timeit -n1 time.sleep(2)
  1 loops, best of 3: 2 s per loop
</code></pre>
<p>The times reported by %timeit will be slightly higher than those
reported by the timeit.py script when variables are accessed. This is
due to the fact that %timeit executes the statement in the namespace
of the shell, compared with timeit.py, which uses a single setup
statement to import function or create variables. Generally, the bias
does not matter as long as results from timeit.py are not mixed with
those from %timeit.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#unalias" id="user-content-unalias"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%unalias:</h2>
<p>Remove an alias</p>
<h2>
<a aria-hidden="true" class="anchor" href="#unload_ext" id="user-content-unload_ext"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%unload_ext:</h2>
<p>Unload an IPython extension by its module name.</p>
<p>Not all extensions can be unloaded, only those which define an
<code>unload_ipython_extension</code> function.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#who" id="user-content-who"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%who</h2>
<p>Print all interactive variables, with some minimal formatting.</p>
<p>If any arguments are given, only variables whose type matches one of
these are printed.  For example:</p>
<pre><code>%who function str
</code></pre>
<p>will only list functions and strings, excluding all other types of
variables.  To find the proper type names, simply use type(var) at a
command line to see how python prints type names.  For example:</p>
<pre><code>In [1]: type('hello')
Out[1]: &lt;type 'str'&gt;
</code></pre>
<p>indicates that the type name for strings is 'str'.</p>
<p><code>%who</code> always excludes executed names loaded through your configuration
file and things which are internal to IPython.</p>
<p>This is deliberate, as typically you may load many modules and the
purpose of %who is to show you only what you've manually defined.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-16" id="user-content-examples-16"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<p>Define two variables and list them with who:</p>
<pre><code>In [1]: alpha = 123

In [2]: beta = 'test'

In [3]: %who
alpha   beta

In [4]: %who int
alpha

In [5]: %who str
beta
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#who_ls" id="user-content-who_ls"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%who_ls</h2>
<p>Return a sorted list of all interactive variables.</p>
<p>If arguments are given, only variables of types matching these
arguments are returned.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-17" id="user-content-examples-17"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<p>Define two variables and list them with who_ls:</p>
<pre><code>In [1]: alpha = 123

In [2]: beta = 'test'

In [3]: %who_ls
Out[3]: ['alpha', 'beta']

In [4]: %who_ls int
Out[4]: ['alpha']

In [5]: %who_ls str
Out[5]: ['beta']
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#whos" id="user-content-whos"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%whos</h2>
<p>Like %who, but gives some extra information about each variable.</p>
<p>The same type filtering of %who can be applied here.</p>
<p>For all variables, the type is printed. Additionally it prints:</p>
<ul>
<li>
<p>For {},[],(): their length.</p>
</li>
<li>
<p>For numpy arrays, a summary with shape, number of
elements, typecode and size in memory.</p>
</li>
<li>
<p>Everything else: a string representation, snipping their middle if
too long.</p>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#examples-18" id="user-content-examples-18"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<p>Define two variables and list them with whos:</p>
<pre><code>In [1]: alpha = 123

In [2]: beta = 'test'

In [3]: %whos

  Variable   Type        Data/Info
  --------------------------------
  alpha      int         123
  beta       str         test
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#xdel" id="user-content-xdel"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%xdel</h2>
<p>Delete a variable, trying to clear it from anywhere that
IPython's machinery has references to it. By default, this uses
the identity of the named object in the user namespace to remove
references held under other names. The object is also removed
from the output history.</p>
<p>Options</p>
<pre><code>-n : Delete the specified name from all namespaces, without
     checking their identity.
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#xmode" id="user-content-xmode"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%xmode</h2>
<p>Switch modes for the exception handlers.</p>
<p>Valid modes: Plain, Context and Verbose.</p>
<p>If called without arguments, acts as a toggle.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#" id=""><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>%%!</h2>
<p>Shell execute - run shell command and capture output (!! is short-hand).</p>
<pre><code>%sx command
</code></pre>
<p>IPython will run the given command using commands.getoutput(), and
return the result formatted as a list (split on '\n').  Since the
output is <em>returned</em>, it will be stored in ipython's regular output
cache Out[N] and in the '_N' automatic variables.</p>
<p>Notes:</p>
<ol>
<li>If an input line begins with '!!', then %sx is automatically
invoked.</li>
</ol>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="https://github.com/lmmx/devnotes/wiki">Main page</a></p>

          </div>
        </div>
    </div>]