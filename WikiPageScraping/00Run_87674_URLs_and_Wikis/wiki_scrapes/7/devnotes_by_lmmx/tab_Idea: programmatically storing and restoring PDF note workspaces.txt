[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>RE: <a href="https://github.com/lmmx/dotfiles/blob/master/bashrc/bashrc_functions_pdf"><code>dotfiles/bashrc/bashrc_functions_pdf</code></a></p>
<p><em>Inspired by the way Chrome extensions like OneTab sweep away tabs to restorable/minimal representations</em></p>
<p><strong>Background</strong>:</p>
<ul>
<li>Currently when my laptop crashes it's because textbooks and a bunch of papers are open and I'm trying to deal with large datasets or memory-intensive programs, which become the straw that freezes the GUI camel's back.</li>
<li>Rather than viewing them in browser, started viewing offline (brings beneficial features such as automatic update upon cropping in evince and non-duplication) and there able to automate their management.</li>
<li>Potential to organise workspaces by task, to facilitate 'task switching' (with less in-memory storage it arguably also makes each task more efficient
<ul>
<li>i.e. multitasking is not problematic in itself, but only with compartmentalisation to avoid snowballing complexity and associated performance forfeits</li>
</ul>
</li>
</ul>
<blockquote>
<p>Unix StackExchange: <a href="http://unix.stackexchange.com/questions/5601/retrieving-names-of-all-open-pdf-files-in-evince-or-otherwise" rel="nofollow">Retrieve names of all open PDF files in evince</a></p>
</blockquote>
<ul>
<li>When you initialise with <code>findnotes</code> etc., could keep
<ul>
<li>list of evince process ID (<code>pid</code>) numbers associated with file ID (<code>surname16</code>) which connects both PDF and .md</li>
</ul>
</li>
<li>Could then provide a 'tidy away' function that sweeps notes away along with PDFs (send <code>Ctrl</code> + <code>S</code> signal to editr instances before forcibly closing... or ideally have some hook into the Shiny app itself)
<ul>
<li>the notes would be restore-able, in the sense that a research project etc. has certain components that are loaded and considered at once, but then task may switch to some other project and leaving all these processes in memory leaves computer more liable to freezing up</li>
</ul>
</li>
</ul>
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#see-wmctrl-dual-monitor-specification" id="user-content-see-wmctrl-dual-monitor-specification"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>See: <a href="https://github.com/lmmx/devnotes/wiki/wmctrl-dual-monitor-specification">wmctrl dual monitor specification</a>
</h3>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="https://github.com/lmmx/devnotes/wiki">Main page</a></p>

          </div>
        </div>
    </div>]