[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#other-peoples-improvements-on-the-original-code" id="user-content-other-peoples-improvements-on-the-original-code"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Other people's improvements on the original code</h2>
<blockquote>
<p>(Long story short: new repo - <a href="https://github.com/lmmx/gdocs2Rmd/"><code>gdocs2Rmd</code></a> - forked off of <a href="https://github.com/clearf/gdocs2md">clearf's fork</a>, the only one in the network graph that had fixed the off-by-one error in bold/italics processing</p>
</blockquote>
<h3>
<a aria-hidden="true" class="anchor" href="#round-1" id="user-content-round-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Round 1</h3>
<ul>
<li>
<strike><a href="https://github.com/psychemedia/gdocs2md/blob/master/converttomarkdown.gapps">psychemedia's fork</a> is a functioning version of the original script with <code>Save to Drive</code> UI menu rather than automatically sending to email.</strike>
<ul>
<li>
<strike>The <a href="https://github.com/psychemedia/gdocs2md/commit/311320d02993873d964f11d283e9f1faefb5572f">diff comments</a> say it's 'hacky' and not recursive, possibly just an XML use(?)</strike> off by 1 <img align="absmiddle" alt=":-1:" class="emoji" data-canonical-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f44e.png" height="20" src="https://camo.githubusercontent.com/5b143f5bb1b603ecf3e0ebe50ae5e1ba61dcf729/68747470733a2f2f6173736574732d63646e2e6769746875622e636f6d2f696d616765732f69636f6e732f656d6f6a692f756e69636f64652f31663434652e706e67" title=":-1:" width="20"/>
</li>
</ul>
</li>
<li>
<strike><a href="https://github.com/jacksonicson/gdocs2md">Jacksonicson's fork</a> comments describe it being recursive and systematic</strike> <a href="https://gist.github.com/lmmx/ef16ff7a561c7a0fdc29#file-jacksonicson-gdoc2md-md">failed</a> <img align="absmiddle" alt=":-1:" class="emoji" data-canonical-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f44e.png" height="20" src="https://camo.githubusercontent.com/5b143f5bb1b603ecf3e0ebe50ae5e1ba61dcf729/68747470733a2f2f6173736574732d63646e2e6769746875622e636f6d2f696d616765732f69636f6e732f656d6f6a692f756e69636f64652f31663434652e706e67" title=":-1:" width="20"/>
</li>
<li>
<a href="https://github.com/trepidacious/gdocs2md/commit/c72c3636f09522ee7f92be987e1033ac83bb1825">This commit</a> in <a href="https://github.com/trepidacious/gdocs2md">trepidacious's fork</a> describes "improved handling of bold and italic formatting" (creation of a new function <code>processTextElement2</code>).</li>
<li>
<strike><a href="https://github.com/josuahdemangeon/gdocs2md">josuahdemangeon's fork</a> contains <a href="https://github.com/josuahdemangeon/gdocs2md/commit/fea3d1c7fb90034ee9ee5809820f6d8598ef867f">a commit</a> which converts inline images to <code>&lt;img&gt;</code> tags with <code>data:image/png;base64</code> URL <em>cf.</em> a new file for each</strike> off by 1 <img align="absmiddle" alt=":-1:" class="emoji" data-canonical-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f44e.png" height="20" src="https://camo.githubusercontent.com/5b143f5bb1b603ecf3e0ebe50ae5e1ba61dcf729/68747470733a2f2f6173736574732d63646e2e6769746875622e636f6d2f696d616765732f69636f6e732f656d6f6a692f756e69636f64652f31663434652e706e67" title=":-1:" width="20"/>
</li>
<li><strike><a href="https://github.com/supreetpal/gdoc-markdown-converter">supreetpal's fork</a> has <a href="https://github.com/supreetpal/gdoc-markdown-converter/commit/a0c3a7a7daba16ac03046b8ee5d080df1045f54f">a commit</a> describing the option to configure output folder, and <a href="https://github.com/supreetpal/gdoc-markdown-converter/commit/8c09362ebdbaed38b5d96e57d5b89c145f24fbfd">a document</a> describing <a href="https://github.com/supreetpal/gdoc-markdown-converter/blob/develop/how-to-publish-google-doc-plugin.md">how to publish a Google Docs plugin</a></strike></li>
</ul>
 <blockquote>This means anyone can install it (accessible across all docs rather than using the script editor each time). Getting a doc plugin (in the long term) accepted as 'global'/both rather than solely publishing 'domain-restricted' takes longer (the script being subject to Google's scrutiny), but is available to anyone through the script plugin search feature.<br/><br/>
 It sounds like jumping through a few hoops, but surely less so than for publishing a Chrome Extension.</blockquote>
  * Defaults to null output folder <img align="absmiddle" alt=":expressionless:" class="emoji" data-canonical-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f611.png" height="20" src="https://camo.githubusercontent.com/0fe3f513ce4bc64576f86bf3577c7317f3b56083/68747470733a2f2f6173736574732d63646e2e6769746875622e636f6d2f696d616765732f69636f6e732f656d6f6a692f756e69636f64652f31663631312e706e67" title=":expressionless:" width="20"/> 
  Eventually found out... it's off by 1 <img align="absmiddle" alt=":-1:" class="emoji" data-canonical-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f44e.png" height="20" src="https://camo.githubusercontent.com/5b143f5bb1b603ecf3e0ebe50ae5e1ba61dcf729/68747470733a2f2f6173736574732d63646e2e6769746875622e636f6d2f696d616765732f69636f6e732f656d6f6a692f756e69636f64652f31663434652e706e67" title=":-1:" width="20"/> 
* <strike>[bquast's fork](https://github.com/bquast/gdocs2md/) notes the README says [script manager rather than editor](https://github.com/bquast/gdocs2md/commit/ec5bdd3978ce0a336ce767f1eb7fb74cbdc446df)</strike> 1 off <img align="absmiddle" alt=":-1:" class="emoji" data-canonical-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f44e.png" height="20" src="https://camo.githubusercontent.com/5b143f5bb1b603ecf3e0ebe50ae5e1ba61dcf729/68747470733a2f2f6173736574732d63646e2e6769746875622e636f6d2f696d616765732f69636f6e732f656d6f6a692f756e69636f64652f31663434652e706e67" title=":-1:" width="20"/> 
* [clearf's fork](https://github.com/clearf/gdocs2md) has ['big changes to conversions'](https://github.com/clearf/gdocs2md/commit/a176ca9a534963a29e92257b1bc7d27f73314aa4), 'adding files to the google directory structure' - creating a `Markdown` folder if not existing in the source document's diretory, images in a subfolder of the `markdown` folder (`document.getName()+"_images"`)
  * [Bingo](https://github.com/clearf/gdocs2md/commit/a176ca9a534963a29e92257b1bc7d27f73314aa4#diff-22699f26512f5a42cffea5f777e37110R406): `reformatted_txt.setLinkUrl(off, lastOff-1, url)` appears to be fixing the off-by-1...
  * ... but folder ID is hard-coded (for developer's Drive folder!) and after accidentally setting it up app can't access markdown folder (one was made though)
<h3>
<a aria-hidden="true" class="anchor" href="#round-2" id="user-content-round-2"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Round 2</h3>
<p><a href="https://github.com/lmmx/devnotes/wiki/gdocs2md-debugging:-repo-network,-round-2">New wiki page</a> (fixing off-by-one with the clearf fork, then integrating functionality present in other forks)</p>
<h2>
<a aria-hidden="true" class="anchor" href="#my-reading-into-the-script" id="user-content-my-reading-into-the-script"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>My reading into the script</h2>
<p>I'm trying to figure out the cause within the code here, but italicised links are output as mangled markdown. For <em>e.g.</em> :</p>
<p><img alt="" data-canonical-src="http://i.imgur.com/k8Aj6Jw.png" src="https://camo.githubusercontent.com/55976d93af1feb0a3c79dbb8aa372f3a9bf23de7/687474703a2f2f692e696d6775722e636f6d2f6b38416a364a772e706e67"/></p>
<p><a href="https://github.com/mangini/gdocs2md"><code>gdocs2md</code></a> markdown output:</p>
<blockquote>###### Notes on Tamara Munzerâ€™s 2000 dissertation, [Interactive visualization of large graphs and networks](https://graphics.stanford.edu/papers/munzner_thesis/index.html) (*[pd*f](https://graphics.stanford.edu/papers/munzner_thesis/all.onscreen.pdf))
<p>"<em>When I was considering graduate schools a few years later, a major part of my decision-making procedure was to read through the previous decade of **<a href="http://www.siggraph.org/learn/open-access-s2014-conference-proceedings" rel="nofollow">Siggraph proceeding*s</a></em>. I ended up at Stanford because I found that the papers that most delighted me had Patâ€™s name on them. What I value most about this past five years was the opportunity to absorb not only his insights into the specifics of my work, but his fundamental approach to research that emphasizes rigor and first principles*"</p>
</blockquote>
<p>which when rendered gives:</p>
<blockquote>
<h6>
<a aria-hidden="true" class="anchor" href="#notes-on-tamara-munzers-2000-dissertation-interactive-visualization-of-large-graphs-and-networks-pdf" id="user-content-notes-on-tamara-munzers-2000-dissertation-interactive-visualization-of-large-graphs-and-networks-pdf"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Notes on Tamara Munzerâ€™s 2000 dissertation, <a href="https://graphics.stanford.edu/papers/munzner_thesis/index.html" rel="nofollow">Interactive visualization of large graphs and networks</a> (*<a href="https://graphics.stanford.edu/papers/munzner_thesis/all.onscreen.pdf" rel="nofollow">pd*f</a>)</h6>
</blockquote>
<blockquote>
<p>"<em>When I was considering graduate schools a few years later, a major part of my decision-making procedure was to read through the previous decade of **<a href="http://www.siggraph.org/learn/open-access-s2014-conference-proceedings" rel="nofollow">Siggraph proceeding*s</a></em>. I ended up at Stanford because I found that the papers that most delighted me had Patâ€™s name on them. What I value most about this past five years was the opportunity to absorb not only his insights into the specifics of my work, but his fundamental approach to research that emphasizes rigor and first principles*"</p>
</blockquote>
<p><img alt="" data-canonical-src="http://i.imgur.com/zWJbPgE.png" src="https://camo.githubusercontent.com/447de4643c067a1ded830b6141850dfee0f0bc60/687474703a2f2f692e696d6775722e636f6d2f7a574a625067452e706e67"/></p>
<pre><code>pOut=pOut.substring(0, off)+'*'+pOut.substring(off, lastOff)+'*'+pOut.substring(lastOff);
</code></pre>
<p>pOut = <code>"Notes on Tamara Munzerâ€™s 2000 dissertation, Interactive visualization of large graphs and networks ([pdf](https://graphics.stanford.edu/papers/munzner_thesis/all.onscreen.pdf))"</code></p>
<p>i.e. mappings (<code>attrs</code> array) are correct on first iteration, then after URL is processed two additional characters lead to off-by-one error. This is classic text-algo problem, potential for italic/bold within string means only OK if you either</p>
<ul>
<li>apply URL <code>[]()</code> modification first, then update <code>attrs</code> array accordingly on relevant values
<ul>
<li>benefit: always just start character +1 (âˆµ <code>[X</code>), end character +1 (âˆµ <code>[...X</code>)</li>
</ul>
</li>
<li>apply bold/italic modification first, then update <code>attrs</code> array accordingly
<ul>
<li>disadvantage: multiple parts of the if statement would need to be edited for different cases:
<ul>
<li>if <em>italic</em> start character ++1 (âˆµ <code>*X</code>), end character ++1 (âˆµ <code>*...X</code>)</li>
<li>if <strong>bold</strong> start character ++2 (âˆµ <code>**X</code>), end character ++2 (âˆµ <code>**...X</code>)</li>
<li>if <em><strong>bold italic</strong></em> start char ++3 (âˆµ <code>***X</code>), end char ++3 (âˆµ <code>***...X</code>)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Common sense points to the former - make a single URL modification, and inform the styling sections of the change to the mapping of the original string.</p>
<p>Equivalent in previously deployed R script: <a href="https://github.com/lmmx/scholaRdaemon/blob/d29e2f0d205da3a1602572557adef044603cf0fb/R/scholaRdaemon.R#L281">abbreviation substitution algorithm, modifying variable for string length at each iteration</a>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#solution" id="user-content-solution"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Solution</h2>
<p><strike>Take the string <code>pOut</code> and check for a URL - when the URL is modified, increment the same <code>attr</code> entries that were used to place the <code>[</code>, <code>]</code>, <code>(</code> and <code>)</code></strike> Already implemented <a href="https://github.com/clearf/gdocs2md">in this fork</a>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#script-workings" id="user-content-script-workings"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Script workings</h2>
<p>Currently runs as a core function <code>processTextElement</code>:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">processTextElement</span>(<span class="pl-smi">inSrc</span>, <span class="pl-smi">txt</span>) {
  <span class="pl-k">if</span> (<span class="pl-k">typeof</span>(txt) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>string<span class="pl-pds">'</span></span>) {
    <span class="pl-k">return</span> txt;
  }
  
  <span class="pl-k">var</span> pOut <span class="pl-k">=</span> <span class="pl-smi">txt</span>.<span class="pl-en">getText</span>();
  <span class="pl-k">if</span> (<span class="pl-k">!</span> <span class="pl-smi">txt</span>.<span class="pl-smi">getTextAttributeIndices</span>) {
    <span class="pl-k">return</span> pOut;
  }
  
  <span class="pl-k">var</span> attrs<span class="pl-k">=</span><span class="pl-smi">txt</span>.<span class="pl-en">getTextAttributeIndices</span>();
  <span class="pl-k">var</span> lastOff<span class="pl-k">=</span><span class="pl-smi">pOut</span>.<span class="pl-c1">length</span>;

  <span class="pl-k">for</span> (<span class="pl-k">var</span> i<span class="pl-k">=</span><span class="pl-smi">attrs</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>; i<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>; i<span class="pl-k">--</span>) {
    <span class="pl-k">var</span> off<span class="pl-k">=</span>attrs[i];
    <span class="pl-k">var</span> url<span class="pl-k">=</span><span class="pl-smi">txt</span>.<span class="pl-en">getLinkUrl</span>(off);
    <span class="pl-k">var</span> font<span class="pl-k">=</span><span class="pl-smi">txt</span>.<span class="pl-en">getFontFamily</span>(off);
    <span class="pl-k">if</span> (url) {  <span class="pl-c"><span class="pl-c">//</span> start of link</span>
      <span class="pl-k">if</span> (i<span class="pl-k">&gt;=</span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> attrs[i<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">==</span>off<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">txt</span>.<span class="pl-en">getLinkUrl</span>(attrs[i<span class="pl-k">-</span><span class="pl-c1">1</span>])<span class="pl-k">===</span>url) {
        <span class="pl-c"><span class="pl-c">//</span> detect links that are in multiple pieces because of errors on formatting:</span>
        i<span class="pl-k">-=</span><span class="pl-c1">1</span>;
        off<span class="pl-k">=</span>attrs[i];
        url<span class="pl-k">=</span><span class="pl-smi">txt</span>.<span class="pl-en">getLinkUrl</span>(off);
      }
      pOut<span class="pl-k">=</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(<span class="pl-c1">0</span>, off)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">'</span>[<span class="pl-pds">'</span></span><span class="pl-k">+</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(off, lastOff)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">'</span>](<span class="pl-pds">'</span></span><span class="pl-k">+</span>url<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span><span class="pl-k">+</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(lastOff);
    } <span class="pl-k">else</span> <span class="pl-k">if</span> (font) {
      <span class="pl-k">if</span> (<span class="pl-k">!</span>inSrc <span class="pl-k">&amp;&amp;</span> font<span class="pl-k">===</span><span class="pl-smi">font</span>.<span class="pl-c1">COURIER_NEW</span>) {
        <span class="pl-k">while</span> (i<span class="pl-k">&gt;=</span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">txt</span>.<span class="pl-en">getFontFamily</span>(attrs[i<span class="pl-k">-</span><span class="pl-c1">1</span>]) <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">txt</span>.<span class="pl-en">getFontFamily</span>(attrs[i<span class="pl-k">-</span><span class="pl-c1">1</span>])<span class="pl-k">===</span><span class="pl-smi">font</span>.<span class="pl-c1">COURIER_NEW</span>) {
          <span class="pl-c"><span class="pl-c">//</span> detect fonts that are in multiple pieces because of errors on formatting:</span>
          i<span class="pl-k">-=</span><span class="pl-c1">1</span>;
          off<span class="pl-k">=</span>attrs[i];
        }
        pOut<span class="pl-k">=</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(<span class="pl-c1">0</span>, off)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">'</span>`<span class="pl-pds">'</span></span><span class="pl-k">+</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(off, lastOff)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">'</span>`<span class="pl-pds">'</span></span><span class="pl-k">+</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(lastOff);
      }
    }
    <span class="pl-k">if</span> (<span class="pl-smi">txt</span>.<span class="pl-en">isBold</span>(off)) {
      <span class="pl-k">var</span> d1 <span class="pl-k">=</span> d2 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>**<span class="pl-pds">"</span></span>;
      <span class="pl-k">if</span> (<span class="pl-smi">txt</span>.<span class="pl-en">isItalic</span>(off)) {
        <span class="pl-c"><span class="pl-c">//</span> edbacher: changed this to handle bold italic properly.</span>
        d1 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>**_<span class="pl-pds">"</span></span>; d2 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>_**<span class="pl-pds">"</span></span>;
      }
      pOut<span class="pl-k">=</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(<span class="pl-c1">0</span>, off)<span class="pl-k">+</span>d1<span class="pl-k">+</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(off, lastOff)<span class="pl-k">+</span>d2<span class="pl-k">+</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(lastOff);
    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">txt</span>.<span class="pl-en">isItalic</span>(off)) {
      <span class="pl-c"><span class="pl-c">//</span> pOut=pOut.substring(0, off)+'*'+pOut.substring(off, lastOff)+'*'+pOut.substring(lastOff);</span>
      pOut<span class="pl-k">=</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(<span class="pl-c1">0</span>, off<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">'</span>*<span class="pl-pds">'</span></span><span class="pl-k">+</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(off<span class="pl-k">+</span><span class="pl-c1">1</span>, lastOff<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">'</span>*<span class="pl-pds">'</span></span><span class="pl-k">+</span><span class="pl-smi">pOut</span>.<span class="pl-c1">substring</span>(lastOff<span class="pl-k">+</span><span class="pl-c1">1</span>);
    }
    lastOff<span class="pl-k">=</span>off;
  }
  <span class="pl-k">return</span> pOut;
}</pre></div>
<p>This core function <code>processElement</code> runs within <code>processParagraph</code>, appending its pOut value to the running pOut (in the sub-function's parent scope):</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> Process each child element (not just paragraphs).</span>
<span class="pl-k">function</span> <span class="pl-en">processParagraph</span>(<span class="pl-smi">index</span>, <span class="pl-smi">element</span>, <span class="pl-smi">inSrc</span>, <span class="pl-smi">imageCounter</span>, <span class="pl-smi">listCounters</span>) {
  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">element</span>.<span class="pl-en">getNumChildren</span>(); i<span class="pl-k">++</span>) {
   <span class="pl-k">if</span> (t <span class="pl-k">===</span> <span class="pl-smi">DocumentApp</span>.<span class="pl-smi">ElementType</span>.<span class="pl-c1">TEXT</span>) {
    <span class="pl-k">var</span> txt<span class="pl-k">=</span><span class="pl-smi">element</span>.<span class="pl-en">getChild</span>(i);
    pOut <span class="pl-k">+=</span> <span class="pl-smi">txt</span>.<span class="pl-en">getText</span>();
    <span class="pl-smi">textElements</span>.<span class="pl-c1">push</span>(txt);
  }
     
  <span class="pl-k">if</span> (<span class="pl-smi">textElements</span>.<span class="pl-c1">length</span><span class="pl-k">==</span><span class="pl-c1">0</span>) {
    <span class="pl-c"><span class="pl-c">//</span> Isn't result empty now?</span>
    <span class="pl-k">return</span> result;
  }
    
  prefix <span class="pl-k">=</span> <span class="pl-en">findPrefix</span>(inSrc, element, listCounters);
  
  <span class="pl-k">var</span> pOut <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;
  <span class="pl-k">for</span> (<span class="pl-k">var</span> i<span class="pl-k">=</span><span class="pl-c1">0</span>; i<span class="pl-k">&lt;</span><span class="pl-smi">textElements</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
    pOut <span class="pl-k">+=</span> <span class="pl-en">processTextElement</span>(inSrc, textElements[i]);
  }
    
  <span class="pl-c"><span class="pl-c">//</span> replace Unicode quotation marks</span>
  pOut <span class="pl-k">=</span> <span class="pl-smi">pOut</span>.<span class="pl-c1">replace</span>(<span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\u201d</span><span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>"<span class="pl-pds">'</span></span>).<span class="pl-c1">replace</span>(<span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\u201c</span><span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>"<span class="pl-pds">'</span></span>);
    
  <span class="pl-smi">result</span>.<span class="pl-c1">text</span> <span class="pl-k">=</span> prefix<span class="pl-k">+</span>pOut;
     
  <span class="pl-k">return</span> result;
}</pre></div>
<p>(irrelevant sections removed)</p>
<p>This function, <code>processParagraph</code> is called within <code>convertToMarkdown</code>, the top-level invoked function:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">ConvertToMarkdown</span>() {
  <span class="pl-k">var</span> numChildren <span class="pl-k">=</span> <span class="pl-smi">DocumentApp</span>.<span class="pl-en">getActiveDocument</span>().<span class="pl-en">getActiveSection</span>().<span class="pl-en">getNumChildren</span>();
  <span class="pl-k">var</span> text <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;
  <span class="pl-k">var</span> inSrc <span class="pl-k">=</span> <span class="pl-c1">false</span>;
  <span class="pl-k">var</span> inClass <span class="pl-k">=</span> <span class="pl-c1">false</span>;
  <span class="pl-k">var</span> globalImageCounter <span class="pl-k">=</span> <span class="pl-c1">0</span>;
  <span class="pl-k">var</span> globalListCounters <span class="pl-k">=</span> {};
  <span class="pl-c"><span class="pl-c">//</span> edbacher: added a variable for indent in src &lt;pre&gt; block. Let style sheet do margin.</span>
  <span class="pl-k">var</span> srcIndent <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;
  
  <span class="pl-k">var</span> attachments <span class="pl-k">=</span> [];
  
  <span class="pl-c"><span class="pl-c">//</span> Walk through all the child elements of the doc.</span>
  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> numChildren; i<span class="pl-k">++</span>) {
    <span class="pl-k">var</span> child <span class="pl-k">=</span> <span class="pl-smi">DocumentApp</span>.<span class="pl-en">getActiveDocument</span>().<span class="pl-en">getActiveSection</span>().<span class="pl-en">getChild</span>(i);
    <span class="pl-k">var</span> result <span class="pl-k">=</span> <span class="pl-en">processParagraph</span>(i, child, inSrc, globalImageCounter, globalListCounters);
    globalImageCounter <span class="pl-k">+=</span> (result <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">result</span>.<span class="pl-c1">images</span>) <span class="pl-k">?</span> <span class="pl-smi">result</span>.<span class="pl-c1">images</span>.<span class="pl-c1">length</span> <span class="pl-k">:</span> <span class="pl-c1">0</span>;
    <span class="pl-k">if</span> (result<span class="pl-k">!==</span><span class="pl-c1">null</span>) {
      <span class="pl-k">if</span> (<span class="pl-smi">result</span>.<span class="pl-smi">sourcePretty</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">"</span>start<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>inSrc) {
        inSrc<span class="pl-k">=</span><span class="pl-c1">true</span>;
        text<span class="pl-k">+=</span><span class="pl-s"><span class="pl-pds">"</span>&lt;pre class=<span class="pl-cce">\"</span>prettyprint<span class="pl-cce">\"</span>&gt;<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">result</span>.<span class="pl-smi">sourcePretty</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">"</span>end<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span> inSrc) {
        inSrc<span class="pl-k">=</span><span class="pl-c1">false</span>;
        text<span class="pl-k">+=</span><span class="pl-s"><span class="pl-pds">"</span>&lt;/pre&gt;<span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">result</span>.<span class="pl-c1">source</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">"</span>start<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>inSrc) {
        inSrc<span class="pl-k">=</span><span class="pl-c1">true</span>;
        text<span class="pl-k">+=</span><span class="pl-s"><span class="pl-pds">"</span>&lt;pre&gt;<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">result</span>.<span class="pl-c1">source</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">"</span>end<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span> inSrc) {
        inSrc<span class="pl-k">=</span><span class="pl-c1">false</span>;
        text<span class="pl-k">+=</span><span class="pl-s"><span class="pl-pds">"</span>&lt;/pre&gt;<span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">result</span>.<span class="pl-smi">inClass</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">"</span>start<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>inClass) {
        inClass<span class="pl-k">=</span><span class="pl-c1">true</span>;
        text<span class="pl-k">+=</span><span class="pl-s"><span class="pl-pds">"</span>&lt;div class=<span class="pl-cce">\"</span><span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">result</span>.<span class="pl-c1">className</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\"</span>&gt;<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">result</span>.<span class="pl-smi">inClass</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">"</span>end<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span> inClass) {
        inClass<span class="pl-k">=</span><span class="pl-c1">false</span>;
        text<span class="pl-k">+=</span><span class="pl-s"><span class="pl-pds">"</span>&lt;/div&gt;<span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (inClass) {
        text<span class="pl-k">+=</span><span class="pl-smi">result</span>.<span class="pl-c1">text</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (inSrc) {
        text<span class="pl-k">+=</span>(srcIndent<span class="pl-k">+</span><span class="pl-en">escapeHTML</span>(<span class="pl-smi">result</span>.<span class="pl-c1">text</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>);
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">result</span>.<span class="pl-c1">text</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">result</span>.<span class="pl-c1">text</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>) {
        text<span class="pl-k">+=</span><span class="pl-smi">result</span>.<span class="pl-c1">text</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;
      }
      
      <span class="pl-k">if</span> (<span class="pl-smi">result</span>.<span class="pl-c1">images</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">result</span>.<span class="pl-c1">images</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>) {
        <span class="pl-k">for</span> (<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>; j<span class="pl-k">&lt;</span><span class="pl-smi">result</span>.<span class="pl-c1">images</span>.<span class="pl-c1">length</span>; j<span class="pl-k">++</span>) {
          <span class="pl-smi">attachments</span>.<span class="pl-c1">push</span>( {
            <span class="pl-s"><span class="pl-pds">"</span>fileName<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-smi">result</span>.<span class="pl-c1">images</span>[j].<span class="pl-c1">name</span>,
            <span class="pl-s"><span class="pl-pds">"</span>mimeType<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-smi">result</span>.<span class="pl-c1">images</span>[j].<span class="pl-c1">type</span>,
            <span class="pl-s"><span class="pl-pds">"</span>content<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-smi">result</span>.<span class="pl-c1">images</span>[j].<span class="pl-smi">bytes</span> } );
        }
      }
    } <span class="pl-k">else</span> <span class="pl-k">if</span> (inSrc) { <span class="pl-c"><span class="pl-c">//</span> support empty lines inside source code</span>
      text<span class="pl-k">+=</span><span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>;
    }
      
  }
}</pre></div>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="https://github.com/lmmx/devnotes/wiki">Main page</a></p>

          </div>
        </div>
    </div>]