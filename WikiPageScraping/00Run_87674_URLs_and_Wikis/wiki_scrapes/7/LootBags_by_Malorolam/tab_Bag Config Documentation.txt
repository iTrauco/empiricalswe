[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>To define a new bag, the mod expects a certain list of commands to define the different properties of a bag.  The precise order of the sub commands doesn't matter, however the syntax and required commands must be followed exactly or the bag won't be created properly (or at all).  The default file demonstrates every command usage (within some limitations).</p>
<p><strong>Basic Config Rules:</strong><br/>
All commands recognized by the config start with dollar sign ($), so $STARTBAG is the base command to start defining a new bag.  Commands do not need to be all uppercase, but it makes the config a bit easier to read.  Similarly, the spaces creating tabs are not required, but are added for readability.</p>
<p>Many commands have parameters to further define the command's properties.  These are separated by a colon (:), so the bag start command above with all necessary parameters becomes $STARTBAG:&lt;unlocalized bag name&gt;:&lt;bagID&gt;</p>
<p>Some commands have parameters that are multiple strings (such as the bag text commands), for these, format the string portion as it should appear in game, except that any colons (:) should be prefaced by a dollar sign ($) to exclude it from the command separator.</p>
<p><strong>Specific Config Commands and Syntax:</strong><br/>
$STARTBAG:&lt;unlocalized bag name&gt;:&lt;bagID&gt; - This command is used to begin defining a new loot bag.  The unlocalized bag name is the name used internally to determine the shown name.  This will need to be localized in the .lang file or the bag will appear as it's unlocalized name in game, which contains elements that aren't in the parameter.  The bagID is what is used to ensure that the bags stay consistent through saving and loading.  The bagID needs to be distinct and unused, which shouldn't be too difficult as the config is the only place those IDs can be assigned.  If a bag is attempted to be opened before the previous bag is properly closed, all the previous bag information is discarded and an error is thrown.</p>
<p>$BAGCOLOR:&lt;main color&gt;:&lt;secondary color&gt; - This command will set the bag texture to a default two-toned bag instead of a pre-defined one, colorizing the body to the main color and the neck to the secondary color.   This has the benefit of bag customization without the need of resource pack creation.  The colors are RGB colors separated by vertical bars (R|G|B).   The default Worn Out bag shows an example of this command.</p>
<p>$ISSECRET:&lt;boolean&gt; - This command is used to indicate if the bag shows up in creative inventory lists.  Does nothing if the general config option ShowSecretBags is enabled.</p>
<p>$BAGTEXTCOLOR:&lt;Color&gt; - This command determines the color of the bag text in its name.  It supports all the standard minecraft text formatting (listed later).</p>
<p>$BAGTEXTUNOPENED:&lt;Color&gt;:&lt;Text&gt; - This command determines the text shown in the tooltip when the bag has not been opened.  This command supports multiple uses, each one adds a new line.  Neglecting the color parameter uses the default text color.  Using $DROPCHANCES in the text parameter uses that bag's drop chances instead of a set text.</p>
<p>$BAGTEXTOPENED:&lt;Color&gt;:&lt;Text&gt; - This command determines the text shown in the tooltip when the bag has been opened.  This command supports multiple uses, each one adds a new line.  Neglecting the color parameter uses the default text color.  Using $DROPCHANCES in the text parameter uses that bag's drop chances instead of a set text.</p>
<p>$BAGTEXTSHIFT:&lt;Color&gt;:&lt;Text&gt; - This command determines the text shown in the tooltip when left shift is pressed.  This command supports multiple uses, each one adds a new line.  Neglecting the color parameter uses the default text color.  Using $DROPCHANCES in the text parameter uses that bag's drop chances instead of a set text.</p>
<p>$CRAFTEDFROM:&lt;Bag Name&gt;:&lt;Integer&gt; - This command is used to indicate which bag this bag is crafted from.  The bag name is the name used in the bag start command.  Using $NULL will disable crafting into this bag.  The integer is how many of those bags are needed to craft this bag, constrained in the code to be between 1 and 9.  <strong>MC1.11.2 and prior only</strong></p>
<p>$BAGVALUE:&lt;Input Value (Integer)&gt;:&lt;Output Value (Integer)&gt; - This command is used to indicate the value of the bag for use in the Bag Storage block.  The Input Value is how many units of bag value a particular bag gives when inserted into the storage block.  The Output Value is how many units of bag value is needed to remove that bag from the storage block.  Either or both of these value may be 0 or negative, in which the associated input/output operation is disabled.  <strong>MC1.12.2 and later only</strong></p>
<p>$PASSIVESPAWNWEIGHT:&lt;Integer&gt; - This is the weight for the bag to spawn from a "passive" mob, i.e. one that implements EntityAnimal or IAnimals.  A value of 0 means this bag cannot spawn from this type of mob.</p>
<p>$PLAYERSPAWNWEIGHT:&lt;Integer&gt; - This is the weight for the bag to spawn from a player, i.e. one that implements EntityPlayer.  A value of 0 means this bag cannot spawn from players.</p>
<p>$BOSSSPAWNWEIGHT:&lt;Integer&gt; - This is the weight for the bag to spawn from a boss, i.e. ones that implements IBossDisplayData.  A value of 0 means this bag cannot spawn from such mobs.</p>
<p>$MOBSPAWNWEIGHT:&lt;Integer&gt; - This is the weight for the bag to spawn from enemy mobs, i.e. ones that implement EntityMob or IMob.  A value of 0 means this bag cannot spawn from such mobs.</p>
<p>$USEGENERALLOOTSOURCES:&lt;Boolean&gt; - This command determines if the bag uses the general loot table as an initial loot source.</p>
<p>$MAXIMUMITEMS:&lt;Integer&gt; - This command determines the maximum number of items the bag can hold.  This value must be at minimum 1, at maximum 5, and greater than or equal to the minimum item count.</p>
<p>$MINIMUMITEMS:&lt;Integer&gt; - This command determines the minimum number of items the bag can hold.  This value must be at minimum 1, at maximum 5, and less than or equal to the maximum item count.</p>
<p>$MAXIMUMGENERALLOOTWEIGHT:&lt;Integer&gt; - This command determines the maximum weight of general loot that can show up in the bag.  A value of -1 leaves this field unbounded, any positive value must be greater than or equal to the minimum general loot weight value.</p>
<p>$MINIMUMGENERALLOOTWEIGHT:&lt;Integer&gt; - This command determines the minimum weight of general loot that can show up in the bag.  A value of -1 leaves this field unbounded, any positive value must be less than or equal to the maximum general loot weight value.</p>
<p>$PREVENTITEMREPEATS:&lt;Text Code&gt; - This command determines if items are permitted to repeat in a single bag.  The text code must be one of these options:<br/>
•	none - Repeats are permitted without limit.<br/>
•	damage - Repeats are blocked for same items with different damage values<br/>
•	item - Repeats are blocked for the same item class<br/>
•	fixed - Takes only the first few items in the list and disables duplicate item system</p>
<p>$STARTWHITELIST - This command begins the whitelist subgroup.  It must have a list of whitelist entries followed by the $ENDWHITELIST command.  The whitelist entries need the following format: &lt;mod id&gt;:&lt;item name&gt;:&lt;damage range&gt;:&lt;minimum stack size&gt;:&lt;maximum stack size&gt;:&lt;weight&gt;:&lt;NBT bytes&gt;.  The mod id and item name can be obtained using NEI's item dump function.  The damage range can be a single integer, for a single damage value, or a collection of integers, &amp;s, and #s.  A # indicates a skip between two numbers, and an &amp; indicates inclusion between two numbers.  For example, 0&amp;5#8&amp;10 uses the damage values 0, 1, 2, 3, 4, 5, 8, 9, 10.  The minimum and maximum stack sizes must be within the limits of the item, typically 1 and 64.  The weight is independent of the general minimum and maximum weights detailed earlier and is not scaled to those values.  The NBT bytes is an optional (leave the last colon off as well if so) set of data to set the NBT data of the itemstack.  This byte list can be obtained through the lootbags_pullnbt command in game, which will create a dump file of the information of the currently held item.  This command can be skipped, it will be treated as an empty whitelist.</p>
<p>$STARTBLACKLIST - This command begins the blacklist subgroup.  It must have a list of blacklist entries followed by the $ENDBLACKLIST command.  The blacklist entries can be of two forms, &lt;mod id&gt; or &lt;mod id&gt;:&lt;item name&gt;:&lt;damage range&gt;.  The mod id only version will blacklist that entire mod from the bag.  This command can be skipped, it will be treated as an empty blacklist.</p>
<p>$EXCLUDEENTITIES:&lt;Boolean&gt; - This command determines if the entity list (if present) acts as a whitelist or as a blacklist, with true acting as a whitelist and false as a blacklist.</p>
<p>$STARTENTITYLIST - This command begins the entity list subgroup.  It must have a list of entity entries followed by a $ENDENTITYLIST command.  An entity entry is comprised of the command $VISIBLENAME:&lt;name as it appears in game&gt; OR $INTERNALNAME:&lt;name as it appears in the internal registry&gt;.  For visible name entries, this is used in cases where a specific name is desired, for instance a player name, and will trigger on any entity who is visibly named that name.  For internal name entries, every mob registered in the game has an internal name.  This is usually the same as the entity's English localized name, though it is not guaranteed to be the case for modded mobs.  This command can be skipped, it will be treated as an empty entity list.</p>

        </div>

    </div>]