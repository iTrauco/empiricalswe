[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#basic-informations" id="user-content-basic-informations"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Basic Informations</h2>
<p>The media-autobuild_suite script builds the msys2 environment with all needed compilers (mingw-w64) and dependencies.</p>
<p>When you had run the script you can also use the environment to build your own tools. For that is important to know some things:</p>
<ul>
<li>
<p>msys2 is a shell environment, like in Linux, you have here the same commands and many similar tools. the shell tool what gets prepare truth the script is mintty, you found the shortcut for it in your root folder from the media-autobuild_suit. It is recommend to use this shortcut, because with that you can be sure that all environment setting get loaded right.</p>
</li>
<li>
<p>There is some folders automatically mounted with this variables: /mingw32 (the compiler folder); /build32 (the place for the source code folders); /local32 (the place for the compiled tools). The same you have for the 64 bit versions to, like mingw64, build64 and local64. To navigate, or use this folders, you can do it with <strong>cd /build32</strong> in the mintty console, or for example --prefix=/local32 for the configure command. There is also standard variables for example <strong>/usr/bin</strong>: the place from msys2 binaries.</p>
</li>
<li>
<p>The standard build environment is based on 32bit, that means you are able to build tools for 32 bit platforms. Only when you have picked by the installation process only the 64 bit environment, the standard is 64 bit.</p>
</li>
<li>
<p>When you use both compilers (32 bit and 64 bit) and you want to switch between them you can do it with:
<strong>source /local32/etc/profile.local</strong> for the 32bit compiler or <strong>source /local64/etc/profile.local</strong> for the 64bit compiler.</p>
</li>
<li>
<p>The <strong>profile.local</strong> files have some very important settings for the compiler. You can open them with a editor to examine them a bit. You found there also two variables: <strong>LOCALBUILDDIR</strong> and <strong>LOCALDESTDIR</strong> this is helpful when you build your own build script for 32 and 64 bit, then you don't need to change the build and destination folders from /build32 to /build64 and from /local32 to /local64. This will change automatic by loading the profile and using this variables in you script or in the console with $LOCALBUILDDIR and $LOCALDESTDIR.</p>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#here-is-a-example-how-to-build-your-own-flac-32-bit-from-source" id="user-content-here-is-a-example-how-to-build-your-own-flac-32-bit-from-source"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Here is a example how to build your own flac (32 bit) from source:</h3>
<ol>
<li>Open mintty</li>
<li>go to the build folder with: <strong>cd /build32</strong>
</li>
<li>download the source code with wget: <strong>wget <a href="http://downloads.xiph.org/releases/flac/flac-1.3.0.tar.xz" rel="nofollow">http://downloads.xiph.org/releases/flac/flac-1.3.0.tar.xz</a></strong>
</li>
<li>unpack it with: <strong>tar xf flac-1.3.0.tar.xz</strong>
</li>
<li>delete the source code archive: <strong>rm flac-1.3.0.tar.xz</strong>
</li>
<li>change to the source code folder: <strong>cd flac-1.3.0</strong>
</li>
<li>configure flac for static build: <strong>./configure --build=$targetBuild --host=$targetHost --prefix=$LOCALDESTDIR --bindir=$LOCALDESTDIR/bin-audio --disable-xmms-plugin --disable-doxygen-docs --enable-shared=no --enable-static</strong>
</li>
<li>compile the source code: <strong>make -j4</strong> (4 is the numbers of cores/threads what you using for the compiling, it is recommend to use 1 or 2 less then your system limit)</li>
<li>install flac with: <strong>make install</strong>
</li>
<li>now you found the compiled flac.exe under /local32/bin-audio</li>
</ol>

        </div>

    </div>]