[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#an-iot-cloud-saas" id="user-content-an-iot-cloud-saas"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>An IoT cloud SaaS</h2>
<p><em>thethings.io</em> is a cloud service from a partner company that allows you to easily set up applications that share and publish data to a common panel. This way you can design <em>Netbeast</em> applications that fit better into bigger scenarios like organizations or cities, without worrying about having to build your own cloud or a complex p2p system onto the Netbeast router.</p>
<p>thethings.iO has published several node.js packages making it a seamless development experience if you already are familiar with the <em>Netbeast</em> development environment.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#getting-started" id="user-content-getting-started"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting started</h3>
<p>Here's an example app. To read temperature from a device remotely and push it to your things panel could be as simple as this :</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> npm install thethingsio-api</span>
<span class="pl-k">var</span> theThingsAPI <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>thethingsio-api<span class="pl-pds">'</span></span>);
<span class="pl-k">var</span> client <span class="pl-k">=</span> <span class="pl-smi">theThingsAPI</span>.<span class="pl-en">createClient</span>();
<span class="pl-c"><span class="pl-c">//</span> Or client = theThingsAPI.createSecureClient() for https</span>
<span class="pl-smi">client</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>ready<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> () {
	<span class="pl-smi">client</span>.<span class="pl-en">thingRead</span>(<span class="pl-s"><span class="pl-pds">'</span>temperature<span class="pl-pds">'</span></span>, {limit<span class="pl-k">:</span><span class="pl-c1">1</span>}, <span class="pl-k">function</span> (<span class="pl-smi">error</span>, <span class="pl-smi">data</span>) {
		<span class="pl-en">console</span>.<span class="pl-c1">log</span>(error <span class="pl-k">?</span> error <span class="pl-k">:</span> data);
	});
});</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#mqtt-communication" id="user-content-mqtt-communication"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>MQTT communication</h3>
<p>Here is an example on how to reach their servers with an <a href="https://github.com/theThings/thethingsio-mqtt-node"> mqtt connection </a></p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span>Example to activate a client at thethings.iO platform</span>
<span class="pl-c"><span class="pl-c">//</span>Note: the activation code shall not be used instead, you can set the</span>
<span class="pl-c"><span class="pl-c">//</span>thingToken directly</span>

<span class="pl-c"><span class="pl-c">//</span>Usage: write key-value pairs in the console</span>

<span class="pl-k">var</span> mqtt <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>mqtt<span class="pl-pds">'</span></span>)

<span class="pl-k">var</span> activationCode <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>one of your activation codes<span class="pl-pds">'</span></span><span class="pl-c"><span class="pl-c">//</span>you should change this</span>
<span class="pl-k">var</span> thingToken <span class="pl-k">=</span> <span class="pl-c1">null</span> <span class="pl-c"><span class="pl-c">//</span>you can add a thingToken too if don't have an activation code</span>

<span class="pl-k">var</span> client <span class="pl-k">=</span> <span class="pl-smi">mqtt</span>.<span class="pl-en">connect</span>({
  host<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>mqtt.thethings.io<span class="pl-pds">'</span></span>,
  port<span class="pl-k">:</span><span class="pl-c1">1883</span>
  })

<span class="pl-k">var</span> activationTopic <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>v2/activations/<span class="pl-pds">'</span></span><span class="pl-k">+</span>activationCode<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">'</span>/<span class="pl-pds">'</span></span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()
<span class="pl-k">var</span> thingTopic <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>v2/things/<span class="pl-pds">'</span></span><span class="pl-k">+</span>thingToken

<span class="pl-smi">client</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>connect<span class="pl-pds">'</span></span>,<span class="pl-k">function</span>(){
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>connected to thethings.iO!<span class="pl-pds">'</span></span>)
  <span class="pl-k">if</span>(<span class="pl-k">!</span>thingToken){
    <span class="pl-smi">client</span>.<span class="pl-en">subscribe</span>(activationTopic,<span class="pl-k">function</span>(<span class="pl-smi">err</span>,<span class="pl-smi">granted</span>){
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>subscribe result for<span class="pl-pds">'</span></span>, activationTopic, err, granted)
    })
  }<span class="pl-k">else</span>{
    <span class="pl-smi">client</span>.<span class="pl-en">subscribe</span>(thingTopic,<span class="pl-k">function</span>(<span class="pl-smi">err</span>,<span class="pl-smi">granted</span>){
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>subscribe result for<span class="pl-pds">'</span></span>, thingTopic, err, granted)
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>write your key value in the console:<span class="pl-pds">'</span></span>)
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>Example:<span class="pl-pds">'</span></span>)
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>fun<span class="pl-pds">'</span></span>,<span class="pl-c1">9000</span>)
    })
  }
})

<span class="pl-smi">client</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>message<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> (<span class="pl-smi">topic</span>, <span class="pl-smi">message</span>) {
    message <span class="pl-k">=</span> <span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(message)
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>message<span class="pl-pds">'</span></span>,topic, message)
    <span class="pl-k">if</span>(topic <span class="pl-k">===</span> activationTopic){
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>activation<span class="pl-pds">'</span></span>)
      <span class="pl-k">if</span>(<span class="pl-smi">message</span>.<span class="pl-c1">status</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>error<span class="pl-pds">'</span></span>){
        <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">'</span>failed to activate your thing<span class="pl-pds">'</span></span>)
        <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-smi">message</span>.<span class="pl-smi">message</span>)
        <span class="pl-c1">process</span>.<span class="pl-en">exit</span>(<span class="pl-c1">1</span>)
      }
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>thing activated, hurray!<span class="pl-pds">'</span></span>)
      thingToken <span class="pl-k">=</span> <span class="pl-smi">message</span>.<span class="pl-smi">thingToken</span>
      thingTopic <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>v2/things/<span class="pl-pds">'</span></span><span class="pl-k">+</span>thingToken
      <span class="pl-smi">client</span>.<span class="pl-en">subscribe</span>(thingTopic)
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>write your key value in the console:<span class="pl-pds">'</span></span>)
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>Example:<span class="pl-pds">'</span></span>)
      <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>fun<span class="pl-pds">'</span></span>,<span class="pl-c1">9000</span>)
    }
})

<span class="pl-c"><span class="pl-c">//</span>this dependency is just for the example</span>
<span class="pl-k">var</span> readline <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>readline<span class="pl-pds">'</span></span>)

<span class="pl-k">var</span> rl <span class="pl-k">=</span> <span class="pl-smi">readline</span>.<span class="pl-en">createInterface</span>({
    input<span class="pl-k">:</span> <span class="pl-c1">process</span>.<span class="pl-smi">stdin</span>,
    output<span class="pl-k">:</span> <span class="pl-c1">process</span>.<span class="pl-smi">stdout</span>,
    terminal<span class="pl-k">:</span> <span class="pl-c1">true</span>
})

<span class="pl-smi">rl</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>line<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> (<span class="pl-smi">cmd</span>) {
    <span class="pl-k">var</span> kv <span class="pl-k">=</span> <span class="pl-smi">cmd</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>)
    <span class="pl-k">if</span>(<span class="pl-smi">kv</span>.<span class="pl-c1">length</span> <span class="pl-k">&lt;</span> <span class="pl-c1">2</span>) <span class="pl-k">return</span>
    <span class="pl-k">var</span> values <span class="pl-k">=</span> {values<span class="pl-k">:</span>[{key<span class="pl-k">:</span>kv[<span class="pl-c1">0</span>].<span class="pl-c1">toString</span>(), value<span class="pl-k">:</span>kv[<span class="pl-c1">1</span>]}]}
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>sending <span class="pl-pds">'</span></span>,values,<span class="pl-s"><span class="pl-pds">'</span>to <span class="pl-pds">'</span></span>,thingTopic)
    <span class="pl-c"><span class="pl-c">//</span>publish your data</span>
    <span class="pl-smi">client</span>.<span class="pl-en">publish</span>(thingTopic,  <span class="pl-c1">JSON</span>.<span class="pl-c1">stringify</span>(values));
})</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#wrap-up-and-useful-stuff" id="user-content-wrap-up-and-useful-stuff"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Wrap-up and useful stuff</h3>
<p>There is so much more that you can do through the cloud platform of thethings.io. <a href="https://github.com/netbeast-co/docs/wiki/thethings.io-test-application">Here</a> you can find out how we built our first app with thethings.io. Also, for further info you should take a look at <a href="https://thethings.io/" rel="nofollow">https://thethings.io/</a></p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p># <code>warning</code>: now our docs are being published in our gitbook and available on our website. Visit <a href="http://docs.netbeast.co/" rel="nofollow">http://docs.netbeast.co/</a></p>
<h1>
<a aria-hidden="true" class="anchor" href="#contact" id="user-content-contact"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Contact</h1>
<ul>
<li>Visit our site <a href="https://netbeast.co" rel="nofollow">https://netbeast.co</a>
</li>
<li>Mail us: staff [at] netbeast.co</li>
<li>Report a bug or enter discussion at <a href="https://github.com/netbeast-co/docs/issues">issues</a>
</li>
<li>Other resources: <a href="https://github.com/netbeast-co/dashboard">Dashboard</a>, Netbeast <a href="https://github.com/netbeast-co/API">API</a>
</li>
</ul>
<p><a href="https://gitter.im/netbeast-co/xway?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" rel="nofollow"><img alt="Gitter" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" src="https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667"/></a></p>

          </div>
        </div>
    </div>]