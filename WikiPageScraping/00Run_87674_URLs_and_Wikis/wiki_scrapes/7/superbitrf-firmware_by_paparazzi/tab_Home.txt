[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Welcome to the superbitrf-firmware wiki!</p>
<p>We collect some basic operational information here.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#getting-started" id="user-content-getting-started"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting started</h3>
<p>Visit the <a href="http://wiki.paparazziuav.org/wiki/SuperbitRF" rel="nofollow">paparazzi wiki page</a>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#flashing-firmware" id="user-content-flashing-firmware"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Flashing firmware</h3>
<ol>
<li>Clone the superbitrf-firmware repository.</li>
</ol>
<ul>
<li>Open the terminal</li>
<li>Change directory into the superbitrf-firmware directory</li>
<li>run <code>git submodule init</code> to initialize the libopencm3 submodule</li>
<li>run <code>git submodule update</code> to download the libopencm3 submodule</li>
<li>run <code>make</code>
</li>
<li>plug in your Superbit USBRF dongle while holding "the button" on the Superbit USBRF dongle, into your laptop (you should see the red and yellow LED blink alternating, indicating that the bootloader is active)</li>
<li>run <code>make flash</code>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#updating-firmware" id="user-content-updating-firmware"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Updating firmware</h3>
<ol>
<li>Enter the superbitrf-firmware directory</li>
</ol>
<ul>
<li>run <code>git pull</code> to fetch newest changes from the superbitrf-firmware repository</li>
<li>run <code>make clean</code> to clean previous binaries</li>
<li>run <code>make</code>
</li>
<li>plug in your Superbit USBRF dongle while holding "the button" on the Superbit USBRF dongle, into your laptop (you should see the red and yellow LED blink alternating, indicating that the bootloader is active)</li>
<li>run <code>make flash</code>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#binding-your-transmitter-to-the-superbit-usbrf-dongle" id="user-content-binding-your-transmitter-to-the-superbit-usbrf-dongle"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Binding your transmitter to the Superbit USBRF dongle</h3>
<ol>
<li>Plug in the Superbit USBRF dongle into your computer</li>
</ol>
<ul>
<li>Press "the button" on the Superbit USBRF dongle (the orange led should light up)</li>
<li>Turn on your transmitter while holding the bind button. (for more information how to turn on your transmitter in bind mode refer to your transmitters documentation. This varies a lot depending on the version and maker of the transmitter. Spektrum DX6I and Orange RX transmitters you just hold the Trainer switch while you power it on. Others have a dedicated bind button on the back of the transmitter that you hold while turning on your transmitter.)</li>
<li>If binding was successful the orange led will turn off</li>
<li>Release the bind button on the transmitter</li>
<li>After few seconds another led will light up indicating that the dongle is seeing/receiving packets from the transmitter</li>
</ul>
<p>Tip: sometimes the binding is not successful on the first try, you might need to turn off and on (while still holding the bind button) your transmitter several times before the dongle recognizes your transmitter and the orange LED turns off</p>
<h3>
<a aria-hidden="true" class="anchor" href="#retreiving-the-mfg-id-of-your-dsm2-transmitter" id="user-content-retreiving-the-mfg-id-of-your-dsm2-transmitter"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Retreiving the MFG ID of your DSM2 transmitter.</h3>
<p>This is a good way to keep the binding permanent. We do not support storing of the binding parameters in flash yet. This is work in progress #2 .</p>
<ul>
<li>Clone the superbitrf-firmware repository.</li>
<li>Edit the src/modules/config.c file and adjust the settings to the following ones:</li>
</ul>
<div class="highlight highlight-source-diff"><pre><span class="pl-md"><span class="pl-md">-</span>                       .debug_enable                           = false,</span>
<span class="pl-mi1"><span class="pl-mi1">+</span>                       .debug_enable                           = true,</span></pre></div>
<ul>
<li>Open the terminal</li>
<li>change into the superbitrf-firmware directory</li>
<li>run <code>make</code>
</li>
<li>plug in your Superbit USBRF dongle while holding "the button" on your Superbitrf USBRF dongle, into your laptop (you should see the red and yellow LED blink alternating, indicating that the bootloader is active)</li>
<li>run firmware upload <code>make flash</code>
</li>
<li>cycle power (unplug and plug in again) the USBRF dongle</li>
<li>connect to the virtual serial port using minicom or other serial terminal software. The virtual serial port on linux will usually be /dev/ttyACM0, on Mac OS X it will for example be /dev/cu.usbmodemURF0001 depending on your USBRF serial number. The baud rate setting does not matter, as it is being ignored by the virtual serial port.</li>
<li>enter at least one letter into the serial terminal</li>
<li>enter bind mode of the USBRF by pressing "the button" on USBRF (it should be confirmed with the orange LED getting lit)</li>
<li>switch on your RC transmitter in bind mode (it depends on your transmitter, check your manual if you are not sure)</li>
<li>When binding is successful you should get a debug output that looks something like this:</li>
</ul>
<pre><code>[button]: "Bind button pressed"
[protocol]: "DSM MITM start bind"
[protocol]: "Binded with values : mfg_id[0-3]=0x85; 0xE2; 0x76; 0x86, num_channel=0x06; protocol=0x03"
</code></pre>
<ul>
<li>You can now enter the settings into the config.c file in the following lines:</li>
</ul>
<pre><code>.dsm_bind_mfg_id                        = {0x85, 0xE2, 0x76, 0x86},
.dsm_protocol                           = 0x03,
</code></pre>
<ul>
<li>To add the transmitter to your paparazzi airframe file you have to convert the mfg_id to an integer in reverse order. To do that you would need to assemble the hex numbers from the example before like this: 0x8676E285 = 2255938181</li>
</ul>
<p>We are working hard on simplifying the process. If you want to help out just join us on gitter: <a href="https://gitter.im/esden/superbitrf-firmware" rel="nofollow"><img alt="Gitter chat" data-canonical-src="https://badges.gitter.im/esden/superbitrf-firmware.png" src="https://camo.githubusercontent.com/9ae08a37ec3547a8d200c63d480b61664ceb3194/68747470733a2f2f6261646765732e6769747465722e696d2f657364656e2f737570657262697472662d6669726d776172652e706e67"/></a></p>
<h3>
<a aria-hidden="true" class="anchor" href="#binding-your-transmitter-to-lisas" id="user-content-binding-your-transmitter-to-lisas"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Binding your transmitter to Lisa/S</h3>
<p>This is not exactly the topic of the code here, but rather the paparazzi UAS side of the process. For convenience we include it here.</p>
<ol>
<li>Power on the Lisa/S autopilot while holding the bind button on the board</li>
</ol>
<ul>
<li>The Radio LED should be blinking in short blinks once a second</li>
<li>Turn on your transmitter while holding the bind button</li>
<li>The Radio LED should stop blinking</li>
<li>Now you will have to press the bind button again and the transmitter should get recognized and the data should be received</li>
</ul>

        </div>

    </div>]