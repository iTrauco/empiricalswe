[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <table>
<thead>
<tr>
<th>库</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/funny/debug">debug</a></td>
<td>使用<code>Print</code>打印出调试信息，并且同时输出调用堆栈</td>
</tr>
<tr>
<td><a href="https://github.com/funny/sync">sync</a></td>
<td>这个包用来在开发调试期，帮助排查程序中的死锁情况。（golang1.4出现问题无法取得goroutine id）</td>
</tr>
<tr>
<td><a href="https://github.com/funny/unitest">unitest</a></td>
<td>这是一个单元测试工具库，用来降低Go语言项目单元测试的代码复杂度。<br/>调用unitest.Pass可以减少很多不必要的判断语句和错误信息<br/>进程监控：记录内存增长和GC情况（获取当前所有goroutine的堆栈跟踪信息用于排查死锁等情况。获取当前内存状态信息，包含内存分配情况和GC暂停时间等。 获取当前线程创建信息况，通常用来排查CGO的线程使用情况<br/><a href="https://github.com/funny/unitest/blob/master/README_CN.md">详情</a>
</td>
</tr>
<tr>
<td><a href="https://github.com/funny/overall">overall</a></td>
<td>这个包可以帮你监控你的Go应用的总体运行情况。<br/>GC综合情况M<br/>监控执行时间<br/><a href="https://github.com/funny/overall/blob/master/README_CN.md">详情</a>
</td>
</tr>
<tr>
<td><a href="https://github.com/funny/link">link</a></td>
<td>这是一个简易的Go语言网络库，它专注于解决基于消息包的长连接通讯需求。<br/>它内置了类似于Erlang的{packet: N}那样的分包协议，同时也支持自定义的分包协议。<br/>但是它并不限制请求和响应消息中的编码和解码格式。<br/>这个库中还提供了Session管理和广播等功能，可加速您的开发效率。</td>
</tr>
<tr>
<td><a href="https://github.com/funny/sync">sync</a></td>
<td>这个包用来在开发调试期，帮助排查程序中的死锁情况。（golang1.4出现问题无法取得goroutine id）</td>
</tr>
<tr>
<td><a href="https://github.com/SimonWaldherr/GoRealtimeWeb">GoRealtimeWeb</a></td>
<td>实时web应用程序示例<br/>实例包括: <br/>1.server-snet events<br/>2.Long Polling <br/>3.Websocket</td>
</tr>
<tr>
<td><a href="https://github.com/fatih/pool">Pool</a></td>
<td>Go 语言实现的网络连接池<br/><code>conn.go</code>重新包装了<code>net.Conn</code>为<code>poolConn</code>为了修改<code>net.Conn</code>中的<code>Close()</code>行为<br/>可以根据这个这个例子来实现“池”只需要修改<code>poolConn</code>和<code>channelPool</code> 中的<code>net.Conn</code>
</td>
</tr>
</tbody>
</table>

        </div>

    </div>]