[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#gestion-des-models" id="user-content-gestion-des-models"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Gestion des models</h1>
<p>Les models (DATA_Model) permettent de gérer les données du site core en facilitant au maximum les manipulations SQL.</p>
<hr/>
<h2>
<a aria-hidden="true" class="anchor" href="#features" id="user-content-features"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Features</h2>
<p>Correctement configurés, les DATA_Model permettent actuellement de faire des choses intéressantes :</p>
<ul>
<li>Fonctionnalité de <strong>CRUD</strong> : ajouts, éditions, suppressions, récupérations, jointures et tri de données.</li>
<li>Gestion de l'<strong>héritage</strong> de modèles côté SQL <strong>et</strong> PHP.</li>
<li>Validation et traitement des données directement depuis un formulaire.</li>
<li>Gestion des traductions.</li>
</ul>
<blockquote>
<p>Le fonctionnement des modèles sera peut-être changé de façon assez marquée d'ici peu du fait de l'intégration du système de traduction. Des limitations (non bloquantes) peuvent être envisagée afin de sécuriser la classe DATA_Model.</p>
</blockquote>
<h2>
<a aria-hidden="true" class="anchor" href="#cr%C3%A9ation-dun-model" id="user-content-création-dun-model"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Création d'un Model</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#creation-de-la-classe-dun-model" id="user-content-creation-de-la-classe-dun-model"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creation de la classe d'un model</h3>
<p>Pour créer un model, il suffit de créer un nouveau fichier de classe PHP dans le dossier <strong>models/</strong> du répertoire <strong>application/</strong> du core ou dans le celui du module que vous êtes en train de créer.
Cette nouvelle classe <em>doit</em> étendre la classe DATA_Model ou une classe fille de DATA_Model. Par exemple :</p>
<pre><code>&lt;?php  
class Monmodel extends DATA_Model {

}
</code></pre>
<p>La plupart du temps, le modèle travaille avec une table en base de données. Comme il n'existe pas de convention liant le nom d'une table et son nom de modèle, il faut impérativement implémenter la méthode getTableName() pour qu'elle retourne le nom de la table:</p>
<pre><code>class Monmodel extends DATA_Model {
	
	CONST TABLE_NAME = 'models';
	
	public function getTableName() {
		return self::TABLE_NAME;
	}
}
</code></pre>
<p>C'est le seul code minimal pour avoir un modèle travaillant avec la base de donnée (accès, listing, tri, insertion, mise à jour etc.)</p>
<h3>
<a aria-hidden="true" class="anchor" href="#configuration-pour-insertionmise-%C3%A0-jour-en-bdd-directement-depuis-un-formulaire" id="user-content-configuration-pour-insertionmise-à-jour-en-bdd-directement-depuis-un-formulaire"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Configuration pour Insertion/Mise à jour en bdd directement depuis un formulaire</h3>
<p>Il est également possible d'utiliser les models afin d'effectuer le processus entier de validation et de traitement des données depuis un formulaire.
Pour cela, il faut surcharger les méthodes <em>validationRulesForInsert()</em> et <em>validationRulesForUpdate()</em> lesquels doivent retourner un tableau de règles de validation semblable <a href="http://www.codeigniter.com/user_guide/libraries/form_validation.html?highlight=form%20validation#setting-rules-using-an-array" rel="nofollow">à ceux qu'utilisent Code igniter</a>.
Ainsi, si notre model possède un champ titre, un champs description et un champs image, notre classe aura cette allure :</p>
<pre><code>class Monmodel extends DATA_Model {
	
	CONST TABLE_NAME = 'models';
	
	public function getTableName() {
		return self::TABLE_NAME;
	}
	
	public function validationRulesForInsert($datas) {
		$rules = array(
			array(
				'field' =&gt; 'title',
				'label' =&gt; translate('Titre'),
				'rules' =&gt; 'required|min_length[2]|max_length[30]'
			), 
			array(
				'field' =&gt; 'description',
				'label' =&gt; translate('Description'),
				'rules' =&gt; 'required|min_length[20]|max_length[255]'
			), 
			array(
				'field' =&gt; 'image',
				'label' =&gt; translate('Image'),
				'rules' =&gt; 'file_required|file_image_mindim[500,500]|file_image_maxdim[2000,1500]|file_allowed_type[image]'
			)
			
		);
		return $rules;
	}
	
	public function validationRulesForUpdate($datas) {
		$rules = array(
			array(
				'field' =&gt; 'title',
				'label' =&gt; translate('Titre'),
				'rules' =&gt; 'min_length[2]|max_length[30]'
			), 
			array(
				'field' =&gt; 'description',
				'label' =&gt; translate('Description'),
				'rules' =&gt; 'min_length[20]|max_length[255]'
			), 
			array(
				'field' =&gt; 'image',
				'label' =&gt; translate('Image'),
				'rules' =&gt; 'file_image_mindim[500,500]|file_image_maxdim[2000,1500]|file_allowed_type[image]'
			)
			
		);
		return $rules;
	}
}
</code></pre>
<p>L'utilisation d'une classe personnalisée pour la validation rend également possible la validation (type mime, taille, dimensions etc.) et le traitement (upload) des fichiers.</p>
<p>Si des fichiers sont postés, validés et traités, ils seront par défaut placés dans le répertoire <strong>uploads/</strong>. Pour changer ce comportement, il convient de surcharger la méthode <em>uploadPaths()</em>. Cette dernière doit renvoyer soit un chaîne de caractère, soit un tableau associatif. Si on choisit une chaine de caractère, tous les fichiers seront placés dans le répertoire correspondant. Si c'est un tableau associatif, les clés seront les noms de colonne du model et les valeurs les chemins correspondants :</p>
<pre><code>public function uploadPaths() {
	return array(
		'image' =&gt; 'uploads/models_imgs',
		'logo' =&gt; 'uploads/models_logos'
	);
}
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#configuration-de-lh%C3%A9ritage" id="user-content-configuration-de-lhéritage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Configuration de l'héritage</h3>
<p>Il est également possible de faire <em>hériter</em> un model d'un autre model. Pour cela, il faut organiser cet héritage côté SQL <strong>et</strong> côté PHP.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#c%C3%B4t%C3%A9-db" id="user-content-côté-db"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Côté DB</h4>
<p>Pour organiser l'héritage côté SQL, il convient de créer une nouvelle table contenant les colonnes que l'on souhaite ajouter aux colonnes déjà présents dans la table du modèle dont on souhaite hériter PLUS une colonne <em>id</em>. Sur cette colonne <em>id</em> devra être définie une contrainte de clé étrangère DELETE CASCADE UPDATE CASCADE.
Par exemple, si on a une table d'utilisateurs et que l'on souhaite créer une table d'administrateurs qui héritera des caractéristiques des utilisateurs, on écrira les requêtes SQL suivantes:</p>
<pre><code>CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `login` varchar(100) NOT NULL,
  `password` varchar(100) NOT NULL,
  `email` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) AUTO_INCREMENT=1 ;

CREATE TABLE `admins` (
  `id` int(11) NOT NULL,
  `name` varchar(150) NOT NULL,
  `forname` varchar(150) NOT NULL,
  PRIMARY KEY (`id`)
);

ALTER TABLE `users_admin`
  ADD CONSTRAINT `users_admin_ibfk_1` FOREIGN KEY (`id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
</code></pre>
<h4>
<a aria-hidden="true" class="anchor" href="#c%C3%B4t%C3%A9-php" id="user-content-côté-php"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Côté PHP</h4>
<p>Du côté du code source, on utilisera un simple héritage de classe en prenant soin néanmoins de préciser le nom de la table nouvellement crée comme valeur de retour de la méthode <em>getTableName()</em>. Si on reprend l'exemple des utilisateurs et des administrateurs, on obtient le code suivant :</p>
<pre><code>&lt;?php
class Admin extends User {
	
	const $TABLE_NAME = 'admins';

	public function getTableName() {
		return self::$TABLE_NAME;
	}
	
}
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#configuration-des-traductions" id="user-content-configuration-des-traductions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Configuration des traductions</h3>
<p>Il est également possible de configurer un modèle pour qu'il soit traduisible dans une ou plusieurs langues. Pour l'héritage, la seule configuration nécessaire se déroule en base de donnée.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#c%C3%B4t%C3%A9-db-1" id="user-content-côté-db-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>côté DB</h4>
<p>La configuration des traductions d'un model côté SQL est très proche de ce qui se fait pour l'héritage. Attention néanmoins car la nomenclature (nom de table et des colonnes) est très importante.</p>
<p>Pour que le model soit tradusible en une autre langue, il suffit de créer un table en base de données portant le même nom que la table modèle <strong>suffixée</strong> par "<em>_translations</em>". Les conventions internes au core feront que ce sera cette table qui sera utilisée pour les traductions. Cette table doit contenir toutes les colonnes qui <strong>doivent être traduisibles suffixée</strong>  par "<em>_lang</em>" <strong>+</strong> une colonne appelée <em>lang</em> (<strong>varchar(10)</strong>) <strong>+</strong> une colonne id. En outre, la clé primaire de cette table doit être définie sur la colonne id <strong>et</strong> sur la colonne lang avec en sus une contrainte de clé étrangère DELETE CASCADE UPDATE CASCADE sur la table d'origine.</p>
<blockquote>
<p>Attention, il faut impérativement que les type des colonnes d'origine soient les mêmes que ceux des colonnes traduites.</p>
</blockquote>
<p>Par exemple, si on a une table post définie de cette façon :</p>
<pre><code>CREATE TABLE IF NOT EXISTS `posts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `content` text NOT NULL,
  `creation_time` int(11) NOT NULL,
  `update_time` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
</code></pre>
<p>Si on souhaite que les colonnes <em>title</em> et <em>content</em> soient traduisibles. On créera notre table traduite ainsi :</p>
<pre><code>CREATE TABLE IF NOT EXISTS `posts_translations` (
  `id` int(11) NOT,
  `title_lang` varchar(100) NOT NULL,
  `content_lang` text NOT NULL
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

ALTER TABLE `posts_translations`
   ADD CONSTRAINT `posts_translations_ibfk_1` FOREIGN KEY (`id`) REFERENCES `posts` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
</code></pre>
<p>C'est tout ce dont on a besoin en terme de configuration pour les traductions.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#utilisation-des-models" id="user-content-utilisation-des-models"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Utilisation des models</h2>
<p>Les models sont chargés comme tout model du HMVC Code igniter. Pour plus d'information, rendez-vous sur la <a href="http://www.codeigniter.com/user_guide/general/models.html" rel="nofollow">documentation de code igniter</a> et sur la documentation de <a href="https://bitbucket.org/wiredesignz/codeigniter-modular-extensions-hmvc/" rel="nofollow">HMVC</a></p>
<h3>
<a aria-hidden="true" class="anchor" href="#acc%C3%A8s-aux-donn%C3%A9es" id="user-content-accès-aux-données"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Accès aux données</h3>
<p>La façon la plus simple d'accéder aux données d'une table via le model de cette table est d'utiliser les méthodes <em>getRow()</em> et <em>get()</em> qui retournent respectivement une ou plusieurs lignes de la table:</p>
<pre><code>$this-&gt;load-&gt;model('user');
$manyUsers = $this-&gt;user-&gt;get(array('age'=&gt;28)); // fetches all users from database where age is 28 in an array. 
$singleUser = $this-&gt;user-&gt;getRow(array('id'=&gt;42); // fetches the user who's id is 42
</code></pre>
<p>Il est à noter que les models utilisent la classe DB de code igniter pour fonctionner. Ainsi, il est possible d'utiliser directement les méthodes de la classe DB pour modifier le comportement des méthodes <em>get()</em> et <em>getRow()</em>. En revanche, il est <strong>impératif</strong> d'utiliser les méthodes <em>get()</em> et <em>getRow()</em> pour la récupération finale des données pour profiter des fonctionnalités d'héritage (voir plus loin) :</p>
<pre><code>&lt;?php 
$this-&gt;load-&gt;model('user');
$this-&gt;db-&gt;order_by('login ASC');
$usersByLoginOrder = $this-&gt;user-&gt;get();
</code></pre>
<p>Une <strong>exception</strong> : les jointures doivent obligatoirement passer par le model et non par la classe DB de code igniter. Ainsi, pour effectuer une jointure, on procédera de la manière suivante :</p>
<pre><code>&lt;?php 
$this-&gt;load-&gt;model('user');
$this-&gt;user-&gt;join('additionnal_infos', 'additionnal_infos.user_id='.$this-&gt;user-&gt;getTableName().'.id);
$users = $this-&gt;user-&gt;get();
</code></pre>
<p>Cette exception s'explique par le fait que le système utilise des jointures pour gérer l'héritage des models et les traductions.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#cas-de-lh%C3%A9ritage" id="user-content-cas-de-lhéritage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Cas de l'héritage</h4>
<p>Les models proposent une gestion automatisée et simplifiée de l'héritage. Comme vu précédemment, il est possible d'éclater les données d'un modèle sur plusieurs tables. Cependant, la récupération et le traitement des données sera simplifié au moyen de jointures faites automatiquement par le core. Ainsi, si j'ai un modèle d'administrateur qui hérite d'un modèle d'utilisateur, je récupèrerais les champs du modèle administrateur <em>et</em> du modèle utilisateur.</p>
<pre><code>&lt;?php 
$this-&gt;load-&gt;model('user');
$users = $this-&gt;user-&gt;get();
</code></pre>
<p>Si ce code récupère ces données :</p>
<table>
<thead>
<tr>
<th>id</th>
<th>login</th>
<th>password</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Wolverine</td>
<td>xmen</td>
</tr>
</tbody>
</table>
<p>Ce code :</p>
<pre><code>&lt;?php 
$this-&gt;load-&gt;model('admin');
$admins = $this-&gt;admin-&gt;get();
</code></pre>
<p>récupèrera celles-ci</p>
<table>
<thead>
<tr>
<th>id</th>
<th>login</th>
<th>password</th>
<th>name</th>
<th>forname</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Wolverine</td>
<td>xmen</td>
<td>John</td>
<td>Smith</td>
</tr>
</tbody>
</table>
<h3>
<a aria-hidden="true" class="anchor" href="#insertion-et-mise-%C3%A0-jour" id="user-content-insertion-et-mise-à-jour"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Insertion et mise à jour</h3>
<p>Il existe plusieurs méthodes pour gérer l'insertion et la mise à jour des données en base. Les deux méthodes principales pour cela sont les méthodes <em>insert()</em>, <em>update()</em> et <em>save()</em>.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#la-m%C3%A9thode-insert" id="user-content-la-méthode-insert"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>La méthode Insert()</h4>
<p>Cette méthode prend en paramètre un tableau associatif de données et va gérer leur insertion en base. Ainsi l'exemple suivant :</p>
<pre><code>&lt;?php 
	$this-&gt;load-&gt;model('user');
	$datas = array('login' =&gt; 'Wolverine', 'password' =&gt; 'xmen');
	$this-&gt;user-&gt;insert($datas);
</code></pre>
<p>Insérera le rang suivant en base :</p>
<table>
<thead>
<tr>
<th>id</th>
<th>login</th>
<th>password</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Wolverine</td>
<td>xmen</td>
</tr>
</tbody>
</table>
<p>Supposons que j'ai un modèle administrateur héritant du modèle utilisateur, possédant nom et prénom et correctement configuré, le code suivant :</p>
<pre><code>&lt;?php 
$this-&gt;load-&gt;model('admin');
$datas = array('login' =&gt; 'Wolverine', 'password' =&gt; 'xmen', 'name'=&gt;'John', 'forname' =&gt; 'Smith');
$this-&gt;admin-&gt;insert($datas);
</code></pre>
<p>Insérera ceci dans la table <em>users</em> ...</p>
<table>
<thead>
<tr>
<th>id</th>
<th>login</th>
<th>password</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Wolverine</td>
<td>xmen</td>
</tr>
</tbody>
</table>
<p>... et ceci dans la table <em>administrators</em> :</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>forname</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>John</td>
<td>Smith</td>
</tr>
</tbody>
</table>
<p>####La méthode update()
Cette méthode prend en paramètre un tableau associatif de données et une clause where qui peut être mixée.</p>

        </div>

    </div>]