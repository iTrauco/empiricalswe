[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#conversor-rs232-ttl-basado-en-max232" id="user-content-conversor-rs232-ttl-basado-en-max232"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Conversor RS232-TTL basado en MAX232</h1>
<p>En caso de disponer de puerto serie RS232 en el equipo, se puede utilizar un cable con conectores DB9 o IDC10F y un MAX232:</p>
<ul>
<li><a href="http://www.ti.com/lit/ds/symlink/max232.pdf" rel="nofollow">http://www.ti.com/lit/ds/symlink/max232.pdf</a></li>
<li><a href="https://www.sparkfun.com/products/13029" rel="nofollow">https://www.sparkfun.com/products/13029</a></li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#conversor-usb-ttl-basado-en-pl2303" id="user-content-conversor-usb-ttl-basado-en-pl2303"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Conversor USB-TTL basado en PL2303</h1>
<p>El modelo con el que se han realizado las pruebas es el siguiente (no dispone de línea DTR y provee tanto 5.0v como 3.3v):</p>
<ul>
<li><a href="https://d3s5r33r268y59.cloudfront.net/88221/products/thumbs/2014-04-30T14:18:52.571Z-PL2303_1.jpg.855x570_q85_pad_rcrop.jpg" rel="nofollow">https://d3s5r33r268y59.cloudfront.net/88221/products/thumbs/2014-04-30T14:18:52.571Z-PL2303_1.jpg.855x570_q85_pad_rcrop.jpg</a></li>
<li><a href="http://cdn.hobbyking.com/hobbyking/store/catalog/26918-1.jpg" rel="nofollow">http://cdn.hobbyking.com/hobbyking/store/catalog/26918-1.jpg</a></li>
</ul>
<p>En Windows, al conectar el conversor y buscar automáticamente el driver, se crea un puerto virtual COMX.
Si no encuentra el driver: <a href="http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=225&amp;pcid=41" rel="nofollow">http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=225&amp;pcid=41</a></p>
<p>El programa RealTerm nos permite realizar comunicaciones de diferentes tipos a través del puerto serie.</p>
<ul>
<li><a href="http://realterm.sourceforge.net/" rel="nofollow">http://realterm.sourceforge.net/</a></li>
<li><a href="http://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter" rel="nofollow">http://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter</a></li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#comprobaci%C3%B3n-de-funcionamiento" id="user-content-comprobación-de-funcionamiento"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Comprobación de funcionamiento</h2>
<p>USB-TTL</p>
<p>3.3v -
5.0v -
TXD -|
RXD -|
GND -</p>
<p>Conectamos un conversor al PC, con un cable unimos los pines TXD y RXD. Abrimos RealTerm, y tras seleccionar el puerto adecuado, enviamos caracteres en modo ASCII desde la pestaña "Send". Si el dispositivo funciona correctamente y hemos escogido el puerto adecuado, debería mostrarse en pantalla el texto enviado. Por defecto RealTerm no muestra el texto que se ha enviado, por lo que el hecho de mostrarse indica que la información:</p>
<ul>
<li>Se ha transmitido a través del puerto virtual COMX al USB.</li>
<li>Se ha convertido a formato TTL y se ha enviado por TXD.</li>
<li>Se ha recibido a través de RXD el contenido enviado en formato TTL.</li>
<li>Se ha convertido a USB y se recibido a través del puerto virtual COMX.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#comunicaci%C3%B3n-serie-entre-dos-pcs" id="user-content-comunicación-serie-entre-dos-pcs"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Comunicación serie entre dos PCs</h2>
<p>USB-TTL   USB-TTL</p>
<p>3.3v -  - 3.3v
5.0v -  - 5.0v
TXD --- TXD
RXD -/-- RXD
GND ---- GND</p>
<p>Conectamos un conversor en cada PC y unimos directamente los pines GND y de forma cruzada los pines TXD y RXD. Abrimos RealTerm en ambos equipos, y tras seleccionar el puerto adecuado en cada uno de ellos (no tiene por qué ser el mismo), enviamos caracteres del mismo modo que en la comprobación de funcionamiento. En este caso, el contenido enviado desde un equipo se mostrará en la terminal del otro.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#programaci%C3%B3n-de-sketches-en-arduino-pro-mini-con-bootloader-precargado" id="user-content-programación-de-sketches-en-arduino-pro-mini-con-bootloader-precargado"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Programación de sketches en Arduino Pro Mini (con bootloader precargado)</h2>
<ul>
<li>Pro Mini
RAW. For supplying a raw voltage to the board.
VCC. The regulated 3.3 or 5 volt supply.
GND. Ground pins.</li>
</ul>
<p>El número y orden de los pines no coincide, por lo que debe prestarse atención al realizar las conexiones. En el apartado "reinicio automático" se analiza más en profundidad este hecho.</p>
<p>El Arduino Pro Mini dispone de un cabezal de seis pines en uno de sus laterales pensado para su programación. Siguiendo el ejemplo del caso anterior, conectamos directamente los pines GND del conversor y el cabezal mencionado. Asimismo, unimos de forma cruzada los pines RX y TX. Por último, conectamos VCC al pin 5.0v o 3.3v, dependiendo del modelo concreto de Arduino Pro Mini utilizado (en estas pruebas se ha utilizado el de 5v y 16MHz con microcontrolador ATMEGA 328P). Podemos utilizar un conector de tres pines para conectar VCC/TX/RX y un cable adicional para conectar GND (que esta en otra posición). El pin BLK del conector de seis pines se utiliza para el control de flujo de transmisión por hardware. En caso de que el conversor USB-TTL dispusiera del pin DSR/CTS correspondiente, podríamos conectarlo a GND, ya que al programar no se utiliza.</p>
<p>NOTA: no se han analizado las implicaciones de utilizar un modelo con frecuencia de reloj diferente (8MHz o 20MHz). En el caso de la alimentación, los niveles TTL son válidos en cualquiera de los casos.</p>
<p>ProMini USB-TTL</p>
<p>BLK -<br/>
GND --- GND
VCC --- 5.0v
RXI --- TXD
TXO --- RXD
GRN -      (está conectado a la línea de reset a través de un condensador, puede dejarse al aire)</p>
<p>El bootloader es un pequeño fragmento de software que se inicializa en primer lugar tras arrancar el dispositivo (o al reiniciarlo). En el caso de Arduino, el bootloader (<a href="http://arduino.cc/en/pmwiki.php?n=Main/ArduinoBoardProMini" rel="nofollow">http://arduino.cc/en/pmwiki.php?n=Main/ArduinoBoardProMini</a>) decide entre cargar un nuevo "sketch" a través de los puertos RX y TX (uart) (de acuerdo con el protocolo STK500 <a href="http://www.atmel.com/Images/doc2525.pdf" rel="nofollow">http://www.atmel.com/Images/doc2525.pdf</a>) o ejecutar directamente el "sketch" contenido en memoria (programado previamente). Por lo tanto, cada vez que se requiere cargar un nuevo sketch es necesario mantener activo el reset justo hasta que se inicie la transferencia, de forma que al arrancar el Arduino Pro Mini lo primero que vea el bootloader sea una petición de escritura. El proceso de escritura de un sketch acepta cierta latencia (espera un tiempo determinado para que el Arduino pueda responder), pero requiere atención. Si soltamos el botón de reset antes de tiempo, el Arduino cargará el programa previamente grabado, ignorando la petición de escritura. Si, por el contrario, mantenemos el reset pulsado demasiado tiempo, el proceso de programación entenderá que no hay ningún Arduino disponible y mostrará un error de comunicación.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#reinicio-autom%C3%A1tico" id="user-content-reinicio-automático"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Reinicio automático</h3>
<p>El pin GRN del cabezal de seis pines en el Arduino Pro Mini sirve para reiniciar automáticamente el dispositivo cuando se va a realizar la programación de un sketch. Para utilizarlo es necesario que el conversor USB-TTL utilizado provea una señal denominada DTR, sincronizada debidamente con la transferencia a realizar. En el caso del PL2303, esta señal se encuentra en el pin 2 del integrado, pero no se facilita en el cabezal de cinco pines. Si disponemos de un soldador, un condensador y cierta habilidad con componentes SMD, podemos soldar una de las patillas del condensador al pin 2 del integrado y conectar la otra al ping GRN del Arduino. De esta manera evitaremos tener que pulsar manualmente el botón de reset y prestar atención al momento adecuado en que soltarlo.</p>
<p>En el siguiente enlace se puede ver un ejemplo en el que se ha cortado la pista del pin 3.3v del conversor y se ha aprovechado ese pin para conectac el condensador: <a href="http://forum.arduino.cc/index.php?topic=137772.0" rel="nofollow">http://forum.arduino.cc/index.php?topic=137772.0</a></p>
<p>NOTA: el uso de la línea GRN tiene como efecto en GNU/Linux y MAC OS que el Arduino se reinicie cada vez que nos conectamos: <a href="http://arduino.cc/en/pmwiki.php?n=Main/ArduinoBoardProMini" rel="nofollow">http://arduino.cc/en/pmwiki.php?n=Main/ArduinoBoardProMini</a></p>
<h2>
<a aria-hidden="true" class="anchor" href="#programaci%C3%B3n-de-bootloader-en-arduino-pro-mini-o-aplicaci%C3%B3n-en-ccensamblador" id="user-content-programación-de-bootloader-en-arduino-pro-mini-o-aplicación-en-ccensamblador"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Programación de bootloader en Arduino Pro Mini (o aplicación en C/C++/ensamblador)</h2>
<p>Aunque Arduino ofrece un entorno de desarrollo muy cómodo y facilita el prototipado rápido, el peaje a pagar es una gran abstracción sobre la configuración de los periféricos disponibles en los diferentes microcontroladores de la familia ATMEGA. Si bien es cierto que muchas de las características avanzadas están accesibles desde el entorno Arduino, en ocasiones se requiere la modificación de librerías (no pensadas específicamente para la aplicación buscada). La modificación de librerías en un nivel de abstracción relativamente bajo puede dar lugar a soluciones sub-óptimas y posteriores problemas de mantenimiento y portabilidad.</p>
<p>Por motivos didácticos y de optimización puede ser interesante programar los micros utilizando directamente lenguaje C, C++ o ensamblador. Omitiendo el uso de las librerias de Arduino, se requiere un análisis más exhaustivo de la arquitectura AVR, y se abre la puerta a un conocimiento más avanzado de las posibilidades que ofrecen los microcontroladores como plataforma de desarrollo (registros de configuración, espacios de memoria, tipos de direccionamiento...).</p>
<p>Por otro lado, a cambio de ofrecer la posibilidad de cargar "sketches" directamente a través de la uart, el bootloader de Arduino ocupa unos 2KB de memoria. En caso de no necesitar esa funcionalidad, podemos aprovechar el espacio de memoria para la aplicación.</p>
<p>Puesto que todas las placas de la familia Arduino están basadas en productos de ATMEL con arquitectura AVR (denominación que emplea para referirse tanto a la arquitectura como a los programadores, el IDE...), pueden utilizarse directamente las herramientas del fabricante para programar los dispositivos.</p>
<p>En el caso del entorno Arduino, gracias al bootloader, el micro se encuentra ya inicializado y dispone de recursos para interpretar una comunicación serie cuando recibe un nuevo "sketch". Sin embargo, cuando se requiere programar un micro por completo (ignorando cualquier contenido anterior), no es posible mantener la comunicación con el PC que está enviando la información.</p>
<p>Por lo anterior, la diferencia principal en el flujo de trabajo es que, como norma general para la programación de microcontroladores, se requiere de un dispositivo que descargue la aplicación desarrollada desde el PC a la memoria del micro. Estos programadores se denominan genéricamente ISP (in-system programmer) en referencia al hecho de que están pensados para conectarse a los micros directamente en la placa donde estén montados, sin necesidad de extraerlos a un zócalo en un sistema específico.</p>
<p>La función del ISP es gestionar el reinicio y la configuración del micro al mismo tiempo que mantiene una comunicación con el PC para descargar el programa que deberá grabarse. El precio de estos dispositivos es de aproximadamente 20€. Por suerte, en caso de no disponer de uno compatible con AVR, podemos utilizar un Arduino adicional que haga las veces de ISP:</p>
<ul>
<li><a href="http://arduino.cc/en/Main/ArduinoISP" rel="nofollow">http://arduino.cc/en/Main/ArduinoISP</a></li>
<li><a href="http://arduino.cc/en/pmwiki.php?n=Tutorial/ArduinoISP" rel="nofollow">http://arduino.cc/en/pmwiki.php?n=Tutorial/ArduinoISP</a></li>
<li><a href="http://www.open-electronics.org/arduino-isp-in-system-programming-and-stand-alone-circuits/" rel="nofollow">http://www.open-electronics.org/arduino-isp-in-system-programming-and-stand-alone-circuits/</a></li>
<li><a href="http://www.instructables.com/id/Turn-Your-Arduino-Into-an-ISP/" rel="nofollow">http://www.instructables.com/id/Turn-Your-Arduino-Into-an-ISP/</a></li>
<li><a href="https://www.youtube.com/watch?v=muP1dp73Mdg" rel="nofollow">https://www.youtube.com/watch?v=muP1dp73Mdg</a></li>
</ul>
<p>Sea con un ISP de ATMEL o con ArduinoISP, el proceso a seguir es el habitual para la familia AVR:</p>
<ul>
<li><a href="http://arduino.cc/en/pmwiki.php?n=Hacking/MiniBootloader" rel="nofollow">http://arduino.cc/en/pmwiki.php?n=Hacking/MiniBootloader</a></li>
</ul>
<p>NOTA: comprobar si arduinoISP puede sustituir a un ISP de ATMEL en cualquier situación, o cuáles son sus limitaciones</p>
<p>NOTA: qué recursos necesitamos para trabajar directamente en AVR Studio? cuál es la configuración mínima necesaria para la frecuencia de reloj, entradas/salidas, resistencias pull up/down...?</p>

        </div>

    </div>]