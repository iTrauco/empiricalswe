[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#workflow" id="user-content-workflow"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Workflow</h1>
<div>
<p><strong>Client.java</strong> → contains the main logic of the application. Constructor starts threads for handling connection with other peers (service T&lt;ConnectionHandler&gt;) and with tracker (announce T&lt;Announce&gt;). Should start rtservice T&lt;RTGenHandler&gt;.</p>
</div>
<div>
<p><strong>RTGenHandler.java</strong> (new) → generates pieces undefinitely using random piece of getUnavailablePieces() from client torrent T&lt;SharedTorrent&gt;. After having generated a piece, rtservice call handlePieceCompleted() from client.</p>
</div>
<div>
<p><strong>Piece storage</strong></p>
</div>
<div>
<p>PeerExchange -&gt; register(MessageListener)</p>
</div>
<div>
<div>
<pre>MessageListener -&gt; handleMessage()</pre>
</div>
</div>
<div>
<div>
<pre>SharingPeer -&gt; HandleMessage(Piece)</pre>
</div>
</div>
<div>
<div>
<pre>Piece -&gt; piece.record();this.firePieceCompleted();this.requestedPiece = null;</pre>
</div>
</div>
<div>
<div>
<pre>Client -&gt; handlePieceCompleted();this.torrent.markCompleted(piece);broadcast msg "have"</pre>
</div>
</div>
        </div>

    </div>]