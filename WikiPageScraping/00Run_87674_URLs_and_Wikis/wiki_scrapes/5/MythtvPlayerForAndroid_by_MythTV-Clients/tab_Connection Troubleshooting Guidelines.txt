[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>###The "Cut It In Half" Introduction
The phone/tablet is all setup and yet messages or (lack of) results keep suggesting
that the <em>MythTV</em> backend can't be reached.  Or, the connection
is OK but recordings can't be watched.</p>
<p>As with any device that connects to another over a network,
sometimes deciding where the problem is can become a guessing
game. The purpose of this <em>Wiki</em> is, at the very least, to cut
the problem in half and identify if the <em>Android</em> device is
sending messages to the <em>MythTV</em> backend or if the backend isn't
getting or responding to the messages.</p>
<p>###Connection Tests
Here are some tests, in increasing complexity, that can help
diagnose a problem:</p>
<ol>
<li>
<p>From a browser on the <em>Android</em> device go to <code>http://&lt;Backend IP&gt;:6544/</code>
Expect to see the <code>MythTV Status</code> page. If it doesn't display, consider the following:</p>
<ul>
<li>The backend might not be running or</li>
<li>may be running on a version below 0.27</li>
<li>Incorrect <em>IP</em> address in the tablet/phone</li>
<li>Incorrect <em>Port</em> number in the tablet/phone (use the default 6544 unless you've changed it in the backend)</li>
<li>Firewall blocking, not likely if remote front ends work</li>
<li>
<code>IPTables</code> or <code>UFW</code> (backend resident firewalls)</li>
</ul>
</li>
<li>
<p>Look at the <em>MythTV</em> backend log files.
First, see the <a href="MythTV-Configuration-Suggestions">Where are the log files?</a>
section if their location is unknown. The log generated by
<code>mythbackend</code> is the log of interest here, at least for starters.</p>
<p>Now that the log location is known, users can type: <code>tailf &lt;log file&gt;</code>
Then, from the <em>Android</em> device, retry whatever was failing and
see what the logs are saying. Type: <code>control-C</code> to abort the <code>tailf</code>.</p>
</li>
</ol>
<p>###Note that the following suggestions are really debugging level tools.
They shouldn't be required by a user of this application. They're just here to
document their availability and get users started if that level of analysis
is needed.</p>
<ol>
<li>
<p><code>tcpdump</code></p>
<p>If nothing is seen in the backend logs, then the messages from
the <em>Android</em> device aren't getting to the backend's <em>Services API</em>.
To see if messages are even
getting to the backend's host, type the following:
<code>sudo tcpdump -c 500 -A 'host &lt;tablet/phone IP or hostname&gt;'</code>
Expect to see some cryptic protocol fly by, but there should
also be some text that can be recognized, such as:</p>
</li>
</ol>
<pre>Server: Linux 3.2.0-32-generic, UPnP/1.0, MythTV 0.27.20120906-1
{"ProgramList": {"StartIndex": "0", "Count": "145", "TotalAvailable": "145", ...
GetImageFile?StorageGroup=Fanart&amp;FileName=\/CSI: NY Season 9_fanart.jpg", ...
</pre>
<pre><code>If nothing prints, not even `SYN` and `ACK` packets, then either `tcpdump`
</code></pre>
<p>is setup incorrectly (1st choice), or the <em>Android</em> device's messages aren't getting
to the backend's host. This is pretty serious, because the steps at the top
of this page should have cared for basic configuration issues. Please review
them.</p>
<p>More likely <code>tcpdump</code> is being used to watch the raw protocol exchange.
For each connection, expect to see the traditional three way
handshake <code>SYN</code>, <code>SYN-ACK</code>, <code>ACK</code> followed by some messages between the <em>Android</em>
and backend host
and then <code>FIN</code>, <code>FIN-ACK</code>.</p>
<ol>
<li>
<p><em>Wireshark</em></p>
<p>This is a graphical interface with excellent displays and protocol analysis
features, however, if a user hasn't had any experience with it, it may present too
much of a learning curve to be of value.</p>
<p>The messages captured will, of course, be the same as with the previous step,
but in a much easier to read format. Setting a filter to:
<code>ip.host == &lt;tablet/phone hostname/ip address&gt;</code> will remove any other traffic
on the users network. The output can be saved in a file. Typing: <code>pastebinit &lt;filename&gt;</code>
will return a URL that can be pasted in
<a href="https://github.com/MythTV-Clients/MythtvPlayerForAndroid/issues"><em>Issues</em></a>
for others to look at.</p>
</li>
<li>
<p><em>tshark</em></p>
<p>This is very useful because is can be run on a remote host without using a GUI.
The results can then be copied to a local host and processed by <em>Wireshark</em>.</p>
<p>A command line version of the above. An example is:</p>
</li>
</ol>
<pre>    tshark -i eth0 -ta -N nmt -T text -f "host tab0" -x
</pre>

        </div>

    </div>]