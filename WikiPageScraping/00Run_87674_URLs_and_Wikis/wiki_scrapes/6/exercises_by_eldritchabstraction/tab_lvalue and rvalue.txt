[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The following is paraphrased from this <a href="http://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c" rel="nofollow">blog</a></p>
<p><strong>Motivation</strong>: lvalues and rvalues may not appear often in c programming until times inconvenient.</p>
<p><strong>Simplification</strong>: lvalues (locator values) represent a addressable place in memory, rvalues are everything else.</p>
<p>Here are some examples:</p>
<hr/>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">int</span>&amp; <span class="pl-en">foo</span> ()
{
    <span class="pl-k">return</span> <span class="pl-c1">2</span>;
}

<span class="pl-k">int</span> <span class="pl-en">main</span> (<span class="pl-k">void</span>)
{
    <span class="pl-c1">foo</span>() = <span class="pl-c1">2</span>;
}</pre></div>
<p><code>foo</code> returns <code>int&amp;</code> which is a reference to <code>2</code> which is a rvalue. So you're returning a reference to an rvalue which doesn't live in memory and cannot be assigned to.</p>
<p>If instead of <code>2</code>, <code>foo()</code> returned a reference to some <code>g_var = 2;</code>, then we'd be returning a reference to an lvalue, which does live in memory and can be assigned to.</p>
<hr/>
<p>lvalues can be implicitly converted to rvalues:</p>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">int</span> a = <span class="pl-c1">1</span>;     <span class="pl-c"><span class="pl-c">//</span> a is an lvalue</span>
<span class="pl-k">int</span> b = <span class="pl-c1">2</span>;     <span class="pl-c"><span class="pl-c">//</span> b is an lvalue</span>
<span class="pl-k">int</span> c = a + b; <span class="pl-c"><span class="pl-c">//</span> + needs rvalues, so a and b are converted to rvalues</span>
               <span class="pl-c"><span class="pl-c">//</span> and an rvalue is returned</span></pre></div>
<p>lvalues can also be explicitly derived from rvalues using the <code>*</code> operator.</p>
<p>rvalues can also be explicitly obtained from lvalues using the <code>&amp;</code> operator.</p>
<hr/>
<p>The following is paraphrased from this <a href="http://www.bogotobogo.com/cplusplus/cplusplus11.php" rel="nofollow">blog</a></p>
<p>rvalue references contradict the rules described above. For example,</p>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">void</span> <span class="pl-en">print</span>(std::string <span class="pl-k">const</span>&amp; s)
{
    std::cout &lt;&lt; s &lt;&lt; std::endl;
}
<span class="pl-en">print</span>(<span class="pl-s"><span class="pl-pds">"</span>implicit conversion<span class="pl-pds">"</span></span>);  <span class="pl-c"><span class="pl-c">//</span> creates temporary std::string object</span>
</pre></div>

        </div>

    </div>]