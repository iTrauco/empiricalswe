[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#faq-d%C3%A9veloppement-avec-microntrolleur" id="user-content-faq-développement-avec-microntrolleur"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>FAQ, développement avec microntrolleur</h1>
<p>Problèmes et difficultés rencontrées</p>
<h2>
<a aria-hidden="true" class="anchor" href="#comment-d%C3%A9marrer-" id="user-content-comment-démarrer-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Comment démarrer ?</h2>
<p>Suggestion :</p>
<ul>
<li>créer un dépôt git pour l'application à développer</li>
<li>commencer la prise en main à partir d'un code d'exemple</li>
<li>compiler le programme avec un Makefile</li>
<li>déployer sur la carte</li>
<li>vérifier que le comportement de la caret correspond bien au programme chargé</li>
</ul>
<p>Si tout est bon, continuer :)</p>
<ul>
<li>
<p>modifier le fichier source en y ajoutant une erreur volontairement</p>
</li>
<li>
<p>compiler</p>
</li>
<li>
<p>le compilateur doit râler, sinon c'est que le Makefile est incorrect ou mauvais fichier modifié</p>
</li>
<li>
<p>ajouter les fonctions correspondantes au comportement souhaité</p>
</li>
<li>
<p>intégrer les fonctions avec le code existant</p>
</li>
<li>
<p>compiler, déployer sur la carte</p>
</li>
<li>
<p>vérifier le comportement</p>
</li>
<li>
<p>si pas bon, continuer de développer</p>
</li>
<li>
<p>si bon, commencer sérieusement l'étape de nettoyage du code</p>
<ul>
<li>enlever le code mort et/ou inutile (l'outil de gestion de version est là au cas où)</li>
<li>nommer et renommer les variables pour qu'elles aient des significations explicites ET en anglais</li>
<li>extraire des fonctions faisant peu de choses, avec des noms explicite
Plus l'actions est complexe, plus elle doit être découpée en fonctions</li>
<li>ajouter les assertions sur les invariants</li>
<li>ajouter les pré-conditions</li>
<li>ajouter les post-vérifications</li>
</ul>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#quoi-v%C3%A9rifier-lors-des-commandes-de-mat%C3%A9riel-" id="user-content-quoi-vérifier-lors-des-commandes-de-matériel-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Quoi vérifier lors des commandes de matériel ?</h2>
<ul>
<li>le processeur sur la carte est le bon</li>
<li>le moyen d'alimenter la carte
<ul>
<li>vérifier qu'un moyen sera dispo dès la réception de la carte</li>
<li>à défaut, s'en procurer une</li>
</ul>
</li>
<li>le moyen de programmer la carte
<ul>
<li>vérifier que la connectique est déjà en stock</li>
<li>à défaut, se procurer le composant</li>
</ul>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#comment-utiliser-le-port-s%C3%A9rie-sous-gnulinux" id="user-content-comment-utiliser-le-port-série-sous-gnulinux"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Comment utiliser le port série sous GNU/Linux</h2>
<ul>
<li>les ports séries apparaissent comme des fichiers</li>
<li>ils apparaissent sous la forme <code>/dev/tty*</code>{.bash}</li>
<li>lorsque l'adaptateur est USB, <code>/dev/ttyUSBx</code>{.bash} avec x le numéro de port sur l'adaptateur</li>
</ul>
<p>En plus de cela, il faut que l'utilisateur soit membre du groupe "dialout"</p>
<pre lang="{.bash}"><code>sudo adduser &lt;username&gt; dialout
</code></pre>
<p>Il est possible d'écrire "toto" dans le port série :</p>
<pre lang="{.bash}"><code>echo "toto" &gt;&gt; /dev/ttyUSB0
</code></pre>
<p>Il est d'une façon similaire possible de lire un port série :</p>
<pre lang="{.bash}"><code>cat /dev/ttyUSB0
</code></pre>
<p>ou</p>
<pre lang="{.bash}"><code>tail -f /dev/ttyUSB0
</code></pre>
<p>ATTENTION : le port doit être déjà configuré par rapport au matériel à utiliser, sinon ça ne fonctionne pas comme prévu</p>

        </div>

    </div>]