[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#training" id="user-content-training"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Training</h2>
<p>The training process of a neural network involves several steps. First of all the training data has to be gathered.
The function block responsible for this is <strong>writetrainingset.unit</strong>. The Robotino View program which should be used is <strong>gather_training_data.rvw2</strong>.</p>
<hr/>
<p>A training  set is a text file with 2n+1 rows. In the first row the number n, the number of inputs and the number of outputs are specified. For example 100 18 3 for a training set with 100 data points, 18 inputs and 3 outputs.
The following 2n rows represent the data points (inputs and outputs in separate lines).
Examples of training sets can be found <a href="https://github.com/gjke/robotino/tree/master/nn/tsets">here</a>.</p>
<hr/>
<p>When the training set is ready it is time to create a test set, which can be used later in order to estimate the quality of the trained network. Typical data points have to be cut out from the training set and pasted into a separate file. This file should have the same format as the training set(usually much sorter 50-100 data points).
Examples of test sets can be found <a href="https://github.com/gjke/robotino/tree/master/nn/tests">here</a>.</p>
<hr/>
<p>Now a new neural network can be created trained and tested. There is a small console application for this.
Pull the .cpp <a href="https://github.com/gjke/robotino/blob/master/nn/nn/main.cpp">file</a> and build a console application. You might need to attach the FANN library as described <a href="https://github.com/gjke/robotino/wiki/New-Function-Block-for-RobotinoView-2-with-FANN">here</a>. This program has 3 different modes:</p>
<ol>
<li>
<p><strong>Training(1)</strong>. You will be led through the whole process in the dialog mode. At the end a file with the network configuration is received.</p>
</li>
<li>
<p><strong>Testing(2)</strong>. If you have a trained network you can test it in this mode. You will also be led through in the dialog mode.</p>
</li>
<li>
<p><strong>Custom(3)</strong>. All the settings are adjusted directly in the code. Training and testing are done one after another.</p>
</li>
</ol>
<p>Examples of network configuration files can be found <a href="https://github.com/gjke/robotino/tree/master/nn/nets">here</a></p>
<h2>
<a aria-hidden="true" class="anchor" href="#applying" id="user-content-applying"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Applying</h2>
<p>The file with the network configurations created in the previous steps can now be used to control the robot.
The function block responsible for this is <strong>nn.unit</strong>. The Robotino View program which should be used is <strong>nno.rvw2</strong>. At the moment of writing it is unfortunately not possible to set the path to the configuration file over the function block gui(should be fixed at some point). So this path has to be set in the source code of the function block nn.</p>

        </div>

    </div>]