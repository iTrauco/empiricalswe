[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#git-commands" id="user-content-git-commands"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Git commands</h3>
<pre><code>git remote show origin
git log --pretty=format:'%H  %an  %s'
git branch -D bugfix
git branch -a   (shows local and remote branches)
git branch -r  (shows remote branches)
git checkout -b issues/105 remotes/origin/issues/105 //Branch issues/105 set up to track remote branch issues/105 from origin.
git push origin name_of_remote_branch (push to remote branch only)
git push origin --delete jan  // delete remote branch
git fetch -p // synchronize local branches  
</code></pre>
<p><strong>create a branch and push to remote with branch name as “exchange”</strong></p>
<pre><code>git checkout -b exchange
git push origin exchange    
git branch --set-upstream-to=origin/exchange exchange // set the tracking pull

git remote prune origin //synch local branches to remote
</code></pre>
<p><strong>gitflow and rebase</strong></p>
<pre><code>1. update your development
2. git commit  (commit my feature changes)
3. git rebase origin/development  (get the latest development changes to my feature branch) 
4. git push  -f  origin my-feature-branch (push force to my feature branch)
</code></pre>

        </div>

    </div>]