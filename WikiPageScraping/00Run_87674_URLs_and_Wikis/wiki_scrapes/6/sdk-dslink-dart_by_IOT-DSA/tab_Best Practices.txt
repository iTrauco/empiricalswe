[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>When writing DSLinks with the Dart SDK, there are some best practices that are recommended that most people follow.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#multiple-connections-for-connectors" id="user-content-multiple-connections-for-connectors"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Multiple Connections for Connectors</h2>
<p>If you are designing a DSLink which connects to an external service to retrieve data, and that service has an account system, it is a best practice to support multiple accounts or connections. This ensures that users who want to pull data from multiple accounts or connections don't have to run a second link in order to do so.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#make-links-configurable" id="user-content-make-links-configurable"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Make Links Configurable</h2>
<p>It is bad practice to hardcode broker urls, and in most cases DSLink names. If you are using the LinkProvider functionality on the standalone Dart VM for the command line, you don't really need to worry about this, as the interface for configuration is in there already. However, if you are designing a browser DSLink, it is highly critical you provide the user with either a UI to configure these options, or some other way to configure the link that is external (such as making an HTTP request to a url, and if it exists, use the contents as the configuration of the link).</p>
<h2>
<a aria-hidden="true" class="anchor" href="#include-a-dslink-descriptor-file" id="user-content-include-a-dslink-descriptor-file"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Include a DSLink descriptor file</h2>
<p>If you are developing a standalone link on the Dart VM, it is critical that you provide a dslink.json file. You can see examples <a href="https://github.com/IOT-DSA/dslink-dart-weather/blob/master/dslink.json">here</a>. This allows users to use link managers to configure and manage your link.</p>

        </div>

    </div>]