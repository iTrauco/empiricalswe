[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>#iWallet C# Integration Tutorial
Integrating your application with iWallet is really simple. This tutorial walks you through the integration process using C# .Net. The module supports the .Net Framework version 2.0 upwards.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#setting-up-your-project" id="user-content-setting-up-your-project"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Setting Up Your Project</h2>
<p>To begin, open Visual Studio and create a new project (go to File-&gt;New-&gt;Project and choose the project template of your choice). When the project opens, Right-Click on References in the Solution Explorer and choose "Add Reference". Click on the "Browse" tab, select iWalletPayliveModule.dll from your download folder (or wherever you saved it to) and click "OK".</p>
<p>Once you've added the reference, the next step is to add your merchant account configuration. You can either do this by setting up the configuration properties in the appSettings section of your App.config/Web.config file, or store them elsewhere (eg. a database) and pass them as constructor arguments to the PayliveConnector class. The required parameters are:</p>
<ul>
<li>apiVersion</li>
<li>merchantEmail</li>
<li>merchantKey</li>
<li>serviceType</li>
<li>integrationMode</li>
</ul>
<p><code>&lt;appSettings&gt; &lt;add key="apiVersion" value="1.4"/&gt; &lt;add key="merchantEmail" value="your@merchant.email"/&gt; &lt;add key="merchantKey" value="yourmerchantkey"/&gt; &lt;add key="serviceType" value="C2B"/&gt; &lt;add key="integrationMode" value="false"/&gt; &lt;/appSettings&gt;</code></p>
<p>That's it! your application is now configured to connect to iWallet.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#using-the-library" id="user-content-using-the-library"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using The Library</h2>
<p>To actually make send a request to iWallet, just create a new instance of the PayliveConnector class and call the appropriate method. For example, to get a new payment token, you first convert your order details into an array of order items like so:</p>
<pre><code>OrderItem item = new OrderItem();
item.ItemCode = "001";
item.ItemName = "Test Item";
item.Quantity = 1;
item.SubTotal = amount;
item.UnitPrice = amount;
        
OrderItem[] items = { item };
</code></pre>
<p>Then, you call the <code>getPaymentToken()</code> method with the relevant parameters:</p>
<pre><code>PayliveConnector connector = new PayliveConnector();
string token = connector.getPaymentToken(orderId, subTotal, shipping, tax, total, "testing connector module", "another comment", orderItems);
</code></pre>
<p>That's all there is to it!</p>
<p>Happy integrating.</p>

        </div>

    </div>]