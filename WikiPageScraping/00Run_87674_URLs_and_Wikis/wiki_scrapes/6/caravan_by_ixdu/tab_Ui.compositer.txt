[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>На данный момент compositer можно рассматривать просто как js объект следующего вида:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">compositer</span>(){

<span class="pl-c"><span class="pl-c">//</span>ui elements</span>
    <span class="pl-c1">this</span>.<span class="pl-en">frame_create</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">frame_def</span>){
        <span class="pl-k">return</span> frame_id;
    }
    <span class="pl-c1">this</span>.<span class="pl-en">frame_destroy</span> <span class="pl-k">=</span> <span class="pl-k">function</span> (<span class="pl-smi">frame_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

    <span class="pl-c"><span class="pl-c">//</span>root_frame_id == 1</span>
    <span class="pl-c1">this</span>.<span class="pl-en">frame_add</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">frame_id</span>, <span class="pl-smi">child_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }
    
    <span class="pl-c1">this</span>.<span class="pl-en">frame_remove</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">frame_id</span>, <span class="pl-smi">child_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

    <span class="pl-c1">this</span>.<span class="pl-en">image_create</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">image_def</span>){
        <span class="pl-k">return</span> image_id;
    }
   
    <span class="pl-c1">this</span>.<span class="pl-en">image_destroy</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">image_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

<span class="pl-c"><span class="pl-c">//</span>ui animation</span>
    <span class="pl-c1">this</span>.<span class="pl-en">anim_create</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">chain</span>){
        <span class="pl-k">return</span> anim_id;
    }

    <span class="pl-c1">this</span>.<span class="pl-en">anim_destroy</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">anim_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void; </span>
    }

    <span class="pl-c1">this</span>.<span class="pl-en">anim_bind</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">element_id</span>, <span class="pl-smi">anim_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

    <span class="pl-c1">this</span>.<span class="pl-en">anim_unbind</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">element_id</span>, <span class="pl-smi">anim_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

    <span class="pl-c1">this</span>.<span class="pl-en">anim_start</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">element_id</span>, <span class="pl-smi">anim_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

    <span class="pl-c1">this</span>.<span class="pl-en">anim_resume</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">element_id</span>, <span class="pl-smi">anim_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

    <span class="pl-c1">this</span>.<span class="pl-en">anim_stop</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">element_id</span>, <span class="pl-smi">anim_id</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

<span class="pl-c"><span class="pl-c">//</span>ui events</span>

    <span class="pl-c1">this</span>.<span class="pl-en">event_register</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">element_id</span>, <span class="pl-smi">event_name</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

    <span class="pl-c1">this</span>.<span class="pl-en">event_unregister</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">element_id</span>, <span class="pl-smi">event_name</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }
    
     pointer_obj <span class="pl-k">=</span> {
      pointer_id,
      <span class="pl-c"><span class="pl-c">//</span>позиция указана относительно левого-верхнего угла _текущего_ элемента</span>
      x,
      y
     }
     <span class="pl-en">pointer_in</span>(group_id, pointer_obj[num_of_pointers])
     <span class="pl-en">pointer_out</span>(group_id, pointer_obj[num_of_pointers])
     <span class="pl-en">pointer_down</span>(group_id, pointer_obj[num_of_pointers])
     <span class="pl-en">pointer_up</span>(group_id, pointer_obj[num_of_pointers])
     <span class="pl-en">pointer_motion</span>(group_id, pointer_obj[num_of_pointers])

     <span class="pl-en">focus_in</span>(group_id)
     <span class="pl-en">focus_out</span>(group_id)

     key_obj <span class="pl-k">=</span> {
         group_id,
         keynum
     }  
     <span class="pl-en">key_down</span>(key_obj)
     <span class="pl-en">key_up</span>(key_obj)
     
     <span class="pl-en">on_move</span>(x, y)
     <span class="pl-en">on_resize</span>(width, height)
    
     <span class="pl-en">animation_stopped</span>(anim_id)
    
    <span class="pl-c"><span class="pl-c">//</span>event_callback(element_id, event_name, event_data)</span>
    <span class="pl-c1">this</span>.<span class="pl-en">events_callback_set</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">event_callback</span>){
        <span class="pl-c"><span class="pl-c">//</span>return void;</span>
    }

}</pre></div>
<ul>
<li>Events</li>
</ul>
<p>** Input events
События устройств ввода: движение курсора, множества курсоров, клавиатурный ввод.
Концепт устройств ввода изначально включает в себя поддержку мультитача, многокурсорности и множества клавиатур. Для этого все устройства ввода принадлежат к какой-то группа. И именно группа обладает понятием
фокуса ввода. Таким образом один комплект мыши и клавиатуры можети быть объеденен в группу 0, а ещё один комплект в группу 1. В итоге будет две группы с разными фокусами ввода, которые могут работать с элементами независимо. Конечно, данная возможность должна поддерживаться платформной, в случае xorg+evas такая поддержка есть, в случае mac os - частичная. Web также поддерживает эту возможность частично. То есть множество указателей в web возможно, но невозможны группы, всегда только одна группа.
Для целей поддержки любых платформ, группа 0 зарезервированна под использование по умолчанию. Например в случае web все события ввода будут иметь group_id 0, потому как привязать разные устройства ввода к разным группам не представляется возможным. Это не отменяет поддержки мультитача, но делает невозможным использовать множество фокусов.
Каждый указателль имеет уникальный id в рамках группы. В зависимости от поддержки платформы этот уникальный id может быть либо постоянным, либо только в течении motion. Однако этого достаточно для отделения одного указателя от другого.</p>
<p>** pointer
Под указателем понимается любой указатель: мышь, тачпад, планшет, пальцы - любой. События pointer отрабатывают на изменение позиции или другие действия указателей в рамках группы. Например у вас есть две мыши и один палец и вы двигаете ими одновременно: таким образом происходит перемещение 3х указателей и эти перемещения передаются в <em>одно</em> pointer_motion в один момент времени. В этом событии указываются позиции каждого из 3х указателей в некоторый момент времени.
Таким образом не делается никакого различия между прикасаниями пальцами, мышью или любым другим способом перемещения указателя. Соответственно multitouch жесты будут работать одинаково хорошо как с помощью пальцев, так и с помощью двух трекпоинтов:)</p>

        </div>

    </div>]