[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#why-another-framework" id="user-content-why-another-framework"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Why another framework?</h2>
<p>Frameworks like backbone, angular, react provide general purpose abstractions and some useful tools.</p>
<p>Sometimes it's hard to find guidelines and conventions for app development.</p>
<p>This framework will provide some <strong>opinionated conventions</strong> and <strong>higher-level fine-grained abstractions</strong>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#main-goals" id="user-content-main-goals"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Main goals</h2>
<ol>
<li>Modular, reusable, <em>replacable</em>, self-contained web components (based on AMD/CommonJS).</li>
<li>Fine-grained abstractions for "visible elements" with <strong>strict roles</strong>.<br/>
<code>element</code>, <code>composite</code>, <code>screen</code>
</li>
<li>Limited number of powerfull <strong>dataflow</strong> abstractions.<br/>
<code>state</code>, <code>link</code>, <code>channel</code>
</li>
<li>
<strong>Portable</strong> and <strong>replacable</strong> web elements (make 'em once and use in all related projects).</li>
<li>
<strong>Logical "layered" project structure</strong> with easy navigation.</li>
<li>Easier <strong>complexity and growth</strong> control.</li>
<li>
<strong>Explicit</strong> state and state relations with one-way explicit bindings.</li>
<li>Interoperable with <strong>legacy code</strong> (can be implemented on top of other frameworks, see <a href="mr-mig/yaf-angular">yaf-angular</a> for example)</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#scope-of-work" id="user-content-scope-of-work"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Scope of work</h2>
<p>We are aiming to have a specification for <strong>structural</strong> and <strong>behavioural</strong> abstractions to build components.</p>
<p>Those abstractions should have these traits:</p>
<ol>
<li>
<em>Amorphous</em> - Independent from language and preprocessors.</li>
<li>
<em>Prepared</em> - Be usable without external build tools (grunt/gulp) by default.</li>
<li>
<em>Replaceable</em> - Be granular enough to be thrown away easily.</li>
<li>
<em>Statically composable</em> - Be usable in templates without much imperative scripting.</li>
<li>
<em>Well-Defined</em> - Be relatively simple and easy to reason about.</li>
</ol>

        </div>

    </div>]