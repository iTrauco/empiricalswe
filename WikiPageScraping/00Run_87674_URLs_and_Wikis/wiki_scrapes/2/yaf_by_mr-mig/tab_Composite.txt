[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#what-is-composite" id="user-content-what-is-composite"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>What is 'composite'?</h2>
<p>Composite is a <strong>mid-level</strong> building block for your app.<br/>
It is used to <strong>combine elements and other composite</strong> in a customized piece of UI.</p>
<p>It is represented by a custom tag in your markup:</p>
<pre><code>&lt;my-composite state="someState"&gt;&lt;/my-composite&gt;
</code></pre>
<p>The API is pretty much the same, as of <code>element</code>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#how-to-reason-about-it" id="user-content-how-to-reason-about-it"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to reason about it?</h2>
<ul>
<li>Use it for a piece of the page, composed of low-level components.</li>
<li>Composite defines the relations between element <code>states</code> using <code>links</code> and <code>channels</code>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#what-is-the-difference-between-element-and-composite" id="user-content-what-is-the-difference-between-element-and-composite"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>What is the difference between 'element' and 'composite'?</h2>
<p>Roles:</p>
<ul>
<li>Element can modify only <strong>it's internal state</strong>.</li>
<li>Composite makes elements talk to each other.</li>
</ul>
<p>Portability:</p>
<ul>
<li>Element is totally reusable between apps</li>
<li>Composite can be tightly bounded to the app</li>
</ul>
<p>Functional:</p>
<ul>
<li>Composite has access to <code>channels</code> and <code>link</code>.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#usage" id="user-content-usage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Usage</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#definition" id="user-content-definition"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Definition</h3>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">yaf</span>.<span class="pl-en">composite</span>({
  <span class="pl-c"><span class="pl-c">//</span> String.</span>
  <span class="pl-c"><span class="pl-c">//</span> Composite tag name. Should be camelCase. The tag name in template will be 'my-composite'</span>
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>myComposite<span class="pl-pds">'</span></span>, 

  <span class="pl-c"><span class="pl-c">//</span> String. </span>
  <span class="pl-c"><span class="pl-c">//</span>The content of the associated style tag</span>
  styles<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./styles.css<span class="pl-pds">'</span></span>),

  <span class="pl-c"><span class="pl-c">//</span> String. </span>
  <span class="pl-c"><span class="pl-c">//</span> The content of the associated template</span>
  template<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./template.html<span class="pl-pds">'</span></span>), 

  <span class="pl-c"><span class="pl-c">//</span> Map (String : Module|String).</span>
  <span class="pl-c"><span class="pl-c">//</span> The map of Alias Names and module objects to be used with composite's associated logic</span>
  inject<span class="pl-k">:</span> {
     <span class="pl-c"><span class="pl-c">//</span> AMD/CommonJS format, will inject module.exports as ComponentAliasName</span>
     <span class="pl-c"><span class="pl-c">//</span> It's the same as var ComponentAliasName = require('../some-other-component');</span>
    <span class="pl-s"><span class="pl-pds">'</span>ComponentAliasName<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>../some-other-component<span class="pl-pds">'</span></span>),

    <span class="pl-c"><span class="pl-c">//</span> Angular format, will inject MySuperDirective using angular's DI</span>
    <span class="pl-c"><span class="pl-c">//</span> Also, it will add the injected angular-module to dependencies </span>
    <span class="pl-s"><span class="pl-pds">'</span>MySuperDirective<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>my-super-module<span class="pl-pds">'</span></span>,

    <span class="pl-c"><span class="pl-c">//</span> Mixed Angular-CJS/AMD format</span>
    <span class="pl-s"><span class="pl-pds">'</span>MyCjsDirective<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>../path/to/angular-module<span class="pl-pds">'</span></span>).<span class="pl-c1">name</span>
  },

  <span class="pl-c"><span class="pl-c">//</span> Map (String : NonFunction)</span>
  <span class="pl-c"><span class="pl-c">//</span> The default state of the composite. Will be {} if not defined.</span>
  <span class="pl-c"><span class="pl-c">//</span> Will be created automatically if not linked in the template using 'state' attribute.</span>
  state <span class="pl-k">:</span> {
    <span class="pl-c"><span class="pl-c">//</span> Can be referenced inside the template using 'state.someValue'</span>
    someValue<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>xxx<span class="pl-pds">'</span></span>
  },
  
  <span class="pl-c"><span class="pl-c">//</span> Object (String : NonFunction)</span>
  <span class="pl-c"><span class="pl-c">//</span> The default values for the composite options configuration. Will be {} if not defined.</span>
  <span class="pl-c"><span class="pl-c">//</span> Each field is mapped to HTML attribute.</span>
  options <span class="pl-k">:</span> {
     <span class="pl-c"><span class="pl-c">//</span> Can be overridden by DOM-element attribute 'maxlength'</span>
     maxlength <span class="pl-k">:</span> <span class="pl-c1">50</span>
  },

  <span class="pl-c"><span class="pl-c">//</span> Function.</span>
  <span class="pl-c"><span class="pl-c">//</span> The associated composites's logic. Will be called when DOM-element is attached to DOM and linked with it's state.</span>
  <span class="pl-en">ready</span><span class="pl-k">:</span> <span class="pl-k">function</span>(){
     
    <span class="pl-c"><span class="pl-c">//</span> associated DOM-element</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">element</span>;

    <span class="pl-c"><span class="pl-c">//</span> current linked state map</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">state</span>;

    <span class="pl-c"><span class="pl-c">//</span> current parsed options map</span>
    <span class="pl-c1">this</span>.<span class="pl-c1">options</span>;

    <span class="pl-c"><span class="pl-c">//</span> the map of values, available in template. Defaults to {}</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">templateScope</span>;

    <span class="pl-c"><span class="pl-c">//</span> the map of injected components </span>
    <span class="pl-c1">this</span>.<span class="pl-smi">injector</span>;

    <span class="pl-c"><span class="pl-c">//</span> the injected component reference</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">injector</span>.<span class="pl-smi">ComponentAliasName</span>;

    <span class="pl-c"><span class="pl-c">//</span> Function.</span>
    <span class="pl-c"><span class="pl-c">//</span> the map of injected components </span>
    <span class="pl-c1">this</span>.<span class="pl-c1">link</span>;

    <span class="pl-c"><span class="pl-c">//</span> Object.</span>
    <span class="pl-c"><span class="pl-c">//</span> Channels registry object</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">channels</span>;
    
    <span class="pl-c"><span class="pl-c">//</span> Channel.</span>
    <span class="pl-c"><span class="pl-c">//</span> Getting channel from registry by channel name.</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">channels</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">'</span>button-click<span class="pl-pds">'</span></span>)
  }
});
</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#simplest-form" id="user-content-simplest-form"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Simplest form</h3>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">yaf</span>.<span class="pl-en">composite</span>({
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>myComposite<span class="pl-pds">'</span></span>,
  styles<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./styles.css<span class="pl-pds">'</span></span>),
  template<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./template.html<span class="pl-pds">'</span></span>)
});</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#conventions" id="user-content-conventions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Conventions</h2>
<ul>
<li>Composite MUST have some <code>state</code> (controlled by framework, fallback to a default empty object state)</li>
<li>Composite MUST bind it's state to some namespace through HTML state attribute (controlled by user)</li>
<li>Composite CAN change the state of underlying elements directly or via <code>link</code> and <code>channel</code>
</li>
<li>Composite CAN react on channel signals (controlled by framework)</li>
<li>Composite CAN omit channel binding through HTML channel attribute</li>
<li>Composite CAN provide the API by binding elements' <code>state</code> to it's own <code>state</code> (controlled by user)</li>
<li>Composite CAN be replaced by it's template in the resulting markup</li>
</ul>

        </div>

    </div>]