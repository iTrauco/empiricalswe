[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>When the daemon starts, it will load the default or specified config file followed by listening on it's configured port.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#plugin-startup--registration" id="user-content-plugin-startup--registration"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Plugin Startup &amp; Registration</h2>
<p>Based on the list of plugins specified in the config, the daemon will need to attempt to resync with all of the plugins.</p>
<p>If a session file does not exist the program will attempt to execute all of the required plugins, creating the necessary session entries as it goes.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#resuming-sessions" id="user-content-resuming-sessions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Resuming Sessions</h3>
<p>If a session file exists, the program will attempt to communicate with all required plugins and tell the plugin to resync. If we cannot establish communications with a plugin, we will assume it has gone dark (maybe store/check a PID as a last ditch?) and start up a new instance of the plugin.</p>
<p>The plugins will also be able to tell the core that they have restarted and resync in the event they go down.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#registration-process" id="user-content-registration-process"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Registration Process</h3>
<p>When a plugin starts up, it will have to hit the core API and start a handshake / setup a heartbeat.</p>
<p>The handshake will involve something along the lines of:</p>
<ul>
<li>Plugin gets a Unique ID, and a port to run on</li>
<li>Plugin sets up a listener</li>
<li>Plugin will tell Core to test the tunnel</li>
<li>Core will test and setup a heartbeat connection</li>
<li>Plugin sets up a heartbeat back to the core</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#start-event-listeners" id="user-content-start-event-listeners"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Start Event Listeners</h2>
<p>The core will need to read the event table and spin up the necessary Go Routines which will listen and act on triggers.</p>

        </div>

    </div>]