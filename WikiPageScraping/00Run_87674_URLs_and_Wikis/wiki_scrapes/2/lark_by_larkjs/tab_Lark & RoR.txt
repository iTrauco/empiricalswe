[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#lark%E4%B8%8Eror" id="user-content-lark与ror"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Lark与RoR</h1>
<p>Lark在设计之初，就充分参考了RoR的设计。因此，Lark与RoR有许多相通之处，RoR的使用者在接触Lark时，一定会倍感熟悉。然而，Lark并非RoR在nodejs上的完全复制。事实上，RoR已经发展多年，有着自身独特的产生背景、设计理念和实现标准。而Lark作为Web框架的晚辈，肯定会一方面吸收前辈优秀成熟的设计，同时根据自身的特点，提供具有优势竞争力的解决方案。</p>
<p>当然，本文无意引起谁好谁坏的争论，而是旨在通过对比Lark和RoR，剖析两者的设计思路和实现方案，使您对Lark（或许还有RoR，如果你之前不太了解的话）有一个更加深刻的了解，提高学习和使用Lark的效率。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5" id="user-content-设计理念"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>设计理念</h2>
<ul>
<li>
<p>Lark是一款基于Koa的Nodejs框架，主要目标是支撑大流量高并发的Web服务。性能、多人开发模式、架构和可维护性是Lark的关注重点。</p>
</li>
<li>
<p>而RoR是基于Ruby的Web开发框架，其目的是简化Web服务的开发，为开发者提供大量的工具组件，开发者只需要专注于业务的核心部分，写少量的代码即可完成大量的工作。</p>
</li>
</ul>
<p>由上可见，Lark与RoR的关注点是不同的。RoR的主要目的是提高开发者的工作效率，实现软件开发周期的缩短。而Lark则重点关注的是多人同时开发高性能服务的场景。</p>
<p>或许仅凭这2段话，可能还不太好理解。不过不要着急，后面会从分别使用RoR和Lark的过程来细细阐述。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE" id="user-content-创建项目"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>创建项目</h2>
<p>Lark和RoR都提供一键式创建项目的命令：<code>Lark new demo</code>和<code>rails new demo</code>;</p>
<p>当项目创建完毕之后，进入项目目录可以发现，两者均在项目中创建了web服务所需的大部分模块的目录。甚至，无论是<code>lark start</code>还是<code>rails server</code>，都可以立刻执行此demo项目。</p>
<p>（待续）</p>

        </div>

    </div>]