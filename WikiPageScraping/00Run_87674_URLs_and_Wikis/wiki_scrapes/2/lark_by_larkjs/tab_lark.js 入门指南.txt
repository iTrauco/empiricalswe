[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#%E5%89%8D%E8%A8%80" id="user-content-前言"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>前言</h2>
<p>本文针对想从零开始开发 lark.js 程序的初学者。阅读本文并动手实现demo代码后，您就能对lark.js框架有一个基本了解，并可以开始动手写代码了。不过推荐您在使用 lark.js 前最好能有一点 node.js 或其它后端语言的开发经验，这样能够达到事半功倍的效果。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#larkjs-%E6%98%AF%E4%BB%80%E4%B9%88" id="user-content-larkjs-是什么"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>lark.js 是什么</h2>
<p>Lark.js 是一个面向大并发大流量互联网服务的工业级 Node.js 框架[ <a href="https://github.com/larkjs/lark/wiki/Lark-%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1">1</a> ]。它是从一个 10亿级以上 pv 的线上node.js服务抽象出来的一个通用框架。</p>
<p>这里需要注意的是，lark.js 并不是为快速开发设计的框架。lark.js 在设计上采用了路由，分层架构等拆分很细的设计，并且没有像  <code>django</code> 或 <code>ror</code> 一样自己实现一整套完整系统。这些不是lark.js 的重点关注目标。lark.js 的目标是支撑大流量大并发的业务，性能、多人开发模式、架构和可维护性是关注重点。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E5%AE%89%E8%A3%85-larkjs" id="user-content-安装-larkjs"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>安装 lark.js</h2>
<p>首先需要注意的是，由于lark.js使用了node.js里面的新语法和新特性，因此需要 v0.11.14 以上版本的 Node.js才能运行。</p>
<p>Linux 和 Mac OS平台安装:</p>
<p>如果你已经有了node.js环境(并且版本号大于v0.11.14)，那么安装 lark 只需要一句命令</p>
<pre><code>npm install lark -g
</code></pre>
<p>如果你没有安装node.js环境，那么需要先安装node.js。下载链接如下：</p>
<p><a href="http://nodejs.org/dist/v0.11.15/node-v0.11.15-linux-x64.tar.gz" rel="nofollow">http://nodejs.org/dist/v0.11.15/node-v0.11.15-linux-x64.tar.gz</a> (linux)
<a href="http://nodejs.org/dist/v0.11.15/node-v0.11.15-darwin-x64.tar.gz" rel="nofollow">http://nodejs.org/dist/v0.11.15/node-v0.11.15-darwin-x64.tar.gz</a> (Mac OS X)</p>
<p>Windows 平台安装:</p>
<p><a href="http://nodejs.org/dist/v0.11.15/node.exe" rel="nofollow">http://nodejs.org/dist/v0.11.15/node.exe</a> (windows)</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAlarkjs-%E7%A8%8B%E5%BA%8F" id="user-content-新建一个larkjs-程序"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>新建一个lark.js 程序</h2>
<p>Lark 借鉴 Ruby On Rails 的思想，精心设计了各种各样的命令行功能来加速开发。
新建一个 <code>demo</code> 程序，只需在命令行中执行如下命令：</p>
<pre><code>lark new demo
</code></pre>
<p>然后您按提示选择您业务相关的配置就行了。
lark 的这个功能是通过 yeoman 实现的。如果您对 yeoman 熟悉，可以通过它自定义更多高级功能。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E7%BC%96%E5%86%99-demo-%E7%9A%84%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91" id="user-content-编写-demo-的业务逻辑"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>编写 demo 的业务逻辑</h2>
<p>在创建完<code>demo</code>程序后，我们开始编写一个简单的业务。假设我们的任务是用户访问网站首页，页面输出 hello world.可以通过如下步骤完成：</p>
<p>(1)首先我们创建首页的路由</p>
<pre><code>lark create controller demo
</code></pre>
<p>通过该命令lark会自动创建controller/demo/index.js模块，并且其路由路径为/demo。关于路由和下面涉及到的pageService都和 lark.js 的分层思想有关。这个是大型复杂 web service 开发中最常用到的设计模式。后续文档会详细介绍，这里有个印象就好了。</p>
<p>(2)然后我们创建相关的业务逻辑</p>
<pre><code>lark create page demo
</code></pre>
<p>（tip：此时可能提示<code>models/pageService/demo.js</code>这个文件已经存在，那是因为lark new demo时自动创建了此文件。按y覆盖掉即可）</p>
<p>如上所述，<code>pageService</code>和lark.js的分层思想有关，这里先不理会。lark.js 会自动创建 <code>pageService</code> 的代码。我们打开lark.js自动创建好的代码 <code>models/pageService/demo.js</code>，然后将示例代码修改为如下代码：</p>
<pre><code>demo.render = function * () {
    return 'hello world!'
｝
</code></pre>
<p>(3)最后我们把业务逻辑和路由绑定在一起</p>
<p>打开 <code>controllers/demo/index.js</code>, 确保里面的代码如下:</p>
<pre><code>module.exports = function * (next) {
    this.body = yield this.pageServices.demo.render();
    yield next;
}
</code></pre>
<p>到这里，整个 demo 就编写完了。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E8%BF%90%E8%A1%8C%E8%AF%A5%E7%A8%8B%E5%BA%8F" id="user-content-运行该程序"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>运行该程序</h2>
<p>lark.js 集成了开发模式和线上生产模式。开发模式中除了集成了debug日志功能，而且还有热重启(live reload)，前端代码压缩打包，代码风格检查(jshint)等功能。而生产模式则是为性能做了优化，加上了防攻击策略，已及去掉了所有开发模式特有的功能。lark通过简单的命令就可以在两个不同模式间切换。在开发中最简单的方式是执行如下命令：</p>
<pre><code>lark start
</code></pre>
<p>默认情况下，执行该命令会自动切换到开发模式。</p>
<p>你现在可以在<a href="http://localhost:3000/demo%E4%B8%8A%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%80%E5%88%87%E6%AD%A3%E5%B8%B8%EF%BC%8C%E4%BD%A0%E4%BC%9A%E7%9C%8B%E5%88%B0%E9%9D%9E%E5%B8%B8%E7%86%9F%E6%82%89%E7%9A%84'hello" rel="nofollow">http://localhost:3000/demo上查看效果。如果一切正常，你会看到非常熟悉的'hello</a> world'几个字。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-larkjs" id="user-content-进一步深入学习-larkjs"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>进一步深入学习 lark.js</h2>
<p>接下来，会进一步深入的介绍lark.js，相信你很快就能熟知使用lark开发的方式。</p>
<ul>
<li><a href="https://github.com/larkjs/lark/wiki/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">环境配置</a></li>
<li><a href="https://github.com/larkjs/lark/wiki/%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86">路由处理</a></li>
<li><a href="https://github.com/larkjs/lark/wiki/%E7%BC%96%E5%86%99%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91">编写业务逻辑</a></li>
<li><a href="https://github.com/larkjs/lark/wiki/UI,%E6%A8%A1%E6%9D%BF%E5%92%8C%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6">UI,模板和静态文件</a></li>
<li><a href="https://github.com/larkjs/lark/wiki/%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1">访问数据服务</a></li>
<li><a href="https://github.com/larkjs/lark/wiki/%E6%97%A5%E5%BF%97">日志</a></li>
<li><a href="https://github.com/larkjs/lark/wiki/%E6%B5%8B%E8%AF%95">测试</a></li>
<li><a href="https://github.com/larkjs/lark/wiki/%E8%BF%90%E7%BB%B4">运维</a></li>
<li><a href="https://github.com/larkjs/lark/wiki/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8">命令行使用</a></li>
<li><a href="https://github.com/larkjs/lark/wiki/Q-&amp;-A">Q &amp; A</a></li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%B1%8D" id="user-content-推荐书籍"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>推荐书籍</h3>
<p><a href="http://book.douban.com/subject/25768396/" rel="nofollow">深入浅出node.js - by 朴灵</a></p>

        </div>

    </div>]