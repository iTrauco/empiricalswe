[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>I've learned little about how to read floors and elevators, so I made some direct solution:</p>
<h3>
<a aria-hidden="true" class="anchor" href="#for-1" id="user-content-for-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>for #1:</h3>
<pre><code>{
    init: function(elevators, floors) {
        var elevator = elevators[0];
        elevator.on("idle", function() {
            elevator.goToFloor(0);
            elevator.goToFloor(1);
            elevator.goToFloor(2);
        });
    },
    update: function(dt, elevators, floors) {
    }
}
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#for-2" id="user-content-for-2"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>for #2:</h3>
<pre><code>{
    init: function(elevators, floors) {
        var elevator = elevators[0];
        elevator.on("idle", function() {
            elevator.goToFloor(0);
            elevator.goToFloor(1);
            elevator.goToFloor(2);
            elevator.goToFloor(0);
            elevator.goToFloor(3);
            elevator.goToFloor(4);
        });
    },
    update: function(dt, elevators, floors) {
    }
}
</code></pre>
<p>passes at a chance about 1/2 or so.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#for-3" id="user-content-for-3"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>for #3:</h3>
<pre><code>THE SAME AS #2
</code></pre>
<p>even easier, it passes at nearly 100% percent.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#for-4" id="user-content-for-4"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>for #4:</h3>
<pre><code>{
    init: function(elevators, floors) {
        var elevator = elevators[0]; // Let's use the first elevator
        var elevator1 = elevators[1];
        // Whenever the elevator is idle (has no more queued destinations) ...
        elevator.on("idle", function() {
            elevator.goToFloor(0);
            elevator.goToFloor(2);
            elevator.goToFloor(4);
            elevator.goToFloor(6);
            elevator.goToFloor(0);
            elevator.goToFloor(1);
            elevator.goToFloor(3);
            elevator.goToFloor(5);
            elevator.goToFloor(7);
        });
        elevator1.on("idle", function() {
            elevator1.goToFloor(0);
            elevator1.goToFloor(1);
            elevator1.goToFloor(3);
            elevator1.goToFloor(5);
            elevator1.goToFloor(7);
            elevator1.goToFloor(0);
            elevator1.goToFloor(2);
            elevator1.goToFloor(4);
            elevator1.goToFloor(6);
        });
    },
        update: function(dt, elevators, floors) {
            // We normally don't need to do anything here
        }
}
</code></pre>
<p>The order doesn't mean much in fact, we just need belief to try a score times or more...</p>
<h3>
<a aria-hidden="true" class="anchor" href="#for-5" id="user-content-for-5"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>for #5:</h3>
<pre><code>{
    init: function(elevators, floors) {
        var elevator = elevators[0]; // Let's use the first elevator
        var elevator1 = elevators[1];
        var elevator2 = elevators[2];
        var elevator3 = elevators[3];
        // Whenever the elevator is idle (has no more queued destinations) ...
        elevator.on("idle", function() {
            this.goToFloor(0);
            this.goToFloor(1);
            this.goToFloor(2);
            this.goToFloor(0);
            this.goToFloor(3);
            this.goToFloor(4);
            this.goToFloor(5);
        });
        elevator1.on("idle", function() {
            this.goToFloor(0);
            this.goToFloor(1);
            this.goToFloor(2);
            this.goToFloor(0);
            this.goToFloor(3);
            this.goToFloor(4);
            this.goToFloor(5);
        });
        elevator2.on("idle", function() {
            this.goToFloor(0);
            this.goToFloor(1);
            this.goToFloor(2);
            this.goToFloor(0);
            this.goToFloor(3);
            this.goToFloor(4);
            this.goToFloor(5);
        });
        elevator3.on("idle", function() {
            this.goToFloor(0);
            this.goToFloor(1);
            this.goToFloor(2);
            this.goToFloor(0);
            this.goToFloor(3);
            this.goToFloor(4);
            this.goToFloor(5);
        });
    },
    update: function(dt, elevators, floors) {
        // We normally don't need to do anything here
    }
}
</code></pre>
<p>Hmmmmmm.... Also belief-oriented, but we noticed the fact that ground floor has more guests, so we visit it more frequently.
<strong>I don't know how long could this way go, but if we can make it simple, we make it simple.</strong></p>

        </div>

    </div>]