[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#controller" id="user-content-controller"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Controller</h1>
<p>Controller can be represented by callable or by object with action methods.
In both cases, returned value must implement <code>ResponseInterface</code>, otherwise exception will be thrown.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#as-closure" id="user-content-as-closure"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>As closure</h2>
<p>If controller is represented by callable, the situation is simple, callable is injected with <code>App</code> instance and returns <code>ResponseInterface</code>.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-k">function</span>(<span class="pl-c1">\Moss\Kernel\</span><span class="pl-c1">AppAppInterface</span> <span class="pl-smi">$app</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-c1">\Moss\Http\Response\</span><span class="pl-c1">Response</span>(<span class="pl-s"><span class="pl-pds">'</span>Hello world<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#class-with-actions" id="user-content-class-with-actions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Class with actions</h2>
<p>Similar thing happens in case of class controllers, <code>App</code> instance is injected into class constructor.
Therefore, action parameters can be used as needed, but must be optional, otherwise <code>App</code> won't be able to call such action.</p>
<pre><code>class SomeController
{
    public function __controller(\Moss\Kernel\AppInterface $app)
    {
        // ...
    }

    public function some()
    {
        // ...
    }
}
</code></pre>
<p>If controller has <code>::before()</code> and <code>::after(\Moss\Http\Response\ResponseInterface $Response = null)</code> methods, they will be called accordingly - before and after requested action.</p>

        </div>

    </div>]