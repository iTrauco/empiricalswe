[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#app" id="user-content-app"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>App</h1>
<p><code>App</code> short for <code>Application</code> and is the frameworks heart.
This is the place where everything happens - where incoming requests are handled and all defined components live.</p>
<p>Generally all configuration routes, components etc. will be read from configuration but sometime it is convenient to add it manually.
<code>App</code> providers few methods for fast definitions:</p>
<ul>
<li>
<code>::route($name, $pattern, $controller, $arguments = array(), $methods = array())</code> - to define routes</li>
<li>
<code>::component($name, $definition, $shared = false)</code> - defines component or property stored in container</li>
<li>
<code>::listener($event, $definition, $priority = null)</code> - defines listener for event</li>
</ul>
<p>For example this will register route for <code>/</code>:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$app</span><span class="pl-k">-&gt;</span>route(<span class="pl-s"><span class="pl-pds">'</span>main<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>/<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> () <span class="pl-k">use</span> (<span class="pl-k">&amp;</span><span class="pl-smi">$dispatchLoop</span>) { <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-c1">Response</span>(<span class="pl-s"><span class="pl-pds">'</span>Hello World<span class="pl-pds">'</span></span>); });</span></pre></div>
<p>This example will add listeners for all kernel events:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$app</span><span class="pl-k">-&gt;</span>listener(</span>
<span class="pl-s1">        [</span>
<span class="pl-s1">            <span class="pl-s"><span class="pl-pds">'</span>kernel.request<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">            <span class="pl-s"><span class="pl-pds">'</span>kernel.route<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">            <span class="pl-s"><span class="pl-pds">'</span>kernel.controller<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">            <span class="pl-s"><span class="pl-pds">'</span>kernel.response<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">            <span class="pl-s"><span class="pl-pds">'</span>kernel.send<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">            <span class="pl-s"><span class="pl-pds">'</span>kernel.403<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">            <span class="pl-s"><span class="pl-pds">'</span>kernel.404<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">            <span class="pl-s"><span class="pl-pds">'</span>kernel.500<span class="pl-pds">'</span></span></span>
<span class="pl-s1">        ],</span>
<span class="pl-s1">        <span class="pl-k">function</span> (<span class="pl-c1">ContainerInterface</span> <span class="pl-smi">$container</span>, <span class="pl-smi">$subject</span>, <span class="pl-smi">$message</span>, <span class="pl-smi">$eventName</span>) <span class="pl-k">use</span> (<span class="pl-k">&amp;</span><span class="pl-smi">$dispatchLoop</span>) {</span>
<span class="pl-s1">            <span class="pl-smi">$dispatchLoop</span>[] <span class="pl-k">=</span> <span class="pl-smi">$eventName</span>;</span>
<span class="pl-s1">        }</span>
<span class="pl-s1">    );</span>
<span class="pl-s1">    <span class="pl-smi">$app</span><span class="pl-k">-&gt;</span>listener(</span>
<span class="pl-s1">        <span class="pl-s"><span class="pl-pds">'</span>kernel.send<span class="pl-pds">'</span></span>,</span>
<span class="pl-s1">        <span class="pl-k">function</span> () <span class="pl-k">use</span> (<span class="pl-k">&amp;</span><span class="pl-smi">$dispatchLoop</span>) {</span>
<span class="pl-s1">            <span class="pl-smi">$output</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>;</span>
<span class="pl-s1">            <span class="pl-smi">$output</span> <span class="pl-k">.=</span> <span class="pl-c1">PHP_EOL</span> <span class="pl-k">.</span> <span class="pl-s"><span class="pl-pds">'</span>---<span class="pl-pds">'</span></span> <span class="pl-k">.</span> <span class="pl-c1">PHP_EOL</span>;</span>
<span class="pl-s1">            <span class="pl-smi">$output</span> <span class="pl-k">.=</span> <span class="pl-c1">implode</span>(<span class="pl-c1">PHP_EOL</span>, <span class="pl-smi">$dispatchLoop</span>);</span>
<span class="pl-s1">            <span class="pl-smi">$output</span> <span class="pl-k">.=</span> <span class="pl-c1">PHP_EOL</span> <span class="pl-k">.</span> <span class="pl-s"><span class="pl-pds">'</span>---<span class="pl-pds">'</span></span> <span class="pl-k">.</span> <span class="pl-c1">PHP_EOL</span>;</span>
<span class="pl-s1">            <span class="pl-c1">echo</span> <span class="pl-c1">nl2br</span>(<span class="pl-smi">$output</span>);</span>
<span class="pl-s1">        }</span>
<span class="pl-s1">    );</span></pre></div>
<p>And there is most important method <code>::run()</code> that will handle received request and return response (<code>ResponseInterface</code>).
So, handling request looks like this:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$app</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-c1">\Moss\Kernel\</span><span class="pl-c1">App</span>();</span>
<span class="pl-s1">    <span class="pl-smi">$app</span><span class="pl-k">-&gt;</span>run()<span class="pl-k">-&gt;</span>send();</span></pre></div>
<p>Where <code>$config</code> is an instance of <code>ConfigInterface</code> containing your applications configuration.</p>
<p>And <em>fancy</em> way:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    (<span class="pl-k">new</span> <span class="pl-c1">\Moss\Kernel\</span><span class="pl-c1">App</span>()<span class="pl-k">-&gt;</span>run()<span class="pl-k">-&gt;</span>send();</span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#components--methods" id="user-content-components--methods"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Components &amp; methods</h2>
<p>Also, App provides easy access to components:</p>
<ul>
<li>
<code>::container()</code> - gives access to <code>\Moss\Container\ContainerInterface</code> instance</li>
<li>
<code>::config()</code> - is for <code>\Moss\Config\ConfigInterface</code>
</li>
<li>
<code>::router()</code> - is <code>\Moss\Http\Router\RouterInterface</code> instance</li>
<li>
<code>::dispatcher()</code> - gives access to <code>\Moss\Dispatcher\DispatcherInterface</code>
</li>
<li>
<code>::session()</code> - <code>\Moss\Http\Session\SessionInterface</code>
</li>
<li>
<code>::request()</code> - <code>\Moss\Http\Request\RequestInterface</code>
</li>
</ul>
<p>Every other component can be resolved trough <code>::get()</code> method.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$request</span> <span class="pl-k">=</span> <span class="pl-smi">$app</span><span class="pl-k">-&gt;</span>get(<span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>);</span></pre></div>
<p>There is also convenient method to fire events <code>::fire($event, $subject, $message)</code>:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$result</span> <span class="pl-k">=</span> <span class="pl-smi">$app</span><span class="pl-k">-&gt;</span>fire(<span class="pl-smi">$event</span>, <span class="pl-smi">$comment</span>, <span class="pl-s"><span class="pl-pds">'</span>Comment added<span class="pl-pds">'</span></span>);</span></pre></div>

        </div>

    </div>]