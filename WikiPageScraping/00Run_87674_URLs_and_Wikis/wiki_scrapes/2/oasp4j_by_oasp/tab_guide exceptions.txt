[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <div>
<div>Table of Contents</div>
<ul>
<li>
<a href="#exception-handling">Exception Handling</a>
<ul>
<li><a href="#exception-principles">Exception Principles</a></li>
<li><a href="#exception-example">Exception Example</a></li>
<li><a href="#handling-exceptions">Handling Exceptions</a></li>
</ul>
</li>
</ul>
</div>
<h1 id="user-content-exception-handling">
<a aria-hidden="true" class="anchor" href="#exception-handling" id="user-content-exception-handling"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Exception Handling</h1>
<div>
<h2 id="user-content-exception-principles">
<a aria-hidden="true" class="anchor" href="#exception-principles" id="user-content-exception-principles"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Exception Principles</h2>
<div>
<div>
<p>For exceptions we follow these principles:</p>
</div>
<div>
<ul>
<li>
<p>We only use exceptions for <em>exceptional</em> situations and not for programming control flows, etc. Creating an exception in Java is expensive and hence you should not do it just for testing if something is present, valid or permitted. In the latter case design your API to return this as a regular result.</p>
</li>
<li>
<p>We use unchecked exceptions (RuntimeException)</p>
</li>
<li>
<p>We distinguish <em>internal exceptions</em> and <em>user exceptions</em>:</p>
<div>
<ul>
<li>
<p>Internal exceptions have technical reasons. For unexpected and exotic situations it is sufficient to throw existing exceptions such as IllegalStateException. For common scenarios a own exception class is reasonable.</p>
</li>
<li>
<p>User exceptions contain a message explaining the problem for end users. Therefore we always define our own exception classes with a clear, brief but detailed message.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Our own exceptions derive from an exception base class supporting</p>
<div>
<ul>
<li>
<p><a href="http://m-m-m.sourceforge.net/apidocs/net/sf/mmm/util/exception/api/NlsRuntimeException.html#getUuid%28%29" rel="nofollow">unique ID per instance</a></p>
</li>
<li>
<p><a href="http://m-m-m.sourceforge.net/apidocs/net/sf/mmm/util/exception/api/NlsRuntimeException.html#getCode%28%29" rel="nofollow">Error code per class</a></p>
</li>
<li>
<p><a href="http://m-m-m.sourceforge.net/apidocs/net/sf/mmm/util/exception/api/NlsThrowable.html#getNlsMessage%28%29" rel="nofollow">message templating</a> (see <a href="guide-i18n">I18N</a>)</p>
</li>
<li>
<p><a href="http://m-m-m.sourceforge.net/apidocs/net/sf/mmm/util/exception/api/NlsRuntimeException.html#isForUser%28%29" rel="nofollow">distinguish between <em>user exceptions</em> and <em>internal exceptions</em></a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div>
<p>All this is offered by <a href="http://m-m-m.sourceforge.net/apidocs/net/sf/mmm/util/exception/api/package-summary.html#documentation" rel="nofollow">mmm-util-core</a> that we propose as solution.</p>
</div>
</div>
</div>
<div>
<h2 id="user-content-exception-example">
<a aria-hidden="true" class="anchor" href="#exception-example" id="user-content-exception-example"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Exception Example</h2>
<div>
<div>
<p>Here is an exception class from our sample application:</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">IllegalEntityStateException</span> <span class="pl-k">extends</span> <span class="pl-e">RestaurantBusinessException</span> {

  <span class="pl-k">private</span> <span class="pl-k">static</span> <span class="pl-k">final</span> <span class="pl-k">long</span> serialVersionUID <span class="pl-k">=</span> <span class="pl-c1">1L</span>;

  <span class="pl-k">public</span> <span class="pl-en">IllegalEntityStateException</span>(<span class="pl-smi">RestaurantEntity</span> <span class="pl-v">entity</span>, <span class="pl-smi">Object</span> <span class="pl-v">state</span>) {

    <span class="pl-c1">super</span>(createBundle(<span class="pl-smi">NlsBundleRestaurantRoot</span><span class="pl-k">.</span>class)<span class="pl-k">.</span>errorIllegalEntityState(entity, state));
  }

  <span class="pl-k">public</span> <span class="pl-en">IllegalEntityStateException</span>(<span class="pl-smi">RestaurantEntity</span> <span class="pl-v">entity</span>, <span class="pl-smi">Object</span> <span class="pl-v">currentState</span>, <span class="pl-smi">Object</span> <span class="pl-v">newState</span>) {

    <span class="pl-c1">super</span>(createBundle(<span class="pl-smi">NlsBundleRestaurantRoot</span><span class="pl-k">.</span>class)<span class="pl-k">.</span>errorIllegalEntityStateChange(entity, currentState, newState));
  }
}</pre></div>
</div>
</div>
<div>
<p>The message templates are defined in the interface NlsBundleRestaurantRoot as following:</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">interface</span> <span class="pl-en">NlsBundleRestaurantRoot</span> <span class="pl-k">extends</span> <span class="pl-e">NlsBundle</span> {

  <span class="pl-k">@NlsBundleMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>The entity {entity} is in state {state}!<span class="pl-pds">"</span></span>)
  <span class="pl-smi">NlsMessage</span> <span class="pl-en">errorIllegalEntityState</span>(<span class="pl-k">@Named</span>(<span class="pl-s"><span class="pl-pds">"</span>entity<span class="pl-pds">"</span></span>) <span class="pl-smi">Object</span> <span class="pl-v">entity</span>, <span class="pl-k">@Named</span>(<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span>) <span class="pl-smi">Object</span> <span class="pl-v">state</span>);

  <span class="pl-k">@NlsBundleMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>The entity {entity} in state {currentState} can not be changed to state {newState}!<span class="pl-pds">"</span></span>)
  <span class="pl-smi">NlsMessage</span> <span class="pl-en">errorIllegalEntityStateChange</span>(<span class="pl-k">@Named</span>(<span class="pl-s"><span class="pl-pds">"</span>entity<span class="pl-pds">"</span></span>) <span class="pl-smi">Object</span> <span class="pl-v">entity</span>, <span class="pl-k">@Named</span>(<span class="pl-s"><span class="pl-pds">"</span>currentState<span class="pl-pds">"</span></span>) <span class="pl-smi">Object</span> <span class="pl-v">currentState</span>, <span class="pl-k">@Named</span>(<span class="pl-s"><span class="pl-pds">"</span>newState<span class="pl-pds">"</span></span>) <span class="pl-smi">Object</span> <span class="pl-v">newState</span>);
}</pre></div>
</div>
</div>
</div>
</div>
<div>
<h2 id="user-content-handling-exceptions">
<a aria-hidden="true" class="anchor" href="#handling-exceptions" id="user-content-handling-exceptions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Handling Exceptions</h2>
<div>
<div>
<p>For catching and handling exceptions we follow these rules:</p>
</div>
<div>
<ul>
<li>
<p>We do not catch exceptions just to wrap or to re-throw them.</p>
</li>
<li>
<p>If we catch an exception and throw a new one, we always <strong>have</strong> to provide the original exception as <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#getCause%28%29" rel="nofollow">cause</a> to the constructor of the new exception.</p>
</li>
<li>
<p>At the entry points of the application (e.g. a service operation) we have to catch and handle all throwables. This is done via the <em>exception-facade-pattern</em> via an explicit facade or aspect. The OASP4J already provides ready-to-use implementations for this such as <a href="https://github.com/oasp/oasp4j/blob/develop/oasp4j-rest/src/main/java/io/oasp/module/rest/service/impl/RestServiceExceptionFacade.java">RestServiceExceptionFacade</a>. The exception facade has to…​</p>
<div>
<ul>
<li>
<p>log all errors (user errors on info and technical errors on error level)</p>
</li>
<li>
<p>convert the error to a result appropriable for the client and secure for <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure" rel="nofollow">Sensitive Data Exposure</a>. Especially for security exceptions only a generic security error code or message may be revealed but the details shall only be logged but <strong>not</strong> be exposed to the client. All <em>internal exceptions</em> are converted to a generic error with a message like:</p>
<div>
<blockquote>
<div>
<p>An unexpected technical error has occurred. We apologize any inconvenience. Please try again later.</p>
</div>
</blockquote>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow"><img alt="Creative Commons License Agreement" data-canonical-src="http://i.creativecommons.org/l/by-nd/4.0/88x31.png" src="https://camo.githubusercontent.com/171d004f9ccb9199e35ac8ec3d99ede916037a9f/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d6e642f342e302f38387833312e706e67"/></a><br/><span>This documentation</span> is licensed under the <a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow">Creative Commons License (Attribution-NoDerivatives 4.0 International)</a>.</p>

          </div>
        </div>
    </div>]