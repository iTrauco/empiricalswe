[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <div>
<div>Table of Contents</div>
<ul>
<li>
<a href="#bean-mapping">Bean-Mapping</a>
<ul>
<li><a href="#bean-mapper-dependency">Bean-Mapper Dependency</a></li>
<li><a href="#bean-mapper-usage">Bean-Mapper Usage</a></li>
</ul>
</li>
</ul>
</div>
<h1 id="user-content-bean-mapping">
<a aria-hidden="true" class="anchor" href="#bean-mapping" id="user-content-bean-mapping"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Bean-Mapping</h1>
<div>
<p>For decoupling you sometimes need to create separate objects (beans) for a different view. E.g. for an external service you will use a <a href="guide-transferobject">transfer-object</a> instead of the <a href="guide-dataaccess-layer#entity">persistence entity</a> so internal changes to the entity do not implicitly change or break the service.</p>
</div>
<div>
<p>Therefore you have the need to map similar objects what creates a copy. This also has the benefit that modifications to the copy have no side-effect on the original source object. However, to implement such mapping code by hand is very tedious and error-prone (if new properties are added to beans but not to mapping code):</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-smi">PersonTo</span> mapPerson(<span class="pl-smi">PersonEntity</span> source) {
  <span class="pl-smi">PersonTo</span> target <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">PersonTo</span>();
  target<span class="pl-k">.</span>setFirstName(source<span class="pl-k">.</span>getFirstName());
  target<span class="pl-k">.</span>setLastName(source<span class="pl-k">.</span>getLastName());
  <span class="pl-c1">...</span>
  <span class="pl-k">return</span> target;
}</pre></div>
</div>
</div>
<div>
<p>Therefore we are using a BeanMapper for this purpose that makes our lives a lot easier.</p>
</div>
<div>
<h2 id="user-content-bean-mapper-dependency">
<a aria-hidden="true" class="anchor" href="#bean-mapper-dependency" id="user-content-bean-mapper-dependency"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Bean-Mapper Dependency</h2>
<div>
<div>
<p>To get access to the BeanMapper we use this dependency in our POM:</p>
</div>
<div>
<div>
<div class="highlight highlight-text-xml"><pre>    &lt;<span class="pl-ent">dependency</span>&gt;
      &lt;<span class="pl-ent">groupId</span>&gt;io.oasp.java&lt;/<span class="pl-ent">groupId</span>&gt;
      &lt;<span class="pl-ent">artifactId</span>&gt;oasp4j-beanmapping&lt;/<span class="pl-ent">artifactId</span>&gt;
    &lt;/<span class="pl-ent">dependency</span>&gt;</pre></div>
</div>
</div>
</div>
</div>
<div>
<h2 id="user-content-bean-mapper-usage">
<a aria-hidden="true" class="anchor" href="#bean-mapper-usage" id="user-content-bean-mapper-usage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Bean-Mapper Usage</h2>
<div>
<div>
<p>Then we can get the BeanMapper via <a href="guide-dependency-injection">dependency-injection</a> what we typically already provide by an abstract base class (e.g. AbstractUc). Now we can solve our problem very easy:</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">PersonEntity</span> person <span class="pl-k">=</span> <span class="pl-c1">...</span>;
<span class="pl-c1">...</span>
<span class="pl-k">return</span> getBeanMapper()<span class="pl-k">.</span>map(person, <span class="pl-smi">PersonTo</span><span class="pl-k">.</span>class);</pre></div>
</div>
</div>
<div>
<p>There is also additional support for mapping entire collections.</p>
</div>
<div>
<p>Dozer has been configured as Spring bean in the file src/main/resources/config/app/common/beans-dozer.xml.</p>
</div>
</div>
</div>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow"><img alt="Creative Commons License Agreement" data-canonical-src="http://i.creativecommons.org/l/by-nd/4.0/88x31.png" src="https://camo.githubusercontent.com/171d004f9ccb9199e35ac8ec3d99ede916037a9f/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d6e642f342e302f38387833312e706e67"/></a><br/><span>This documentation</span> is licensed under the <a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow">Creative Commons License (Attribution-NoDerivatives 4.0 International)</a>.</p>

          </div>
        </div>
    </div>]