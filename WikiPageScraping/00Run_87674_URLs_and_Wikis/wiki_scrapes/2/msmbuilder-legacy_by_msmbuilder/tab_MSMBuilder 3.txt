[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#abstract" id="user-content-abstract"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Abstract</h2>
<p>This document is a collaborative wiki page for brainstorming the direction of new development efforts towards msmbuilder 3.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#overall-design-targets" id="user-content-overall-design-targets"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Overall Design Targets</h2>
<ul>
<li>Enhanced usability
<ul>
<li>Robust</li>
<li>Informative error messages</li>
<li>Sanity checking of inputs in library functions</li>
<li>Assume inexperienced users</li>
</ul>
</li>
<li>Broaden Applicability
<ul>
<li>Not just protein folding</li>
<li>Conformational change / protein ligand binding</li>
</ul>
</li>
<li>Better error analysis
<ul>
<li>Bayesian methods?</li>
<li>Add script for Nina's method</li>
</ul>
</li>
<li>Better integration
<ul>
<li>MSMAccelerator</li>
<li>MD Codes</li>
<li>Folding@home</li>
</ul>
</li>
<li>New visualization tools
<ul>
<li>Plot eigenvector components by state index?</li>
<li>Plot eigenvector components by observables?</li>
<li>Generally: Now that I've built it, what does this MSM mean?</li>
<li>Can we interact directly with OpenMM or PyMol to provide visualization tools?</li>
<li>At the very least, output an MSM trajectory since many users know how to analyze that already</li>
</ul>
</li>
<li>Clean up code
<ul>
<li>Rewrite the <code>Trajectory</code> code.
<ul>
<li>"Smart" slicing and keeping track of the time index of every frame.</li>
<li>Use new PDB reader</li>
<li>Potentially use pandas</li>
</ul>
</li>
<li>
<a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself" rel="nofollow">DRY</a> the scripts. To the extent that they are "thin" wrappers for library functions, can they be auto-generated? (<a href="https://github.com/SimTk/msmbuilder/issues/159">issue 159</a>)</li>
<li>Rewrite all of the non-RMSD C code (asa, rg, etc) in cython.</li>
</ul>
</li>
<li>Representations instead of metrics
<ul>
<li>Many users want to be able to calculate things like dihedral angles or native contacts</li>
<li>Currently the easiest way to do this is non-intuitive (metric.prepare_trajectory)</li>
</ul>
</li>
<li>Improve performance and scalability
<ul>
<li>New datasets are becoming expensive to analyze, we need to be able to scale up efficiently</li>
<li>This includes improvements in:
<ul>
<li>Parallelization</li>
<li>Memory management</li>
<li>New algorithms (e.g. streaming clustering)</li>
</ul>
</li>
</ul>
</li>
<li>Improve documentation
<ul>
<li>Bring the latex tutorial onto readthedocs.org</li>
<li>Increase the amount of narrative content on readthedocs.org</li>
</ul>
</li>
<li>New test systems and benchmarks
<ul>
<li>Muller potential (?)</li>
<li>BPTI (?)</li>
</ul>
</li>
<li>Better understand how others are using MSMBuilder
<ul>
<li>Send out updates about releases/new features</li>
<li>Create a direct way to ask what users need/want in MSMBuilder</li>
</ul>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#specific-steps" id="user-content-specific-steps"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Specific Steps</h2>
<ul>
<li>
<p>DONE: <a href="https://gist.github.com/piscisaureus/3342247">Issue #156</a> || Create an MSMBuilder-users email list</p>
</li>
<li>
<p><a href="https://github.com/SimTk/msmbuilder/issues/163">Issue #163</a> ||  Change how cluster centers are stored on disk. Instead of saving the coordinates, saved the indices of the traj/frame. As we move towards a more "feature"-centric approach with dimensionality reduction, this helps to avoid the inverse problem of not knowing the all-atom coordinates of the cluster centers since we only save them to disk in their representation in the space they were clustered in.</p>
</li>
<li>
<p>Goals for PDB and Trajectory reader: see various open and closed issues: PDB IO should preserve all residue numbering found in PDBs: issue 67.  PDB IO should work with single atom PDB files if necessary: issue #6.  PDB IO should work with multi-frame PDBS: issue #31.  Contain timestep metadata: issue #58.  Also issue #41.</p>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#questions" id="user-content-questions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Questions</h2>
<ul>
<li>
<p>Should all of the scripts be accessible under a single command? (<a href="https://github.com/SimTk/msmbuilder/issues/159">issue 159</a>)</p>
<ul>
<li>$ msmbuilder cluster</li>
<li>$ msmbuilder setup</li>
<li>$ msmbuilder assign</li>
<li>RTM prefers yes.</li>
<li>KAB: I'm open to the idea, not 100% sure.  It would be cute to have everything accessible from one place, but I want to be sure that navigating the text-based menu system is clean.  For example, one thing I don't like about Tinker and Gromacs is that their menus are sometimes just a "helpstring" and other times a user prompt.  Another cute idea might be to print out the Python code for every action that is done via the Script interface--a way to help ease users into a more advanced interface.</li>
<li>CRS: I like this idea, we could even shorten it to msmb. This provides an easy way to see possible scripts. @KAB: that's an interesting idea, but could get verbose very quickly, perhaps we could do something like "Counting transitions (msmbuilder.MSMLib.get_counts_from_assignments(...))" so the user could slowly learn that interacting with the library isn't too difficult.</li>
</ul>
</li>
<li>
<p>Is it time to re-work our "best practices" to better include conformational change?  TICA?  The MSMB3 paper might be a nice place to do a quantitative comparison of metrics and clustering algorithms, with the goal of providing a "recipe" for various situations (folding, conformational change, etc).</p>
<ul>
<li>CRS: I think to do this well, we need to know what the recipe is, and so we need a developer to apply MSMB to new problems. I can try tICA with BPTI and GPCR from Shaw's group, perhaps.</li>
<li>CRS: Also, as for tICA, there are still some open questions that need to be resolved before we can really recommend it to others:
<ul>
<li>Can we calculate the tIC's from Folding@home datasets (i.e. many short(ish) trajectories)</li>
<li>Can we determine the best correlation lag time given some dataset</li>
<li>Are we throwing out too much by only picking 8 degrees of freedom?
<ul>
<li>For instance, when I build an MSM trajectory the frames seem very different</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Should we reorganize the directory layout of the source code? Currently we have two main directories, <code>src/python</code> and <code>src/ext</code>. If you look at how a project like numpy or scipy is organized, the directory structure is by <em>logical</em> grouping instead. Like package/subpackage. It's not based on what language the code is in. This is, in RTM's opinion, related to the idea of bringing the current c code into cython and making it more "public" and robust.</p>
<ul>
<li>CRS: I think this is a good idea, we already have the metrics directory, and will have more as we add new clustring algorithms / error analysis / visualization tools.</li>
</ul>
</li>
<li>
<p>How should we handle trajectory loading? Especially as we move towards a more "feature"ized representation, should we save those features to disk as opposed to reloading them every time? How can the <code>metric</code> object cooardinate trajectory loading so that we only load the atoms/regions that we care about and save memory?</p>
</li>
<li>
<p>Currently, the main class that is used over and over again to actually do something is the distance metric. I (CRS) think the better way to approach this is to have the main class be a representation (the name could be  different [feature_vector, etc.]). Then instead of having a metric on dihedral angles, you would just use the Vectorized metric on the dihedral representation. This makes it more intuitive on the user side when they want to interact with their data. For instance in order to calculate dihedral angles of a protein trajectory (traj) we would need to do this:</p>
<pre><code>  dihedral_metric = msmbuilder.metrics.Dihedral(angles='phi/psi')
  dih_traj = dihedral_metric.prepare_trajectory(traj)
</code></pre>
</li>
</ul>
<ul>
<li>
<p>It would be more intuitive to do this:</p>
<pre><code>  dihedral_representation = msmbuilder.representations.Dihedral(angles='phi/psi')
  dih_traj = dihedral_representation.get_representation(traj)
</code></pre>
</li>
</ul>

        </div>

    </div>]