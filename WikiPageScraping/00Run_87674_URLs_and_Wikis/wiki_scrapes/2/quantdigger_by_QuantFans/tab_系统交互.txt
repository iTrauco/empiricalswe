[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%9D%97" id="user-content-交互模块"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>交互模块</h2>
<p>我们的系统现在有三大块组成：界面，Shell终端，Backend。quantdigger/demo/main.py启动后，系统会打开与之对应的三个进程。它们之间通过事件引擎来完成同步或异步的调用操作。下面详细介绍三个模块的功能。</p>
<h3>
<a aria-hidden="true" class="anchor" href="#backend" id="user-content-backend"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Backend</h3>
<p>系统的后台程序，也是回测引擎所在的模块。它接收来自界面或者Shell的指令，并执行相应的服务请求。它的主要功能包括：加载特点交易品种数据，指标及策略。</p>
<h3>
<a aria-hidden="true" class="anchor" href="#%E7%95%8C%E9%9D%A2%E6%A8%A1%E5%9D%97" id="user-content-界面模块"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>界面模块</h3>
<p>负责显示数据，比如k线，分时线等。显示指标线，策略的回测结果及买卖点等。用户通过鼠标及快捷键与界面交互，界面通过事件引擎把请求发到Backend，并显示最终的处理结果。</p>
<h3>
<a aria-hidden="true" class="anchor" href="#shell%E6%A8%A1%E5%9D%97%E5%8F%8A%E6%8E%A5%E5%8F%A3" id="user-content-shell模块及接口"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Shell模块及接口</h3>
<p>用户除了界面，还可以通过终端命令和Backend交互。目前系统支持通过ipython或者notebook做为交互终端。终端进入ipthon以后，用户可以
通过<code>qd</code>对象的<code>help</code>函数显示系统支持的所有接口。</p>
<h4>
<a aria-hidden="true" class="anchor" href="#get_symbol--%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%90%88%E7%BA%A6" id="user-content-get_symbol--获取系统数据中所有的合约"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>get_symbol()  获取系统数据中所有的合约。</h4>
<h4>
<a aria-hidden="true" class="anchor" href="#get_pcon-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%91%A8%E6%9C%9F%E5%90%88%E7%BA%A6%E4%BF%A1%E6%81%AF" id="user-content-get_pcon-获取系统中所有的周期合约信息"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>get_pcon() 获取系统中所有的周期合约信息。</h4>
<h4>
<a aria-hidden="true" class="anchor" href="#get_barpcon--%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%91%A8%E6%9C%9F%E5%90%88%E7%BA%A6%E7%9A%84k%E7%BA%BF%E6%95%B0%E6%8D%AE" id="user-content-get_barpcon--获取指定周期合约的k线数据"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>get_bar(pcon)  获取指定周期合约的k线数据。</h4>
<h4>
<a aria-hidden="true" class="anchor" href="#pcontract-str-%E5%91%A8%E6%9C%9F%E5%90%88%E7%BA%A6" id="user-content-pcontract-str-周期合约"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>pcontract (str): 周期合约</h4>
<h4>
<a aria-hidden="true" class="anchor" href="#get_algo-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E7%AD%96%E7%95%A5" id="user-content-get_algo-获取系统中所有的策略"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>get_algo(): 获取系统中所有的策略。</h4>
<h4>
<a aria-hidden="true" class="anchor" href="#get_tech-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E6%8A%80%E6%9C%AF%E6%8C%87%E6%A0%87" id="user-content-get_tech-获取系统中所有的技术指标"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>get_tech(): 获取系统中所有的技术指标。</h4>
<h4>
<a aria-hidden="true" class="anchor" href="#run_algoname--%E8%BF%90%E8%A1%8C%E6%9F%90%E4%B8%AA%E6%8C%87%E5%AE%9A%E7%9A%84%E7%AD%96%E7%95%A5%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C" id="user-content-run_algoname--运行某个指定的策略并返回结果"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>run_algo(name)  运行某个指定的策略，并返回结果。</h4>
<pre><code>name (str): 策略名
</code></pre>
<h4>
<a aria-hidden="true" class="anchor" href="#run_techname-%E8%BF%90%E8%A1%8C%E6%9F%90%E4%B8%AA%E6%8C%87%E5%AE%9A%E7%9A%84%E6%8A%80%E6%9C%AF%E6%8C%87%E6%A0%87%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C" id="user-content-run_techname-运行某个指定的技术指标并返回结果"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>run_tech(name) 运行某个指定的技术指标，并返回结果。</h4>
<pre><code>name (str): 指标名
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#%E4%BA%8B%E4%BB%B6%E5%BC%95%E6%93%8E" id="user-content-事件引擎"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>事件引擎：</h2>
<p>事件引擎的基类是一个抽象类<code>EventEngine</code>,定义了不同实现的事件引擎必须提供的接口。其中<code>register</code>,<code>unregister</code>, <code>emit</code>三个主要的接口函数。用户可以通过<code>register</code>和<code>unregister</code>来注册和取消对特定事件的监听回调。<code>emit</code>是抽象的事件发送接口，子类必须重载实现该函数。<code>Timer</code>是个时间事件发生器，如果需要，它会每隔一个固定的事件间隔向事件引擎发送一个“时间事件”。</p>
<p><img alt="" src="https://github.com/QuantFans/quantdigger/raw/master/doc/images/qd_event2.png"/></p>
<p><code>QueueEventEngine</code>是事件引擎的一个具体实现，它的事件消息存放在python自带的<code>Queue</code>结构中，因此这个事件引擎只支持多线程间的事件通信，不支持多进程和多机器通信。因为只用于单进程中，所以只需要引用同一个类实例就可以实现事件通信。
<code>ZMQEventEngine</code>是基于<a href="www.zeromq.org">ZMQ</a>通信的事件引擎，因此支持多线程，多进程，多机器间的事件通信。因为每个事件引擎的客户端都必须带有数据事件缓存队列，所以它的内部引用了以<code>Queue</code>为事件缓存队列的<code>QueueEventEngine</code>实例。用户间通过多个类的实例进行事件通信，其中一个类实例即是服务端，又是客户端，负责转发事件。它的底层传输基于<a href="www.zeromq.org">ZMQ</a>的pull/push及pub/sub模型。</p>
<p><img alt="" src="https://github.com/QuantFans/quantdigger/raw/master/doc/images/qd_zmq2.png"/></p>
<p>事件引擎使用<code>Event</code>类实例作为传递的参数，底层的具体实现会把<code>Event</code>实例转化为其支持的传输格式。比如zmq传送的消息是文本：消息头 ＋ json文本。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#rpc%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8" id="user-content-rpc远程调用"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>RPC远程调用</h2>
<p>系统三大模块间使用基于事件引擎的RPC来完成同步调用和异步调用。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E4%B8%8A%E4%B8%80%E8%8A%82%E7%BB%98%E5%9B%BE%E6%8C%87%E6%A0%87---%E4%B8%8B%E4%B8%80%E8%8A%82-%E7%95%8C%E9%9D%A2-" id="user-content-上一节绘图指标---下一节-界面-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><em>上一节</em> <a class="internal present" href="/QuantFans/quantdigger/wiki/%E7%BB%98%E5%9B%BE%E6%8C%87%E6%A0%87">绘图指标</a>        <em>下一节</em>  <a class="internal present" href="/QuantFans/quantdigger/wiki/%E7%95%8C%E9%9D%A2">界面</a>  </h2>

        </div>

    </div>]