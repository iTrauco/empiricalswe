[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Form components are any type of component known as a form's child-element.
MTForm allows you to create any form component or html-content. But direct Method() invocation is supported for major components while Custom() function allows creation of any sort of component.</p>
<p>List of Form Components Creator:</p>
<ul>
<li><code>Input()</code></li>
<li><code>Hidden()</code></li>
<li><code>Password()</code></li>
<li><code>Textarea()</code></li>
<li><code>Submit()</code></li>
<li><code>Button()</code></li>
<li><code>Radios()</code></li>
<li><code>Checkboxes()</code></li>
<li><code>Select()</code></li>
<li><code>File()</code></li>
<li><code>Form()</code></li>
<li><code>FormWithFile()</code></li>
</ul>
<p>Non-Form Component Creator:</p>
<ul>
<li><code>Msg()</code></li>
<li><code>Custom()</code></li>
<li><code>AttachLabel()</code></li>
<li><code>HtmlAfter()</code></li>
<li><code>HtmlBefore()</code></li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#inputname-value-arguments" id="user-content-inputname-value-arguments"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Input(name, value, arguments)</h3>
<p><strong>Definition:</strong> Creates a form input.</p>
<ul>
<li>name <code>{string}</code> the [attribute] name of the component.</li>
<li>value <code>{string|mixed}</code> the [attribute] value of the component</li>
<li>arguments <code>{object}</code> an object containing key&amp;value pairs with key
representing the name of the attribute and value
as the value of the attribute.</li>
</ul>
<p><strong>Example:</strong></p>
<p><code>$mtf.Input("email", "email@example.com", { placeholder : "Your Email..."});</code></p>
<p>Flexible argument handling allows creation of form components to be easy. For example, you can skip name and value, or value and pass only the main object. Note that "name" and "value" parameters are a shortcut for key&amp;value of the arguments object. All of the following three function calls return/create the same component:</p>
<p><code>$mtf.Input("username", "defaultValue", { placeholder : "Your Email..."} );</code></p>
<p><code>$mtf.Input("username", { value : "defaultValue", placeholder : "Your Email..." );</code></p>
<p><code>$mtf.Input({ name : 'username', value : "defaultValue", placeholder : "Your Email..."});</code></p>
<p>This flexible-argument handling is applicable to all methods of form component creation.</p>
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#hiddenname-value-arguments" id="user-content-hiddenname-value-arguments"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Hidden(name, value, arguments)</h3>
<p><strong>Definition:</strong> Creates a hidden input.</p>
<ul>
<li>name <code>{string}</code> the [attribute] name of the component.</li>
<li>value <code>{string|mixed}</code> the [attribute] value of the component</li>
<li>arguments <code>{object}</code> an object containing key&amp;value pairs with key
representing the name of the attribute and value
as the value of the attribute.</li>
</ul>
<p><strong>Example:</strong></p>
<p><code>$mtf.Input("_token", "54ew515rfds4getr4g6s6d4vfdf", { "data-id" : 25 });</code></p>
<h3>
<a aria-hidden="true" class="anchor" href="#passwordname-value-arguments" id="user-content-passwordname-value-arguments"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Password(name, value, arguments)</h3>
<p><strong>Definition:</strong> Creates a password input.</p>
<ul>
<li>name <code>{string}</code> the [attribute] name of the component.</li>
<li>value <code>{string|mixed}</code> the [attribute] value of the component</li>
<li>arguments <code>{object}</code> an object containing key&amp;value pairs with key
representing the name of the attribute and value
as the value of the attribute.</li>
</ul>
<p><strong>Example:</strong></p>
<p><code>$mtf.Password("password", "", { placeholder : "Your Password"});</code></p>
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#textareaname-innervalue-arguments" id="user-content-textareaname-innervalue-arguments"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Textarea(name, innerValue, arguments)</h3>
<p><strong>Definition:</strong> Creates a textarea.</p>
<ul>
<li>name <code>{string}</code> the [attribute] name of the component.</li>
<li>value <code>{string|mixed}</code> the [attribute] value of the component</li>
<li>arguments <code>{object}</code> an object containing key&amp;value pairs with key
representing the name of the attribute and value
as the value of the attribute.</li>
</ul>
<p><strong>Example:</strong></p>
<p><code>$mtf.Submit("message", "", { placeholder : "Write Your Message"});</code></p>
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#submitname-value-arguments" id="user-content-submitname-value-arguments"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Submit(name, value, arguments)</h3>
<p><strong>Definition:</strong> Creates a submit button.</p>
<ul>
<li>name <code>{string}</code> the [attribute] name of the component.</li>
<li>value <code>{string|mixed}</code> the [attribute] value of the component</li>
<li>arguments <code>{object}</code> an object containing key&amp;value pairs with key
representing the name of the attribute and value
as the value of the attribute.</li>
</ul>
<p><strong>Example:</strong></p>
<p><code>$mtf.Submit("submit-form", "Send", { id : "submit-form"});</code></p>
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#buttonname-innervalue-arguments" id="user-content-buttonname-innervalue-arguments"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Button(name, innerValue, arguments)</h3>
<p><strong>Definition:</strong> Creates a submit button.</p>
<ul>
<li>name <code>{string}</code> the [attribute] name of the component.</li>
<li>value <code>{string|mixed}</code> the [attribute] value of the component</li>
<li>arguments <code>{object}</code> an object containing key&amp;value pairs with key
representing the name of the attribute and value
as the value of the attribute.</li>
</ul>
<p><strong>Example:</strong></p>
<p><code>$mtf.Submit("check-username", "Check Username", { id : "check-username"});</code></p>
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#radioname-arguments" id="user-content-radioname-arguments"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Radio(name, arguments)</h3>
<p><strong>Definition:</strong> Creates a set of radio inputs. This function follows a specific scheme of configuration
object. The attribute-object is down to the key "attrs" of the configuration object.</p>
<ul>
<li>
<em>**name **</em>{string} the [attribute] name of the component set. All radios would have this name. it can be delegated to the "name" key of the configuration object.</li>
</ul>
<p>-<em>**arguments **</em>{object} the configuration object must have the following keys:
<code>"name"</code> {string} is the name of the radio set. Do no set this key if you have already passed the name to
first parameter name.</p>
<p><code>"values"</code> {array} an array of values. The number of radios is determined by the length of this array. Because each value of this array is treated as a radio-input.</p>
<p><code>"labels"</code>{array} an array labels. The length of this array should be the same as the length of "values" array. Because each label is attached to a one radio. Each label follows the radio in the same index as itself.</p>
<p><code>"attrs"</code> this is the attribute object which is turned into a string, and is used in all "Creator" functions.</p>
<p><code>"default"</code>{scalar} the value of this key must be one of the values of the "values" array. It sets the default checked Radio.</p>
<p><strong>Example:</strong></p>
<p><code>$mtf.Submit("check-username", "Check Username", { id : "check-username"});</code></p>
<hr/>

        </div>

    </div>]