[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#developer-guide" id="user-content-developer-guide"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Developer Guide</h1>
<p>Thanks for your interest in contributing to OpenLayers 3 development. Our
preferred means of receiving contributions is through <a href="https://help.github.com/articles/using-pull-requests">pull
requests</a>.</p>
<p>This page describes what you need to know to contribute code to ol3 as
a developer.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#contributor-license-agreement" id="user-content-contributor-license-agreement"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Contributor License Agreement</h2>
<p>Before accepting a contribution, we ask that you provide us a Contributor
License Agreement.  If you are making your contribution as part of work for
your employer, please follow the guidelines on submitting a <a href="http://www.openlayers.org/ccla.txt" rel="nofollow">Corporate
Contributor License Agreement</a>. If you are
making your contribution as an individual, you can submit a digital <a href="https://docs.google.com/spreadsheet/viewform?formkey=dGNNVUJEMXF2dERTU0FXM3JjNVBQblE6MQ" rel="nofollow">Individual
Contributor License Agreement</a>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#setting-up-development-environment" id="user-content-setting-up-development-environment"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Setting up development environment</h2>
<p>You will obviously start by
<a href="https://github.com/openlayers/ol3/fork_select">forking</a> the ol3 repository.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#development-dependencies" id="user-content-development-dependencies"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Development dependencies</h3>
<p>The minimum requirements are:</p>
<ul>
<li>Git</li>
<li>Python 2.6 or 2.7</li>
<li>Java 7 (JRE and JDK)</li>
<li>
<a href="http://phantomjs.org/" rel="nofollow">PhamtomJS</a> 1.6 or higher</li>
<li><a href="https://developers.google.com/closure/utilities/docs/linter_howto" rel="nofollow">Closure Linter</a></li>
</ul>
<p>The executables <code>git</code>, <code>gjslint</code>, <code>java</code>, <code>jar</code>, <code>python</code>, and <code>phamtomjs</code>
should be in your <code>PATH</code>.</p>
<p>Optionally, you can also install JSDoc 3. Installing JSDoc 3 is necessary
if you want to run the full integration suite.</p>
<p>To get JSDoc from GitHub:</p>
<pre><code>$ git clone git://github.com/jsdoc3/jsdoc.git
</code></pre>
<p>Again, the <code>jsdoc</code> executable, located at the root of <code>jsdoc</code> repository,
should be in your <code>PATH</code>.</p>
<p>If you are want to modify the WebGL shaders, you'll need
<a href="https://code.google.com/p/glsl-unit/" rel="nofollow">glsl-unit</a>.  Get it with git:</p>
<pre><code>$ git clone https://code.google.com/p/glsl-unit/ build/glsl-unit
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#travis-ci" id="user-content-travis-ci"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Travis CI</h3>
<p>Although not mandatory it is recommended to set up Travis CI for your ol3 fork.
For that go to your ol3 fork's Service Hooks page and set up the Travis hook.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#working-with-the-build-tool" id="user-content-working-with-the-build-tool"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Working with the build tool</h2>
<p>As an ol3 developer you will need to use the <code>build.py</code> Python script. This is
the script to use to run the linter, the compiler, the tests, etc.  Windows users
can use <code>build.cmd</code> which is a thin wrapper around <code>build.py</code>.</p>
<p>The <code>build.py</code> script is equivalent to a Makefile. It is actually based on
<a href="https://github.com/twpayne/pake/">pake</a>, which is a simple implementation of
<code>make</code> in Python.</p>
<p>The usage of the script is:</p>
<pre><code>$ ./build.py &lt;target&gt;
</code></pre>
<p>where <code>&lt;target&gt;</code> is the name of the build target you want to execute. For
example:</p>
<pre><code>$ ./build.py test
</code></pre>
<p>The main build targets are <code>serve</code>, <code>lint</code>, <code>build</code>, <code>test</code>, and <code>check</code>. The
latter is a meta-target that basically runs <code>lint</code>, <code>build</code>, and <code>test</code>.</p>
<p>The <code>serve</code> target starts the <a href="http://plovr.com/" rel="nofollow">Plovr</a> web server. You'll
need to start the Plovr server for running the examples and the tests. More
information on that further down.</p>
<p>Other targets include <code>doc</code> and <code>integration-test</code>. The latter is the target
used on Travis CI. See ol3's <a href="https://github.com/openlayers/ol3/blob/master/.travis.yml">Travis configuration file</a>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#running-the-check-target" id="user-content-running-the-check-target"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Running the <code>check</code> target</h2>
<p>The <code>check</code> target is to be run before pushing code to GitHub and opening pull
requests. Branches that don't pass <code>check</code> won't pass the integration tests,
and have therefore no chance of being merged into <code>master</code>. The <code>check</code> target
runs the tests, so it requires that the Plovr server run.</p>
<p>To start the Plovr web server use:</p>
<pre><code>$ ./build.py serve
</code></pre>
<p>To run the <code>check</code> target use:</p>
<pre><code>$ ./build.py check
</code></pre>
<p>If you get this error</p>
<pre><code>ReferenceError: Can't find variable: goog

  file:///home/elemoine/public_html/openlayers/ol3/test/ol.html:67
Failed to start mocha: Init timeout
</code></pre>
<p>it means that you don't have the Plovr server running.</p>
<p>If you want to run the full suite of integration tests, see "Running the integration
tests" below.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#running-examples" id="user-content-running-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Running examples</h2>
<p>To run the examples  you first need to start the Plovr web server:</p>
<pre><code>$ ./build.py serve
</code></pre>
<p>Then, either open one of the example html files from the <code>examples</code> directory
directly in your browser, or start a simple web server, for example:</p>
<pre><code>$ python -mSimpleHTTPServer
</code></pre>
<p>and explore the <code>examples/</code> directory, for example by opening
<a href="http://localhost:8000/examples/side-by-side.html" rel="nofollow">http://localhost:8000/examples/side-by-side.html</a>.</p>
<p>You can turn off compilation by appending <code>?mode=RAW</code> to the URL, for example
<a href="http://localhost:8000/examples/side-by-side.html?mode=RAW" rel="nofollow">http://localhost:8000/examples/side-by-side.html?mode=RAW</a>. (By default mode
is <code>ADVANCED</code>.)</p>
<p>Run examples without Plovr:</p>
<p>The examples can also be run against the <code>ol.js</code> standalone lib, without Plovr,
just like the examples
<a href="http://openlayers.github.com/ol3/master/examples/">hosted</a> on GitHub. Start by
executing the <code>host-examples</code> build target:</p>
<pre><code>$ ./build.py host-examples
</code></pre>
<p>This target performs a number of things:</p>
<ol>
<li>Build <code>ol.js</code>, <code>ol-simple.js</code>, <code>ol-whitespace.js</code>, and <code>ol.css</code>,</li>
<li>Create the examples index page,</li>
<li>Extract the Closure Library from the Plovr JAR,</li>
<li>Copy everything to <code>build/gh-pages/&lt;branch_name&gt;/</code>, where <code>&lt;branch_name&gt;</code> is the name of the local checked out Git branch.</li>
</ol>
<p>After running <code>host-examples</code> you can now open the examples index page in the browser, for example: <a href="http://localhost:8000/build/gh-pages/master/examples/" rel="nofollow">http://localhost:8000/build/gh-pages/master/examples/</a>.</p>
<p>To make an example use <code>ol-simple.js</code> or <code>ol-whitespace.js</code> instead of <code>ol.js</code>
append <code>?mode=simple</code> or <code>?mode=whitespace</code> to the example URL.</p>
<p>Append <code>?mode=debug</code> or <code>?mode=raw</code> to make the example work in full debug mode. In
full debug mode the OpenLayers and Closure scripts are loaded individually by
the Closure Library's <code>base.js</code> script (which the example page loads and
executes before any other script).</p>
<h2>
<a aria-hidden="true" class="anchor" href="#running-tests" id="user-content-running-tests"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Running tests</h2>
<p>Run the Plovr web server (see above), and either open the <code>test/ol.html</code> file
in the browser (e.g. <a href="http://localhost:8000/test/ol.html" rel="nofollow">http://localhost:8000/test/ol.html</a>), or run <code>./build.py test</code> on the console (headless testing with PhantomJS, make sure to install it
first from <a href="http://phantomjs.org/download.html" rel="nofollow">http://phantomjs.org/download.html</a>).</p>
<p>See also the test-specific <a href="../blob/master/test/README.md">README</a>.</p>
<p>If you get this error</p>
<pre><code>ReferenceError: Can't find variable: goog

  file:///home/elemoine/public_html/openlayers/ol3/test/ol.html:67
Failed to start mocha: Init timeout
</code></pre>
<p>it means that you don't have the Plovr server running.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#running-the-integration-tests" id="user-content-running-the-integration-tests"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Running the integration tests</h2>
<p>When you submit a pull request the <a href="https://travis-ci.org/" rel="nofollow">Travis continuous integration
server</a> will run a full suite of tests, including
building all versions of the library and checking that all of the examples
work.  You will receive an email with the results, and the status will be
displayed in the pull request.  If you want to run the integration tests
locally, then you'll need to make sure that Plovr is running if it isn't
already, and then start the tests:</p>
<pre><code>$ ./build.py integration-test
</code></pre>
<p>Running the full suite of integration tests currently takes 5-10 minutes.</p>
<p>This makes sure that your commit won't break the build. It also runs JSDoc3 to
make sure that there are no invalid API doc directives.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#adding-examples" id="user-content-adding-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Adding examples</h2>
<p>Adding functionality often implies adding one or several examples. This
section provides explanations related to adding examples.</p>
<p>The examples are located in the <code>examples</code> directory. Adding a new example
implies creating two files in this directory, an <code>.html</code> file and a <code>.js</code> file.
See <code>examples/simple.html</code> and <code>examples/simple.js</code> for instance.</p>
<p>The <code>.html</code> file needs to include a script tag with
<code>loader.js?id=&lt;example_name&gt;</code> as its <code>src</code>. For example, if the two files for
the example are <code>myexample.js</code> and <code>myexample.html</code> then the script tag's <code>src</code>
should be set to <code>myexample</code>.</p>
<p>You can use <code>simple.js</code> and <code>simple.html</code> as templates for new examples.</p>
<p><code>build.py serve</code> should be stopped and restarted for the
<code>loader.js?id=&lt;example_name&gt;</code> script tag to refer to a valid URL. <code>build.py serve</code> triggers the <code>examples</code> target which creates a Plovr JSON file for each
example.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#use-of-the-goog-namespace-in-examples" id="user-content-use-of-the-goog-namespace-in-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Use of the <code>goog</code> namespace in examples</h3>
<p>Short story: the OL3 examples should not use the <code>goog</code> namespace, except
for <code>goog.require</code>.</p>
<p>Longer story: we want that the OL3 examples work in multiple modes: with the
standalone lib (which has implications of the symbols and properties we
export), with Plovr in ADVANCED mode, and with Plovr in RAW (debug) mode.</p>
<p>Running the examples with Plovr makes it mandatory to declare dependencies with
<code>goog.require</code> statements.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#writing-good-commit-messages" id="user-content-writing-good-commit-messages"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Writing good commit messages</h2>
<p>We follow <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html" rel="nofollow">http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html</a>
for the formatting of commit messages.</p>
<p>Git commit message should look like:</p>
<pre><code>Header line: explaining the commit in one line

Body of commit message is a few lines of text, explaining things
in more detail, possibly giving some background about the issue
being fixed, etc etc.

The body of the commit message can be several paragraphs, and
please do proper word-wrap and keep columns shorter than about
74 characters or so. That way "git log" will show things
nicely even when it's indented.

Further paragraphs come after blank lines.
</code></pre>
<p>Please keep the header line short, no more than 50 characters.</p>

        </div>

    </div>]