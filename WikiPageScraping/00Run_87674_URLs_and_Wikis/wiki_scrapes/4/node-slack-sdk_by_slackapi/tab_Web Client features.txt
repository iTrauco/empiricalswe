[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>An overview of features of the <code>WebClient</code> object beyond making simple HTTP requests.</p>
<ul>
<li>
<strong>Automatic Retries</strong>: The client will automatically retry messages when the request fails, the response indicates being rate-limited (respecting the server's <code>Retry-After</code> header), or general server errors. The retry parameters are configurable.</li>
<li>
<strong>Proxy Support</strong>: Exposes an API to <a href="https://www.npmjs.com/package/https-proxy-agent" rel="nofollow"><code>HttpsProxyAgent</code></a> to create an alternative <code>transport</code> in order to proxy traffic via another HTTP server. This currently only supports HTTP tunnels.</li>
<li>
<strong>Request Queuing</strong>: Manages a queue of requests in order to conserve resources and to implement automatic retries. The concurrency parameters are configurable.</li>
<li>
<strong>Decorated Responses</strong>: Values that are returned as part of headers such as <code>X-Oauth-Scopes</code> and <code>X-Accepted-Oauth-Scopes</code> are added onto the JSON response as properties (as <code>scopes</code> and <code>acceptedScopes</code>).</li>
<li>
<strong>Request Serialization</strong>: Requests are usually sent with method POST and <code>Content-Type: application/x-www-form-urlencoded</code>. But some of the values in the body require JSON serialization into a string before serialization of the body into url-encoded data (e.g. attachments and unfurls). The client handles this serialization and allows the user to just use JSON.</li>
</ul>
<ul>
<li>
<strong>File Handling</strong>: One of the only times a request needs to set a different <code>Content-Type</code> is when uploading a file (not using the <code>content</code> shortcut), in which case it should be set to <code>multipart/form-data</code>. The client also helps handle Buffers and Streams for files (inherited from the <a href="https://www.npmjs.com/package/request#forms" rel="nofollow"><code>request</code></a> transport).</li>
</ul>
<ul>
<li>
<strong>Promise/Callback Hybrid</strong>: Allows users of this client to work with either Promises or callback functions for async control flow.</li>
<li>
<strong>Web API Methods:</strong> The client defines JavaScript methods for all of the Slack Web API methods. These methods all follow a convention for the signature.</li>
<li>
<strong>Logging:</strong> Logs information at several log levels. Logging function can be configured.</li>
<li>
<strong>Pluggable Transport:</strong> The default HTTP "transport" uses the popular <a href="https://www.npmjs.com/package/request" rel="nofollow"><code>request</code></a> module. The client allows this to be replaced, which is mostly useful for testing.</li>
<li>
<strong>User Agent Instrumentation:</strong> The client reports information about itself via the <code>User-Agent</code> request header. The format is <code>@slack:client/${package version} ${os}/${os version} node/${node version}</code>
</li>
<li>
<strong>Configurable API URL:</strong> The client has a <code>slackAPIUrl</code> configuration property which can be used to change the base URL of requests sent to the API.</li>
<li>
<strong>Lifecycle Events</strong>: <strong>TODO</strong> document the lifecycle events of a WebClient</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#api-design-notes" id="user-content-api-design-notes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>API Design Notes</h2>
<p>Individual methods (called facets) purposely separate the required arguments from the optional arguments because this design allows optional arguments to be introduced without API breaking changes. One might propose that all arguments be passed in an object the way the optional arguments are passed, but that design necessitates more syntax for the caller on simple calls which use the defaults.</p>
<p><strong>NOTE</strong>: this is a WIP, feel free to contribute edits.</p>

        </div>

    </div>]