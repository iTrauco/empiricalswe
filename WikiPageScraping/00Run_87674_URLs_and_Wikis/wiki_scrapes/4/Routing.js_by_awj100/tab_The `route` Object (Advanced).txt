[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Several of the methods and properties exposed by Routing.js expose a <code>route</code> object. While knowledge of this object is not required for using Routing.js it will aid in understanding how Routing.js works.</p>
<p>The following properties are exposed by the <code>route</code> object:</p>
<ul>
<li><a href="#user-content-action">action</a></li>
<li><a href="#user-content-doBefore">doBefore</a></li>
<li><a href="#user-content-doLeaving">doLeaving</a></li>
<li><a href="#user-content-fromCache">fromCache</a></li>
<li><a href="#user-content-mandatory">mandatory</a></li>
<li><a href="#user-content-mandWithOpts">mandWithOpts</a></li>
<li><a href="#user-content-params">params</a></li>
<li><a href="#user-content-path">path</a></li>
<li><a href="#user-content-segments">segments</a></li>
</ul>
<p>The following functions are exposed by the <code>route</code> object</p>
<ul>
<li><a href="#user-content-before">before</a></li>
<li><a href="#user-content-leaving">leaving</a></li>
<li><a href="#user-content-run">run</a></li>
<li><a href="#user-content-to">to</a></li>
</ul>
<p>Before describing each of the above members, here is a summary of how Routing.js operates. Note also that <em>path template</em> refers to the text describing a route which is passed to <code>Routing.map()</code>.</p>
<ol>
<li>When a call to <code>Routing.map(path template)</code> is made, the specified <em>prototype-path</em> parameter is fragmented into <em>segments</em>.</li>
<li>These _segments- are then checked to determine whether they are static text segments, parameter segments or optional parameter segments.</li>
<li>A <code>route</code> object is created using the information from steps 1 and 2, and added to <code>routes.defined</code>.</li>
<li>When a new path has been entered into the browser's address bar, this triggers an event inside Routing.js which then captures the hash portion of the URL.</li>
</ol>
<ul>
<li>The <code>routes.cache</code> array is checked to determine whether this path/hash has previously been visited.</li>
<li>If no <code>route</code> object has been obtained from the cache then the hash portion is compared to the <code>route</code> objects in <code>routes.defined</code>.</li>
</ul>
<ol start="5">
<li>If a matching <code>route</code> object has been obtained then the functions associated with that object are then called.</li>
<li>If no matching <code>route</code> object was obtained then <code>routes.fallback</code> is checked. If this property contains a <code>route</code> object then the functions associated with this object are then called.</li>
</ol>
<p>Now that the steps of the process are understood, here follows a description of each member on the <code>route</code> object.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#action" id="user-content-action"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>action</h3>
<p>Contains the function to be called when this route is navigated to. This is the same function which is passed via <code>routes.map().to()</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#dobefore" id="user-content-dobefore"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>doBefore</h3>
<p>Contains an array of functions which should be called prior to the function referenced by <a href="#user-content-action"><code>action</code></a>. This is the same function or array of functions which may be passed via <code>routes.map().before()</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#doleaving" id="user-content-doleaving"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>doLeaving</h3>
<p>Contains a function which should be called when the user has navigated away from a route. This is the same function which may be passed via <code>routes.map().leaving()</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#fromcache" id="user-content-fromcache"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>fromCache</h3>
<p>A boolean property which indicates whether this <code>route</code> object was obtained from the <code>routes.cache</code> array or whether its segments were matched against the current path. The value of this property is only relevant when this <code>route</code> object has been obtained from <code>routes.current</code>, <code>routes.previous</code>, or via the <code>this</code> scope object inside one of the handler functions passed into the <code>before</code>, <code>to</code>, or <code>leaving</code> methods (the <code>this</code> scope object is actually the same as <code>routes.current</code>).</p>
<h3>
<a aria-hidden="true" class="anchor" href="#mandatory" id="user-content-mandatory"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>mandatory</h3>
<p>A number detailing how many mandatory parameters (<em>i.e.</em>, those parameters which <em>must</em> be matched by the path) exist within the path template described by this <code>route</code> object. The primary purpose of this property is to optimise the route matching process.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#mandwithopts" id="user-content-mandwithopts"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>mandWithOpts</h3>
<p>The total number of parameters (<em>i.e.</em>, those parameters which <em>must</em> be matched by the path as well as those which are optional) which exist within the path template described by this <code>route</code> object. The primary purpose of this property is to optimise the route matching process.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#params" id="user-content-params"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>params</h3>
<p>An object containing the parameter objects from the path. The value of this property is only relevant when this <code>route</code> object has been obtained from <code>routes.current</code>, <code>routes.previous</code>, or via the <code>this</code> scope object inside one of the handler functions passed into the <code>before</code>, <code>to</code>, or <code>leaving</code> methods (the <code>this</code> scope object is actually the same as <code>routes.current</code>).</p>
<h3>
<a aria-hidden="true" class="anchor" href="#path" id="user-content-path"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>path</h3>
<p>Contains the <em>template path</em> which was specified by <code>Routing.map(template path)</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#segments" id="user-content-segments"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>segments</h3>
<p>An array of objects as described in step 1 of the above summary. Each <code>segment</code> object contains the following properties</p>
<ul>
<li>
<code>segment</code> - depending upon the <code>type</code> (below) this can either be the static text from the <em>path template</em> or the name of a parameter (mandatory or optional).</li>
<li>
<code>type</code> - indicates the type of segment and records this as
<ul>
<li>0 - static (text) segment</li>
<li>1 - mandatory parameter</li>
<li>2 - optional parameter</li>
</ul>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#before" id="user-content-before"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>before</h3>
<p>A function which accepts either a function or an array of functions which are called prior to the route being actioned. See <a href="https://github.com/awj100/Routing.js/wiki/Getting-Started#the-before-method-and-execution-halting">the <code>before</code> method and Execution Halting</a>.</p>
<p>This function returns the context <code>route</code> object, which encourages method chaining.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#leaving" id="user-content-leaving"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>leaving</h3>
<p>A function which is called when a route is being navigated away from. See <a href="https://github.com/awj100/Routing.js/wiki/Getting-Started#the-leaving-method">the <code>leaving</code> method</a>.</p>
<p>This function returns the context <code>route</code> object, which encourages method chaining.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#run" id="user-content-run"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>run</h3>
<p>This method is called internally when the user 'lands' upon a route. This calls the route-specific and then the global <code>before</code> functions, then the function which was passed via <code>route.to()</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#to" id="user-content-to"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>to</h3>
<p>Accepts a function which is called when the user 'lands' upon a route. The difference between the <code>to</code> and <code>run</code> functions is that <code>to should be passed a function which will be called when the time comes, whereas</code>run<code>is called internally to execute the functions passed via</code>before<code>and</code>to`.</p>
<p>This function returns the context <code>route</code> object, which encourages method chaining.</p>

        </div>

    </div>]