[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The hashtag("#") forms the bases if defining routes with Routing.js.  It is compatible with all modern browsers, and even some that are not-so-modern.  To get started, all you need to do is define a route.  A route can be any string prepended with a hash, such as:a</p>
<pre><code>#/my/first/route
#!/hashbang
#kittens
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#binding-routes" id="user-content-binding-routes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Binding Routes</h2>
<p>Routing.js provides the <code>Routing</code> object. It offers several functions, but before we get ahead of ourselves let's just look at defining a route:</p>
<pre><code>// Use an anonymous function
Routing.map("#!/my/first/route")
       .to(function(){
           alert("Hello, World!");
       });
    
// Or define one and use it
function hello_world(){
    alert("Hello, World!");
}
Routing.map("#!/my/first/route")
       .to(hello_world);
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#route-parameters" id="user-content-route-parameters"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Route Parameters</h2>
<p>What good would a routing system be if it didn't allow you to use parameters? If you provide a route that contains a :token, that token will match anything, as long as the rest of the route matches as well. You can access the parameters inside your methods via the this.params object:</p>
<pre><code>Routing.map("#!/users/:name")
       .to(function(){
           alert("Username: " + this.params['name'].value);
       });

// or alternatively
Routing.map("#!/users/:name")
       .to(function(){
           alert("Username: " + this.params.name.value);
       });
</code></pre>
<p>The above route will match any of the following hrefs:</p>
<pre><code>#!/users/andrew
#!/users/27
</code></pre>
<p>Route parameters can be tremendously useful but should be used with care. More details of how to use parameters with Routing.js can be found <a href="https://github.com/awj100/Routing.js/wiki/Parameters">on this page</a>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#aspect-oriented-programming" id="user-content-aspect-oriented-programming"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Aspect Oriented Programming</h2>
<p>In addition to defining methods that will be executed when a route is activated, you can define methods that will be called before a route is activated, and after a route is left. This can be done via the <code>before</code> and <code>leaving</code> methods respectively. They work exactly the same as the <code>to</code> method:</p>
<pre><code>// Let's add an `before` method to one of our routes
Routing.map("#!/my/first/route")
       .before(function(){
           alert("Enter, minions!");
       });
    
// You can also chain the methods together
Routing.map("#!/hashbang/route")
       .before(fade_in)
       .to(function(){
           alert("Method chaining is great!");
       })
       .leaving(fade_out);
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#the-before-method-and-execution-halting" id="user-content-the-before-method-and-execution-halting"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>The <code>before</code> method and Execution Halting</h3>
<p>In some cases, you may want to perform multiple actions before an action is taken, and depending on their results, cancel the action altogether. For this reason, Routing.js supports multiple <code>before</code> actions, which can be assigned individually or as an array:</p>
<pre><code>Routing.map("#!/my/first/route")
       .before(function(){
           alert("First one!");
       })
       .before([
           function(){
               alert("Second!");
               return false;
           },
           function(){
               alert("And third!");
           }
       ]);
    
Routing.map("#!/my/first/route")
       .to(function(){
           alert("Action!")
       });
</code></pre>
<p>The methods are executed first-in-first-out, and if any of them returns false, the execution chain is immediately halted. In the example above, the third <code>before</code> method, as well as the actual action, will never get called, because the second one explicitly returns false.</p>
<p>The <code>before</code> method will also be passed the route parameters.</p>
<pre><code>Routing.map("#!/my/route/:user_id")
       .before(function() {
           var user_id = this.params["user_id"];
           if (user_id == 0) {
               return false;    // abort this action
           }
       })
       ...
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#the-leaving-method" id="user-content-the-leaving-method"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>The <code>leaving</code> method</h3>
<p>Similar to <code>before</code>, Routing.js allows the specifying of <em>a</em> method which will be called when a route is being left, <em>i.e.</em>, when a subsequent route is called. Unlike <code>before</code>, <code>leaving</code> allows only a singular method to be specified.</p>
<pre><code>Routing.map("#!/my/first/route")
       .to(do_page_1)
       .leaving(do_clearup);
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#global-before-and-leaving-methods" id="user-content-global-before-and-leaving-methods"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Global <code>before</code> and <code>leaving</code> methods</h3>
<p>While it's possible to specify <code>before</code> and <code>leaving</code> methods on a <em>per route</em> basis, there may be cases where an action should always be taken before or after a route is visited. A typical scenario might involve adding an overlay or mask, or providing some sort of animated transition effect. In such cases, rather than specifying such a method call on every route, it's possible to tell Routing.js that such a method should be called before or after <em>all</em> routes.</p>
<pre><code>// add an overlay to provide a visual transition
Routing.routes.before(fit_overlay);

// perform some page cleanup
Routing.routes.leaving(do_cleanup);
</code></pre>
<p>As with the route-specific <code>before</code> method, the global <code>before</code> method also allows the specifying or chaining of multiple methods. Similarly, as with the route-specific <code>leaving</code> method, the global <code>leaving</code> method allows only a single method to be specified.</p>
<p>And also, as with the route-specific <code>before</code> method, the global <code>before</code> method will be passed the route parameters.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#root-route" id="user-content-root-route"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Root Route</h2>
<p>If a user were to land on your page without a route defined, you can force them to use a root route. This route will be automatically selected on page load:</p>
<pre><code>Routing.root("#!/home");
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#fallback-method" id="user-content-fallback-method"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Fallback Method</h2>
<p>If a route somehow ended up in your system without being properly bound to an action, you can specify a <em>fallback</em> method that will be called. This lets you provide instant user feedback if they click an undefined route:</p>
<pre><code>Routing.fallback(function(){
        alert("404: Route Not Found");
       });
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#automatic-dispatching" id="user-content-automatic-dispatching"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Automatic Dispatching</h2>
<p>If a user gets to your page with an already defined route (for example, the click a referral link with the href of "www.yoursite.com/media#!/download"), Routing.js will automatically find and execute the appropriate route methods.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#listen-carefully" id="user-content-listen-carefully"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Listen Carefully</h2>
<p>You can define routes all day long, but if you don't tell us to listen for them, nothing's going to happen. Once you've defined your routes, start the listener up by simply typing:</p>
<pre><code>Routing.listen();
</code></pre>
<p>You should always wrap your <code>Routing.listen()</code> statements in some form of "Document Ready" method. This prevents errors when users come to your site with a predefined route. Without knowing the DOM is completely done loading, that route will be executed, and may try to perform operations it won't yet have the ability to do.</p>

        </div>

    </div>]