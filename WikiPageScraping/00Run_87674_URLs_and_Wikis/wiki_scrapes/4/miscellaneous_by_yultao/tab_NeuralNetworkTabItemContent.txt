[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>package tt.lab.ml.ui;</p>
<p>import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;</p>
<p>import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;</p>
<p>public class NeuralNetworkTabItemContent {
public static final String TITLE = "NN";</p>
<pre><code>private Text log;
private Thread sampleThread;
private Thread populationThread;

public Composite createComposite(Composite parent, final Display display) {
	Composite inComposite = new Composite(parent, SWT.NONE);
	GridData gridData = new GridData(GridData.FILL_BOTH);
	inComposite.setLayoutData(gridData);
</code></pre>
<p>//		GridLayout gridLayout = new GridLayout();
//		gridLayout.numColumns = 1;
inComposite.setLayout(new FillLayout());</p>
<pre><code>	createContent(display, inComposite);

	return inComposite;
}

  /**
   * Creates the layout group. This is the group on the left half of each
   * example tab.
   */
private void createContent(final Display display, Composite inComposite) {
	// 1/2
	SashForm sashForm = new SashForm(inComposite, SWT.VERTICAL);
</code></pre>
<p>//		sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));</p>
<pre><code>	SashForm upSash = new SashForm(sashForm, SWT.HORIZONTAL);
	// 1.1
	Group layoutGroup = new Group(upSash, SWT.NONE);
	layoutGroup.setText("Diagram");
	layoutGroup.setLayout(new GridLayout());
</code></pre>
<p>//		layoutGroup.setBackground(ImageUtils.black);
createUpLeft(display, layoutGroup);</p>
<pre><code>	// 1.2
	Group parameters = new Group(upSash, SWT.NONE);
	parameters.setText("Parameters");
	parameters.setLayout(new GridLayout(2,false));
</code></pre>
<p>//		parameters.setBackground(ImageUtils.black);
createUpRight(display, parameters);
upSash.setWeights(new int[] { 3, 1 });</p>
<pre><code>	// 2
	createDown(sashForm);
	sashForm.setWeights(new int[] { 3, 1 });
}

private void createDown(SashForm sashForm) {
	log = new Text(sashForm, SWT.DOUBLE_BUFFERED|SWT.MULTI | SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
}


private void createUpLeft(final Display display,  Group parent) {
	Canvas canvas = new Canvas(parent, SWT.DOUBLE_BUFFERED);
	GridData gridData = new GridData(GridData.FILL_BOTH);
	gridData.grabExcessHorizontalSpace = true;
	gridData.grabExcessVerticalSpace = true;
	canvas.setLayoutData(gridData);
	canvas.setBackground(ImageUtils.black);
	
	final int epchos = 100;
	List&lt;double[]&gt; leftPointList = new ArrayList&lt;&gt;();
	List&lt;double[]&gt; rightPointList = new ArrayList&lt;&gt;();
	final double[] leftPoints = new double[epchos];
	final double[] rightPoints = new double[leftPoints.length];

	final double[] leftPoints2 = new double[leftPoints.length];
	final double[] rightPoints2 = new double[leftPoints.length];
	
	final double[] leftPoints3 = new double[leftPoints.length];
	final double[] rightPoints3 = new double[leftPoints.length];
	leftPointList.add(leftPoints);
	rightPointList.add(rightPoints);
	
	leftPointList.add(leftPoints2);
	rightPointList.add(rightPoints2);
	
	leftPointList.add(leftPoints3);
	rightPointList.add(rightPoints3);
	
	for(int i=0;i&lt;leftPoints.length;i++) {
		leftPoints[i] = Double.NaN;
		rightPoints[i]= Double.NaN;
		
		leftPoints2[i] = Double.NaN;
		rightPoints2[i]= Double.NaN;
		
		leftPoints3[i] = Double.NaN;
		rightPoints3[i]= Double.NaN;
	}
	
	sampleThread = new Thread(()-&gt; {
		new Thread(()-&gt; {

		}).start();

		while(true) {
			try {
				Thread.sleep(100);
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}
			
			Display.getDefault().asyncExec(() -&gt; {
				canvas.redraw();
				log.setText(new StringBuilder()
						.append("Training Data Accuracy: ").append(Arrays.toString(leftPoints)).append("\n")
						.append("Training Data Cost: ").append(Arrays.toString(rightPoints)).append("\n")
						.append("Validating Data Accuracy: ").append(Arrays.toString(leftPoints2)).append("\n")
						.append("Validating Data Cost: ").append(Arrays.toString(rightPoints2)).append("\n")
						.append("Testing Data Accuracy: ").append(Arrays.toString(leftPoints3)).append("\n")
						.append("Testing Data Cost: ").append(Arrays.toString(rightPoints3)).append("\n").toString()
				); 
			});
			
		}
		
	});
	sampleThread.setDaemon(true);
	
	
	populationThread = new Thread(()-&gt; {
		new Thread(()-&gt; {
			
		}).start();

		while(true) {
			try {
				Thread.sleep(100);
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}
			
			Display.getDefault().asyncExec(() -&gt; {
				canvas.redraw();
				log.setText(new StringBuilder()
						.append("Training Data Accuracy: ").append(Arrays.toString(leftPoints)).append("\n")
						.append("Training Data Cost: ").append(Arrays.toString(rightPoints)).append("\n")
						.append("Validating Data Accuracy: ").append(Arrays.toString(leftPoints2)).append("\n")
						.append("Validating Data Cost: ").append(Arrays.toString(rightPoints2)).append("\n")
						.append("Testing Data Accuracy: ").append(Arrays.toString(leftPoints3)).append("\n")
						.append("Testing Data Cost: ").append(Arrays.toString(rightPoints3)).append("\n").toString()
				); 
			});
			
		}
		
	});
	populationThread.setDaemon(true);
	
	canvas.addPaintListener(new PaintListener() {
		public void paintControl(PaintEvent e) {
			Canvas canvas = (Canvas) e.widget;
			int marginLeft=80;
			int marginTop=80;
			int marginRight=marginLeft;
			int marginBottom=marginTop;
			int width = canvas.getSize().x - marginLeft - marginRight;
			int height = canvas.getSize().y - marginTop - marginBottom;
			ImageUtils.drawLineChart(e.gc, marginLeft, marginTop, width, height, leftPointList, rightPointList);
		}
	});
}
private  void createUpRight(final Display display, Group parent) {
	Button button = new Button(parent, SWT.PUSH);
	button.setText("Test Sample");
</code></pre>
<p>//		button.setBounds(10, 80, 200, 30);
button.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, true, true, 1, 1));
button.addListener(SWT.MouseDown, new Listener() {
public void handleEvent(Event event) {
if(!sampleThread.isAlive())
sampleThread.start();
}</p>
<pre><code>	});
	
	button = new Button(parent, SWT.PUSH);
	button.setText("Test Population");
</code></pre>
<p>//		button.setBounds(10, 180, 200, 30);
button.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, true, true, 1, 1));
button.addListener(SWT.MouseDown, new Listener() {
public void handleEvent(Event event) {
if(!populationThread.isAlive())
populationThread.start();
}</p>
<pre><code>	});
	
}
</code></pre>
<p>}</p>

        </div>

    </div>]