[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p><strong><code>chr</code></strong>(num)</p>
<p>Returns the character representation of a specified integer.</p>
<p><code>num</code>  The numerical UTF-16 code</p>
<p><strong><code>compile</code></strong>(source)</p>
<p>Compiles a string of iodine code, returning a callableobject.</p>
<p><code>source</code>  The source code to compile.</p>
<p><strong><code>eval</code></strong>(source)</p>
<p>Evaluates a string of Iodine source code.</p>
<p><code>source</code>  The source code to be evaluated.</p>
<p><strong><code>filter</code></strong>(iterable, callable)</p>
<p>Iterates over the specified iterable, passing the result of each iteration to the specified callable. If the callable returns true, the result is appended to a list that is returned to the caller.</p>
<p><code>iterable</code>  The iterable to be iterated over.</p>
<p><code>callable</code>  The callable to be used for filtering.</p>
<p><strong><code>hex</code></strong>(obj)</p>
<p>Returns hexadecimal representation of a specified object,supports both Bytes and Str objects.</p>
<p><code>obj</code>  The object to convert into a hex string.</p>
<p><strong><code>input</code></strong>(prompt)</p>
<p>Reads from the standard input stream. Optionally displays the specified prompt.</p>
<p><code>prompt</code>  Optional prompt to display</p>
<p><strong><code>invoke</code></strong>(callable, dict)</p>
<p>Invokes the specified callable under a new Iodine context.Optionally uses the specified dict as the instance's global symbol table.</p>
<p><code>callable</code>  The calalble to be invoked</p>
<p><code>dict</code>  The global symbol table to be used</p>
<p><strong><code>len</code></strong>(countable)</p>
<p>Returns the length of the specified object. If the object does not implement <strong>len</strong>, an AttributeNotFoundException is raised.</p>
<p><code>countable</code>  The object whose length is to be determined.</p>
<p><strong><code>map</code></strong>(iterable, callable)</p>
<p>Iterates over the specified iterable, passing the result of each iteration to the specified callable. The result of the specified callable is added to a list that is returned to the caller.</p>
<p><code>iterable</code>  The iterable to be iterated over.</p>
<p><code>callable</code>  The callable to be used for mapping.</p>
<p><strong><code>open</code></strong>(file, mode)</p>
<p>Opens up a file using the specified mode, returning a new stream object.@list Supported modes@item r - Read@item w - Write@item a - Append@item b - Binary</p>
<p><code>file</code>  The filename</p>
<p><code>mode</code>  The mode.</p>
<p><strong><code>ord</code></strong>(char)</p>
<p>Returns the numeric representation of a character.</p>
<p><code>char</code>  The character</p>
<p><strong><code>print</code></strong>()</p>
<p>Prints a string to the standard output stream</p>
<p><strong><code>property</code></strong>(getter, setter)</p>
<p>Returns a new Property object.</p>
<p><code>getter</code>  The getter for this property.</p>
<p><code>setter</code>  The setter for this property.</p>
<p><strong><code>range</code></strong>(start, end, step)</p>
<p>Returns an iterable sequence containing [n] items, starting with 0 and incrementing by 1, until [n] is reached.</p>
<p><code>start</code>  The first number in the sequence (Or, last if no other arguments are supplied)</p>
<p><code>end</code>  Last number in the sequence (Optional)</p>
<p><code>step</code>  By how much the current number increases every step to reach [end] (Optional)</p>
<p><strong><code>reduce</code></strong>(iterable, callable, default)</p>
<p>Reduces all members of the specified iterable by applying the specified callable to each item left to right. The callable passed to reduce receives two arguments, the first one being the result of the last call to it and the second one being the current item from the iterable.</p>
<p><code>iterable</code>  The iterable to be iterated over.</p>
<p><code>callable</code>  The callable to be used for reduced.</p>
<p><code>default</code>  The default item.</p>
<p><strong><code>repr</code></strong>(object)</p>
<p>Returns a string representation of the specified object, which is obtained by calling its <strong>repr</strong> function. If the object does not implement the <strong>repr</strong> function, its default string representation is returned.</p>
<p><code>object</code>  The object to be represented</p>
<p><strong><code>require</code></strong>()</p>
<p>Internal function used by the 'use' statement, do not call this directly.</p>
<p><strong><code>sort</code></strong>(iterable, [key])</p>
<p>Returns an sorted tuple created from an iterable sequence. An optional function can be provided that can be used to sort the iterable sequence.</p>
<p><code>iterable</code>  The iterable to be sorted</p>
<p><code>[key]</code>  The function which will return a key (Optional)</p>
<p><strong><code>sum</code></strong>(iterable, default)</p>
<p>Reduces the iterable by adding each item together, starting with [default].</p>
<p><code>iterable</code>  The iterable to be summed up</p>
<p><code>default</code>  The default item (Optional)</p>
<p><strong><code>type</code></strong>(object)</p>
<p>Returns the type definition of the specified object.</p>
<p><code>object</code>  The object whose type is to be determined.</p>
<p><strong><code>typecast</code></strong>(type, object)</p>
<p>Performs a sanity check, verifying that the specified [object] is an instance of [type]. If the test fails, a TypeCastException is raised.</p>
<p><code>type</code>  The type to be tested against</p>
<p><code>object</code>  The object to be tested</p>
<p><strong><code>zip</code></strong>(iterables)</p>
<p>Iterates over each iterable in [iterables], appending every item to a tuple, that is then appended to a list which is returned to the caller.</p>
<p><code>iterables</code>  The iterables to be zipped</p>

        </div>

    </div>]