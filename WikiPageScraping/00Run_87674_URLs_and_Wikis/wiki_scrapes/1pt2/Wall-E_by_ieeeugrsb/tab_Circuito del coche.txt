[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#abstract" id="user-content-abstract"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Abstract</h1>
<p>El circuito del coche es el encargado de hacer que el coche se mueva en todas las direcciones requeridas para que el brazo se desplace hasta el objeto. Para ello se necesitan:</p>
<ul>
<li>Dos motores para mover las ruedas traseras (que será donde se ejerza la fuerza para el movimiento).</li>
<li>Un Puente H que nos servirá para cambiar el sentido de giro de los motores y por tanto e las ruedas.</li>
<li>Un sensor de ultrasonido que nos dirá la proximidad del móvil con los diferentes obstáculos que se encuentre.</li>
<li>Placa Arduino para regir el movimiento del coche (p.ej. si se encuentra con un obstáculo que entienda que ha de detenerse y buscar otra vía de movimiento).</li>
<li>Batería que alimente todo lo anteriormente expuesto.</li>
<li>Regulador de Tensión para obtener los voltajes adecuados para los diferentes componentes con la batería.</li>
<li>Placa perforada para el ensamble de todos los componentes.</li>
</ul>
<p>A continuación se detalla todo lo necesario de todos los componentes para el proyecto.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#puente-h" id="user-content-puente-h"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Puente H</h1>
<p>El puente se utilizará para controlar el motor de DC que controlará el eje trasero del coche de la base.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#especificaciones-t%C3%A9cnicas-del-puente" id="user-content-especificaciones-técnicas-del-puente"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Especificaciones técnicas del puente</h2>
<ul>
<li>
<p>Utiliza ST' L298N chip, puede directamente dos 3-30V DC motor de accionamiento y proporcionan una interfaz de salida de 5V, alimentación 5V sistema de circuitos de chip único, control de apoyo 3.3VMCU</p>
</li>
<li>
<p>Puede controlar fácilmente la dirección y velocidad del motor DC, también controlan el paso-a-paso 2-fase</p>
</li>
<li>
<p>Conductor: L298N H doble puente controlador de Motor DC IC</p>
</li>
<li>
<p>Impulsado por parte de la tensión de alimentación terminal: VMS 5 ~ 35V</p>
</li>
<li>
<p>Impulsado por parte del pico de corriente Io: 2A por puente</p>
</li>
<li>
<p>La parte lógica de la tensión de alimentación terminal: 4.5 ~ 7V</p>
</li>
<li>
<p>La parte lógica de la gama actual de funcionamiento: 0 ~ 36mAColor</p>
</li>
<li>
<p>Señal de control rango de voltaje de entrada: 4.5 ~ 5.5V (alto) / 0V (bajo)</p>
</li>
<li>
<p>Máxima potencia absorbida: 20W</p>
</li>
<li>
<p>Dimensiones: 2,36 x 2,17 en en x 1,02 en (6,0 cm x 5,5 cm x 2,6 cm)</p>
</li>
<li>
<p>Peso: 1.23 oz (35 g)</p>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#c%C3%B3mo-usar-el-l298n-con-arduino" id="user-content-cómo-usar-el-l298n-con-arduino"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Cómo usar el L298N con Arduino</h2>
<p>Este módulo basado en el chip L298N te permite controlar dos motores de corriente continua o un motor paso a paso bipolar de hasta 2 amperios. Nosotros sólo lo utilizaremos para controlar el motor del eje trasero (el que tiene las dos ruedas grandes).</p>
<p>El módulo cuenta con todos los componentes necesarios para funcionar sin necesidad de elementos adicionales, entre ellos diodos de protección y un regulador LM7805 que suministra 5V a la parte lógica del integrado L298N. Cuenta con jumpers de selección para habilitar cada una de las salidas del módulo (A y B). La salida A esta conformada por OUT1 y OUT2 y la salida B por OUT3 y OUT4. Los pines de habilitación son ENA y ENB respectivamente.</p>
<p><img alt="" data-canonical-src="http://i0.wp.com/electronilab.co/wp-content/uploads/2014/05/L298N_pines_Electronilab.jpg" src="https://camo.githubusercontent.com/4bbee28caa2e83f9c18822323e838fc8080f3906/687474703a2f2f69302e77702e636f6d2f656c656374726f6e696c61622e636f2f77702d636f6e74656e742f75706c6f6164732f323031342f30352f4c3239384e5f70696e65735f456c656374726f6e696c61622e6a7067"/></p>
<p>En la parte inferior se encuentran los pines de control del módulo, marcados como IN1, IN2, IN3 e IN4.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#conexi%C3%B3n-de-alimentaci%C3%B3n" id="user-content-conexión-de-alimentación"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Conexión de alimentación</h3>
<p>Este módulo se puede alimentar de 2 maneras gracias al regulador integrado LM7805.</p>
<p><img alt="" data-canonical-src="http://i2.wp.com/electronilab.co/wp-content/uploads/2014/05/L298N_power_Electronilab.jpg" src="https://camo.githubusercontent.com/7e8701d2b11cd7103ac86799af5683323663d3e4/687474703a2f2f69322e77702e636f6d2f656c656374726f6e696c61622e636f2f77702d636f6e74656e742f75706c6f6164732f323031342f30352f4c3239384e5f706f7765725f456c656374726f6e696c61622e6a7067"/></p>
<p>Cuando el jumper de selección de 5V se encuentra activo, el módulo permite una alimentación de entre 6V a 12V DC. Como el regulador se encuentra activo, el pin marcado como +5V tendrá un voltaje de 5V DC. Este voltaje se puede usar para alimentar la parte de control del módulo ya sea un microcontrolador o un Arduino, pero recomendamos que el consumo no sea mayor a 500 mA.</p>
<p>Cuando el jumper de selección de 5V se encuentra inactivo, el módulo permite una alimentación de entre 12V a 35V DC. Como el regulador no esta funcionando, tendremos que conectar el pin de +5V a una tensión de 5V para alimentar la parte lógica del L298N. Usualmente esta tensión es la misma de la parte de control, ya sea un microcontrolador o Arduino.</p>
<p><strong>Se recomienda nunca conectar una tensión de entrada al pin de +5V, cuando el jumper de selección de 5V se encuentre activado. Esto provocaría un corto y podría dañar permanentemente el módulo.</strong></p>
<h2>
<a aria-hidden="true" class="anchor" href="#ejemplo-de-control-de-un-motor-nuestro-caso" id="user-content-ejemplo-de-control-de-un-motor-nuestro-caso"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Ejemplo de control de un motor (nuestro caso)</h2>
<p>Se mostrará el ejemplo de control un motor DC a través de la salida B del módulo. El pin ENB se conectará con el jumper a +5V.</p>
<p>El ejemplo esta desarrollado en Arduino UNO, pero el código es compatible con cualquier Arduino, pingüino, funduino...etc.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#esquema-de-conexi%C3%B3n" id="user-content-esquema-de-conexión"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Esquema de conexión</h3>
<p><img alt="" data-canonical-src="http://i1.wp.com/electronilab.co/wp-content/uploads/2014/05/L298N_1_mot.jpg" src="https://camo.githubusercontent.com/dfc9a682c1ff3d61e308915e11d27bb576fcc45e/687474703a2f2f69312e77702e636f6d2f656c656374726f6e696c61622e636f2f77702d636f6e74656e742f75706c6f6164732f323031342f30352f4c3239384e5f315f6d6f742e6a7067"/></p>
<h3>
<a aria-hidden="true" class="anchor" href="#c%C3%B3digo-en-arduino" id="user-content-código-en-arduino"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Código en Arduino</h3>
<p>El programa básicamente activa el motor en un sentido por 4 segundos, luego detiene el motor por 0.5 segundos, después activa el motor en sentido inverso por 4 segundos y por último detiene el motor por 5 segundos. Luego repite la acción indefinidamente.</p>
<pre lang="arduino"><code>/* 

 El programa activa el motor en un sentido por 5 segundos, 
 para el motor por 1 segundo, activa el motor en sentido inverso por 4 segundos 
 y se detiene por 5 segundos. Luego repite la acción indefinidamente.

 `*/`

int IN3 = 5; 
int IN4 = 4;

void setup()
{
  pinMode (IN4, OUTPUT);    // Input4 conectada al pin 4 
  pinMode (IN3, OUTPUT);    // Input3 conectada al pin 5
}
void loop()
{
  // Motor gira en un sentido
  digitalWrite (IN4, HIGH);
  digitalWrite (IN3, LOW); 
  delay(5000);
  // Motor no gira
  digitalWrite (IN4, LOW); 
  delay(1000);
  // Motor gira en sentido inverso
  digitalWrite (IN3, HIGH);
  delay(4000);
  // Motor no gira
  digitalWrite (IN3, LOW); 
  delay(5000);`
}
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#control-de-un-motor-dc-variando-su-velocidad" id="user-content-control-de-un-motor-dc-variando-su-velocidad"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Control de un motor DC variando su velocidad</h2>
<p>Se controlará la velocidad del motor con PWM Este PWM será aplicado a los pines de activación de cada salida o pines ENA y ENB respectivamente, por tanto los jumper de selección no serán usados.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#esquema-de-conexi%C3%B3n-1" id="user-content-esquema-de-conexión-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Esquema de conexión</h3>
<p><img alt="" data-canonical-src="http://i0.wp.com/electronilab.co/wp-content/uploads/2014/05/L298N_1_mot_PWM.jpg" src="https://camo.githubusercontent.com/7cb4f8d92e9236c9086059b40f4528b9c3aa27ae/687474703a2f2f69302e77702e636f6d2f656c656374726f6e696c61622e636f2f77702d636f6e74656e742f75706c6f6164732f323031342f30352f4c3239384e5f315f6d6f745f50574d2e6a7067"/></p>
<h3>
<a aria-hidden="true" class="anchor" href="#c%C3%B3digo-en-arduino-1" id="user-content-código-en-arduino-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Código en Arduino</h3>
<p>El programa controla la velocidad de un motor DC aplicando PWM al pin ENB del módulo L298N.</p>
<pre lang="arduino"><code>
/* 

 Ejemplo de control de motor DC usando modulo L298
 
 */

int IN3 = 5;    // Input3 conectada al pin 5
int IN4 = 4;    // Input4 conectada al pin 4 
int ENB = 3;    // ENB conectada al pin 3 de Arduino
void setup()
{
 pinMode (ENB, OUTPUT); 
 pinMode (IN3, OUTPUT);
 pinMode (IN4, OUTPUT);
}
void loop()
{
  //Preparamos la salida para que el motor gire en un sentido
  digitalWrite (IN3, HIGH);
  digitalWrite (IN4, LOW);
  // Aplicamos PWM al pin ENB, haciendo girar el motor, cada 2 seg aumenta la velocidad
  analogWrite(ENB,55);
  delay(2000);
  analogWrite(ENB,105);
  delay(2000);
  analogWrite(ENB,255);
  delay(2000);
  // Apagamos el motor y esperamos 5 seg
  analogWrite(ENB,0);
  delay(5000);
}

</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#hc-sr04-sensor-ultras%C3%B3nico-para-arduino" id="user-content-hc-sr04-sensor-ultrasónico-para-arduino"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>HC-SR04: Sensor ultrasónico para Arduino</h1>
<p>El HC-SR04 es un sensor de ultrasonidos realizado específicamente para la tecnología de Arduino. Su método de actuación se basa en la emisión y recepción de sonido en ultrasonido para medir el tiempo de propagación del mismo y así la distancia a la que están los objetos.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#conexi%C3%B3n-con-arduino" id="user-content-conexión-con-arduino"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Conexión con Arduino</h2>
<p>Será tan fácil cómo realizar la conexión reflejada en el siguiente esquema:</p>
<p><img alt="" data-canonical-src="http://panamahitek.com/wp-content/uploads/2013/02/hcsr04.png" src="https://camo.githubusercontent.com/34ae4d23f49c157088dc481ad443f6baf1377c26/687474703a2f2f70616e616d61686974656b2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031332f30322f6863737230342e706e67"/></p>
<h2>
<a aria-hidden="true" class="anchor" href="#programa-en-arduino" id="user-content-programa-en-arduino"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Programa en Arduino</h2>
<p>Es tan simple como descargar la librería que se puede encontrar en <a href="http://panamahitek.com/libreria-ultrasonido-h/" rel="nofollow">este enlace</a> y seguir los pasos que ahí se indican.</p>
<p>Una vez descargada e instalada la librería para obtener la distancia con el objeto tendremos que escribir lo siguiente en el software de Arduino.</p>
<pre lang="arduino"><code>#include&lt;Ultrasonido.h&gt;
Ultrasonido ultrasonido(9,8,100);
int distancia;
void setup()
{
Serial.begin(9600);
}
void loop()
{
distancia=ultrasonido.Distancia();
Serial.println(distancia);
delay(500);
}
</code></pre>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="nofollow"><img alt="Creative Commons License" data-canonical-src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" src="https://camo.githubusercontent.com/e170e276291254896665fa8f612b99fe5b7dd005/68747470733a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d73612f342e302f38387833312e706e67"/></a><br/><span>Wall-E Documentation</span> by <a href="https://github.com/ieeeugrsb/Wall-E/wiki">IEEE Student Branch of Granada</a> is licensed under a <a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="nofollow">Creative Commons Attribution-ShareAlike 4.0 International License</a>.</p>

          </div>
        </div>
    </div>]