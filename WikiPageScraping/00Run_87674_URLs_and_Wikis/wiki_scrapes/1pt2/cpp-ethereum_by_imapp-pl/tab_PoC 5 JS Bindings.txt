[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>To make your √êApp work with on Ethereum, you'll need to know about the Ethereum Javascript bindings, or, if you like, magic Javascript objects. These are pretty simple for PoC-5, rest assured, they'll become nicer as time goes on. In the meantime, bear with us.</p>
<p>There is currently only one such object; the <code>eth</code> object.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#parameters" id="user-content-parameters"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Parameters</h3>
<p>Parameters are, in general, strings which are interpreted according to the required type. When converting between integers and hashes/byte-arrays, it is interpreted as a big-endian as is standard for Ethereum. The following forms are allowed; they are all interpreted in the same way:</p>
<ul>
<li><code>"ABC"</code></li>
<li><code>"0x414243"</code></li>
<li><code>"4276803"</code></li>
</ul>
<p>In each case, they are interpreted as the number 4276803. The first two values may be alternated between with <code>bin()</code> and <code>unbin()</code>.</p>
<p>Such byte-arrays may be concatenated with the <code>+</code> operator as is normal for strings.</p>
<p>Strings also have a number of additional methods to help with conversion and alignment when switching between addresses, 256-bit integers and free-form byte-arrays for transaction data:</p>
<ul>
<li>
<code>bin()</code>: Converts the string to binary format.</li>
<li>
<code>pad(a, b)</code>: Converts the string to binary format (ready for data parameters) and pads with zeroes on the left size until it is of width <code>a</code>. Then pads with zeroes on the right side until it has grown to size <code>b</code>. If <code>b</code> is less that the width of the string, it is resized accordingly.</li>
<li>
<code>pad(l)</code>: Converts the string to binary format (ready for data parameters) and pads with zeroes until it is of width <code>l</code>. Will pad to the left if the original string is numeric, or to the right if binary. If <code>l</code> is less than the width of the string, it is resized accordingly.</li>
<li>
<code>unbin()</code>: Converts the string from binary format to hex format.</li>
<li>
<code>unpad()</code>: Converts the string from binary format to hex format, first removing any zeroes from the right side.</li>
<li>
<code>dec()</code>: Converts the string to decimal format.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#eth" id="user-content-eth"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>eth</h3>
<p><strong>Properties</strong>: For each such item, there is also an asynchronous method, taking a parameter of the callback function, itself taking a single parameter of the property's return value and of the same name but prefixed with get and recapitalised, e.g. <code>getCoinbase(_fn)</code>.</p>
<ul>
<li>
<code>coinbase</code> Returns the coinbase address of the client.</li>
<li>
<code>isListening</code> Returns true if and only if the client is actively listening for network connections.</li>
<li>
<code>isMining</code> Returns true if and only if the client is actively mining new blocks.</li>
<li>
<code>gasPrice</code> Returns the special 256-bit number equal to the hard-coded testnet price of gas.</li>
<li>
<code>key</code> Returns the special key-pair object corresponding to the preferred account owned by the client.</li>
<li>
<code>keys</code> Returns a list of the special key-pair objects corresponding to all accounts owned by the client.</li>
<li>
<code>peerCount</code> Returns the number of peers currently connected to the client.</li>
</ul>
<p><strong>Synchronous Getters</strong>: For each such item, there is also an asynchronous method, taking an additional parameter of the callback function, itself taking a single parameter of the synchronous method's return value and of the same name but prefixed with get and recapitalised, e.g. <code>getBalanceAt(_a, _fn)</code>.</p>
<ul>
<li>
<code>balanceAt(_a)</code> Returns the balance of the account of address given by the address <code>_a</code>.</li>
<li>
<code>storageAt(_a, _x)</code> Returns the value in storage at position given by the number <code>_x</code> of the account of address given by the address <code>_a</code>.</li>
<li>
<code>txCountAt(_a)</code> Returns the number of transactions send from the account of address given by <code>_a</code>.</li>
<li>
<code>isContractAt(_a)</code> Returns true if the account of address given by <code>_a</code> is a contract-account.</li>
</ul>
<p><strong>Transactions</strong></p>
<ul>
<li>
<code>create(_sec, _xEndowment, _bCode, _xGas, _xGasPrice, _fn)</code> Creates a new contract-creation transaction, given parameters:
<ul>
<li>
<code>_sec</code>, the secret-key for the sender;</li>
<li>
<code>_xEndowment</code>, the number equal to the contract's endowment;</li>
<li>
<code>_bCode</code>, the byte-array EVM-bytecode for the initialisation of the contract;</li>
<li>
<code>_xGas</code>, the number equal to the amount of gas to purchase for the transaction (unused gas is refunded); and</li>
<li>
<code>_xGasPrice</code>, the number equal to the price of gas for this transaction.</li>
<li>
<code>_fn</code>, the callback function, called on completion of the transaction with a single argument; the address of the new account.</li>
</ul>
</li>
<li>
<code>transact(_sec, _xValue, _aDest, _bData, _xGas, _xGasPrice, _fn)</code> Creates a new message-call transaction, given parameters:
<ul>
<li>
<code>_sec</code>, the secret-key for the sender;</li>
<li>
<code>_xValue</code>, the value transferred for the transaction (in Wei);</li>
<li>
<code>_aDest</code>, the address representing the destination address of the message;</li>
<li>
<code>_bData</code>, the byte array containing the associated data of the message;</li>
<li>
<code>_xGas</code>, the amount of gas to purchase for the transaction (unused gas is refunded); and</li>
<li>
<code>_xGasPrice</code>, the price of gas for this transaction.</li>
<li>
<code>_fn</code>, the callback function, called on completion of the transaction.</li>
</ul>
</li>
</ul>
<p><strong>Events</strong></p>
<ul>
<li>
<code>watch(_a, _fn)</code>: Registers _fn as a callback for whenever anything about the given address's state changes, and also on the initial load.</li>
<li>
<code>watch(_a, _x, _fn)</code>: Registers _fn as a callback for whenever the given storage location of the given address changes, and also on the initial load.</li>
<li>
<code>newBlock(_fn)</code>: Registers _fn as a callback for whenever the state changes, and also on the initial load.</li>
</ul>
<p><strong>Misc</strong></p>
<ul>
<li>
<code>secretToAddress(_a)</code>: Determines the address from the secret key <code>_a</code>.</li>
<li>
<code>lll(_s)</code>: Compiles the LLL source code <code>_s</code> and returns the binary output.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#example" id="user-content-example"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Example</h2>
<p>A simple HTML snippet that will display the user's primary account balance of Ether:</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">div</span>&gt;You have &lt;<span class="pl-ent">span</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>ether<span class="pl-pds">"</span></span>&gt;?&lt;/<span class="pl-ent">span</span>&gt;.&lt;/<span class="pl-ent">div</span>&gt;
&lt;<span class="pl-ent">script</span>&gt;<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-smi">eth</span>.<span class="pl-smi">changed</span>.<span class="pl-en">connect</span>(<span class="pl-k">function</span>() {</span>
<span class="pl-s1">    <span class="pl-c1">document</span>.<span class="pl-c1">getElementById</span>(<span class="pl-s"><span class="pl-pds">"</span>ether<span class="pl-pds">"</span></span>).<span class="pl-smi">innerText</span> <span class="pl-k">=</span> <span class="pl-smi">eth</span>.<span class="pl-en">balanceAt</span>(<span class="pl-smi">eth</span>.<span class="pl-en">secretToAddress</span>(<span class="pl-smi">eth</span>.<span class="pl-smi">key</span>))</span>
<span class="pl-s1">});</span>
<span class="pl-s1"></span><span class="pl-s1">&lt;</span>/<span class="pl-ent">script</span>&gt;</pre></div>
<p>To test it, just put <code>&lt;html&gt;&lt;body&gt;</code> before it and <code>&lt;/body&gt;&lt;/html&gt;</code> after, then save the file. Load it in AlethZero PoC-5 and point the URL to file:///WHEREVER_YOU_SAVED_IT</p>
<p>Job done. Now go create.</p>

        </div>

    </div>]