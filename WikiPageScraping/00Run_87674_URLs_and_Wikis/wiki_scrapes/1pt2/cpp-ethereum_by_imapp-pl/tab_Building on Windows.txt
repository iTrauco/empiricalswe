[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#cross-compiling-with-mingw64" id="user-content-cross-compiling-with-mingw64"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Cross-compiling with MinGW64</h3>
<p>Create fresh ubuntu 14.04 (Trusty Tahr) VM:</p>
<p><a href="http://cdimage.ubuntu.com/trusty/daily-live/current/trusty-desktop-amd64.iso" rel="nofollow">http://cdimage.ubuntu.com/trusty/daily-live/current/trusty-desktop-amd64.iso</a></p>
<p>See <a href="http://ubuntu.com" rel="nofollow">http://ubuntu.com</a> for more details on installing Ubuntu.</p>
<p>Set up a crossbuild environment as described in <a class="internal present" href="/imapp-pl/cpp-ethereum/wiki/Setting-up-prebuilt-crossbuild-environment">Setting-up-prebuilt-crossbuild-environment</a>, or for full instructions on how to set up the environment from scratch, <a class="internal present" href="/imapp-pl/cpp-ethereum/wiki/Setting-up-crossbuild-environment-from-scratch">Setting-up-crossbuild-environment-from-scratch</a>.</p>
<pre><code>Build cpp-ethereum:

$ git clone https://github.com/ethereum/cpp-ethereum
$ mkdir cpp-ethereum-build
$ cd cpp-ethereum-build
$ cmake ../cpp-ethereum -DTARGET_PLATFORM=w64
$ make
$ cd ..
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#compiling-with-visual-studio-express-2013" id="user-content-compiling-with-visual-studio-express-2013"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Compiling with Visual Studio Express 2013</h3>
<h4>
<a aria-hidden="true" class="anchor" href="#initial-configuration-and-build" id="user-content-initial-configuration-and-build"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Initial configuration and build</h4>
<p>Ensure you have installed:</p>
<ul>
<li>
<a href="http://www.microsoft.com/en-gb/download/details.aspx?id=40787" rel="nofollow">Visual Studio Express 2013</a>. VS 2013 is a minimum as cpp-ethereum uses languages features not supported in 2012. The Professional edition should also work, but this has not been tested.</li>
<li>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=8279" rel="nofollow">Windows 7 SDK</a> or <a href="http://msdn.microsoft.com/en-us/windows/bg162891.aspx" rel="nofollow">Windows 8 SDK</a> - for files like winsock2.h and gdi32.lib</li>
<li>
<a href="http://www.python.org/download/releases/" rel="nofollow">Python</a>. Needed to compile Qt.</li>
<li>
<a href="http://www.perl.org/get.html#win32" rel="nofollow">Perl</a>. Needed to compile Qt (they suggest ActiveState Perl).</li>
<li>
<a href="http://rubyinstaller.org/downloads/" rel="nofollow">Ruby</a>. Needed to compile Qt.</li>
<li>
<a href="http://msysgit.github.io/" rel="nofollow">Git for Windows 1.9.0+</a>. This includes (among other things) git and curl which are needed for bootstrap.sh.</li>
<li>Make sure a newer perl installation is on the PATH, otherwise QtWebkit will fail to compile when it picks up the git installed perl. bootstrap.sh should (hopefully) automatically juggle the paths correctly.</li>
<li>Note that msysgit version 1.9.4-preview20140815 (the current one at moment of writing) includes a bug which prevents <code>git svn</code> from working, breaking the bootstrap script. The <a href="https://github.com/msysgit/msysgit/pull/245">bug report</a> contains a workaround using rebase.</li>
<li>
<a href="http://www.7-zip.org/download.html" rel="nofollow">7-Zip</a>.</li>
</ul>
<p>Ensure 7z.exe, perl.exe, python.exe and ruby.exe have been added to the PATH.</p>
<p>Execute the following commands within a Git Bash shell to download and compile Ethereum and all it's dependencies to the current directory:</p>
<pre><code>$ curl -o bootstrap.sh -L https://raw.github.com/ethereum/cpp-ethereum/develop/windows/bootstrap.sh
$ ./bootstrap.sh
</code></pre>
<p>This will fetch about 300MB of sources and take many hours to compile (mostly Qt). The resulting binaries are placed in the directory <code>_binaries</code>.</p>
<p>It should also be possible to compile and debug by opening Ethereum.sln with Visual Studio 2013.</p>
<p>Executing bootstrap.sh again should only be necessary if in future Ethereum requires additional libaries that weren't compiled in the previous run. Note that bootstrap.sh has been heavily updated since 22/04/2013, so a clean run is required from earlier versions. If Qt apps are not required, then it should be possible to edit bootstrap.sh to skip this stuff and save a lot of time.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#fresh-builds" id="user-content-fresh-builds"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Fresh builds</h4>
<p>After setting up the dependencies and running your first successful build, you can make a fresh build from the latest code much faster by just fetching the new code and rebuilding.</p>
<ol>
<li>In the directory <code>cpp-ethereum</code>, run the command <code>git pull</code>.</li>
<li>Run <code>bootstrap.sh</code>.</li>
</ol>
<h4>
<a aria-hidden="true" class="anchor" href="#troubleshooting" id="user-content-troubleshooting"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Troubleshooting</h4>
<h5>
<a aria-hidden="true" class="anchor" href="#errors-about-missing-files-or-unresolved-external-symbol" id="user-content-errors-about-missing-files-or-unresolved-external-symbol"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Errors about missing files or "unresolved external symbol"</h5>
<p>The project files for Visual Studio (*.vcxproj), which are all located in the <code>windows</code> directory, list which files are to be included in the build. The primary way of building cpp-ethereum uses CMake, and the Visual Studio files are updated manually after every add or delete of a file. Differences can arise between the files that should be built and the files in the VS project files, breaking the build for Visual Studio until the project files are updated.</p>
<ul>
<li>When a file has been deleted, but the .vcxproj file still refers to it, building will show a "file not found" type error.</li>
<li>When a file has been added, but the .vcxproj file doesn't contain it, building will show "unresolved external symbol" type errors.</li>
</ul>
<p>As a workaround to get a succesful build, correct the .vcxproj files in your version so they match the current files.</p>
<p>The following git commands are helpful to see which files have been recently added or deleted. Execute them from the git command prompt in the <code>cpp-ethereum</code> directory.</p>
<pre><code>git log --diff-filter=D --summary | grep delete | head -n 20
git log --diff-filter=A --summary | grep create | head -n 20
</code></pre>
<p>For example if the git command shows that a file <code>libethereum/EthereumHost.cpp</code> has been added, but <code>LibEthereum.vcxproj</code> doesn't contain it, it should be added with a line like:</p>
<pre><code>(...)
  &lt;ItemGroup&gt;
(...)
    &lt;ClCompile Include="..\libethereum\EthereumHost.cpp" /&gt;
(...)
</code></pre>

        </div>

    </div>]