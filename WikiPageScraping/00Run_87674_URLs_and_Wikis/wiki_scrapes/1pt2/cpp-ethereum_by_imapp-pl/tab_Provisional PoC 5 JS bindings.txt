[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>To make your √êApp work with on Ethereum, you'll need to know about the Ethereum Javascript bindings, or, if you like, magic Javascript objects. These are pretty horrible for PoC-5, rest assured, they'll become nicer as time goes on. In the meantime, bear with us.</p>
<p>There are four such objects; here they are:</p>
<ul>
<li>
<code>eth</code> does most of the magic.</li>
<li>
<code>u256</code> manages operations on 256-bit integers, used for holding amounts of ETH and looking into account storage.</li>
<li>
<code>key</code> manages operations on keys and, in particular, addresses.</li>
<li>
<code>bytes</code> lets you concatenate two bunches of bytes. Used for composing the data for a transaction.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#eth" id="user-content-eth"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>eth</h3>
<ul>
<li>
<code>coinbase()</code> Returns the coinbase address of the client.</li>
<li>
<code>isListening()</code> Returns true if and only if the client is actively listening for network connections.</li>
<li>
<code>isMining()</code> Returns true if and only if the client is actively mining new blocks.</li>
<li>
<code>balanceAt(_a)</code> Returns the balance of the account of address given by the special address object <code>_a</code>.</li>
<li>
<code>storageAt(_a, _x)</code> Returns the value in storage at position given by the special 256-bit number <code>_x</code> of the account of address given by the special address object <code>_a</code>.</li>
<li>
<code>txCountAt(_a)</code> Returns the number of transactions send from the account of address given by the special address object <code>_a</code>.</li>
<li>
<code>isContractAt(_a)</code> Returns true if the account of address given by the special address object <code>_a</code> is a contract-account.</li>
<li>
<code>gasPrice()</code> Returns the special 256-bit number equal to the hard-coded testnet price of gas.</li>
<li>
<code>key()</code> Returns the special key-pair object corresponding to the prefered account owned by the client.</li>
<li>
<code>keys()</code> Returns a list of the special key-pair objects corresponding to all accounts owned by the client.</li>
<li>
<code>peerCount()</code> Returns the number of peers current connected to the client.</li>
<li>
<code>create(_sec, _xEndowment, _bBody, _bInit, _xGas, _xGasPrice)</code> Creates a new contract-creation transaction, given parameters:
<ul>
<li>
<code>_sec</code>, the special secret-key object for the sender;</li>
<li>
<code>_xEndowment</code>, the special 256-bit number equal to the contract's endowment;</li>
<li>
<code>_bBody</code>, the special byte-array object containing EVM-bytecode for the body of the contract;</li>
<li>
<code>_bInit</code>, the special byte-array object EVM-bytecode for the initialisation of the contract;</li>
<li>
<code>_xGas</code>, the special 256-bit number equal to the amount of gas to purchase for the transaction (unused gas is refunded); and</li>
<li>
<code>_xGasPrice</code>, the special 256-bit number equal to the price of gas for this transaction.
Returns the special address object representing the new contract's account.</li>
</ul>
</li>
<li>
<code>transact(_sec, _xValue, _aDest, _bData, _xGas, _xGasPrice)</code> Creates a new message-call transaction, given parameters:
<ul>
<li>
<code>_sec</code>, the special secret-key object for the sender;</li>
<li>
<code>_xValue</code>, the special 256-bit number equal to the value transfered for the transaction;</li>
<li>
<code>_aDest</code>, the special address object representing the destination address of the message;</li>
<li>
<code>_bData</code>, the special byte-array object containing the associated data of the message;</li>
<li>
<code>_xGas</code>, the special 256-bit number equal to the amount of gas to purchase for the transaction (unused gas is refunded); and</li>
<li>
<code>_xGasPrice</code>, the special 256-bit number equal to the price of gas for this transaction.</li>
</ul>
</li>
<li>
<code>changed.connect(_fn)</code>: Registers _fn as a callback for whenever the state changes, and also on the initial load.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#u256" id="user-content-u256"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>u256</h3>
<ul>
<li>
<code>add(_x1, _x2)</code> Returns the sum of <code>_x1</code> and <code>_x2</code>, all special 256-bit numbers.</li>
<li>
<code>sub(_x1, _x2)</code> Returns the subtraction of <code>_x2</code> from <code>_x1</code>, all special 256-bit numbers.</li>
<li>
<code>mul(_x1, _x2)</code> Returns the product of <code>_x1</code> and <code>_x2</code>, all special 256-bit numbers.</li>
<li>
<code>div(_x1, _x2)</code> Returns the quotient of <code>_x1</code> and <code>_x2</code>, all special 256-bit numbers.</li>
<li>
<code>value(_n)</code> Returns a special 256-bit number of value equal to <code>_n</code>, a normal number.</li>
<li>
<code>ether(_n)</code> Returns a special 256-bit number that has the value of <code>_n</code>, a normal number times Ether (10^18).</li>
<li>
<code>toValue(_x)</code> Returns a normal number, equal to the number of Ether of <code>_x</code>, a special 256-bit number.</li>
<li>
<code>toEther(_x)</code> Returns a normal number, equal to the number of Ether of <code>_x</code>, a special 256-bit number.</li>
<li>
<code>ethOf(_x)</code> Returns a string that nicely renders the Ether balance given by the special 256-bit number <code>_x</code>.</li>
<li>
<code>stringOf(_x)</code> Returns a string that dumbly renders the Ether balance given by the special 256-bit number <code>_x</code>.</li>
<li>
<code>bytesOf(_x)</code> Returns the 32-bytes (as a special byte-array object) that form the Big Endian representation of the special 256-bit number <code>_x</code>.</li>
<li>
<code>fromHex(_s)</code> Returns the the special 256-bit number equal to the number contained in the normal string <code>_s</code> when interpreted with a big-endian hexadecimal representation.</li>
<li>
<code>fromAddress(_a)</code> Returns the special 256-bit number equal to the special address object <code>_a</code> when interpreted as a Big Endian number.</li>
<li>
<code>toAddress(_x)</code> Returns an address corresponding to the u256 number <code>_x</code>
</li>
<li>
<code>isNull(_x)</code> Returns a boolean which is true if the 256_bit number <code>_x</code> is zero.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#key" id="user-content-key"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>key</h3>
<ul>
<li>
<code>create()</code> Returns a special key-pair object, whose value is a new randomly created secret-key and the corresponding address.</li>
<li>
<code>secret(_pair)</code> Returns a special secret-key object, equal to the secret-key component of the special key-pair object <code>_pair</code>.</li>
<li>
<code>address(_pair)</code> Returns a special address object, equal to the address component of the special key-pair object <code>_pair</code>.</li>
<li>
<code>keypair(_sec)</code> Returns a special key-pair object, whose secret-key component is equal to the special secret-key object <code>_sec</code>. The address component is derived accordingly.</li>
<li>
<code>isNull(_a)</code> Returns false if the special address object, <code>_a</code> is empty and true otherwise.</li>
<li>
<code>addressOf(_s)</code> Returns the special address object given by the normal string <code>_s</code>, which is assumed to contain a 40-character hexadecimal address.</li>
<li>
<code>stringOf(_a)</code> Returns the normal string that is equal to the 40-byte hexadecimal representation of the special address object <code>_a</code>.</li>
<li>
<code>toAbridged(_a)</code> Returns the normal string that is equal to a shortened form of the 40-byte hexadecimal representation of the special address object <code>_a</code>.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#bytes" id="user-content-bytes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>bytes</h3>
<ul>
<li>
<code>concat(_b1, _b2)</code> Returns a special byte-array object equal to the concatenation of the two byte-array objects <code>_b1</code> and <code>_b2</code>.</li>
<li>
<code>toString(_b)</code> Returns a string constructed from the byte-array <code>_b</code>
</li>
<li>
<code>fromString(_s,_n)</code> Returns a byte-array equivalent of string <code>_s</code> which is <code>_n</code> bytes long</li>
<li>
<code>u256of(_b)</code> Returns the u256 number equivalent of the byte-array <code>_b</code>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#example" id="user-content-example"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Example</h2>
<p>A simple HTML snippet that will display the user's primary account balance of Ether:</p>
<pre><code>&lt;div&gt;You have &lt;span id="ether"&gt;?&lt;/span&gt;.&lt;/div&gt;
&lt;script&gt;
eth.changed.connect(function() {
    document.getElementById("ether").innerText = u256.ethOf(eth.balanceAt(key.address(eth.key())))
});
&lt;/script&gt;
</code></pre>
<p>To test it, just put <code>&lt;html&gt;&lt;body&gt;</code> before it and <code>&lt;/body&gt;&lt;/html&gt;</code> after, then save the file. Load it in AlethZero PoC-5 and point the URL to file:///WHEREVER_YOU_SAVED_IT</p>
<p>Job done. Now go create.</p>

        </div>

    </div>]