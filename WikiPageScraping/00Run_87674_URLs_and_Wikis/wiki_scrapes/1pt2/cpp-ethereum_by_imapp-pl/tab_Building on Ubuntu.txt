[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>(NOTE: These are the client build instructions. For building just the language components, see <a class="internal present" href="/imapp-pl/cpp-ethereum/wiki/Serpent-LLL-only-build">Serpent LLL Only Build</a>)</p>
<p>Below are the build instructions for the latest versions of Ubuntu. Older versions or Ubuntu-based distributions like <a href="http://www.linuxmint.com/" rel="nofollow">Linux Mint</a> should work very similarly, but they may need updated buildtools.</p>
<p>Note: The best supported platform as of June 2014 is Ubuntu 14.04. Documentation for older versions may be patchy and you are encouraged to update this guide with improvements according to your experiences.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#table-of-contents" id="user-content-table-of-contents"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Table of Contents</h3>
<ul>
<li>
<a href="#user-content-install-dependencies">Install dependencies</a>
<ul>
<li>
<a href="#user-content-from-repositories">From repositories</a>
<ul>
<li><a href="#user-content-trusty-1404">Trusty 14.04</a></li>
<li>
<a href="#user-content-wheezy-1304-and-saucy-1310">Wheezy 13.04 and Saucy 13.10</a>
<ul>
<li><a href="#user-content-web-install-qt-version--52">Web Install Qt version &gt;= 5.2</a></li>
</ul>
</li>
<li><a href="#user-content-precise-1204">Precise 12.04</a></li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#user-content-compile-additional-dependencies">Compile additional dependencies</a>
<ul>
<li><a href="#user-content-cryptopp-562-from-source">Cryptopp 5.6.2 (from source)</a></li>
<li><a href="#user-content-jsonrpc-from-source">JSONRPC (from source)</a></li>
<li><a href="#user-content-unit-tests-support">Unit tests support</a></li>
</ul>
</li>
<li><a href="#user-content-choose-your-source">Choose your source</a></li>
<li>
<a href="#user-content-build">Build</a>
<ul>
<li><a href="#user-content-building-serpentlll-tools">Building Serpent/LLL tools</a></li>
<li><a href="#user-content-building-the-client">Building the client</a></li>
</ul>
</li>
<li><a href="#user-content-start-your-client">Start your client</a></li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#install-dependencies" id="user-content-install-dependencies"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Install dependencies</h1>
<p>Before you can build the source, you need several tools and dependencies for the application to get started.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#from-repositories" id="user-content-from-repositories"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>From repositories</h2>
<p>Before you begin, update your repositories:</p>
<pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade
</code></pre>
<p>Install the package dependencies. This is slightly different between Ubuntu versions.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#trusty-1404" id="user-content-trusty-1404"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Trusty 14.04</h3>
<p>For the essentials; you need only this if you're only wanting the LLL &amp; Serpent tools:</p>
<pre><code>sudo apt-get install build-essential g++-4.8 git cmake libboost-all-dev
</code></pre>
<p>For the main Ethereum library and GUI clients:</p>
<pre><code>sudo apt-get install automake unzip libgmp-dev libtool libleveldb-dev yasm libminiupnpc-dev libreadline-dev scons
</code></pre>
<p>For the NCurses-based GUI:</p>
<pre><code>sudo apt-get install libncurses5-dev 
</code></pre>
<p>For the Qt-based GUIs:</p>
<pre><code>sudo apt-get install qtbase5-dev qt5-default qtdeclarative5-dev libqt5webkit5-dev
</code></pre>
<p>To enable the remote-JavaScript API:</p>
<pre><code>sudo apt-get install libcurl4-openssl-dev
</code></pre>
<p>For convenience, here's all the above compacted into a single command:</p>
<pre><code>sudo apt-get install build-essential g++-4.8 git cmake libgmp-dev \
libboost-all-dev automake unzip libtool libleveldb-dev yasm libminiupnpc-dev \
libreadline-dev scons libncurses5-dev qtbase5-dev qt5-default qtdeclarative5-dev \
libqt5webkit5-dev libcurl4-openssl-dev
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#wheezy-1304-and-saucy-1310" id="user-content-wheezy-1304-and-saucy-1310"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Wheezy 13.04 and Saucy 13.10</h3>
<p>Here the necessary packages are almost the same, however since some dependencies are not available in these releases, the installation is a little different:</p>
<pre><code>sudo apt-get install build-essential g++-4.8 git cmake libboost1.53-all-dev # for build
sudo apt-get install libncurses5-dev automake libtool unzip libgmp-dev libleveldb-dev yasm libminiupnpc-dev libreadline-dev scons # for ethereum
sudo apt-get install libcurl4-openssl-dev # for json-rpc serving client
</code></pre>
<h4>
<a aria-hidden="true" class="anchor" href="#web-install-qt-version--52" id="user-content-web-install-qt-version--52"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Web Install Qt version &gt;= 5.2</h4>
<p>Qt is for the GUI. It's not needed for the headless build.
You can download it from their <a href="http://qt-project.org/downloads" rel="nofollow">website</a>, or use:</p>
<pre><code># For 32-bit:
wget http://download.qt-project.org/official_releases/online_installers/qt-opensource-linux-x86-1.6.0-4-online.run
# For 64-bit:
wget http://download.qt-project.org/official_releases/online_installers/qt-opensource-linux-x64-1.6.0-4-online.run
</code></pre>
<p>Run with:</p>
<pre><code>chmod +x qt-opensource-linux-???-1.6.0-4-online.run
./qt-opensource-linux-???-1.6.0-4-online.run
</code></pre>
<p>When the installer asks you for the desired version, make sure to install at minimum version 5.2 and not any older version. For the location, put <code>/opt/Qt</code>.</p>
<p>To prepare the environment for the new Qt installation (and prevent it using any previous Qt install), we'll tell cmake we prefer this version:</p>
<pre><code>export CMAKE_PREFIX_PATH=/opt/Qt/5.*/gcc
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#precise-1204" id="user-content-precise-1204"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Precise 12.04</h3>
<p>Pretty problematic building/installation, with plenty of issues. Highly recommended to upgrade to the 14.04 (which is also a LTS version). Still, an intense review (aiming to be complete) of the possible issues can be found in the "<a href="https://github.com/ethereum/cpp-ethereum/wiki/Compatibility-Info-and-Build-Tips">Compatibility Info and Build Tips</a>" of this wiki.</p>
<p>Other advises:
For this release we need some backports. See <a href="http://www.swiftsoftwaregroup.com/upgrade-gcc-4-7-ubuntu-12-04/" rel="nofollow">http://www.swiftsoftwaregroup.com/upgrade-gcc-4-7-ubuntu-12-04/</a> for GCC 4.7, which is required. You will need these PPAs and these libleveldb libraries:</p>
<pre><code>sudo apt-add-repository ppa:ubuntu-sdk-team/ppa &amp;&amp; sudo apt-add-repository ppa:apokluda/boost1.53
wget http://launchpadlibrarian.net/148520969/libleveldb-dev_1.13.0-1_amd64.deb &amp;&amp; wget http://launchpadlibrarian.net/148520968/libleveldb1_1.13.0-1_amd64.deb &amp;&amp; sudo dpkg -i libleveldb*1.13.0-1*deb
</code></pre>
<p>More info in the "<a href="https://github.com/ethereum/cpp-ethereum/wiki/Compatibility-Info-and-Build-Tips">Compatibility Info and Build Tips</a>" of this wiki.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#compile-additional-dependencies" id="user-content-compile-additional-dependencies"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Compile additional dependencies</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#cryptopp-562-from-source" id="user-content-cryptopp-562-from-source"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Cryptopp 5.6.2 (from source)</h2>
<p><em>NOT NEEDED IF YOU JUST WANT SERPENT/LLL TOOLS</em></p>
<p>You'll need to grab, build, and install the latest Crypto++ library. Note that even on Ubuntu 14.04, ubuntu package for <code>libcrypto++-dev</code> has Crypto++ v5.6.1 only. You definitely need 5.6.2.</p>
<p>Install cryptopp from <a href="https://github.com/mmoss/cryptopp">https://github.com/mmoss/cryptopp</a> and build it with SCons:</p>
<pre><code>git clone https://github.com/mmoss/cryptopp.git
cd cryptopp
sudo scons --shared --prefix=/usr
cd ..
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#jsonrpc-from-source" id="user-content-jsonrpc-from-source"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>JSONRPC (from source)</h2>
<p><em>NOT NEEDED IF YOU JUST WANT SERPENT/LLL TOOLS</em></p>
<p>To enable the remote-JavaScript API functionality, you must have the JSON-RPC library installed:</p>
<pre><code>git clone git://github.com/cinemast/libjson-rpc-cpp.git
cd libjson-rpc-cpp/build
cmake .. &amp;&amp; make
sudo make install
sudo ldconfig
cd ..
</code></pre>
<p>To test this is working after you launched <code>eth</code>, check the coinbase with cURL:</p>
<pre><code>curl -X POST --data '{"jsonrpc": "2.0","method": "coinbase","params": null,"id": 1}' http://localhost:8080
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#unit-tests-support" id="user-content-unit-tests-support"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unit tests support</h2>
<p><em>NOT NEEDED IF YOU JUST WANT SERPENT/LLL TOOLS</em></p>
<p>To enable support for the common Ethereum unit tests (CEUT), clone the tests repository into the same path as cpp-ethereum and checkout the develop branch:</p>
<pre><code>git clone https://github.com/ethereum/tests
cd tests
git checkout develop
cd ..
</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#choose-your-source" id="user-content-choose-your-source"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Choose your source</h1>
<p>First grab/unpack the sources. If you want to build the latest version, clone the repository:</p>
<pre><code>git clone https://github.com/ethereum/cpp-ethereum
cd cpp-ethereum
git checkout develop
</code></pre>
<p>If you have a prepackaged source distribution from code.ethereum.org, then simply unpack:</p>
<pre><code>tar xjf cpp-ethereum-&lt;version&gt;.tar.bz2
cd cpp-ethereum-&lt;version&gt;
</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#build" id="user-content-build"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Build</h1>
<p>You can decide to either build just the serpent/lll tools or the full client.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#building-serpentlll-tools" id="user-content-building-serpentlll-tools"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Building Serpent/LLL tools</h2>
<p><em>IF YOU JUST WANT SERPENT/LLL TOOLS:</em></p>
<p>Create and configure the build environment and the build inside the cpp-ethereum directory:</p>
<pre><code>mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DLANGUAGES=1 &amp;&amp; make
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#building-the-client" id="user-content-building-the-client"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Building the client</h2>
<p><em>NOT NEEDED IF YOU JUST WANT SERPENT/LLL TOOLS</em></p>
<p>If you want to build the full client, first create the build directory:</p>
<pre><code>mkdir build
cd build
</code></pre>
<p>Then run cmake and make:</p>
<pre><code>cmake .. -DCMAKE_BUILD_TYPE=Release &amp;&amp; make
</code></pre>
<p>If you're not interested in the GUI parts of Ethereum, then you can compile the command line interface (CLI) client with a headless build:</p>
<pre><code>cmake .. -DCMAKE_BUILD_TYPE=Release -DHEADLESS=1 &amp;&amp; make
</code></pre>
<p>If you do a headless build, there's no need to install the Qt dependencies mentioned earlier.</p>
<p>If later, you change your mind and you want to build the full version with the GUI, use:</p>
<pre><code>cmake .. -DCMAKE_BUILD_TYPE=Release -DHEADLESS=0 &amp;&amp; make
</code></pre>
<p>To build a debug build, exchange <code>Release</code> for <code>Debug</code>:</p>
<pre><code>cmake .. -DCMAKE_BUILD_TYPE=Debug &amp;&amp; make
</code></pre>
<p>VM tracing (useful for cross-implementation VM debugging) and additional run-time checks can be enabled with the <code>VMTRACE</code> and <code>PARANOIA</code> flags:</p>
<pre><code>cmake .. -DCMAKE_BUILD_TYPE=Debug -DVMTRACE=1 -DPARANOIA=1 &amp;&amp; make
</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#start-your-client" id="user-content-start-your-client"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Start your client</h1>
<p>Command line interface client (see <a class="internal present" href="/imapp-pl/cpp-ethereum/wiki/Using-Ethereum-CLI-Client">Using Ethereum CLI Client</a>):</p>
<pre><code>cd eth
./eth
</code></pre>
<p>Once done, you might then <a class="internal present" href="/imapp-pl/cpp-ethereum/wiki/Configure-a-Server">Configure a Server</a> and start a <a class="internal present" href="/imapp-pl/cpp-ethereum/wiki/Local-Test-Net">Local Test Net</a>.</p>
<p>Start AlethZero to run the experimental Ethereum GUI client (also see <a class="internal present" href="/imapp-pl/cpp-ethereum/wiki/Using-AlethZero">Using AlethZero</a>).</p>
<pre><code>cd alethzero
./alethzero
</code></pre>
<p>If you're updating from a previous version and you find you get errors when running, delete your old block chain before restarting:</p>
<pre><code>rm -rf ~/.ethereum
</code></pre>

        </div>

    </div>]