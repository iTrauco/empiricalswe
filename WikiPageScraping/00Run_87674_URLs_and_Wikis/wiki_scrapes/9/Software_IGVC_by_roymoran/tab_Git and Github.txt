[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#git-learning-resources" id="user-content-git-learning-resources"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Git Learning Resources</h1>
<ul>
<li>These really easy <a href="https://www.atlassian.com/git/tutorials" rel="nofollow">tutorials from Atlassian</a>
</li>
<li>Great comprehensive documentation at <a href="http://git-scm.com/doc" rel="nofollow">git-scm.com</a>, has books, references, and video tutorials.</li>
<li>
<a href="http://www-cs-students.stanford.edu/%7Eblynn/gitmagic/" rel="nofollow">Git Magic</a> explains how git works like it's magic (no need to explain how it works on the inside, just what it does).</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#git-tips" id="user-content-git-tips"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Git Tips</h1>
<ol>
<li>Pull with rebase instead of merge: <code>git pull --rebase</code>.
Because branch merges in git are recorded with a merge commit, they are supposed to be meaningfulâ€”for example, to indicate when a feature has been merged to a release branch. However, during a regular daily workflow where several team members sync a single branch often, the timeline gets polluted with unnecessary micro-merges on regular git pull. Rebasing ensures that the commits are always re-applied so that the history stays linear.</li>
<li>Set up your terminal prompt to display git status and stuff like Brandon Keepers (he shows how <a href="https://t.co/5y0jQTyl58" rel="nofollow">here</a>).</li>
<li>Set up aliases for common/long commands to save time.</li>
<li>Try <code>git log --graph --remotes --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)&lt;%an&gt;%Creset'</code> to graph out all commits and show all branches <strong>on all remotes</strong> (make this into an alias). This great shortcut was taken from <a href="http://fredkschott.com/post/2014/02/git-log-is-so-2005/" rel="nofollow">FredKSchott</a>.</li>
<li>Check out <a href="https://hub.github.com/">hub</a> for epic ways to use github from the git command line.</li>
<li>Use git-completion script so your terminal auto-completes git commands. More tips <a href="http://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks" rel="nofollow">here</a>
</li>
</ol>
<h1>
<a aria-hidden="true" class="anchor" href="#how-to-synchronize-your-fork-with-upstream-main-igvc-repo" id="user-content-how-to-synchronize-your-fork-with-upstream-main-igvc-repo"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to synchronize your fork with upstream (main IGVC repo)</h1>
<ol>
<li>Assuming you already have a fork of the main repo (we'll call it "upstream") on GitHub, go to your repo directory in Terminal (just <code>cd /my/repo/directory/</code>, try <code>git status</code> just to check that you're in the correct directory and all's well).</li>
<li>Add a new "remote" (fancy word for the URL to a git repo you would like to pull/push from. In fact, you already have a remote by default named "origin", which points to your fork on the repo). We'll add a new remote called "upstream". Just type this <code>git remote add upstream https://github.com/chicagoedt/Software_IGVC.git</code>
</li>
<li>Now fetch from upstream (get the new commits that have been pushed there since you last forked/fetched). The command is <code>git fetch upstream development</code> (notice we're using development branch; change it if necessary in other situations).</li>
<li>Make sure you're on development branch using <code>git checkout development</code>. Now merge the new changes from upstream's development branch into your local development branch using <code>git merge upstream/development</code>.</li>
<li>If you have any conflicts, then use <code>git status</code> to check which files have conflicts, and edit those files to look like you want them (usually you'd just remove changes you didn't want). Now you can commit and push as normal.</li>
</ol>

        </div>

    </div>]