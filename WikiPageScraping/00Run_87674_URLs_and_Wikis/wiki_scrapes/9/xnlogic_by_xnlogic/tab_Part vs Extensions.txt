[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#xnlogic-parts-vs-pacer-extensions" id="user-content-xnlogic-parts-vs-pacer-extensions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>xnlogic Parts vs Pacer extensions</h2>
<p>Pacer extensions are a simple, yet powerful - They are Ruby modules containing functionality (properties, methods, and traversals) that can be attached (i.e. mixed-in) to graph elements. xnlogic parts take this concept one step further.</p>
<ul>
<li>Conveniently declare properties and relations of a part.
For more details see <a class="internal present" href="/xnlogic/xnlogic/wiki/DSL-intro">DSL-intro</a>.</li>
<li>Declare property validation rules, and/or define custom validation.</li>
<li>Declare which methods are available through the REST API.<br/>
For example, we can restrict which properties can be used for filtering via the REST API.
This can prevent remote clients from performing searches on non-indexed properties.</li>
<li>Declare cloning strategy (e.g. when cloning a vertex, should we also clone its neighbourhood?)</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#general-design-philosophy" id="user-content-general-design-philosophy"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>General Design Philosophy</h2>
<p>xnlogic has a consistent design philosophy throughout the framework - xnlogic doesn't restrict your capabilities, but it requires you to explicitly expose functionality to remote clients.</p>

        </div>

    </div>]