[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The pull endpoint allows us to define custom reports on the client side.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#what-is-it-good-for" id="user-content-what-is-it-good-for"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>What is it good for?</h2>
<ul>
<li>Create complex reports without any changes to the API server.</li>
<li>Avoid sending unnecessary data over the network by asking for exactly the data you need.</li>
<li>Avoid the overhead of multiple requests to the API server.</li>
<li>Front-end developers can make progress without depending on back-end developers.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#how-does-it-work" id="user-content-how-does-it-work"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How does it work?</h2>
<ul>
<li>Send a <code>POST</code> request</li>
<li>To an existing API URL.</li>
<li>The body of the request is a JSON object that describes the report you are asking for.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#examples" id="user-content-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h2>
<h4>
<a aria-hidden="true" class="anchor" href="#simple---get-specific-properties" id="user-content-simple---get-specific-properties"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Simple - Get specific properties</h4>
<p>We would like to get the <code>name</code> and <code>email</code> properties of all users in our database.</p>
<ul>
<li>we will send a <code>POST</code> request to <code>is/user/pull</code>.</li>
<li>The request body will be the JSON array <code>["name", "email"]</code>
</li>
</ul>
<p>You can test it on your dev VM, using the XN command-line tool. For example:</p>
<pre><code>✗ xn  --dev db01  post  is/user/pull  '["name", "email"]'
[ { name: 'Authenticator',
    email: 'auth.db01@xnlogic.com' },
  { name: 'App Admin',
    email: 'admin.db01@xnlogic.com' } ]
</code></pre>
<p>This example is not too impressive - Our report is so simple, and we could get the same data with <code>GET is/user/properties/name,email</code>.</p>
<p>Let's take a look at a slightly more interesting example.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#follow-relations" id="user-content-follow-relations"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Follow relations</h4>
<p>This time, in addition to the email and name, we would like to get the auth tokens of every user in our system.</p>
<p>Just like before, we send a <code>POST</code> request to <code>is/user</code>.<br/>
We use the (one-to-many) <code>tokens</code> relation between users and tokens, and send the following request body:</p>
<pre><code>["name", "email", {"tokens" : ["token_value", "created_at"]}]
</code></pre>
<p>The <code>{"tokens" : ["token_value", "created_at"]}</code> part tells the server that:</p>
<ul>
<li>Each user (in the response) should have a <code>tokens</code> key.</li>
<li>The <code>tokens</code> key will contains an array of tokens.</li>
<li>Each token is a JSON object with two keys, <code>token_value</code> and <code>created_at</code>.</li>
</ul>
<p>Ex:</p>
<pre><code>✗ xn  --dev db01  post  is/user/pull  '["name", "email", {"tokens" : ["token_value", "created_at"]}]'

[ 
  { 
    "name":   "Authenticator",
    "email":  "auth.db01@xnlogic.com",
    "tokens": [ 
      { "token_value": '-qy4gr2uB6Q1oyzs1azS',  "created_at": "2015-08-04T21:28:12Z" } 
    ] 
  },
  { 
    "name":   "App Admin",
    "email":  "admin.db01@xnlogic.com",
    "tokens": [ 
      { "token_value": "Y2ZTEaIMSzP1z7e7ymEi",  "created_at": "2015-08-04T21:41:58Z" },
      { "token_value": "qD42MFhj14342q2GXVJk",  "created_at": "2015-08-04T21:34:55Z" },
      { "token_value": "3xgP01M7Copihypw-Qxx4",  "created_at": "2015-08-04T21:28:12Z" } 
    ] 
  } 
]
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#complex-reports" id="user-content-complex-reports"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Complex Reports</h2>
<p>The request body can contain deeply nested JSON objects, and describe very complex reports.<br/>
But, sometimes that isn't enough. For example, we might like to:</p>
<ul>
<li>Define reports recursively (with some depth limit).</li>
<li>Get results in order.</li>
<li>Specify limit and offset, to allow us to paginate the result.</li>
</ul>
<p>The XN pull API endpoint supports all of the above (and more).</p>
<ul>
<li>We support the grammar pattern define by <a href="http://docs.datomic.com/pull.html" rel="nofollow">Datomic's pull API</a>.</li>
<li>The XN command-line tool supports the <code>pull</code> command, which takes (either a JSON object or) a <a href="http://clojure.org/" rel="nofollow">Clojure</a> expression.</li>
</ul>
<p>Examples:</p>
<p>Using Clojure, instead of JSON:</p>
<pre><code>➜✗ xn pull is/subnet/id/520 '[name network_address {ips [id name]}]'


[ { 
    name: 'DKC\'s Amazon VPC - Front-End IPs',
    network_address: '10.0.0.0/17',
    ips:
     [ { id: 519, name: '10.0.0.1' },
       { id: 524, name: '10.0.0.2' },
       { id: 2493, name: '10.0.0.3' },
       { id: 2494, name: '10.0.0.4' },
       { id: 2497, name: '10.0.0.5' },
       { id: 2498, name: '10.0.0.6' },
       { id: 2501, name: '10.0.0.7' } ] } ]
</code></pre>
<p>Specifying the order of nested items (<code>ips</code> are ordered by <code>name</code>, in descending order).</p>
<pre><code>➜✗ xn pull is/subnet/id/520 '[id name network_address [(desc ips name) [id name]]]'


[ { id: 520,
    name: 'DKC\'s Amazon VPC - Front-End IPs',
    network_address: '10.0.0.0/17',
    ips:
     [ { id: 2501, name: '10.0.0.7' },
       { id: 2498, name: '10.0.0.6' },
       { id: 2497, name: '10.0.0.5' },
       { id: 2494, name: '10.0.0.4' },
       { id: 2493, name: '10.0.0.3' },
       { id: 524, name: '10.0.0.2' },
       { id: 519, name: '10.0.0.1' } ] } ]
</code></pre>
<p>Limit the number of nested items (at most 2 <code>ips</code> for each subnet).</p>
<pre><code>➜✗ xn pull is/subnet/id/520 '[id name network_address [(desc (limit ips 2) name) [id name]]]'


[ { id: 520,
    name: 'DKC\'s Amazon VPC - Front-End IPs',
    network_address: '10.0.0.0/17',
    ips:
     [ { id: 2501, name: '10.0.0.7' },
       { id: 2498, name: '10.0.0.6' } ] } ]
</code></pre>
<p>Specifying limit and offset.</p>
<pre><code>➜✗ xn pull is/subnet/id/520 '[id name network_address [(limit (desc ips name) 2 2) [id name]]]'
</code></pre>

        </div>

    </div>]