[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Before we list everything you can define in a xnlogic part, it could be helpful to have a better understanding of the xnlogic stack.</p>
<ul>
<li>
<a href="https://github.com/tinkerpop/blueprints/wiki/Property-Graph-Model">Property graphs</a> allow us to store properties within vertices (and edges).</li>
<li>
<a href="https://github.com/pangloss/pacer/wiki/Pacer-extensions">Pacer extensions</a> allow us to attach methods to vertices, edges, and <a href="https://github.com/pangloss/pacer/wiki/Routes">routes</a>.</li>
<li>xnlogic parts are Pacer extensions with "extra goodies baked in".
<ul>
<li>Mapping extension methods to the xnlogic REST API.</li>
<li>Property validation.</li>
<li>Authorization.</li>
<li>Transactions.</li>
</ul>
</li>
</ul>
<hr/>
<p>In terms of the code, this is what a typical Pacer extension looks like:</p>
<div class="highlight highlight-source-ruby"><pre><span class="pl-k">module</span> <span class="pl-en">TheExtensionName</span>

    <span class="pl-k">module</span> <span class="pl-en">Vertex</span>
        <span class="pl-c"><span class="pl-c">#</span> Methods that will extend individual vertices ...</span>
    <span class="pl-k">end</span>

    <span class="pl-k">module</span> <span class="pl-en">Route</span>
        <span class="pl-c"><span class="pl-c">#</span> Methods that will extend a route of vertices ...</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p><em>Side Note:</em> You may have noticed that Pacer extensions can be applied to both vertices and edges, yet we keep focusing on vertices. This is because, in xnlogic, we only use vertices to explicitly store data. Edges are used to automatically maintain relations by the xnlogic framework.</p>
<hr/>
<p>In order to "convert" your Pacer extension into a xnlogic part, you need to add the <code>xn_part</code> statement:</p>
<div class="highlight highlight-source-ruby"><pre><span class="pl-k">module</span> <span class="pl-en">ThePartName</span>
    xn_part

    <span class="pl-k">module</span> <span class="pl-en">Vertex</span>
        <span class="pl-c"><span class="pl-c">#</span> Methods that will extend individual vertices ...</span>
    <span class="pl-k">end</span>

    <span class="pl-k">module</span> <span class="pl-en">Route</span>
        <span class="pl-c"><span class="pl-c">#</span> Methods that will extend a route of vertices ...</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Next, let's see what else we can define inside a part ...</p>
<h3>
<a aria-hidden="true" class="anchor" href="#properties" id="user-content-properties"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Properties</h3>
<p>Properties are defined with a type. The xnlogic framework will generate getter and setter methods, with type checking.</p>
<div class="highlight highlight-source-ruby"><pre>property <span class="pl-c1">:property_name</span>, <span class="pl-c1">type:</span> <span class="pl-c1">:text</span>
property <span class="pl-c1">:some_other_property</span>, <span class="pl-c1">type:</span> <span class="pl-c1">:numeric</span></pre></div>
<p>We can also define display properties, which are essentially getter methods.</p>

        </div>

    </div>]