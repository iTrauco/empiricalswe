[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>xnlogic allows us to model our data, without the limitations of traditional class hierarchy trees.
The basic concept behind this flexible data model is simple:</p>
<ul>
<li>
<em>Model Objects</em> correspond to vertices in the graph.</li>
<li>
<em>Model Types</em> and are defined as a list of <em>parts</em>.</li>
<li>
<em>Parts</em> (aka extensions) are Ruby modules that define domain-specific functionality.</li>
</ul>
<br/>
<br/>
![Data Modeling Diagram](img/data_modeling1.png)
<br/>
<br/>
<p>In this section, we will go through detailed examples that will teach you how to model your data with xnlogic. We will also mention various technical subtleties and gotchas, hoping to help speed up your development process.</p>
<p>Before you dive into data modeling with xnlogic, you should have basic familiarity with <a href="https://github.com/pangloss/pacer/wiki">Pacer</a>. Pacer is the underlying library that provides us with efficient graph traversal and an extensible object model. In fact, xnlogic parts can be viewed as "<a href="https://github.com/pangloss/pacer/wiki/Pacer-extensions">Pacer Extensions</a> on steroids".</p>
<hr/>
<p><em>NOTE:</em> We are currently in the process of updating our documentation. Until we complete the process, you might find some of the old documentation (which might be slightly out of date) useful:</p>
<ul>
<li><a class="internal present" href="/xnlogic/xnlogic/wiki/DSL-intro">DSL intro</a></li>
<li><a class="internal present" href="/xnlogic/xnlogic/wiki/Structuring-an-application">Structuring an application</a></li>
<li><a class="internal present" href="/xnlogic/xnlogic/wiki/Part-patterns">Part patterns</a></li>
</ul>

        </div>

    </div>]