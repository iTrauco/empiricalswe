[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#the-obvious-question-may-be-asked-why-did-i-write-my-own-observables" id="user-content-the-obvious-question-may-be-asked-why-did-i-write-my-own-observables"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>The obvious question may be asked, why did I write my own observables?</h3>
<p>The answer is flexibility.  I looked at <a href="https://github.com/ReactiveX/RxJava">RxJava</a>, and while their system is robust and full-featured, it lacks flexibility.  The Observable class itself is final.  While I can see some of their reasoning for doing this, I felt I wanted the observables I used to be more flexible; specifically, I wanted the base observables to be interfaces, not classes.  With default method implementations in Java 8, observable interfaces made a lot of sense, so I wrote them.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#there-are-several-types-of-observable-structures-in-observe" id="user-content-there-are-several-types-of-observable-structures-in-observe"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>There are several types of observable structures in ObServe:</h3>
<ul>
<li>
<a href="https://github.com/Updownquark/ObServe/blob/master/src/main/java/org/observe/Observable.java">Observable</a>.  This is the base of the observable structures in ObServe.  An Observable is any single source of change.  Observables may be</li>
<li>filtered, to avoid receiving irrelevant values</li>
<li>mapped, to transform values into other values</li>
<li>combined, to use the values from multiple observables as one</li>
<li>limited, via take(int) or takeUntil(Observable), to unsubscribe from an observable after its content is no longer relevant</li>
<li>and various other operations.  Custom observable sub-interfaces may also be created that do special things.</li>
<li>
<a href="https://github.com/Updownquark/ObServe/blob/master/src/main/java/org/observe/ObservableValue.java">ObservableValue</a>. ObservableValues are known in rxJava as "cold" observables.  This is an observable (actually does not extend Observable, but provides the changes Observable) that always has a value.  This value can be accessed on-demand via the get() method.  An ObservableValue's change is an Observable of <a href="https://github.com/Updownquark/ObServe/blob/master/src/main/java/org/observe/ObservableValueEvent.java">ObservableValueEvent</a>s.  Each event contains not only the latest value of the observable, but also the previous value (when applicable) and possibly an object representing the source of the change (typically an instanceof Qommons' Causable, often an ObservableValueEvent itself).  This extra information enables better tracking.  An ObservableValue may be used identically to a plain Observable using the ObservableValue.value() method.</li>
<li>
<a class="internal present" href="/Updownquark/ObServe/wiki/ObservableCollection-API">ObservableCollection</a>.  ObservableCollections are collections that can be observed and transformed similarly to Observables.</li>
<li>
<a href="https://github.com/Updownquark/ObServe/blob/master/src/main/java/org/observe/datastruct/ObservableMap.java">ObservableMap</a>. A map implementation that allows observation of map values.</li>
<li>
<a href="https://github.com/Updownquark/ObServe/blob/master/src/main/java/org/observe/datastruct/ObservableMultiMap.java">ObservableMultiMap</a>  A map for which multiple values may be stored per key.</li>
<li>
<a href="https://github.com/Updownquark/ObServe/blob/master/src/main/java/org/observe/datastruct/ObservableGraph.java">ObservableGraph</a>  A set of nodes, each of which has a value, connected by edges, each of which also has a value.</li>
</ul>

        </div>

    </div>]