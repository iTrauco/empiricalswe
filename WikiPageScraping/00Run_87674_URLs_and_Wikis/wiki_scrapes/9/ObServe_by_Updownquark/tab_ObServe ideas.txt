[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>These are ideas for the observable DB</p>
<ul>
<li>
<p>DB rows are entity instances</p>
</li>
<li>
<p>Each concrete entity type in at least one separate file</p>
</li>
<li>
<p>Option to partition entities based on any sorting function</p>
</li>
<li>
<p>Each partition would have at least one separate file</p>
</li>
<li>
<p>For types or partitions with large numbers of values, could be split into multiple files</p>
</li>
<li>
<p>Instances would take up constant space in file to enable random-access</p>
</li>
<li>
<p>Maintain index to unused locations</p>
</li>
<li>
<p>Have different serialization options</p>
</li>
<li>
<p>Human readable (possibly padded XML)</p>
</li>
<li>
<p>Not human-writable (could violate constant space).  Editor needed.</p>
</li>
<li>
<p>Binary (space-saving)</p>
</li>
<li>
<p>Hybrid (e.g. Qommons JSON)</p>
</li>
<li>
<p>Large data types stored separately</p>
</li>
<li>
<p>Save space: null values would have no entry</p>
</li>
<li>
<p>Large, variable-size types stored differently, one file per value</p>
</li>
<li>
<p>Maintain index of value ID to file path</p>
</li>
<li>
<p>Maintain files/folders to make values easy to navigate</p>
</li>
<li>
<p>Structure indexes to be random-accessible via algorithm given the file size</p>
</li>
<li>
<p>Hash</p>
</li>
<li>
<p>Tree</p>
</li>
<li>
<p>Entities returned by queries or created by inserts would know the constraints associated with their fields and check them at run time</p>
</li>
<li>
<p>Need easy way to disable reference checking temporarily</p>
</li>
<li>
<p>Entity field would be observable</p>
</li>
<li>
<p>Entities are interfaces</p>
</li>
<li>
<p>Instances only created by the DB engine, either on demand (insert), or as result of a query</p>
</li>
<li>
<p>Mirrored by observable entities, share all the same field values</p>
</li>
<li>
<p>Calling setters in entity instances would cause observable events in the mirroring observable entity's observable fields</p>
</li>
<li>
<p>Get observable fields from observable entities by passing in the interface entity's getter method (<code>EntityIntf::getFieldName</code>)</p>
</li>
<li>
<p><code>&lt;E, F&gt; ObservableValue&lt;F&gt; ObservableEntity&lt;E&gt;.getField(Function&lt;E, F&gt; field);</code></p>
</li>
<li>
<p>Implementation invokes the function on a simple proxy to determine which field getter it is</p>
</li>
<li>
<p>Queries would mirror functionality of observable values and collections</p>
</li>
<li>
<p>Map, filter, etc. would not take general Functions, but DBFunctions created by the engine which would allow complex, type-safe transformations and filtering but are recognizable by the query engine.</p>
</li>
<li>
<p>Use the engine to create a query; transform the query to get only the information you're interested in.  Invoke the query to get the observable results.</p>
</li>
</ul>

        </div>

    </div>]