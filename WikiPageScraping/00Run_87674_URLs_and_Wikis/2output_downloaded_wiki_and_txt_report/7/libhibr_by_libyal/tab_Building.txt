[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#read-first" id="user-content-read-first"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Read first</h1>
<p>GitHub will offer you the download options "Source code (zip)" and "Source code (tar.gz)". These are copies of the source, as-is, in the git repository and not suited for distribution. Instead it is highly recommend to use the provided <a href="Building#source-distribution-package">source distribution package</a>, which contains all the necessary dependencies.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#introduction" id="user-content-introduction"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Introduction</h1>
<p>The libhibr source code can be build with different compilers:</p>
<ul>
<li>
<a href="Building#using-gnu-compiler-collection-gcc">Using GNU Compiler Collection (GCC)</a>
<ul>
<li><a href="Building#cygwin">Using Cygwin</a></li>
</ul>
</li>
<li><a href="Building#using-minimalist-gnu-for-windows-mingw">Using Minimalist GNU for Windows (MinGW)</a></li>
<li><a href="Building#using-microsoft-visual-studio">Using Microsoft Visual Studio</a></li>
</ul>
<p>Or directly packaged with different package managers:</p>
<ul>
<li><a href="Building#using-debian-package-tools-deb">Using Debian package tools (DEB)</a></li>
<li><a href="Building#using-redhat-package-tools-rpm">Using RedHat package tools (RPM)</a></li>
<li><a href="Building#using-mac-os-x-pkgbuild">Using Mac OS X pkgbuild</a></li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#getting-the-source" id="user-content-getting-the-source"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting the source</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#source-distribution-package" id="user-content-source-distribution-package"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Source distribution package</h2>
<p>To retrieve the source distribution package go to the <a href="https://github.com/libyal/libhibr/releases/">downloads</a> page and download the file named:</p>
<pre><code>libhibr-experimental-&lt;version&gt;.tar.gz
</code></pre>
<p>To extract the source distribution package run:</p>
<pre><code>tar xfv libhibr-experimental-&lt;version&gt;.tar.gz
</code></pre>
<p>This will create the source directory:</p>
<pre><code>libhibr-&lt;version&gt;
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#git" id="user-content-git"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Git</h2>
<p><strong>Note that the git repository holds the development version of the source code.</strong></p>
<p><strong>If you are not developing it is recommended that you download a source distribution package instead.</strong></p>
<p>To retrieve the source from the git repository make sure to install:</p>
<ul>
<li>git</li>
<li>aclocal</li>
<li>autoconf</li>
<li>automake</li>
<li>autopoint or gettextize</li>
<li>libtoolize</li>
<li>pkg-config</li>
</ul>
<p>To download and prepare the source for building run:</p>
<pre><code>git clone https://github.com/libyal/libhibr.git
cd libhibr/
./synclibs.sh
./autogen.sh
</code></pre>
<p>The source from the git repository will not work without synchronizing the library dependencies "./synclibs.sh" and having the autotools generate the necessary files "./autogen.sh".</p>
<h3>
<a aria-hidden="true" class="anchor" href="#debianubuntu" id="user-content-debianubuntu"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Debian/Ubuntu</h3>
<p>On Debian based Linux distributions such as Ubuntu install the following packages:</p>
<pre><code>sudo apt install autoconf automake autopoint libtool pkg-config
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#mac-os-x" id="user-content-mac-os-x"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Mac OS X</h3>
<p>On Mac OS X the XCode command line tools no longer provide the autotools you can obtain them e.g. via <a href="https://www.macports.org/" rel="nofollow">MacPorts</a>.
Install the following packages:</p>
<pre><code>sudo port install autoconf automake gettext libtool pkgconfig
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#microsoft-visual-studio" id="user-content-microsoft-visual-studio"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Microsoft Visual Studio</h3>
<p>Since Microsoft Visual Studio does not come with a Unix shell or equivalent you'll need to use the Windows PowerShell scripts instead:</p>
<pre><code>git clone https://github.com/libyal/libhibr.git
cd libhibr\
.\synclibs.ps1
.\autogen.ps1
</code></pre>
<p>Check "appveyor.yml" to make sure there are additional PowerShell scripts you need to run.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#using-gnu-compiler-collection-gcc" id="user-content-using-gnu-compiler-collection-gcc"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using GNU Compiler Collection (GCC)</h1>
<p>Before you build the libhibr source code using the GNU Compiler Collection (GCC) you'll need to have compilation and build tools installed.</p>
<ul>
<li>On a Linux system make sure you have build-essential (Debian-based) or the Development Tools (RedHat-based) packages installed.</li>
<li>On a Mac OS X system make sure you have XCode (with command line tools) or MacPorts (or equivalent) installed.</li>
</ul>
<p>To build the libhibr source code change into the source directory and run the following commands:</p>
<pre><code>./configure
make
</code></pre>
<p>You can install the binaries that were build by running:</p>
<pre><code>sudo make install
</code></pre>
<p>By default this will install the binaries in /usr/local. If you want to change this to e.g. /usr, add the configuration option --prefix=/usr, e.g.</p>
<pre><code>./configure --prefix=/usr
</code></pre>
<p>On Linux make sure libhibr.so is in the library cache. Normally it suffices to run:</p>
<pre><code>sudo ldconfig
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#verbose-and-debug-output" id="user-content-verbose-and-debug-output"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Verbose and debug output</h2>
<p>To troubleshoot issues or for low-level format analysis libhibr supports verbose and debug output.</p>
<p>To enable verbose and debug output support add --enable-verbose-output and --enable-debug-output to configure, e.g.</p>
<pre><code>./configure --enable-verbose-output --enable-debug-output
</code></pre>
<p>This will generate vast amounts of debug information on stderr when the tools are run with -v.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#static-library" id="user-content-static-library"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Static library</h2>
<p>To make a static library add --enable-shared=no to configure, .e.g:</p>
<pre><code>./configure --enable-shared=no
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#static-executables" id="user-content-static-executables"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Static executables</h2>
<p>Some distributions provide separate packages for static versions of libraries. Make sure you have a static versions of:</p>
<ul>
<li>glibc</li>
</ul>
<p>To make static executables add --enable-static-executables=yes to configure, .e.g:</p>
<pre><code>./configure --enable-static-executables=yes
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#cygwin" id="user-content-cygwin"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Cygwin</h2>
<p>If you want to use Cygwin to build libhibr make sure to have the following packages installed:</p>
<ul>
<li>autoconf</li>
<li>automake</li>
<li>binutils</li>
<li>gcc-core</li>
<li>gettext</li>
<li>libiconv</li>
<li>libtool</li>
<li>make</li>
<li>pkg-config</li>
</ul>
<p>After following the GNU Compiler Collection (GCC) build instructions you should end up with the following DLL:</p>
<pre><code>libhibr/.libs/cyghibr-0.dll
</code></pre>
<p>And the following executables:</p>
<pre><code>hibrtools/.libs/hibrinfo.exe
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#using-the-dll" id="user-content-using-the-dll"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using the DLL</h3>
<p>Make sure you use define LIBHIBR_DLL_IMPORT before including &lt;libhibr.h&gt;.</p>
<p>To be able to use the DLL on other systems than the build system you'll also need to provide:</p>
<ul>
<li>cygwin1.dll</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#mac-os-x-1" id="user-content-mac-os-x-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Mac OS X</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#universal-binary" id="user-content-universal-binary"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Universal binary</h3>
<p>With XCode you can build a Mac OS X universal binary to run on multiple architectures. The supported architectures and exact command differs per version of Mac OS X.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#mac-os-x-104" id="user-content-mac-os-x-104"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Mac OS X 10.4</h4>
<p>E.g. on Mac OS X 10.4 to build an PPC and Intel 32-bit multi binary, run the following commands:</p>
<pre><code>CFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch ppc -arch i386" \
LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk -arch ppc -arch i386" \
./configure --disable-dependency-tracking
make
make install
</code></pre>
<h4>
<a aria-hidden="true" class="anchor" href="#mac-os-x-106" id="user-content-mac-os-x-106"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Mac OS X 10.6</h4>
<p>E.g. on Mac OS X 10.6 to build an Intel 32-bit and 64-bit multi binary, run the following commands:</p>
<pre><code>CFLAGS="-isysroot /Developer/SDKs/MacOSX10.6.sdk -arch x86_64 -arch i386" \
LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.6.sdk -arch x86_64 -arch i386" \
./configure --disable-dependency-tracking
make
make install
</code></pre>
<h4>
<a aria-hidden="true" class="anchor" href="#mac-os-x-107" id="user-content-mac-os-x-107"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Mac OS X 10.7</h4>
<p>E.g. on Mac OS X 10.7 to build an Intel 32-bit and 64-bit multi binary, run the following commands:</p>
<pre><code>CFLAGS="-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk -arch x86_64 -arch i386" \
LDFLAGS="-Wl,-syslibroot,/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk -arch x86_64 -arch i386" \
./configure --disable-dependency-tracking
make
make install
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#libtoolize" id="user-content-libtoolize"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>libtoolize</h3>
<p>If you find that libtoolize is missing use glibtoolize instead.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#sun-solaris" id="user-content-sun-solaris"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Sun Solaris</h2>
<p>To build libhibr on Sun Solaris make sure that /usr/ccs/bin and /usr/sfw/bin are defined in the PATH environment variable.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#using-minimalist-gnu-for-windows-mingw" id="user-content-using-minimalist-gnu-for-windows-mingw"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using Minimalist GNU for Windows (MinGW)</h1>
<p>To compile libhibr using MinGW you'll need:</p>
<ul>
<li>MinGW</li>
</ul>
<p>To build use:</p>
<pre><code>mingw32-configure --prefix=/opt/local/i386-mingw32 --enable-winapi=yes
mingw32-make
</code></pre>
<p>It is recommended that you use WINAPI support but it is possible to compile libhibr without it (--enable-winapi=no).
The default behavior is that configure will try to auto-detect MinGW and enable WINAPI support.</p>
<p>If mingw32-configure and mingw32-make are not available you can build it with:</p>
<pre><code>./configure --host=i386-mingw32 --prefix=/opt/local/i386-mingw32 --enable-winapi=yes
make
</code></pre>
<p>If this does not work try a script similar to the following:</p>
<pre><code>#!/bin/sh
CC=/opt/local/bin/i386-mingw32-gcc
CXX=/opt/local/bin/i386-mingw32-g++
AR=/opt/local/bin/i386-mingw32-ar
OBJDUMP=/opt/local/bin/i386-mingw32-objdump
RANLIB=/opt/local/bin/i386-mingw32-ranlib
STRIP=/opt/local/bin/i386-mingw32-strip
MINGWFLAGS="-mwin32 -mconsole -march=i586 "
CFLAGS="$MINGWFLAGS"
CXXFLAGS="$MINGWFLAGS"

CC=$CC CXX=$CXX AR=$AR OBJDUMP=$OBJDUMP RANLIB=$RANLIB STRIP=$STRIP ./configure --host=i586-mingw32msvc --prefix=/opt/local/i386-mingw32 --enable-winapi=yes
CC=$CC CXX=$CXX AR=$AR OBJDUMP=$OBJDUMP RANLIB=$RANLIB STRIP=$STRIP CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" make
</code></pre>
<p>If you get compiler errors like:</p>
<pre><code>#error WINAPI file open function for Windows 2000 or earlier NOT implemented yet
</code></pre>
<p>That means WINVER is not set or set to a version predating Windows XP (0x0501) and you'll have to set WINVER manually like:</p>
<pre><code>CFLAGS=-DWINVER=0x0501 ./configure --host=i386-mingw32 --enable-winapi=yes
</code></pre>
<p>You should end up with the following DLL:</p>
<pre><code>libhibr/.libs/libhibr-1.dll
</code></pre>
<p>And the following executables:</p>
<pre><code>hibrtools/.libs/hibrinfo.exe
</code></pre>
<p>To install libhibr and tools in the MinGW build tree use:</p>
<pre><code>sudo make install
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#using-msys-mingw" id="user-content-using-msys-mingw"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using MSYS-MinGW</h2>
<p>MSYS-MinGW provides means to run configure on Windows.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#installing-msys-mingw" id="user-content-installing-msys-mingw"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Installing MSYS-MinGW</h3>
<p>Download mingw-get from <a href="http://www.mingw.org/" rel="nofollow">http://www.mingw.org/</a></p>
<p>Install mingw-get, you'll only need the command line interface.</p>
<p>More information can be found <a href="http://www.mingw.org/wiki/InstallationHOWTOforMinGW" rel="nofollow">here</a>.</p>
<p>Start a command prompt and change into the MinGW binaries directory:</p>
<pre><code>cmd.exe
cd C:\mingw\bin\
</code></pre>
<p>To install the required MinGW and MSYS packages run:</p>
<pre><code>mingw-get install binutils mingw-runtime w32api libgmp libmpc libiconv pthreads gettext libz gcc-core mingw32-make msys
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#building-with-msys-mingw" id="user-content-building-with-msys-mingw"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Building with MSYS-MinGW</h3>
<p>Start the MSYS shell:</p>
<pre><code>C:\MinGW\msys\1.0\msys.bat
</code></pre>
<p>Make sure the MinGW directory is mounted, otherwise run the following command to mount:</p>
<pre><code>mkdir /mingw
mount C:\\MinGW /mingw
</code></pre>
<p><strong>Note: make sure to use the the double \ and that /mingw has no trailing /</strong></p>
<p>To build use:</p>
<pre><code>tar xfv libhibr-experimental-&lt;version&gt;.tar.gz
cd libhibr-&lt;version&gt;/
CPPFLAGS=-DWINVER=0x0501 ./configure --prefix=/mingw
make
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#using-the-dll-1" id="user-content-using-the-dll-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using the DLL</h2>
<p>Make sure you use define LIBHIBR_DLL_IMPORT before including &lt;libhibr.h&gt;.</p>
<p>To be able to use the DLL on other systems than the build system you'll also need to provide:</p>
<ul>
<li>libgcc_s_dw2-1.dll (or equivalent)</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#troubleshooting" id="user-content-troubleshooting"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Troubleshooting</h2>
<p>While running make I get an error similar to the following:</p>
<pre><code>libclocale_locale.c: In function 'libclocal_local_get_decimal_point':
libclocale_locale.c:357:2: warning implicit declaration of function 'GetLocaleInfoEx' [-Wimplicit-function-declaration]
libclocale_locale.c:358:7: error: 'LOCALE_NAME_USER_DEFAULT' undeclared (first use in this function)
libclocale_locale.c:358:7: note: each undeclared identifier is reported only once for every function it appears in
</code></pre>
<p>The version of MinGW does not support a WINAPI version of Vista or later (0x0600) try setting WINVER to 0x0501.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#using-microsoft-visual-studio" id="user-content-using-microsoft-visual-studio"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using Microsoft Visual Studio</h1>
<p>Before you build libhibr using Microsoft Visual Studio you'll need to have it installed.
The libhibr packages comes with Microsoft Visual Studio files for version 2008.
Version 2010 is able to convert these files into its newer versions.</p>
<p>The Microsoft Visual Studio express version is sufficient.
Note that if you want to build 64-bit version with the express version you'll need at least 2010.
Also see the section: Microsoft Visual Studio 2010 express and 64-bit compilation.</p>
<p>Note that if you want to build libhibr from source checked out of git with Visual Studio make sure the autotools are able to make a distribution package of libhibr before trying to build it.
You can create distribution package by running: "make dist".</p>
<h2>
<a aria-hidden="true" class="anchor" href="#verbose-and-debug-output-1" id="user-content-verbose-and-debug-output-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Verbose and debug output</h2>
<p>To troubleshoot issues or for low-level format analysis libhibr supports verbose and debug output.</p>
<p>To enable verbose and debug output support edit:</p>
<pre><code>common\config_winapi.h
</code></pre>
<p>Add the following definitions:</p>
<pre><code>#define HAVE_VERBOSE_OUTPUT     1
#define HAVE_DEBUG_OUTPUT       1
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#building" id="user-content-building"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Building</h2>
<p>Open the file:</p>
<pre><code>msvscpp\libhibr.sln
</code></pre>
<p>Note that the project files contain a Release and VSDebug configuration.
The VSDebug builds the binaries with debug information.
Note that this is not the same as debug output.</p>
<p>Make sure to check if your build environment defines the correct WINVER for your build.
The code uses WINAPI version specific functions based on WINVER.
You can define a custom WINVER in the Microsoft Visual Studio C++ project files or in common\config_winapi.h</p>
<p>And build the solution. The build files will be places in:</p>
<pre><code>msvscpp\Release\
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#using-msbuild" id="user-content-using-msbuild"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using MSBuild</h3>
<p>Another way to build libhibr with Visual Studio is to use MSBuild via the command line.
MSBuild can be installed as part of the Microsoft.NET Framework.</p>
<p>First set-up the Visual Studio variables:</p>
<pre><code>C:\Program Files\Microsoft Visual Studio 9.0\VC\bin\vcvars32.bat
</code></pre>
<p>Next run MSBuild:</p>
<pre><code>msbuild msvscpp\libhibr.sln /p:Configuration=Release;Platform=Win32
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#using-the-dll-2" id="user-content-using-the-dll-2"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using the DLL</h2>
<p>Make sure you use define LIBHIBR_DLL_IMPORT before including &lt;libhibr.h&gt;.</p>
<p>To be able to use the DLL on other systems than the build system you'll also need to provide:</p>
<ul>
<li>the Microsoft Visual C++ Run-Time DLL (part of the Visual C++ Redistributable package)</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#64-bit-with-microsoft-visual-studio-express" id="user-content-64-bit-with-microsoft-visual-studio-express"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>64-bit with Microsoft Visual Studio express</h2>
<p>To build a 64-bit version of libhibr with Microsoft Visual Studio
express you'll need at least the 2010 version.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#microsoft-visual-studio-2010" id="user-content-microsoft-visual-studio-2010"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Microsoft Visual Studio 2010</h3>
<p>First make sure to enabling 64-bit compilation support on Microsoft Visual
Studio 2010 express. Since this can be a tedious process, some relevant links:</p>
<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/vstudio/9yb4317s(v=vs.100).aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/vstudio/9yb4317s(v=vs.100).aspx</a></li>
<li><a href="http://support.microsoft.com/kb/2519277" rel="nofollow">http://support.microsoft.com/kb/2519277</a></li>
</ul>
<p>If you have set it up correctly the following should work:</p>
<p>Go to:</p>
<pre><code>Configuration manager -&gt; Active solution platform
</code></pre>
<p>Select "<code>&lt;New&gt;</code>"</p>
<ul>
<li>Type or select the new platform: "x64"</li>
<li>Copy settings from: "Win32"</li>
<li>Create new project platforms: enabled</li>
</ul>
<p>Additionally for every project change:</p>
<pre><code>Configuration Properties -&gt; General -&gt; Platform Toolset
</code></pre>
<p>Into "Windows7.1SDK"</p>
<p>If you've Python installed on your Visual Studio build machine you can try
running <a href="https://github.com/libyal/libyal/wiki/msvscpp-convert">msvscpp-convert</a>
to convert the Visual Studio 2008 solution files to 2010 format and add the x64
settings for you.</p>
<pre><code>msvscpp-convert.py --to 2010 msvscpp\libcstring.sln
</code></pre>
<p>This will create a subdirectory named vs2010 which contains the Visual Studio
2010 solution files.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#using-debian-package-tools-deb" id="user-content-using-debian-package-tools-deb"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using Debian package tools (DEB)</h1>
<p>To build libhibr using the Debian package tools make sure you have the following packages installed:</p>
<pre><code>sudo apt-get install build-essential debhelper fakeroot autotools-dev 
</code></pre>
<p>If you downloaded the source using git make sure to run ./configure at least once to generate the dpkg packaging files.</p>
<p>To build the Debian packages change into the source directory and run:</p>
<pre><code>cp -rf dpkg debian
dpkg-buildpackage -rfakeroot
</code></pre>
<p>This will create the following files in the parent directory:</p>
<pre><code>libhibr_&lt;version&gt;-1_&lt;arch&gt;.deb
libhibr-dev_&lt;version&gt;-1_&lt;arch&gt;.deb
libhibr-tools_&lt;version&gt;-1_&lt;arch&gt;.deb
</code></pre>
<p>To install, e.g. the library:</p>
<pre><code>sudo dpkg -i libhibr_&lt;version&gt;-1_&lt;arch&gt;.deb
</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#using-redhat-package-tools-rpm" id="user-content-using-redhat-package-tools-rpm"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using RedHat package tools (RPM)</h1>
<p>To build libhibr using the RedHat package tools make sure you have the following packages installed:</p>
<pre><code>yum install rpm-build 
</code></pre>
<p>To build:</p>
<pre><code>mv libhibr-experimental-&lt;version&gt;.tar.gz libhibr-&lt;version&gt;.tar.gz
rpmbuild -ta libhibr-&lt;version&gt;.tar.gz
</code></pre>
<p>This will create the following files in the rpmbuild directory:</p>
<pre><code>~/rpmbuild/RPMS/&lt;arch&gt;/libhibr-&lt;version&gt;-1.&lt;arch&gt;.rpm
~/rpmbuild/RPMS/&lt;arch&gt;/libhibr-devel-&lt;version&gt;-1.&lt;arch&gt;.rpm
~/rpmbuild/RPMS/&lt;arch&gt;/libhibr-tools-&lt;version&gt;-1.&lt;arch&gt;.rpm
~/rpmbuild/SRPMS/libhibr-&lt;version&gt;-1.src.rpm
</code></pre>
<p>To install, e.g. the library:</p>
<pre><code>sudo rpm -ivh libhibr-&lt;version&gt;-1.&lt;arch&gt;.rpm
</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#using-mac-os-x-pkgbuild" id="user-content-using-mac-os-x-pkgbuild"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using Mac OS X pkgbuild</h1>
<p>pkgbuild can be used to create a Mac OS X package.</p>
<p>The following instructions show how to build libhibr.pkg and libhibr.dmg from the command line.</p>
<p>First build libhibr:</p>
<pre><code>./configure --prefix=/usr
make
</code></pre>
<p>Next install the build files using DESTDIR</p>
<pre><code>make install DESTDIR=$PWD/tmp
</code></pre>
<p>This will make sure that library paths in the dylib file is set correctly for distribution.
This is not the case when you use:</p>
<pre><code>./configure --prefix=$PWD/tmp
</code></pre>
<p>You can check the library paths in the dylib by running:</p>
<pre><code>otool -LT tmp/usr/lib/libhibr.1.dylib
</code></pre>
<p>After running "make install" the binaries are installed in:</p>
<pre><code>$PWD/tmp/
</code></pre>
<p>If you are planning to distribute libhibr.pkg make sure it contains a copy of LGPL license:</p>
<pre><code>mkdir -p $PWD/tmp/usr/share/doc/libhibr
cp AUTHORS COPYING NEWS README $PWD/tmp/usr/share/doc/libhibr
</code></pre>
<p>To create the package (directory):</p>
<pre><code>pkgbuild --root $PWD/tmp --identifier com.github.libyal.libhibr --version &lt;version&gt; --ownership recommended ../libhibr-&lt;version&gt;.pkg
</code></pre>
<p>To create a distributable disk image:</p>
<pre><code>hdiutil create ../libhibr-&lt;version&gt;.dmg -srcfolder ../libhibr-&lt;version&gt;.pkg -fs HFS+
</code></pre>

        </div>

    </div>]