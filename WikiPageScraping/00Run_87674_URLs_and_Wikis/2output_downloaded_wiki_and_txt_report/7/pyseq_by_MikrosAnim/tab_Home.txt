[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#pyseq" id="user-content-pyseq"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>PySeq</h1>
<p>PySeq is a python module that finds groups of items that follow a naming convention containing
a numerical sequence index (e.g. fileA.001.png, fileA.002.png, fileA.003.png...) and serializes
them into a compressed sequence string representing the entire sequence (e.g. fileA.1-3.png). It
should work regardless of where the numerical sequence index is embedded in the name. For examples,
see basic usage below or <a href="http://rsgalloway.github.com/pyseq">http://rsgalloway.github.com/pyseq</a></p>
<h2>
<a aria-hidden="true" class="anchor" href="#installation" id="user-content-installation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Installation</h2>
<p>Installation using setuputils: ::</p>
<p>% easy_install pyseq</p>
<h2>
<a aria-hidden="true" class="anchor" href="#basic-usage" id="user-content-basic-usage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Basic Usage</h2>
<p>Using the "z1" file sequence example in the "tests" directory, we start by listing the directory
contents using <code>ls</code>. ::</p>
<pre><code>% ls tests/z1*
tests/z1_001_v1.1.png    tests/z1_001_v1.4.png    tests/z1_002_v1.3.png    tests/z1_002_v2.2.png
tests/z1_001_v1.2.png    tests/z1_002_v1.1.png    tests/z1_002_v1.4.png    tests/z1_002_v2.3.png
tests/z1_001_v1.3.png    tests/z1_002_v1.2.png    tests/z1_002_v2.1.png    tests/z1_002_v2.4.png
</code></pre>
<p>Now we list the same directory contents using <code>lss</code>, which will find the sequences and display them
in the default compressed format. ::</p>
<pre><code>% lss tests/z1*
   4 z1_001_v1.%d.png 1-4
   4 z1_002_v1.%d.png 1-4
   4 z1_002_v2.%d.png 1-4
</code></pre>
<p>... with a custom format: ::</p>
<pre><code>% lss tests/z1* -f "%h%r%t"
z1_001_v1.1-4.png
z1_002_v1.1-4.png
z1_002_v2.1-4.png
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#api-examples" id="user-content-api-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>API Examples</h2>
<p>Compression, or serialization, of lists of items ::</p>
<pre><code>&gt;&gt;&gt; s = Sequence(['file.0001.jpg', 'file.0002.jpg', 'file.0003.jpg'])
&gt;&gt;&gt; print s
file.1-3.jpg
&gt;&gt;&gt; s.append('file.0006.jpg')
&gt;&gt;&gt; print s.format("%h%p%t %R")
file.%04d.jpg 1-3 6
&gt;&gt;&gt; s.contains('file.0009.jpg')
True
&gt;&gt;&gt; s.contains('file.0009.pic')
False
</code></pre>
<p>Uncompression, or deserialization, of compressed sequences strings ::</p>
<pre><code>&gt;&gt;&gt; s = uncompress('012_vb_110_v002.1-150.dpx', format="%h%r%t")
&gt;&gt;&gt; len(s)
150
&gt;&gt;&gt; seq = uncompress('./tests/012_vb_110_v001.%04d.png 1-10', format='%h%p%t %r')
&gt;&gt;&gt; print seq.format('%04l %h%p%t %R')
  10 012_vb_110_v001.%04d.png 1-10
</code></pre>

        </div>

    </div>]