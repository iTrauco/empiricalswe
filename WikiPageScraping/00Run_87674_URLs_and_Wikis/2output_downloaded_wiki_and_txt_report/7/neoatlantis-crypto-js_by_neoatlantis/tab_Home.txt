[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Welcome to the <code>enigma-jscrypto</code> wiki!</p>
<p>The <code>enigma-jscrypto</code> project aims at creating a self-contained javascript library, which does:</p>
<ul>
<li>symmetric encryption and decryption</li>
<li>asymmetric encryption and decryption</li>
<li>hashing</li>
<li>some PGP alike functionalities</li>
</ul>
<p>I as the author have decided to observe only the ideas, but not the standards of the above listed functionalities. Except the results of hashing, nearly every listed aspect will not conform existing standards.
Nor would I later make it so.</p>
<p><strong>If you want a standard conforming implementation, please type <code>Ctrl+W</code> or <code>Alt+F4</code> NOW.</strong></p>
<h2>
<a aria-hidden="true" class="anchor" href="#my-goal" id="user-content-my-goal"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>My Goal</h2>
<p>If you have however, decided to continue your reading(to which I shall appreciate), I would like to introduce my goal: The library <em>enigma-jscrypto</em> should be part of the system <em>enigma</em>. The latter name corresponds to a system written in JavaScript and runs as a Client-Server infrastructured program on an isolated computer or even an embedded system. It serves as a flexible tool to protect communications with relative small data packets, e.g. WeChat, Microblogging, Instant Messaging, or Emails.</p>
<p>Such applications, whatever it is, may use a plugin to call the API to send requests to our <em>enigma</em> system. A responsive designed browser UI pops up the request, asks the user to confirm the destination and/or sign the message. The proceeded message is given back by API to the application. On receiving, ciphertext is feed to <em>enigma</em> and decrypted and/or verified. The user is responsible for the decision, whether to forward the cleartext to the outside world.</p>
<p>The role that this library <em>enigma-jscrypto</em> plays, is providing a all-in-one solution for all the complex cryptographic jobs. The library can be compiled into one single file, without dependencies and runable on both NodeJS and Browser(tested with Firefox and Chrome). It is not very fast, especially the asymmetric cipher(done with Elliptic Curve algorithms). It takes one to two seconds to set up a asymmetric cipher instance. For encryption with asymmetric ciphers, it takes for neglible small data some hundred milli-seconds on a i5 laptop within Firefox 31. For mobile phones, this may require 10 times more time. And since it is not asynchronous, this will simply block up the application.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#differences-from-pgp" id="user-content-differences-from-pgp"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Differences from PGP</h2>
<p>The library has very similar functionalities like PGP. I've decided not to use PGP as my backend, as I've realized following facts:</p>
<ul>
<li>I want to design an <code>identity</code>(much like PGP-key) based system. But I want Elliptic Curve algorithms(which provides higher security and speed with smaller amount of data) and a easy-to-manage key. The secret key in my system is only somewhat randomly choosen bytes. It works as seeds to derive 2 different secrets being fed into the ECDH(which I've modified into a public key cipher) and ECDSA. You may even derive the initial secret using user's password and a initial vector, which eases the key management.</li>
<li>I want to use cascaded symmetric cipher. This is not fully achieved, but I'll work on that. Currently Salsa20/20 together with AES-256-ECB(yes ECB, but there is Salsa20) is done.</li>
<li>I want to use flexible signatures(except the self-signature) to represent the trust relationship between identities. A signature may represent trust, untrust, authorization, revocation, etc. You may use the signature on an <code>identity</code>, to authorize the identity holder to enter a special area(a server or a military zone). This can be flexible. And therefore I've decided to exclude this special data format from the core library(it's just a special payload carried by enigma ciphertext.</li>
<li>I want API exposed from my library. Not something like <code>enigma-me</code>.</li>
</ul>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><strong>EHRE SEI CRYPTOGRAPHIE IN DER GRAUSAMEN WELT</strong></p>

          </div>
        </div>
    </div>]