[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Java is a superior language to build websites but according to w3ctechs.com PHP is used by 82% of all the websites for server-side programming language and Java is used by less than 4% of the websites.</p>
<p>What’s wrong with Java?</p>
<p>When Java was out, big players like IBM, BEA Oracle etc. saw a great opportunity to make money as it is a great language for web programming. But how can you make big money around a programming language? The answer is to build servers on top of it and make it complicated so big corporations will pay big bucks for it. That is why we have JEE specs, JSRs, Weblogic, Websphere and other servers.</p>
<p>Large packages are deployed on these servers that are run so slow and used too much memory. Development and Debugging within a container was a nightmare for developers and they usually paid well to compensating the pain.</p>
<p>Because of resource usage is too high, you could not find public hosting company to support Java with a reasonable price tag. You want to build a website in Java, you have to pay big bucks for hosting even you might just use a Servlet container.</p>
<p>For a long time, Java was used within enterprises and big corporations as only they can afford million-dollar application servers and well paid enterprise level developers. I myself have been riding the train since beginning as a JEE consultant☺</p>
<p>In 2003, Rod Johnson released Spring Framework and it allows IoC and POJO for development without EJBs. The productivity increment is huge and a lot of developers jumped onto it and thrown J2EE EJBs out of windows. The application venders saw this and in JEE5, they provide some features to make developer more productive and less painful. Unfortunately, today’s Spring Framework is so bloated like JEE containers.</p>
<p>During this period of time, PHP was flying. It use less memory and resource and was well supported by hosting companies. Some CMS platform built on PHP like WordPress, Drupal etc. drove a lot of open source developers into PHP. Although PHP is the most popular language these days, it has its shortcomings. It is slow and hard to make it scalable.</p>
<p>In 2009, Ryan Dahl introduced Node.js that supports asynchronous, non-blocking and event-driven I/O. This increase the response rate dramatically as the server threads are well utilized and the throughput of a single server can be comparable to a cluster of servers. Node.js is a very good design but it has its limitations. Based on my limited knowledge, it is hard to scale and hard to integrate with existing legacy systems.</p>
<p>In 2014, a new player Undertow came in town and it is Java based non-blocking web server. From techempower.com test, it serves over 1 million requests per second on a single $8000 dell server using the same test case Google claimed to serve 1 million requests with a cluster. It is lightweight with the core coming under 1Mb and a simple embedded server uses less than 4Mb of heap space. With todays single page application build on Javascript frameworks like AngularJS, you only need HTTP and optional Web Socket for your server to serve resources. And this sever can be an embedded Undertow with less than 100 lines of code.</p>
<p>The Undertow opens the door for Java developer’s productivity and cheap web hosting for Java. Given above reasons, I have built a platform called Light Framework that utilizes AngularJS, Undertow, OrientDB, Hazelcast and Light Rule Engine.</p>
<p>It is domain driven design with command/event sourcing and CQRS. When Angularjs app talks to resource server, it always send a command with either GET or POST and the server will translate it into an event to saved into event store for tracing, logging, auditing and user behaviour analysis. From the command, the REST handler of Undertow will translate it into a package and Java class just by concatenation of the common fields in the command json object. Then the Light Rule Engine looks up the rule class instance in a hash map to handle the command. All rules are POJO and implement a common interface. They can be unit tested and hot deployed to production server on a class basis.</p>
<p>For more detail, take a look at <a href="http://www.github.com/networknt">www.github.com/networknt</a> or <a href="http://www.networknt.com" rel="nofollow">www.networknt.com</a></p>
<p>References:</p>
<p><a href="http://blog.websitesframeworks.com/2013/03/programming-language-statistics-in-server-side-161/" rel="nofollow">Server-side programming language statistics</a></p>
<p><a href="http://w3techs.com/technologies/details/pl-php/all/all" rel="nofollow">Usage statistics and market share of PHP for websites</a></p>
<p><a href="https://www.techempower.com/blog/2014/03/04/one-million-http-rps-without-load-balancing-is-easy/" rel="nofollow">One million HTTP RPS without load balancing is easy</a></p>

        </div>

    </div>]