[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>For Omnichannel application to work properly and truly across channels or even across brands, a light weight thin server layer is a must.</p>
<p>Here is the role of the thin server:</p>
<ol>
<li>
<p>Support integration with legacy system which is a traditional JEE application or other type of web services. With this layer, we don't need to change the current legacy system but just calling the current interface from our thin server. In this way, we have a relatively stable API to shield our Omnichannel app and experience.</p>
</li>
<li>
<p>This layer is responsible for caching. It is Domain Driven Design with command/event sourcing along with CQRS and can be clustered with distributed cache like Coherence or Hazelcast. Possible to have all the cached data in memory to serve query part of the app and support decision making for UI commands depending on the infrastructure setup.</p>
</li>
<li>
<p>Additional layer of security. Experience/App generate command and the thin server generate event which is persisted for replay in order to regenerate the aggregates. The Omnichannel experiences/apps are not connect to the legacy system directly.</p>
</li>
<li>
<p>Distributed transaction management across two different web services or REST APIs. For example, fund transfer between two different types of account and each has its own REST API. The thin server is responsible for validation and make sure the transaction is committed on both resources.</p>
</li>
<li>
<p>UI exception logging and monitoring. As experiences/apps are running on browser, you don't know if end users get exceptions or not. One way to do that is to log client side exception to the thin server and the support team can monitor it. If the REST API is command/event sourcing, then we know exactly all the events happening on the browser side and the exception is reproducible.</p>
</li>
<li>
<p>Another benefit of command/event sourcing between Angular and Thin Server is that the user behaviour on the browser are logged and the information is valuable for sales. Think about one customer use his phone to do research on life insurance product and he is showing up to the branch to do other type of transactions and our sales reps know he is interested in life insurance:)</p>
</li>
<li>
<p>Thin server stack I have used are Undertow, Orientdb, Hazelcast and Light Rule engine(Built on my own and open sourced). It can be replace with TD infrastructure.</p>
</li>
</ol>

        </div>

    </div>]