[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#mysql-passwords-in-proxysql" id="user-content-mysql-passwords-in-proxysql"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>MySQL Passwords in ProxySQL</h1>
<p>ProxySQL is a protocol aware proxy.<br/>
Because ProxySQL performs routing based on traffic, when a client connects it cannot yet identify a destination HG, therefore ProxySQL needs to authenticate the client.<br/>
For this reason, it needs to have some information related to the password of the user: enough information to allow the authentication.</p>
<p>ProxySQL also needs these information to later establish connections to backends, or issue <code>CHANGE_USER</code> within already established connections.</p>
<p>The 3 layers configuration architecture applies also for users information.<br/>
ProxySQL stores users information in table <code>mysql_users</code>:</p>
<ul>
<li>an object <code>MySQL_Authentication()</code> is responsible to store these information at runtime;</li>
<li>
<code>main</code>.<code>mysql_users</code> is the in-memory database;</li>
<li>
<code>disk</code>.<code>mysql_users</code> is the on-disk database.</li>
</ul>
<p>In <code>mysql_users</code> tables, both in-memory and on-disk, the credentials are stored in columns <code>username</code> and <code>password</code>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#password-formats" id="user-content-password-formats"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Password formats</h2>
<p>Password can be stored in 2 formats in <code>mysql_users</code>.<code>password</code> , no matter if in-memory or on-disk:</p>
<ul>
<li>plain text</li>
<li>hashed password</li>
</ul>
<p>Passwords in plain text are simple as that, very easy to read. If database and config file are kept in a safe location the security concern is limited, yet present.
Hashed passwords have the same format of the passwords in MySQL server, as stored into column <code>mysql</code>.<code>user</code>.<code>password</code>.</p>
<p>ProxySQL considers a password starting with <code>*</code> has a hashed password.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#hashed-passwords-and-authentication" id="user-content-hashed-passwords-and-authentication"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Hashed passwords and authentication</h3>
<p>In MySQL and in ProxySQL, a hashed password is <code>SHA1(SHA1('clear_password'))</code> .<br/>
From a hashed password is not possible to derive a plain text password.<br/>
When a client connects to ProxySQL, this is able to authenticate it using the hashed password.<br/>
During the first client authentication, ProxySQL can derive a partially hashed password: <code>SHA1('clear_password')</code> . This information is internally stored at runtime and allows ProxySQL to connect to backends.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#how-to-input-new-passwords" id="user-content-how-to-input-new-passwords"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to input new passwords</h3>
<p>The Admin interface of ProxySQL does not have any  <code>PASSWORD()</code> function. This means that:</p>
<ul>
<li>passwords are stored in the format they are inserted, either in plain text or hashed</li>
<li>while inputting password in the Admin interface, it is not possible to derive an hashed password from a plain text password (yet you can run <code>SELECT PASSWORD('password')</code> in MySQL server and copy paste the result)</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#variable-admin-hash_passwords" id="user-content-variable-admin-hash_passwords"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Variable <code>admin-hash_passwords</code>
</h3>
<p>To facilitate the support of hashed passwords, ProxySQL v1.2.3 introduced a new global boolean variable, <code>admin-hash_passwords</code>, enabled by default.<br/>
When <code>admin-hash_passwords=true</code> , password are automatically hashed <em>at RUNTIME only</em> when running <code>LOAD MYSQL USERS TO RUNTIME</code> .
Passwords in <code>mysql_users</code> tables are yet <em>not</em> automatically hashed.<br/>
Nonetheless, it is easily possible to hash the passwords in <code>mysql_users</code> table, both in-memory and on-disk. It is enough to copy users <em>from RUNTIME</em>, for example running <code>SAVE MYSQL USERS FROM RUNTIME</code> after <code>LOAD MYSQL USERS TO RUNTIME</code>, and then <code>SAVE MYSQL USERS TO DISK</code> (recommended).</p>
<p>Here an example:</p>
<div class="highlight highlight-source-sql"><pre>Admin<span class="pl-k">&gt;</span> <span class="pl-k">SELECT</span> <span class="pl-k">*</span> <span class="pl-k">FROM</span> mysql_users;
Empty <span class="pl-k">set</span> (<span class="pl-c1">0</span>.<span class="pl-c1">00</span> sec)

Admin<span class="pl-k">&gt;</span> <span class="pl-k">INSERT INTO</span> mysql_users(username,password) <span class="pl-k">VALUES</span> (<span class="pl-s"><span class="pl-pds">'</span>user1<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>password1<span class="pl-pds">'</span></span>), (<span class="pl-s"><span class="pl-pds">'</span>user2<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>password2<span class="pl-pds">'</span></span>);
Query OK, <span class="pl-c1">2</span> rows affected (<span class="pl-c1">0</span>.<span class="pl-c1">00</span> sec)

Admin<span class="pl-k">&gt;</span> <span class="pl-k">SELECT</span> username,password <span class="pl-k">FROM</span> mysql_users;
<span class="pl-k">+</span><span class="pl-c"><span class="pl-c">--</span>--------+-----------+</span>
| username | password  |
<span class="pl-k">+</span><span class="pl-c"><span class="pl-c">--</span>--------+-----------+</span>
| user1    | password1 |
| user2    | password2 |
<span class="pl-k">+</span><span class="pl-c"><span class="pl-c">--</span>--------+-----------+</span>
<span class="pl-c1">2</span> rows <span class="pl-k">in</span> <span class="pl-k">set</span> (<span class="pl-c1">0</span>.<span class="pl-c1">00</span> sec)

Admin<span class="pl-k">&gt;</span> LOAD MYSQL USERS TO RUNTIME;
Query OK, <span class="pl-c1">0</span> rows affected (<span class="pl-c1">0</span>.<span class="pl-c1">00</span> sec)

Admin<span class="pl-k">&gt;</span> <span class="pl-k">SELECT</span> username,password <span class="pl-k">FROM</span> mysql_users;
<span class="pl-k">+</span><span class="pl-c"><span class="pl-c">--</span>--------+-----------+</span>
| username | password  |
<span class="pl-k">+</span><span class="pl-c"><span class="pl-c">--</span>--------+-----------+</span>
| user1    | password1 |
| user2    | password2 |
<span class="pl-k">+</span><span class="pl-c"><span class="pl-c">--</span>--------+-----------+</span>
<span class="pl-c1">2</span> rows <span class="pl-k">in</span> <span class="pl-k">set</span> (<span class="pl-c1">0</span>.<span class="pl-c1">00</span> sec)</pre></div>
<p>At this stage, passwords are hashed at runtime, but still not hashed on <code>mysql_users</code>. To hash them also on <code>mysql_users</code> :</p>
<div class="highlight highlight-source-sql"><pre>Admin<span class="pl-k">&gt;</span> SAVE MYSQL USERS <span class="pl-k">FROM</span> RUNTIME;
Query OK, <span class="pl-c1">0</span> rows affected (<span class="pl-c1">0</span>.<span class="pl-c1">00</span> sec)

Admin<span class="pl-k">&gt;</span> <span class="pl-k">SELECT</span> username,password <span class="pl-k">FROM</span> mysql_users;
<span class="pl-k">+</span><span class="pl-c"><span class="pl-c">--</span>--------+-------------------------------------------+</span>
| username | password                                  |
<span class="pl-k">+</span><span class="pl-c"><span class="pl-c">--</span>--------+-------------------------------------------+</span>
| user1    | <span class="pl-k">*</span>668425423DB5193AF921380129F465A6425216D0 |
| user2    | <span class="pl-k">*</span>DC52755F3C09F5923046BD42AFA76BD1D80DF2E9 |
<span class="pl-k">+</span><span class="pl-c"><span class="pl-c">--</span>--------+-------------------------------------------+</span>
<span class="pl-c1">2</span> rows <span class="pl-k">in</span> <span class="pl-k">set</span> (<span class="pl-c1">0</span>.<span class="pl-c1">00</span> sec)</pre></div>
<p>The hashed password can now be saved to disk running <code>SAVE MYSQL USERS TO DISK</code> .</p>
<p><strong>Note</strong>: <code>admin-hash_passwords</code> is an <code>admin-</code> variable, not a <code>mysql-</code> variable. This because it affects the behaviour of Admin.<br/>
This details is important because to apply changes in <code>admin-hash_passwords</code> you need to run <code>LOAD ADMIN VARIABLES TO RUNTIME</code> and <strong>not</strong> <code>LOAD MYSQL VARIABLES TO RUNTIME</code></p>

        </div>

    </div>]