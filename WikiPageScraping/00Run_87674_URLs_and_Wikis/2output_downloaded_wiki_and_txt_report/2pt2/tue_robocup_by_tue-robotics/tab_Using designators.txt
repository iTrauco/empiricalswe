[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>#Using Designators for an executive
Using designators has several sides: simply using existing classes for designators and states, creating your own state with existing designators and finally writing custom designators.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">import</span> robot_smach_states.util.designators <span class="pl-k">as</span> ds</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#i-want-to-pass-a-string-from-one-state-to-another" id="user-content-i-want-to-pass-a-string-from-one-state-to-another"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>I want to pass a string from one state to another</h2>
<div class="highlight highlight-source-python"><pre>variable_des <span class="pl-k">=</span> ds.VariableDesignator(<span class="pl-s"><span class="pl-pds">"</span>Original_value<span class="pl-pds">"</span></span>)

states.WritingState(robot, variable_des.writeable) <span class="pl-c"><span class="pl-c">#</span>Indicate that this state can write to variable_des</span>
states.NormalState(robot, varibale_des) <span class="pl-c"><span class="pl-c">#</span>No special indication needed</span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#i-want-to-specify-a-specific-entity" id="user-content-i-want-to-specify-a-specific-entity"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>I want to specify a specific Entity</h2>
<div class="highlight highlight-source-python"><pre>entity_des <span class="pl-k">=</span> ds.EntityByIdDesignator(robot, <span class="pl-v">id</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>abcdef1234<span class="pl-pds">"</span></span>, <span class="pl-v">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>entity_des<span class="pl-pds">"</span></span>)

states.DoSomethingWithEntity(robot, entity_des)</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#i-want-to-specify-an-arm-for-grabbing" id="user-content-i-want-to-specify-an-arm-for-grabbing"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>I want to specify an arm for grabbing</h2>
<div class="highlight highlight-source-python"><pre>empty_arm_des <span class="pl-k">=</span> ds.UnoccupiedArmDesignator(robot.arms, robot.arms[name=<span class="pl-s"><span class="pl-pds">"</span>empty_arm_designator<span class="pl-pds">"</span></span>)

states.DoSomethingWithArm(robot, empty_arm_des)</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#i-want-to-specify-an-arm-for-placing-some-item" id="user-content-i-want-to-specify-an-arm-for-placing-some-item"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>I want to specify an arm for placing some item</h2>
<div class="highlight highlight-source-python"><pre>current_item <span class="pl-k">=</span> ds.EntityByIdDesignator(robot, <span class="pl-v">id</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>abcdef1234<span class="pl-pds">"</span></span>, <span class="pl-v">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>entity_des<span class="pl-pds">"</span></span>) 
<span class="pl-c"><span class="pl-c">#</span>o place something, use the arms that is holding that thing</span>
arm_with_item_designator <span class="pl-k">=</span> ds.ArmHoldingEntityDesignator(robot.arms, current_item, <span class="pl-v">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>arm_with_item_designator<span class="pl-pds">"</span></span>)

states.DoSomethingWithArmThatHoldsAnItem(robot, empty_arm_des)</pre></div>
<h1>
<a aria-hidden="true" class="anchor" href="#using-designators-in-a-state-machine" id="user-content-using-designators-in-a-state-machine"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using designators in a state (machine)</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#my-state-needs-a-designator-resolving-to-some-type" id="user-content-my-state-needs-a-designator-resolving-to-some-type"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>My state needs a designator resolving to some type</h2>
<p>For example, the entityDes below should resolve to an EntityInfo. You can check the resolve_type of the designator and see if it matches.
If it fails, you'll get an exception when the challenge starts.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">import</span> robot_smach_states.util.designators <span class="pl-k">as</span> ds
<span class="pl-k">from</span> ed.msg <span class="pl-k">import</span> EntityInfo

<span class="pl-k">class</span> <span class="pl-en">SomeState</span>(<span class="pl-e">smach</span>.<span class="pl-e">State</span>):
    <span class="pl-k">def</span> <span class="pl-c1">__init__</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>, <span class="pl-smi">robot</span>, <span class="pl-smi">entityDes</span>):
        ds.check_resolve_type(entityDes, EntityInfo) <span class="pl-c"><span class="pl-c">#</span>Check the resolve_type</span>
        <span class="pl-c1">self</span>.entityDes <span class="pl-k">=</span> entityDes
        <span class="pl-c"><span class="pl-c">#</span>etc</span>

    <span class="pl-k">def</span> <span class="pl-en">execute</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>, <span class="pl-smi">userdata</span><span class="pl-k">=</span><span class="pl-c1">None</span>):
        entity <span class="pl-k">=</span> <span class="pl-c1">self</span>.entityDes.resolve()
        <span class="pl-k">if</span> <span class="pl-k">not</span> entity:
            <span class="pl-c"><span class="pl-c">#</span>deal with it</span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#my-state-needs-to-write-something-and-should-check-whether-a-designator-is-writeable" id="user-content-my-state-needs-to-write-something-and-should-check-whether-a-designator-is-writeable"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>My state needs to write something and should check whether a designator is writeable</h2>
<p>For example, the entityDes below should resolve to an EntityInfo. You can check the resolve_type of the designator and see if it matches.
If it fails, you'll get an exception when the challenge starts.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">import</span> robot_smach_states.util.designators <span class="pl-k">as</span> ds

<span class="pl-k">class</span> <span class="pl-en">SomeState</span>(<span class="pl-e">smach</span>.<span class="pl-e">State</span>):
    <span class="pl-k">def</span> <span class="pl-c1">__init__</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>, <span class="pl-smi">robot</span>, <span class="pl-smi">variableDes</span>):
        ds.is_writeable(variableDes) <span class="pl-c"><span class="pl-c">#</span>Check the resolve_type</span>
        <span class="pl-c1">self</span>.variableDes <span class="pl-k">=</span> variableDes
        <span class="pl-c"><span class="pl-c">#</span>etc</span>

    <span class="pl-k">def</span> <span class="pl-en">execute</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>, <span class="pl-smi">userdata</span><span class="pl-k">=</span><span class="pl-c1">None</span>):
         value <span class="pl-k">=</span> something
         <span class="pl-c1">self</span>.variableDes.write(value)</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#creating-your-own-designator" id="user-content-creating-your-own-designator"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creating your own designator</h2>
<p>To implement your own designators, be sure to inherit from another designator class.
That way, all checks and introspection stuff works out of the box.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">import</span> robot_smach_states.util.designators <span class="pl-k">as</span> ds
<span class="pl-k">from</span> ed.msg <span class="pl-k">import</span> EntityInfo

<span class="pl-k">class</span> <span class="pl-en">EntityByIdDesignator</span>(<span class="pl-e">ds</span>.<span class="pl-e">Designator</span>):
    <span class="pl-k">def</span> <span class="pl-c1">__init__</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>, <span class="pl-smi">robot</span>, <span class="pl-smi">id</span>, <span class="pl-smi">parse</span><span class="pl-k">=</span><span class="pl-c1">True</span>, <span class="pl-smi">name</span><span class="pl-k">=</span><span class="pl-c1">None</span>): <span class="pl-c"><span class="pl-c">#</span>Passing a name is handy for introspection</span>
        <span class="pl-c1">super</span>(EntityByIdDesignator, <span class="pl-c1">self</span>).<span class="pl-c1">__init__</span>(<span class="pl-v">resolve_type</span><span class="pl-k">=</span>EntityInfo, <span class="pl-v">name</span><span class="pl-k">=</span>name) <span class="pl-c"><span class="pl-c">#</span>Specify the resolve_type and name for typechecks and introspection. </span>
        <span class="pl-c"><span class="pl-c">#</span>etc</span>

    <span class="pl-k">def</span> <span class="pl-en">_resolve</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>): <span class="pl-c"><span class="pl-c">#</span>Implement _resolve rather than resolve (notice the underscore). The resolve-method of the base class does typechecks. </span>
        entities <span class="pl-k">=</span> <span class="pl-c1">self</span>.ed.get_entities(<span class="pl-v">id</span><span class="pl-k">=</span><span class="pl-c1">self</span>.id_, <span class="pl-v">parse</span><span class="pl-k">=</span><span class="pl-c1">self</span>.parse)
        <span class="pl-k">if</span> entities:
            <span class="pl-k">return</span> entities[<span class="pl-c1">0</span>](<span class="pl-s"><span class="pl-pds">'</span>left<span class="pl-pds">'</span></span>],)
        <span class="pl-k">else</span>:
            <span class="pl-k">return</span> <span class="pl-c1">None</span></pre></div>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>:)</p>

          </div>
        </div>
    </div>]