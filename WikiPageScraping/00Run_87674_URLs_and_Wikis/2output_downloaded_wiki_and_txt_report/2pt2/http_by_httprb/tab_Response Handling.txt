[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>When we make an HTTP request, we obtain an <code>HTTP::Response</code> object:</p>
<div class="highlight highlight-source-ruby"><pre><span class="pl-k">&gt;&gt;</span> response <span class="pl-k">=</span> <span class="pl-c1">HTTP</span>.get(<span class="pl-s"><span class="pl-pds">'</span>https://www.google.com<span class="pl-pds">'</span></span>)
=&gt; <span class="pl-c"><span class="pl-c">#</span>&lt;HTTP/1.0 200 OK @headers={"Content-Type"=&gt;"text/html; charset=UTF-8", "Date"=&gt;"Fri, ...&gt;</span></pre></div>
<p>There are several methods of interest we can call on the response (see also the <a href="http://www.rubydoc.info/gems/http/HTTP/Response" rel="nofollow">YARD documentation</a>):</p>
<ul>
<li>
<strong>#body</strong>: (returns <code>HTTP::Response::Body</code>) an object representing the body. Can be used for streaming</li>
<li>
<strong>#code</strong>: (returns <code>Fixnum</code>) the HTTP status code of the response</li>
<li>
<strong>#content_type</strong>: (returns <code>HTTP::ContentType</code>) the content type of the response</li>
<li>
<strong>#cookies</strong>: (returns <code>HTTP::CookieJar</code>) a cookie jar containing all of the response cookies for a request</li>
<li>
<strong>#flush</strong>: (returns <code>self</code>) reads and discards the response body. Useful for persistent connections</li>
<li>
<strong>#parse</strong>: (return value depends on MIME type) parse the body using a parser defined for the <code>#content_type</code>
</li>
<li>
<strong>#to_s</strong>: (returns <code>String</code>) quickly obtain the response body as a string</li>
</ul>

        </div>

    </div>]