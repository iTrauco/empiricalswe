[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>When you need to define relationships between Entities, along with other custom behaviors, you have to create an EntityMap class.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\EntityMap</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">ProductMap</span> <span class="pl-k">extends</span> <span class="pl-e">EntityMap</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<p>If the resides in the same namespace, alongside with the entity, with the 'Map' suffix, it will be autodetected by Analogue :</p>
<p>Category<br/>
CategoryMap<br/>
Product<br/>
ProductMap<br/>
...</p>
<p>Alternatively, you can explicitly register the class using the Analogue::register() method.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-c"><span class="pl-c">//</span> using class namespaces :</span></span>
<span class="pl-s1"><span class="pl-smi">$analogue</span><span class="pl-k">-&gt;</span>register(<span class="pl-c1">Category</span><span class="pl-k">::</span><span class="pl-c1">class</span>, <span class="pl-c1">CategoryMap</span><span class="pl-k">::</span><span class="pl-c1">class</span>);</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-c"><span class="pl-c">//</span> or using object instances :</span></span>
<span class="pl-s1"><span class="pl-smi">$analogue</span><span class="pl-k">-&gt;</span>register(<span class="pl-smi">$entity</span>, <span class="pl-smi">$entityMap</span>)</span>
<span class="pl-s1"></span></pre></div>
<p>Another autodetection alternative can be used if you keep your entity maps in a separate namespace.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-smi">$analogue</span><span class="pl-k">-&gt;</span>registerMapNamespace(<span class="pl-s"><span class="pl-pds">'</span>App\Entities\Map<span class="pl-pds">'</span></span>);</span></pre></div>
<p>This will instruct Analogue to autodetect maps for your entities in the given namespace. For example, for an <code>App\Entities\Category</code> entity, it will check for the <code>App\Entities\Map\CategoryMap</code> class.</p>
<p>You can call this method multiple times to add further map namespaces.</p>
<p><strong>Note:</strong> the register() and registerMapNamespace() methods have to be called when bootstrapping the application, before the first call to Analogue::mapper() on the given entity is made.</p>
<p>In Laravel, place them in the boot() method of your service provider.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#options-" id="user-content-options-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Options :</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#database-table" id="user-content-database-table"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Database Table</h3>
<p>Use the $table property to setup a custom table name :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\EntityMap</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">ProductMap</span> <span class="pl-k">extends</span> <span class="pl-e">EntityMap</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$table</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>product<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#primary-key" id="user-content-primary-key"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Primary Key</h3>
<p>Use the $primaryKey property to setup a custom primary key :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$primaryKey</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>product_id<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"></span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#entity-class" id="user-content-entity-class"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Entity Class</h3>
<p>Use the $class property to indicate the class name of the Entity the Map is attached to.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$class</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>App\Products\Product<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"></span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#timestamps-and-softdeletes" id="user-content-timestamps-and-softdeletes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Timestamps and SoftDeletes</h2>
<p>Timestamps and SoftDeletes are supported via plugins. If you use Analogue with the included service provider, these plugins are automatically loaded for you.</p>
<p>Otherwise, you need to register them at boot time :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-smi">$analogue</span><span class="pl-k">-&gt;</span>registerPlugin(<span class="pl-s"><span class="pl-pds">'</span>Analogue\ORM\Plugins\Timestamps\TimestampsPlugin<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1"><span class="pl-smi">$analogue</span><span class="pl-k">-&gt;</span>registerPlugin(<span class="pl-s"><span class="pl-pds">'</span>Analogue\ORM\Plugins\SoftDeletes\SoftDeletesPlugin<span class="pl-pds">'</span></span>);</span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#timestamps" id="user-content-timestamps"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Timestamps</h3>
<p>Timestamps are two columns, <em>created_at</em> and <em>updated_at</em>, that will automatically update upon creation or update of your entity. They are <em>disabled</em> by default. To enable timestamps support :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-smi">$timestamps</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</span>
<span class="pl-s1"></span></pre></div>
<p>Overriding timestamps column names</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$createdAtColumn</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>creation_date<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$updatedAtColumn</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>update_date<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"></span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#soft-deletes" id="user-content-soft-deletes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Soft Deletes</h3>
<p>When soft deleting an entity, it is not actually removed from your database. Instead, a deleted_at timestamp is set on the record.</p>
<p>To enable soft delete support :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-smi">$softDeletes</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</span>
<span class="pl-s1"></span></pre></div>
<p>Overriding Soft Delete column name</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$deletedAtColumn</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>delete_date<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"></span></pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#querying-deleted-entities" id="user-content-querying-deleted-entities"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Querying deleted entities</h4>
<p>Softdeletes uses Scopes on the query object meaning that every call to <em>$mapper-&gt;query()</em> will only apply on the non-deleted entities.</p>
<p>To retrieve deleted entities :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-smi">$trashed</span> <span class="pl-k">=</span> <span class="pl-smi">$mapper</span><span class="pl-k">-&gt;</span>globalQuery()<span class="pl-k">-&gt;</span>whereNotNull(<span class="pl-s"><span class="pl-pds">'</span>deleted_at<span class="pl-pds">'</span></span>)<span class="pl-k">-&gt;</span>get();</span>
<span class="pl-s1"></span></pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#restoring-entities" id="user-content-restoring-entities"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Restoring entities</h4>
<p>The Soft Deletes plugin adds a <em>restore()</em> method to the mapper, simply pass the Entity or a Collection of entities to restore them :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-smi">$mapper</span><span class="pl-k">-&gt;</span>restore(<span class="pl-smi">$entity</span>);</span>
<span class="pl-s1"></span></pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#emptying-trash" id="user-content-emptying-trash"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Emptying Trash</h4>
<p>To definitely erase a soft deleted Entity from the database, simply pass it to the delete method :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-smi">$trashed</span> <span class="pl-k">=</span> <span class="pl-smi">$mapper</span><span class="pl-k">-&gt;</span>globalQuery()<span class="pl-k">-&gt;</span>whereNotNull(<span class="pl-s"><span class="pl-pds">'</span>deleted_at<span class="pl-pds">'</span></span>)<span class="pl-k">-&gt;</span>get();</span>
<span class="pl-s1"><span class="pl-smi">$mapper</span><span class="pl-k">-&gt;</span>delete(<span class="pl-smi">$trashed</span>);</span>
<span class="pl-s1"></span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#relationships" id="user-content-relationships"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Relationships</h2>
<p>Relationships are defined as methods on the EntityMap class. These methods are used internaly by the mapper to assign related entities &amp; collection to your entity object. To learn how to work with related enties, check the <a href="#">tutorial</a>.</p>
<p>Here are the available relationships types :</p>
<ul>
<li><a href="#one-to-one">One To One</a></li>
<li><a href="#one-to-many">One To Many</a></li>
<li><a href="#many-to-many">Many To Many</a></li>
<li><a href="#has-many-through">Has Many Through</a></li>
<li><a href="#polymorphic-one-to-many">Polymorphic One To Many</a></li>
<li><a href="#polymorphic-many-to-many">Polymorphic Many To Many</a></li>
</ul>
<p>The relationship methods only take one argument, which is the entity Object initiating the relation. This argument has to be <em>type hinted to the correct entity class</em>, as analogue uses Reflection to autodetect EntityMap's relationships.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">App\User</span>;</span>
<span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">App\Role</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">UserMap</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">role</span>(<span class="pl-c1">User</span> <span class="pl-smi">$user</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>hasOne(<span class="pl-smi">$user</span>, <span class="pl-c1">Role</span><span class="pl-k">::</span><span class="pl-c1">class</span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#one-to-one" id="user-content-one-to-one"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>One to One</h3>
<ul>
<li>(optional) <strong>foreign_key</strong>: Name of the key column on the related entity.</li>
<li>(optional) <strong>local_key</strong>  : Name of the key on the initiating entity.</li>
</ul>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">role</span>(<span class="pl-c1">User</span> <span class="pl-smi">$user</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>hasOne(<span class="pl-smi">$user</span>, <span class="pl-c1">Role</span><span class="pl-k">::</span><span class="pl-c1">class</span>, <span class="pl-s"><span class="pl-pds">'</span>foreign_key<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>local_key<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span></pre></div>
<p>The inverse, of this relation, on the RoleMap class :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">user</span>(<span class="pl-c1">Role</span> <span class="pl-smi">$role</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>belongsTo(<span class="pl-smi">$role</span>, <span class="pl-c1">User</span><span class="pl-k">::</span><span class="pl-c1">class</span>, <span class="pl-s"><span class="pl-pds">'</span>local_key<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>parent_key<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#one-to-many" id="user-content-one-to-many"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>One to Many</h3>
<p>The One to Many relation method works the same as the one to one, but results in a Collection instead of a single Entity.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">permissions</span>(<span class="pl-c1">Role</span> <span class="pl-smi">$role</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>hasMany(<span class="pl-smi">$role</span>, <span class="pl-c1">Permission</span><span class="pl-k">::</span><span class="pl-c1">class</span>, <span class="pl-s"><span class="pl-pds">'</span>foreign_key<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>local_key<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span></pre></div>
<p>The inverse, of this relation, on the PermissionMap class :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">role</span>(<span class="pl-c1">Permission</span> <span class="pl-smi">$permission</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>belongsTo(<span class="pl-smi">$permission</span>, <span class="pl-c1">Role</span><span class="pl-k">::</span><span class="pl-c1">class</span>, <span class="pl-s"><span class="pl-pds">'</span>local_key<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>parent_key<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#many-to-many" id="user-content-many-to-many"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Many to Many</h3>
<p>Many to many relationships link two Entity class through a pivot table. Example for users that can have multiple resources they share :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">resources</span>(<span class="pl-c1">User</span> <span class="pl-smi">$user</span>)</span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>belongsToMany(<span class="pl-smi">$user</span>, <span class="pl-s"><span class="pl-pds">'</span>App\Resource<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>user_resource<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>user_id<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>resource_id<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">}</span></pre></div>
<ul>
<li>(optional) *user_resource : name of the pivot table</li>
<li>(optional) *user_id       : key for User on the pivot table</li>
<li>(optional) *resource_id   : key for Resource on the pivot table</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#has-many-through" id="user-content-has-many-through"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Has Many Through</h3>
<p>The "has many through" relation provides a convenient short-cut for accessing distant relations via an intermediate relation. For example, a Country might have many Post through a User entity.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">posts</span>(<span class="pl-c1">Country</span> <span class="pl-smi">$country</span>)</span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>hasManyThrough(<span class="pl-smi">$country</span>, <span class="pl-s"><span class="pl-pds">'</span>App\Post<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>App\User<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>country_id<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>user_id<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">}</span></pre></div>
<ul>
<li>(optional) *country_id: key on the User table</li>
<li>(optional) *user_id   : key on the Post table</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#polymorphic-one-to-many" id="user-content-polymorphic-one-to-many"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Polymorphic One To Many</h3>
<p>Polymorphic relations allow a entities to belong to more than one other Entity class, on a single association. For example an Article or a blog Post may have a featured Image.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">ImageMap</span> <span class="pl-k">extends</span> <span class="pl-e">EntityMap</span> {</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">imageable</span>(<span class="pl-c1">Image</span> <span class="pl-smi">$image</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>morphTo(<span class="pl-smi">$image</span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">ArticleMap</span> <span class="pl-k">extends</span> <span class="pl-e">Model</span> {</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">images</span>(<span class="pl-c1">Article</span> <span class="pl-smi">$article</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>morphMany(<span class="pl-smi">$article</span>, <span class="pl-s"><span class="pl-pds">'</span>App\Image<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>imageable<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">PostMap</span> <span class="pl-k">extends</span> <span class="pl-e">Model</span> {</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">images</span>(<span class="pl-c1">Post</span> <span class="pl-smi">$post</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>morphMany(<span class="pl-smi">$post</span>, <span class="pl-s"><span class="pl-pds">'</span>App\Image<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>imageable<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#polymorphic-many-to-many" id="user-content-polymorphic-many-to-many"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Polymorphic Many To Many</h3>
<p>In addition to traditional polymorphic relations, you may also specify many-to-many polymorphic relations. If we take our previous examples, both Article and Post could share the same Image entities.</p>
<p>What we need in that case is to create a 'imageables' pivot table containing :</p>
<p>image_id (integer)
imageable_type (string)
imageable_id (integer)</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">ArticleMap</span> <span class="pl-k">extends</span> <span class="pl-e">Model</span> {</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">images</span>(<span class="pl-c1">Article</span> <span class="pl-smi">$article</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>morphToMany(<span class="pl-smi">$article</span>, <span class="pl-s"><span class="pl-pds">'</span>App\Image<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>imageable<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">PostMap</span> <span class="pl-k">extends</span> <span class="pl-e">Model</span> {</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">images</span>(<span class="pl-c1">Post</span> <span class="pl-smi">$post</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>morphToMany(<span class="pl-smi">$post</span>, <span class="pl-s"><span class="pl-pds">'</span>App\Image<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>imageable<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>
<p>The ImageMap needs to define a methods for both relationships :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">ImageMap</span> <span class="pl-k">extends</span> <span class="pl-e">EntityMap</span> {</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">articles</span>(<span class="pl-c1">Image</span> <span class="pl-smi">$image</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>morphedByMany(<span class="pl-smi">$image</span>, <span class="pl-s"><span class="pl-pds">'</span>App\Article<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>taggable<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">posts</span>(<span class="pl-c1">Image</span> <span class="pl-smi">$image</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>morphedByMany(<span class="pl-smi">$image</span>, <span class="pl-s"><span class="pl-pds">'</span>App\Post<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>taggable<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#dynamic-relationships" id="user-content-dynamic-relationships"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Dynamic Relationships</h3>
<p>Dynamic relationships are callbacks methods that can be added at runtime on a EntityMap class. They can be really useful when you're building a plugin-driven architecture, to allow plugin creators to link additionnal data to your core domain entities, without the need for a complex single table inheritance and/or extension mechanism.</p>
<p>For example, we can add an avatar relationship to a core User class :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-smi">$userMapper</span><span class="pl-k">-&gt;</span>getEntityMap()<span class="pl-k">-&gt;</span>addRelationshipMethod(<span class="pl-s"><span class="pl-pds">'</span>avatar<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>(<span class="pl-smi">$user</span>, <span class="pl-smi">$map</span>) {</span>
<span class="pl-s1">    <span class="pl-k">return</span> <span class="pl-smi">$map</span><span class="pl-k">-&gt;</span>hasMany(<span class="pl-smi">$user</span>, <span class="pl-c1">Avatar</span><span class="pl-k">::</span><span class="pl-c1">class</span>);</span>
<span class="pl-s1">});</span>
<span class="pl-s1"></span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#injecting-services-into-entities" id="user-content-injecting-services-into-entities"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Injecting services into Entities</h2>
<p>If you need to inject some service into an entity, you can provide an activator() method to Analogue, which it will uses when running Query to instantiate the Entity class before hydrating.</p>
<p>It's not generally considered good pratice, but it can prove useful in some situations where your entity logic is tightly bound to a service. Again, for maintenability, always favor tying your Entity to an Interface over a concrete implementation.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">User</span> <span class="pl-k">extends</span> <span class="pl-e">Entity</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$hasher</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-c1">__construct</span>(<span class="pl-c1">HashingContract</span> <span class="pl-smi">$hasher</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">hasher</span> <span class="pl-k">=</span> <span class="pl-smi">$hasher</span>;</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">UserMap</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">activator</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-c1">User</span>(<span class="pl-k">new</span> <span class="pl-c1">HashingService</span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>

        </div>

    </div>]