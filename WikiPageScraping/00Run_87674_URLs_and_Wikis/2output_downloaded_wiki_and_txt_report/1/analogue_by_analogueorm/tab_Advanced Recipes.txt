[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Here are some examples on how to use Analogue's flexible architecture to solve some common data-related tasks.</p>
<ul>
<li><a href="#Creating-a-Metadata-Value-Object">Creating a Metadata Value Object</a></li>
<li><a href="#Nested-Entities">Nested Entities</a></li>
<li><a href="#Single-Table-Inheritance">Single Table inheritance</a></li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#creating-a-metadata-value-object" id="user-content-creating-a-metadata-value-object"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creating a Metadata Value Object</h1>
<p>We're building a media library application, which contains Video, Song and Photo entities. We want to be able to store media metadata in each record. The problem is the number and key of metadatas will vary between each type of medias, and even between each files as different encoding format will have its own structure.</p>
<p>In a traditionnal DB schema, we would have tackle this by using a separate table to store the metas using many-to-many relationships to link media to its corresponding meta fields :</p>
<ul>
<li>videos</li>
<li>video_metadata</li>
<li>photos</li>
<li>photo_metadata</li>
<li>songs</li>
<li>song_metadata</li>
<li>metadatas</li>
</ul>
<p>With Analogue, we can build a Value Object which will hold it's own length-variable content, storing it directly in a 'metadatas' column into the photos, videos, songs tables, keeping our DB structure simpler :</p>
<ul>
<li>videos</li>
<li>photos</li>
<li>songs</li>
</ul>
<p>To do so, we will create a custom class that implements the <strong>Mappable</strong> interface. Mappable interface is a set of methods used internally by analogue to map any object to a database table.</p>
<p>Let's see what's the content of it :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">interface</span> <span class="pl-en">Mappable</span> {</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-c"><span class="pl-c">/**</span></span></span>
<span class="pl-s1"><span class="pl-c">     * Set the object attribute raw values (hydration)</span></span>
<span class="pl-s1"><span class="pl-c">     * </span></span>
<span class="pl-s1"><span class="pl-c">     * <span class="pl-k">@param</span> array $attributes </span></span>
<span class="pl-s1"><span class="pl-c">     <span class="pl-c">*/</span></span></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">setEntityAttributes</span>(<span class="pl-k">array</span> <span class="pl-smi">$attributes</span>);</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-c"><span class="pl-c">/**</span></span></span>
<span class="pl-s1"><span class="pl-c">     * Get the raw object's values.</span></span>
<span class="pl-s1"><span class="pl-c">     * </span></span>
<span class="pl-s1"><span class="pl-c">     * <span class="pl-k">@return</span> array</span></span>
<span class="pl-s1"><span class="pl-c">     <span class="pl-c">*/</span></span></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">getEntityAttributes</span>();</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-c"><span class="pl-c">/**</span></span></span>
<span class="pl-s1"><span class="pl-c">     * Set the raw entity attributes</span></span>
<span class="pl-s1"><span class="pl-c">     * <span class="pl-k">@param</span> string $key  </span></span>
<span class="pl-s1"><span class="pl-c">     * <span class="pl-k">@param</span> string $value</span></span>
<span class="pl-s1"><span class="pl-c">     <span class="pl-c">*/</span></span></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">setEntityAttribute</span>(<span class="pl-smi">$key</span>, <span class="pl-smi">$value</span>);</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-c"><span class="pl-c">/**</span></span></span>
<span class="pl-s1"><span class="pl-c">     * Return the entity's attribute </span></span>
<span class="pl-s1"><span class="pl-c">     * <span class="pl-k">@param</span>  string $key </span></span>
<span class="pl-s1"><span class="pl-c">     * <span class="pl-k">@return</span> mixed</span></span>
<span class="pl-s1"><span class="pl-c">     <span class="pl-c">*/</span></span></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">getEntityAttribute</span>(<span class="pl-smi">$key</span>);</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>
<p>Let's implement these methods to serialize, unserialize our fields.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\Mappable</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Meta</span> <span class="pl-k">implements</span> <span class="pl-e">Mappable</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$content</span> <span class="pl-k">=</span> [];</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">setEntityAttributes</span>(<span class="pl-k">array</span> <span class="pl-smi">$attributes</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>setEntityAttribute(<span class="pl-s"><span class="pl-pds">'</span>metadatas<span class="pl-pds">'</span></span>,<span class="pl-smi">$attributes</span>[<span class="pl-s"><span class="pl-pds">'</span>metadatas<span class="pl-pds">'</span></span>]);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">getEntityAttributes</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-c1">array</span>(<span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>getEntityAttribute(<span class="pl-s"><span class="pl-pds">'</span>metadatas<span class="pl-pds">'</span></span>));</span>
<span class="pl-s1">    }</span>
<span class="pl-s1">  </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">setEntityAttribute</span>(<span class="pl-smi">$key</span>, <span class="pl-smi">$value</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">if</span>(<span class="pl-smi">$key</span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">'</span>metadatas<span class="pl-pds">'</span></span>)</span>
<span class="pl-s1">        {</span>
<span class="pl-s1">            <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">content</span> <span class="pl-k">=</span> <span class="pl-c1">unserialize</span>(<span class="pl-smi">$value</span>);</span>
<span class="pl-s1">        }</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"> </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">getEntityAttribute</span>(<span class="pl-smi">$key</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">if</span>(<span class="pl-smi">$key</span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">'</span>metadatas<span class="pl-pds">'</span></span>)</span>
<span class="pl-s1">        {</span>
<span class="pl-s1">            <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">content</span> <span class="pl-k">=</span> <span class="pl-c1">serialize</span>(<span class="pl-smi">$value</span>);</span>
<span class="pl-s1">        }</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<p>Along this class, for Analogue to know which attribute to map in and out the ValueObject, we need to create a ValueMap class :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\ValueMap</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">MetaMap</span> <span class="pl-k">extends</span> <span class="pl-e">ValueMap</span> {</span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$attributes</span> <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>metadatas<span class="pl-pds">'</span></span>];</span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<p>Okay, we told Analogue how to map the content of our value object in and from the database.</p>
<p>Now we need some function to access the $content array from our domain objects :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Meta</span> <span class="pl-k">implements</span> <span class="pl-e">Mappable</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$content</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">all</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">content</span>;</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">set</span>(<span class="pl-smi">$key</span>, <span class="pl-smi">$value</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">content</span>[<span class="pl-smi">$key</span>] <span class="pl-k">=</span> <span class="pl-smi">$value</span>;</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">get</span>(<span class="pl-smi">$key</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">content</span>[<span class="pl-smi">$key</span>];</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">...</span></span>
<span class="pl-s1">}</span></pre></div>
<p>This is very basic, in a more advanced version, we would likely implements ArrayAccess or ArrayIterator to make the class more 'user-friendly'.</p>
<p>Now that our Meta class is done, we can embed it into our domain objects. To do this, we need to link the 'metadatas' field to the Meta value object. Example in the VideoMap :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">VideoMap</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$embeddables</span> <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>metas<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Meta</span><span class="pl-k">::</span><span class="pl-c1">class</span>];</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<p>Each time that Analogue will hydrate a Video entity, it will hydrate the 'metas' attribute with an instance of the Meta class.</p>
<p>But wait a minute, what happens when we create a Video object ? The metas attribute won't be set..</p>
<p>Right, we need to create an instance of it from the constructor method :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\Entity</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Video</span> <span class="pl-k">extends</span> <span class="pl-e">Entity</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-c1">__construct</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">metas</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-c1">Meta</span>;</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<p>Even better, we can create a Media abstract class and extends from it, so we don't have to repeat it in Photo and Song :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\Entity</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">abstract</span> <span class="pl-k">class</span> <span class="pl-en">Media</span> <span class="pl-k">extends</span> <span class="pl-e">Entity</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-c1">__construct</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">metas</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-c1">Meta</span>;</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Video</span> <span class="pl-k">extends</span> <span class="pl-e">Media</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Photo</span> <span class="pl-k">extends</span> <span class="pl-e">Media</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Song</span> <span class="pl-k">extends</span> <span class="pl-e">Media</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#nested-entities" id="user-content-nested-entities"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Nested Entities</h3>
<h3>
<a aria-hidden="true" class="anchor" href="#single-table-inheritance" id="user-content-single-table-inheritance"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Single Table Inheritance</h3>

        </div>

    </div>]