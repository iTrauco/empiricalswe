[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#entities" id="user-content-entities"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Entities</h2>
<p>An entity is an object representing an individual database record (row), identified by a primary key, and containing several attributes, which can be either a <em>database field</em>, a <em>Value Object</em> or a <em>Relationship</em>.</p>
<p>Analogue ships with a base Entity class you can extend and which provides a little sugar, as the magical setters and getters, hidden attributes, and handling the Array/Json conversions.</p>
<p>Or you can use your own Class, as long as it implements the <em>Mappable</em> contract which analogue relies to hydrate and retrieve the entity's attribute (you can use the MappableTrait for convenience). Choice is yours.</p>
<p>Analogue will use by default the plural of the class name to select the proper database table (Product Entity =&gt; 'products' table), but you can customize it in the corresponding <em>EntityMap</em> class.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-c"><span class="pl-c">//</span> Using the base Entity class.</span></span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\Entity</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Product</span> <span class="pl-k">extends</span> <span class="pl-e">Entity</span> </span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-c1">__construct</span>(<span class="pl-smi">$name</span>, <span class="pl-smi">$price</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">attributes</span>[<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span>] <span class="pl-k">=</span> <span class="pl-smi">$name</span>; </span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">attributes</span>[<span class="pl-s"><span class="pl-pds">'</span>price<span class="pl-pds">'</span></span>] <span class="pl-k">=</span> <span class="pl-smi">$price</span>;  </span>
<span class="pl-s1">    }</span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-c"><span class="pl-c">//</span> Using the Mappable trait</span></span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\Mappable</span>;</span>
<span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\MappableTrait</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Product</span> <span class="pl-k">implements</span> <span class="pl-e">Mappable</span> {</span>
<span class="pl-s1">    <span class="pl-k">use</span> <span class="pl-c1">MappableTrait</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1">   <span class="pl-k">...</span></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<blockquote>
<p><strong>Note</strong> : The Mappable interface methods are only meant to be used by the Mapper. As a good practice, you shouldn't use these methods in your own code.</p>
</blockquote>
<h2>
<a aria-hidden="true" class="anchor" href="#entity-maps" id="user-content-entity-maps"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Entity Maps</h2>
<p>Entity Maps are configuration classes that sit next to the Entity, typically in the same namespace where it is autodetected by Analogue, but you can of course set it up manually (see <a href="https://github.com/analogueorm/analogue/wiki/Configuring-Entity-Maps">Configuring Entity Maps</a> ).</p>
<p>They're used to define relationships, set a custom table name, and many other custom mapping behaviours.</p>
<p>App\Product
App\ProductMap</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\EntityMap</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">ProductMap</span> <span class="pl-k">extends</span> <span class="pl-e">EntityMap</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$table</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>my_products<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#getting-the-mapper-for-an-entity-class" id="user-content-getting-the-mapper-for-an-entity-class"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting the Mapper for an Entity class</h2>
<p>Interactions with the database are handled by a Mapper object.</p>
<p>To request a Mapper instance just call the mapper method on Analogue with the name of the class or an instance of the Entity.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$productMapper</span> <span class="pl-k">=</span> <span class="pl-smi">$analogue</span><span class="pl-k">-&gt;</span>mapper(<span class="pl-c1">Product</span><span class="pl-k">::</span><span class="pl-c1">class</span>); </span></pre></div>
<p>If you want, you can also call it statically for the same result:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">   <span class="pl-smi">$productMapper</span> <span class="pl-k">=</span>  <span class="pl-c1">Analogue</span><span class="pl-k">::</span>mapper(<span class="pl-c1">Product</span><span class="pl-k">::</span><span class="pl-c1">class</span>); </span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#value-objects" id="user-content-value-objects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Value Objects</h2>
<p>Value Objects in Analogue are similar to entities, but they're not tied to a database table and cannot have relationships. They are used to abstract common data types/behaviour from the sole Entity.</p>
<p>By convention, Value Object's attributes are stored in the Entity's table by prefixing them with the name of the Value Object ('valueobject_attribute').</p>
<p>As a very simple example, we can create an Identity value object, composed of 'first_name' and 'last_name' attributes. These attributes will be stored respectively in the 'identity_first_name' &amp; 'identity_last_name' columns on the user's table.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\ValueObject</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Identity</span> <span class="pl-k">extends</span> <span class="pl-e">ValueObject</span> {</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-c1">__construct</span>(<span class="pl-smi">$firstName</span>, <span class="pl-smi">$lastName</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">first_name</span> <span class="pl-k">=</span> <span class="pl-smi">$firstName</span>;</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">last_name</span> <span class="pl-k">=</span> <span class="pl-smi">$lastName</span>;</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>
<p>Then, in the same fashion as the EntityMap, we need to create a ValueMap class, to reference mapped attributes.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\ValueObject</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">IdentityMap</span> <span class="pl-k">extends</span> <span class="pl-e">ValueMap</span></span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$attributes</span> <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>first_name<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>last_name<span class="pl-pds">'</span></span>];</span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span></pre></div>
<p>We can now use this Identity value object inside, let's say, a Person entity :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\Entity</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Person</span> <span class="pl-k">extends</span> <span class="pl-e">Entity</span> {</span>
<span class="pl-s1">    </span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-c1">__construct</span>(<span class="pl-c1">Identity</span> <span class="pl-smi">$identity</span>)</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">identity</span> <span class="pl-k">=</span> <span class="pl-smi">$identity</span>;</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>
<p>We also need to declare the ValueObject in the entity map :</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">use</span> <span class="pl-c1">Analogue\ORM\EntityMap</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">PersonMap</span> <span class="pl-k">extends</span> <span class="pl-e">EntityMap</span> {</span>
<span class="pl-s1">    <span class="pl-k">protected</span> <span class="pl-smi">$embeddables</span> <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>identity<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Identity</span><span class="pl-k">::</span><span class="pl-c1">class</span>];</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>

        </div>

    </div>]