[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The canonical source of truth for the logic dartfmt applies is in the code. The rules can be complex and interact in subtle ways that makes them difficult or just tedious to capture in prose. (Do you really want to know the three different ways a <code>show</code> clause may be line-split? No, you probably don't.)</p>
<p>But if you want an approximate list of the main high-level whitespace rules the formatter applies, these are them:</p>
<h3>
<a aria-hidden="true" class="anchor" href="#spaces-not-tabs" id="user-content-spaces-not-tabs"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Spaces, not tabs.</h3>
<p>Using spaces for formatting ensures the code looks the same in everyone's
editor. It also makes sure it looks the same when posted to blogs, or on code
sites like <a href="https://github.com/">GitHub</a>.</p>
<p>Modern editors emulate the behavior of tabs while inserting spaces, giving you
the easy editing of tabs and the consistency of spaces.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#one-or-two-newlines-after-each-statement-or-declaration" id="user-content-one-or-two-newlines-after-each-statement-or-declaration"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>One or two newlines after each statement or declaration.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-en">main</span>() {
  <span class="pl-en">first</span>(statement);
  <span class="pl-en">second</span>(statement);

  <span class="pl-en">third</span>(statement);
}

<span class="pl-en">anotherDeclaration</span>() { ... }</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#no-space-between-the-declared-name-of-a-method-operator-or-setter-and-its-parameter-list" id="user-content-no-space-between-the-declared-name-of-a-method-operator-or-setter-and-its-parameter-list"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>No space between the declared name of a method, operator, or setter and its parameter list.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-en">log</span>(arg) { ... }
<span class="pl-k">bool</span> <span class="pl-k">operator</span> <span class="pl-k">==</span>(other) <span class="pl-k">=</span><span class="pl-k">&gt;</span> ...
<span class="pl-k">set</span> <span class="pl-en">contents</span>(value) { ... }</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#space-after-the-operator-keyword" id="user-content-space-after-the-operator-keyword"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Space after the <code>operator</code> keyword.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">bool</span> <span class="pl-k">operator</span> <span class="pl-k">==</span>(other) <span class="pl-k">=</span><span class="pl-k">&gt;</span> ...</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#spaces-around-binary-and-ternary-operators" id="user-content-spaces-around-binary-and-ternary-operators"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Spaces around binary and ternary operators.</h3>
<p>Note that <code>&lt;</code> and <code>&gt;</code> are considered binary operators when used as expressions,
but not for specifying generic types. Both <code>is</code> and <code>is!</code> are considered single
binary operators. However, the <code>.</code> used to access members is not and should
<em>not</em> have spaces around it.</p>
<div class="highlight highlight-source-dart"><pre>average <span class="pl-k">=</span> (a <span class="pl-k">+</span> b) <span class="pl-k">/</span> <span class="pl-c1">2</span>;
largest <span class="pl-k">=</span> a <span class="pl-k">&gt;</span> b <span class="pl-k">?</span> a <span class="pl-k">:</span> b;
<span class="pl-k">if</span> (obj <span class="pl-k">is</span><span class="pl-k">!</span> <span class="pl-c1">SomeType</span>) <span class="pl-en">print</span>(<span class="pl-s">'not SomeType'</span>);</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#spaces-after--and--when-used-in-a-map-or-named-parameter" id="user-content-spaces-after--and--when-used-in-a-map-or-named-parameter"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Spaces after <code>,</code> and <code>:</code> when used in a map or named parameter.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-en">function</span>(a, b, named<span class="pl-k">:</span> c)
[some, list, literal]
{map<span class="pl-k">:</span> literal}</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#no-spaces-around-unary-operators" id="user-content-no-spaces-around-unary-operators"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>No spaces around unary operators.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">!</span>condition
index<span class="pl-k">++</span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#spaces-around-in-and-after-each--in-a-loop" id="user-content-spaces-around-in-and-after-each--in-a-loop"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Spaces around <code>in</code>, and after each <code>;</code> in a loop.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">100</span>; i<span class="pl-k">++</span>) { ... }

<span class="pl-k">for</span> (<span class="pl-k">final</span> item <span class="pl-k">in</span> collection) { ... }</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#space-after-flow-control-keywords" id="user-content-space-after-flow-control-keywords"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Space after flow-control keywords.</h3>
<p>This is unlike function and method calls, which do <em>not</em> have a space between
the name and the opening parenthesis.</p>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">while</span> (foo) { ... }

<span class="pl-k">try</span> {
  <span class="pl-c">// ...</span>
} <span class="pl-k">catch</span> (e) {
  <span class="pl-c">// ...</span>
}</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#no-space-after---and--or-before---and-" id="user-content-no-space-after---and--or-before---and-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>No space after <code>(</code>, <code>[</code>, and <code>{</code>, or before <code>)</code>, <code>]</code>, and <code>}</code>.</h3>
<p>Also, do not use a space when using <code>&lt;</code> and <code>&gt;</code> for generic types.</p>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">var</span> numbers <span class="pl-k">=</span> <span class="pl-k">&lt;</span><span class="pl-k">int</span><span class="pl-k">&gt;</span>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, (<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">4</span>)];</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#space-before--in-function-and-method-bodies" id="user-content-space-before--in-function-and-method-bodies"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Space before <code>{</code> in function and method bodies.</h3>
<p>When a <code>{</code> is used after a parameter list in a function or method, there should
be a space between it and the <code>)</code> ending the parameters.</p>
<div class="highlight highlight-source-dart"><pre><span class="pl-en">getEmptyFn</span>(a) {
  <span class="pl-k">return</span> () {};
}</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#place-the-opening-curly-brace--on-the-same-line-as-what-it-follows" id="user-content-place-the-opening-curly-brace--on-the-same-line-as-what-it-follows"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Place the opening curly brace (<code>{</code>) on the same line as what it follows.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">class</span> <span class="pl-c1">Foo</span> {
  <span class="pl-en">method</span>() {
    <span class="pl-k">if</span> (someCondition) {
      <span class="pl-c">// ...</span>
    } <span class="pl-k">else</span> {
      <span class="pl-c">// ...</span>
    }
  }
}</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#place-binary-operators-on-the-preceding-line-in-a-multi-line-expression" id="user-content-place-binary-operators-on-the-preceding-line-in-a-multi-line-expression"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Place binary operators on the preceding line in a multi-line expression.</h3>
<p>There are valid arguments for both styles but most of our code seems to go this
way, and consistency matters most.</p>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">var</span> bobLikesIt <span class="pl-k">=</span> isDeepFried <span class="pl-k">||</span>
    (hasPieCrust <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>vegan) <span class="pl-k">||</span>
    containsBacon;

<span class="pl-en">bobLikes</span>() <span class="pl-k">=</span><span class="pl-k">&gt;</span>
    isDeepFried <span class="pl-k">||</span> (hasPieCrust <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>vegan) <span class="pl-k">||</span> containsBacon;</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#place-ternary-operators-on-the-next-line-in-a-multi-line-expression" id="user-content-place-ternary-operators-on-the-next-line-in-a-multi-line-expression"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Place ternary operators on the next line in a multi-line expression.</h3>
<p>Also, if you break the line before one of the operators, break around both.</p>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">return</span> someCondition
    <span class="pl-k">?</span> whenTrue
    <span class="pl-k">:</span> whenFalse;</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#place-the--on-the-next-line-in-a-multi-line-expression" id="user-content-place-the--on-the-next-line-in-a-multi-line-expression"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Place the <code>.</code> on the next line in a multi-line expression.</h3>
<div class="highlight highlight-source-dart"><pre>someVeryLongVariableName.withAVeryLongPropertyName
    .<span class="pl-en">aReallyLongMethodName</span>(args);</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#format-constructor-initialization-lists-with-each-field-on-its-own-line" id="user-content-format-constructor-initialization-lists-with-each-field-on-its-own-line"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Format constructor initialization lists with each field on its own line.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-c1">MyClass</span>()
    <span class="pl-k">:</span> firstField <span class="pl-k">=</span> <span class="pl-s">'some value'</span>,
      secondField <span class="pl-k">=</span> <span class="pl-s">'another'</span>,
      thirdField <span class="pl-k">=</span> <span class="pl-s">'last'</span> {
  <span class="pl-c">// ...</span>
}</pre></div>
<p>Note that the <code>:</code> should be wrapped to the next line and indented four spaces.
Fields should all line up (so all but the first field end up indented six
spaces).</p>
<h3>
<a aria-hidden="true" class="anchor" href="#split-every-element-in-a-collection-if-it-does-not-fit-on-one-line" id="user-content-split-every-element-in-a-collection-if-it-does-not-fit-on-one-line"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Split every element in a collection if it does not fit on one line.</h3>
<p>This means after the opening bracket, before the closing one, and after the <code>,</code>
for each element.</p>
<div class="highlight highlight-source-dart"><pre><span class="pl-en">mapInsideList</span>([
  {
    <span class="pl-s">'a'</span><span class="pl-k">:</span> <span class="pl-s">'b'</span>,
    <span class="pl-s">'c'</span><span class="pl-k">:</span> <span class="pl-s">'d'</span>
  },
  {
    <span class="pl-s">'a'</span><span class="pl-k">:</span> <span class="pl-s">'b'</span>,
    <span class="pl-s">'c'</span><span class="pl-k">:</span> <span class="pl-s">'d'</span>
  },
]);</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#indent-block-and-collection-bodies-two-spaces" id="user-content-indent-block-and-collection-bodies-two-spaces"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Indent block and collection bodies two spaces.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">if</span> (condition) {
  <span class="pl-en">print</span>(<span class="pl-s">'hi'</span>);
}

<span class="pl-k">var</span> compoundsWithLongNames <span class="pl-k">=</span> [
  buckminsterfullerene,
  dodecahedrane,
  olympiadane
];</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#indent-switch-cases-two-spaces-and-case-bodies-four-spaces" id="user-content-indent-switch-cases-two-spaces-and-case-bodies-four-spaces"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Indent switch cases two spaces and case bodies four spaces.</h3>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">switch</span> (fruit) {
  <span class="pl-k">case</span> <span class="pl-s">'apple'</span><span class="pl-k">:</span>
    <span class="pl-en">print</span>(<span class="pl-s">'delish'</span>);
    <span class="pl-k">break</span>;

  <span class="pl-k">case</span> <span class="pl-s">'durian'</span><span class="pl-k">:</span>
    <span class="pl-en">print</span>(<span class="pl-s">'stinky'</span>);
    <span class="pl-k">break</span>;
}</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#indent-multi-line-method-cascades-two-spaces" id="user-content-indent-multi-line-method-cascades-two-spaces"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Indent multi-line method cascades two spaces.</h3>
<div class="highlight highlight-source-dart"><pre>buffer
  ..<span class="pl-en">write</span>(<span class="pl-s">'Hello, '</span>)
  ..<span class="pl-en">write</span>(name)
  ..<span class="pl-en">write</span>(<span class="pl-s">'!'</span>);</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#indent-continued-lines-with-at-least-four-spaces" id="user-content-indent-continued-lines-with-at-least-four-spaces"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Indent continued lines with at least four spaces.</h3>
<div class="highlight highlight-source-dart"><pre>someVeryLongVariableName.<span class="pl-en">aReallyLongMethodName</span>(
    arg, anotherArg, wrappedToNextLine);</pre></div>
<p>This includes <code>=&gt;</code> as well:</p>
<div class="highlight highlight-source-dart"><pre><span class="pl-en">bobLikes</span>() <span class="pl-k">=</span><span class="pl-k">&gt;</span>
    isDeepFried <span class="pl-k">||</span> (hasPieCrust <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>vegan) <span class="pl-k">||</span> containsBacon;</pre></div>
<p>There are exceptions to this when the expression contains multi-line function or
collection literals.</p>
<div class="highlight highlight-source-dart"><pre><span class="pl-k">new</span> <span class="pl-c1">Future</span>.<span class="pl-en">delayed</span>(<span class="pl-k">const</span> <span class="pl-c1">Duration</span>(seconds<span class="pl-k">:</span> <span class="pl-c1">1</span>), () {
  <span class="pl-en">print</span>(<span class="pl-s">'I am a callback'</span>);
});

args.<span class="pl-en">addAll</span>([
  <span class="pl-s">'--mode'</span>,
  <span class="pl-s">'release'</span>,
  <span class="pl-s">'--checked'</span>
]);</pre></div>
<p>Your goal is to balance using indentation to show expression structure while
not wanting to indent large swathes of code unnecessarily.</p>

        </div>

    </div>]