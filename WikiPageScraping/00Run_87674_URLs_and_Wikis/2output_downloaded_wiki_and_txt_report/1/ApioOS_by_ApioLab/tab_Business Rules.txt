[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Writing a Web app means give dynamism to your contents, but obviously all stops to work when
the browser get closed... In an environment where the information come both from users and from
objects, it's important to let these operations continue also when the user is not displaying the app.</p>
<p>A Business Rule will create a sort of always-running background process that will let your app to
execute actions and logics. This is possibile with ApioOS and its Cloud!</p>
<p>Business Rules allow you to write server side applications bound to client side web views without
worrying of data or real time algorithm or something else. This is mapped by the object logic e its
methods.</p>
<p>##Basic Structure</p>
<p>Every new Rule has got the following structure:</p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code14.png" src="https://camo.githubusercontent.com/bb7f89ad935331b122b081e4d5da22bf5d0cc336/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f646531342e706e67"/></p>
<p>What you want to write have to inserted into the structure: module.exports = function(logic){};</p>
<p>This structure automatically imports the object logic and propose a loop-based structure (a detail of
all methods is shown on the left menu). The operations you have to execute always have to be in
the scope of the function loop those who have to be executed once have to be out of this scope.</p>
<p>Moreover some methods of the object logic allows you to take advantage of the event-driven
programming (more on the section 'Listener', click on the left menu).</p>
<p>Remember that each Business Rule is a javascript server-side application (based on Node.js), so you can
import and use each Node.js module is installed in ApioOS in every  Business Rule...</p>
<p><strong>What can you do with Business Rules?</strong></p>
<ul>
<li>You can bind an application property with another!</li>
<li>You can build an algorithm to study how users use an application / object!</li>
<li>You can build an Artificial Intelligence to create Demand Response services!</li>
<li>You can give Magic to Users and create Smart Experiences!</li>
</ul>
<p>###GETTER</p>
<p><em>logic.getProperty</em></p>
<ul>
<li>Return the object property value as a String.</li>
</ul>
<p><strong>Usage</strong></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/table1.png" src="https://camo.githubusercontent.com/d3c9d0b77801ee65f8a6d3bbaeb70547143096ef/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f7461626c65312e706e67"/></p>
<p><strong>Example</strong></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code17.png" src="https://camo.githubusercontent.com/3033c8b43a859ce820a965eb68bdb1ffd35cbbc4/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f646531372e706e67"/></p>
<p>It will print:</p>
<p>property onoff of the object 15: 1</p>
<p>###LISTENER</p>
<p><em>logic.listenerProperty</em></p>
<ul>
<li>Listen the object property value and call the Callback when it changes.</li>
</ul>
<p><strong>Usage</strong></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/table2.png" src="https://camo.githubusercontent.com/02f485e5b64e7147346f8e265b207ff2a9b6a95d/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f7461626c65322e706e67"/></p>
<p><strong>Example</strong></p>
<p><em>Out of the loop</em></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code19.png" src="https://camo.githubusercontent.com/2b70ba9aedf9fd7bf44855d2755e23a47a359966/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f646531392e706e67"/></p>
<p><em>In the loop</em></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code20.png" src="https://camo.githubusercontent.com/d32dbc913ea178bf4e13d483915bf2d26a3c4271/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f646532302e706e67"/></p>
<p>it will print:</p>
<p>the property onoff of the object 15 changed its value the actual value is: 1</p>
<p>###SETTER</p>
<p><em>logic.setProperty</em></p>
<ul>
<li>Set the object property value to the wanted value.</li>
</ul>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/table3.png" src="https://camo.githubusercontent.com/383515f6e190e820517fc7db8b310c95d1950989/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f7461626c65332e706e67"/></p>
<p><strong>Example</strong></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code10.png" src="https://camo.githubusercontent.com/8d712f654dc66ea02a648d5264aa59ac3931e6b2/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f646531302e706e67"/></p>
<p>It will print:</p>
<p>property onoff of the object 15: 1</p>
<p>###LOGIC.LOG</p>
<p><em>logic.log</em></p>
<ul>
<li>It has the same use of console.log in javascript. It takes only one parameters:
A value or a string, but it is possibile to concatenate each other with the ‘+’.
It returns the log on the SDK console.</li>
</ul>
<p><strong>Example</strong></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code11.png" src="https://camo.githubusercontent.com/c4986bda287ca58bd55328ec492edd87d877658a/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f646531312e706e67"/></p>
<p>It will print:</p>
<p>property onoff of the object 15: 1</p>
<p>##Getting Started</p>
<p>Now we're gonna create a Business Rule that will associate the property 'allarme' of the application
'PIR' to the property 'onoff' of the application 'Sirena'</p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code15.png" src="https://camo.githubusercontent.com/e8a9b43176857ff86df94ff67edf740c8a08e8b3/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f646531352e706e67"/></p>
<p>Now we will examine the code, first of all there's the declaration of a variable: var listenerAllarme to
which is assigned the instance of the method listenProperty of the object logic. var listenerAllarme
= new logic.listenProperty();</p>
<p>This instruction have to be repeated just once, when the Business Rule is launched, so have to be done
out of the scope of var loop=function(){}. Inside it instead we call the method 'set' of the object
'listenerAllarme' instantiated before:</p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code4.png" src="https://camo.githubusercontent.com/85bc74e3b2dbdfa069f8d39e3c2b8d0042c391f4/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f6465342e706e67"/></p>
<p>As the sign suggests this method allows you to listen when a property of an object changes value,
when this happen the callback will activate and the new value is passed in it (variable 'valore' of the
callback); here you can write the necessary lines of code to execute when the value changes. For
more information about the object new logic.listenProperty() click on the section 'Listener' on the
left menu. In this specific case it is listen of the property 'allarme' of the object '15' (PIR application)</p>
<p>In the callback of the object 'listenerAllarme' we find the code the sets the value of the property
'onoff' of the object '11' (Sirena application) to 1 if the value of the property 'allarme' of the object 15
(PIR application) turns to 1, 0 vice versa.</p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code16.png" src="https://camo.githubusercontent.com/b23c7fc001939237427b86d9106e6496268d35ff/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f646531362e706e67"/></p>
<p>The method logic.setProperty is the one to use to set the property of an object, this action has
effect also on the real object (this in specific case it actives the relay the siren) as in the cloud as in
all interfaces the user connected to.</p>
<p><em>That's the power of Apio!</em></p>

        </div>

    </div>]