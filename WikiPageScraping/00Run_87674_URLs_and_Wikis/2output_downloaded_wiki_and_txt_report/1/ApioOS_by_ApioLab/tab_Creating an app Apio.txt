[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>An Apio Application (from now on simply “app”) is a HTML5/Javascript application, in particular it is an AngularJS application that inherits code from the Apio Framework.
In this tutorial we cannot cover the entire AngularJS framework but we will recall only the required concepts. For further informations about the AngularJS framework, please, visit their documentation website.
Now let's talk about the structure of an Apio application.
This picture shows the file system of a generic app in Apio:</p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/strutturaAPP.png" src="https://camo.githubusercontent.com/abff675bbda810d3d2793da1d80041bda91f1e03/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f7374727574747572614150502e706e67"/></p>
<p>This picture shows us the files that make any Apio application.You will find these files every time you start to write an Apio application. How can we see there are three different files.
Shortly:</p>
<ul>
<li>the "html" file contains the structure with which your application is paginated</li>
<li>the  "js" file adds the logic in your app</li>
<li>the "mongo" is your Mongo DB</li>
</ul>
<p>The most basic Apio App would look like:</p>
<p><em>The html file (the View)</em></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code1_createapp.png" src="https://camo.githubusercontent.com/90e59a13aef5b338a142a95a5f055121ab40475d/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f6465315f6372656174656170702e706e67"/></p>
<p><em>The Javascript file (the Controller)</em></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code2_createapp.png" src="https://camo.githubusercontent.com/5239c3f6847d05458e87a8676a3287f2a5a97b80/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f6465325f6372656174656170702e706e67"/></p>
<p>This is the default application created by the ApioSDK Editor , it is a full-fledged AngularJS application, with its own angular module and controllers and it is injected inside the application’s html via tag. By default we create a controller that we use to sync the application view with the application controller.</p>
<p>The example code presented here is very basic, in fact that application does nothing more than showing a blank application with a title name, but still there are some interesting things you might have noticed.</p>
<p>First of all the HTML part has a “weird” tag:</p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/topapp2.png" src="https://camo.githubusercontent.com/1e04b8f61c99242a965ef39822f02a2d6befa475/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f746f70617070322e706e67"/></p>
<p>This Tag is responsible for the rendering and the functionality of the header of every ApioApplication, it provides the application title and the recording functionalities (bell icon) needed by every ApioApp (see ApioOS for more information). It is not a standard html tag, but it’s part of our property library and it is implemented via angularjsdirectives.</p>
<p>The second interesting thing is in the javascript file, and it’s the: <strong>$scope.object= currentObject.get();</strong>.</p>
<p>What’s happening here? We're using the Apio service "currentObject" to load the object data into the controller’s scope, this is a very important line of code because it populates Application’s properties (which, in our example, we don’t have yet).</p>
<p>Let’s make this application a bit more interesting.</p>
<p>We want to model an Application able to lock and unlock an electronic door. Let’s assume that we already have our door locker connected with our ApioGeneral and we already have the firmware code (see Microcontroller &amp; ApioEncoding section to see how).</p>
<p>All we know is that the locker firmware exposes the following dictionary:</p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/table1_creatingapp.png" src="https://camo.githubusercontent.com/0cab4fd1dedb474c99f688fe2ea366f839b9af31/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f7461626c65315f6372656174696e676170702e706e67"/></p>
<p>Now, what we are going to do is create a property(the wiev element of our application) to enable us to send the send this  commands.
Thanks to the Apio codify is very simple because all we have to do is write HTML code.</p>
<p>Using the ApioEncoding , all we have to do is create a "touchable" property named “locked” able to take the values 1 and 0.</p>
<p>The Apio Trigger Tag handles on/off like properties, thus is perfect in our case.</p>
<p><em>OurHTML after tag Trigger addition</em></p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/code3_creatingapp.png" src="https://camo.githubusercontent.com/3e9d983de16937a0f5e426ce0f513c564cb9566c/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f636f6465335f6372656174696e676170702e706e67"/></p>
<p>Now open ApioHome with your browser, you’ll see the new element up and running!.</p>
<p>The javascript code is already included in the Trigger Property, so the Application is already able to send correct messages to the Apio object!</p>
<p><img alt="" data-canonical-src="http://www.apio.cc/images/github_wiki/Locked.png" src="https://camo.githubusercontent.com/bebdadf7db0eeb0db284b5c90412bb7b5e54721a/687474703a2f2f7777772e6170696f2e63632f696d616765732f6769746875625f77696b692f4c6f636b65642e706e67"/></p>

        </div>

    </div>]