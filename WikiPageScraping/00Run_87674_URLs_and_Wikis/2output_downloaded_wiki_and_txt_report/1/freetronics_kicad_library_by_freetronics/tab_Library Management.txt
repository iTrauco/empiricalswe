[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The README on the main page describes a <a href="//github.com/freetronics/freetronics_kicad_library#usage-instructions">simple way of managing this KiCad Library</a>. For Freetronics' KiCad-based projects we use a more complex approach incorporating <em>git submodules</em>. We recommend this approach for any non-trivial project that is already using git for version control.</p>
<p>This page describes how to use this approach. It assumes that you are already using git to manage your KiCad project, and that you are reasonably familiar with git.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#why-use-this-approach" id="user-content-why-use-this-approach"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Why use this approach?</h1>
<p>The reason for using the "powerful way" is it allows you to version control the libraries in lock-step with your project, so any given revision of your project is always associated with a matching revision of the library.</p>
<ul>
<li>
<p>Changes to the library (additions, edits, deletions) can't possibly effect your project, as nothing gets updated until you go into the submodule directory and <code>git pull</code>.</p>
</li>
<li>
<p>Anyone who wants to look at a historical revision of your project can see the exact library that was used to create it, no confusion about why a footprint on a board and a footprint in the PCB might be different. This is particularly useful in the schematic editor, which currently reloads schematic symbols as soon as it detects they've changed in the library.</p>
</li>
<li>
<p>Unlike the KiCad "github integration" outlined in the "Easy Way", this approach works 100% offline and allows you to even edit the library locally without an internet connection.</p>
</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#using-freetronics-kicad-repositories" id="user-content-using-freetronics-kicad-repositories"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using Freetronics Kicad repositories</h1>
<p>Whenever you <code>git clone</code> a Freetronics design repository that's based on KiCad, you need to run <code>git submodule init</code> in order to update the submodule that contains the library details. Otherwise, attempts to access the library will fail.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#adding-the-library-to-your-project" id="user-content-adding-the-library-to-your-project"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Adding the library to your project</h1>
<p>These steps explain how to include the Freetronics Kicad library git repository as a "sub-module" of your KiCad project. To do this you must have already started a new git repository for your project.</p>
<p>Using the command line, navigate to your project repository's top-level directory then execute a command like this:</p>
<pre><code>git submodule add https://github.com/freetronics/freetronics_kicad_library.git library
</code></pre>
<p>This tells git to check out the Freetronics KiCad library repository as a "submodule" of your current repository, in the directory <code>library</code>. If you want a more specific name then you could call this <code>ftlibrary</code> or any other name.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#configuring-schematic-editor" id="user-content-configuring-schematic-editor"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Configuring schematic editor</h2>
<p>In the KiCad schematic editor (eeschema), choose Preferences -&gt; Set Active Libraries and add the path to <code>library/freetronics_schematic.lib</code>. Relative paths such as that shown seme to work.</p>
<p>The KiCad schematic symbols replace quite a few of the common symbols (R for Resistor, C for Capacitor, INDUCTOR, etc). For this reason we recommend moving <code>freetronics_schematic</code> to the top of the list of libraries. Eeschema always uses the first matching name it comes across, starting from the top of the list of libraries. Not doing this may have unexpected results as eeschema mysteriously replaces a Freetronics symbol with one from the built-in libraries.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#configuring-footprint-tables" id="user-content-configuring-footprint-tables"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Configuring footprint tables</h2>
<p>Here is a sample <code>fp-lib-table</code> file that references the footprint library located inside the submodule directory:</p>
<div class="highlight highlight-source-lisp"><pre>(fp_lib_table
  (lib
   (name FT)
   (type KiCad)
   (uri ${KIPRJMOD}/library/freetronics_footprints.pretty)
   (options <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
   (descr <span class="pl-s"><span class="pl-pds">"</span>Freetronics Kicad Library<span class="pl-pds">"</span></span>)
   )
)</pre></div>
<p>You should copy this file into your repository directory and use <code>git add fp-lib-table</code> to add it to source control. You can also edit the table inside pcbnew by choosing Preferences -&gt; Library Tables.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#tracking-the-submodule-in-git" id="user-content-tracking-the-submodule-in-git"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tracking the submodule in git</h2>
<p>So far these steps create the submodule and allow you to access it from inside KiCad. The next step is properly adding it to your git repository, so it can be revision tracked.</p>
<p>If you type <code>git status</code>, you will see some output like the following:</p>
<pre><code>Changes to be committed:
  (use "git rm --cached &lt;file&gt;..." to unstage)

	new file:   .gitmodules
   	new file:   library
    new file:   fp-lib-table
</code></pre>
<p>If you run <code>git commit</code> at this point, the commit you create will associate the directory <code>library</code> with the remote copy of the Freetronics KiCad Library repository.</p>
<p>If you change directories into the <code>library</code> directory that holds the library submodule, you'll find that you are able to pull, push and commit against this repository as if it was any other git repository. However when you come back out into the main project directory, you'll notice a new line of output in <code>git status</code>:</p>
<pre><code>On branch master
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

	modified:   library (new commits)
</code></pre>
<p>You need to <code>git add library</code> and <code>git commit library</code> in order for the updated library revision to be associated with the new commit in your project repository. The actual contents of the library aren't added to your repository, just metadata that says "I am using revision xyz of this submodule".</p>
<p>If you haven't been exposed to git submodules before then you're probably feeling a bit confused at this point. <a href="http://www.git-scm.com/book/en/v2/Git-Tools-Submodules" rel="nofollow">This short chapter in the git-scm book gives a good overview of them</a>.</p>

        </div>

    </div>]