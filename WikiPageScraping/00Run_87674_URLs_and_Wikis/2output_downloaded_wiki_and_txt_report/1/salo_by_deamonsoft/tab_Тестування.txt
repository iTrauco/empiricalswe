[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#writing-unit-tests-with-tinytest" id="user-content-writing-unit-tests-with-tinytest"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Writing Unit Tests (With TinyTest)</h2>
<h4>
<a aria-hidden="true" class="anchor" href="#unit-tests" id="user-content-unit-tests"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unit Tests</h4>
<p>Unlike acceptance tests, which treat your application as a black-box closed system, and only test inputs and outputs; unit testing treats your application as an open system, and has access to all the internals of your application.  As such, it needs a different kind of testing, called unit testing.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#running-tinytest" id="user-content-running-tinytest"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Running Tinytest</h4>
<p>The simplest way to create unit tests is to use Tinytest, the native Meteor testing utility.  (Tinytest is not to be confused with TinyTestJS, which is a different library).  You'll need to add the <code>tinytest</code> package, and then use the custom <code>meteor test-packages</code> command.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> create your application</span>
meteor create helloworld
cd helloworld

<span class="pl-c"><span class="pl-c">//</span> add the tinytest package</span>
meteor add tinytest

<span class="pl-c"><span class="pl-c">//</span> run your application</span>
meteor

<span class="pl-c"><span class="pl-c">//</span> open a second browser and run the test packages</span>
meteor test<span class="pl-k">-</span>packages</pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#tinytest-api" id="user-content-tinytest-api"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tinytest API</h4>
<p>Tinytest supports the following test syntax.</p>
<ul>
<li>test.equal(actual, expected, message, not)</li>
<li>test.notEqual(actual, expected, message)</li>
<li>test.instanceOf(obj, klass)</li>
<li>test.notInstanceOf(obj, klass)</li>
<li>test.matches(actual, regexp, message)</li>
<li>test.notMatches(actual, regexp, message)</li>
<li>test.throws(f, expected)</li>
<li>test.isTrue(actual, msg)</li>
<li>test.isFalse(actual, msg)</li>
<li>test.isNull(actual, msg)</li>
<li>test.isNotNull(actual, msg)</li>
<li>test.isUndefined(actual, msg)</li>
<li>test.isNotUndefined(actual, msg)</li>
<li>test.isNaN(actual, msg)</li>
<li>test.isNotNaN(actual, msg)</li>
<li>test.length(obj, expected_length, msg)</li>
</ul>
<h4>
<a aria-hidden="true" class="anchor" href="#creating-a-tinytest-package-for-testing-in-app-files" id="user-content-creating-a-tinytest-package-for-testing-in-app-files"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creating a Tinytest Package for Testing In-App Files</h4>
<p>Tinytest is designed to encourage application modularity, and runs as part of the package framework.  To use it, you'll need to create a package for your application that contains your unit tests.  Start by creating a directory for your tests in the <code>packages/</code> directory, and then creating a <code>package.js</code> file in it.</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> packages
meteor create --package leaderboard-tinytests
<span class="pl-c1">cd</span> leaderboard-tinytests</pre></div>
<p>Within the <code>package.js</code> file, you'll want to specify a <code>Package.on_test</code> directive, within which you'll define dependencies, stub functions, links to the libraries you want to test, and the unit tests themselves.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> leaderboard/packages/leaderboard-tinytests/packages.js</span>

<span class="pl-smi">Package</span>.<span class="pl-en">describe</span>({ summary<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Provides unit tests for leaderboard application.<span class="pl-pds">"</span></span> });

<span class="pl-smi">Package</span>.<span class="pl-en">on_test</span>(<span class="pl-k">function</span> (<span class="pl-smi">api</span>) {
  <span class="pl-c"><span class="pl-c">//</span> add package dependencies</span>
  <span class="pl-smi">api</span>.<span class="pl-en">use</span>([<span class="pl-s"><span class="pl-pds">"</span>spacebars<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>tinytest<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test-helpers<span class="pl-pds">"</span></span>]);

  <span class="pl-c"><span class="pl-c">//</span> in particular, you'll probably want to use the 'templating' package for any UI related tests</span>
  <span class="pl-smi">api</span>.<span class="pl-en">use</span>(<span class="pl-s"><span class="pl-pds">"</span>templating<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>client<span class="pl-pds">"</span></span>);

  <span class="pl-c"><span class="pl-c">//</span> add stubs</span>
  <span class="pl-smi">api</span>.<span class="pl-en">add_files</span>(<span class="pl-s"><span class="pl-pds">'</span>test-stubs.js<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>client<span class="pl-pds">'</span></span>);

  <span class="pl-c"><span class="pl-c">//</span> reference the application files you want to test</span>
  <span class="pl-smi">api</span>.<span class="pl-en">add_files</span>(<span class="pl-s"><span class="pl-pds">'</span>../../leaderboard.js<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>client<span class="pl-pds">'</span></span>);

  <span class="pl-c"><span class="pl-c">//</span> and link to the unit tests for them</span>
  <span class="pl-smi">api</span>.<span class="pl-en">add_files</span>(<span class="pl-s"><span class="pl-pds">'</span>leaderboard-tests.js<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>client<span class="pl-pds">'</span></span>);
});</pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#add-stubs" id="user-content-add-stubs"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Add Stubs</h4>
<p>The trick with unit testing is understanding that you're trying to test <em>your</em> code, and not other people's code.  Ideally, you want to define empty functions for all of the external libraries and API calls that you use in your application.  We call these empty functions 'stubs'.  Once defined, they'll allow the Javascript interpreter to read and compile your code, but will also allow you to look behind the curtain at what's going on backstage.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> leaderboard/packages/leaderboard-tinytests/test-stubs.js</span>

Template <span class="pl-k">=</span> {
  leaderboard<span class="pl-k">:</span> {
    <span class="pl-en">events</span><span class="pl-k">:</span> <span class="pl-k">function</span>(){ <span class="pl-k">return</span>; },
    <span class="pl-en">fireEvent</span><span class="pl-k">:</span> <span class="pl-k">function</span>(){ <span class="pl-k">return</span>; }
  },
  player<span class="pl-k">:</span> {
    <span class="pl-en">events</span><span class="pl-k">:</span> <span class="pl-k">function</span>(){ <span class="pl-k">return</span>; },
    <span class="pl-en">addContextAttribute</span><span class="pl-k">:</span> <span class="pl-k">function</span>(){ <span class="pl-k">return</span>; },
    <span class="pl-en">fireEvent</span><span class="pl-k">:</span> <span class="pl-k">function</span>(){ <span class="pl-k">return</span>; }
  }
};

Players <span class="pl-k">=</span> {};</pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#write-your-unit-tests" id="user-content-write-your-unit-tests"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Write Your Unit Tests</h4>
<p>Once you have your stubs in place, you can begin writing actual unit tests.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">Tinytest</span>.<span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">'</span>Template.leaderboard.players()<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> (<span class="pl-smi">test</span>) {

  <span class="pl-k">var</span> someLocalCollectionCursor <span class="pl-k">=</span> {};
  <span class="pl-smi">Players</span>.<span class="pl-en">find</span> <span class="pl-k">=</span> <span class="pl-k">function</span> (<span class="pl-smi">selector</span>, <span class="pl-smi">options</span>) {
      <span class="pl-smi">test</span>.<span class="pl-en">equal</span>(<span class="pl-smi">options</span>.<span class="pl-smi">sort</span>.<span class="pl-smi">score</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>);
      <span class="pl-smi">test</span>.<span class="pl-en">equal</span>(<span class="pl-smi">options</span>.<span class="pl-smi">sort</span>.<span class="pl-c1">name</span>, <span class="pl-c1">1</span>);
      <span class="pl-c"><span class="pl-c">//</span> expect(options.sort.score).toBe(-1);</span>
      <span class="pl-c"><span class="pl-c">//</span> expect(options.sort.name).toBe(1);</span>
      <span class="pl-k">return</span> someLocalCollectionCursor;
  };

  <span class="pl-smi">test</span>.<span class="pl-en">equal</span>(<span class="pl-smi">Template</span>.<span class="pl-smi">leaderboard</span>.<span class="pl-en">players</span>(), someLocalCollectionCursor);
  <span class="pl-c"><span class="pl-c">//</span>expect(Template.leaderboard.players()).toBe(someLocalCollectionCursor);</span>
});


<span class="pl-smi">Tinytest</span>.<span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">'</span>Template.leaderboard.selected_name()<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> (<span class="pl-smi">test</span>) {

  <span class="pl-c"><span class="pl-c">//</span> returns player when player is found and has a name</span>
  <span class="pl-smi">Players</span>.<span class="pl-en">findOne</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
      <span class="pl-k">return</span> {name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>Tom<span class="pl-pds">'</span></span>};
  };
  <span class="pl-smi">test</span>.<span class="pl-en">equal</span>(<span class="pl-smi">Template</span>.<span class="pl-smi">leaderboard</span>.<span class="pl-en">selected_name</span>(), <span class="pl-s"><span class="pl-pds">"</span>Tom<span class="pl-pds">"</span></span>);


  <span class="pl-c"><span class="pl-c">//</span> returns undefined when player.name isn't present</span>
  <span class="pl-smi">Players</span>.<span class="pl-en">findOne</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
      <span class="pl-k">return</span> {};
  };
  <span class="pl-smi">test</span>.<span class="pl-en">equal</span>(<span class="pl-smi">Template</span>.<span class="pl-smi">leaderboard</span>.<span class="pl-en">selected_name</span>(), <span class="pl-c1">undefined</span>);

  <span class="pl-c"><span class="pl-c">//</span> returns undefined when player doesn't exist</span>
  <span class="pl-smi">Players</span>.<span class="pl-en">findOne</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
      <span class="pl-k">return</span> <span class="pl-c1">undefined</span>;
  };
  <span class="pl-smi">test</span>.<span class="pl-en">equal</span>(<span class="pl-smi">Template</span>.<span class="pl-smi">leaderboard</span>.<span class="pl-en">selected_name</span>(), <span class="pl-c1">undefined</span>);

});</pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#leaderboard-example" id="user-content-leaderboard-example"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Leaderboard Example</h4>
<p>You can find a complete example of unit tests for the Leaderboard example at the following <a href="https://github.com/awatson1978/leaderboard-tinytests">leaderboard-tinytests</a> repository.</p>

        </div>

    </div>]