[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#loupe-javascript-agent" id="user-content-loupe-javascript-agent"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Loupe JavaScript agent</h1>
<p>These agents bring a lot of the Loupe Agent functionality to JavaScript and Angular, handling uncaught exceptions and allowing you to
log messages from your JavaScript client script in Loupe.</p>
<p>These agents provide additonal functionality allowing you to correlate the actions your user performs client side with the corresponding
server side processing.</p>
<p>Currently Loupe supports 2 different JavaScript agents: <a class="internal present" href="/GibraltarSoftware/Gibraltar.Agent.Web.JavaScript/wiki/Loupe-JavaScript-Agent">a native JavaScript agent</a> and an <a class="internal present" href="/GibraltarSoftware/Gibraltar.Agent.Web.JavaScript/wiki/Loupe-Angular-Agent">Angular 1.x agent</a>.</p>
<p>The agents are nearly identical the only difference at present is that the Angular agent doesn't support CORS by default whereas the native agent will
work with CORS.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#no-dependencies" id="user-content-no-dependencies"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>No dependencies</h2>
<p>The agents are self contained scripts which have no external dependencies making it easy for you to include in your site.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#client-machine-details" id="user-content-client-machine-details"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Client machine details</h2>
<p>As a default each request sent to the server, be it a normal message or due to an exception, will contain information on the users machine that is available
to the browser see <a class="internal present" href="/GibraltarSoftware/Gibraltar.Agent.Web.JavaScript/wiki/Client-Information">here</a> for details on information that is available.</p>
<p>We using a slightly modified version of <a href="https://github.com/bestiejs/platform.js">platform.js</a> to enable us to embed the functionality withing the agent and
ensure no clash between the agent and your site if you happen to be using platform.js as well.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#unhandled-exceptions" id="user-content-unhandled-exceptions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unhandled Exceptions</h2>
<p>Both agents will handle uncaught exceptions and will attempt to create a stack trace from the error information that they are given.</p>
<p>The amount of information available in the stack trace will depend on:</p>
<ul>
<li>the browser - some browsers do not have stack traces so they cannot be output</li>
<li>the mode the browser is working in - incognito/private mode can effect what stack trace is available (again dependent upon the browser)</li>
<li>the type of error - a custom error created by the user may not have the same level of functionality that a runtime error does e.g. TypeError</li>
</ul>
<p>To generate the stack trace we utilise a slightly modified version of <a href="http://www.stacktracejs.com/" rel="nofollow">stackTrace.js</a> to be able to embed it within the agent so there is no clash
between the agent and your site if you happend to be using stackTrace.js yourself.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#session-tracking" id="user-content-session-tracking"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Session Tracking</h2>
<p>When trying to investigate problems it is helpful if you can understand how a user is using the software and what happens on the server to the requests that the
user makes.</p>
<p>To better enable this understanding the agent has ability to track a users session allowing you to see what is happening between client and server.</p>
<p>Find more information <a class="internal present" href="/GibraltarSoftware/Gibraltar.Agent.Web.JavaScript/wiki/Session-Tracking">here</a> which explains what Loupe does.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#ensuring-log-message-delivery" id="user-content-ensuring-log-message-delivery"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Ensuring log message delivery</h2>
<p>Just like the normal .Net agents the JavaScript agents will attempt to store log messages/exceptions in local storage so that if it cannot contact the server
no messages are lost and once it is able to send messages to the server any pending messages will be sent in the background.</p>
<p>A message will stay in local storage until the agent sucessfully sends the message to the server.</p>
<p>However, unlike the .Net agents there are some limitations and messages can only be stored if:</p>
<ul>
<li>local storage is supported</li>
<li>the script is allowed to write to local storage</li>
<li>there is space in local storage to store messages</li>
</ul>

        </div>

    </div>]