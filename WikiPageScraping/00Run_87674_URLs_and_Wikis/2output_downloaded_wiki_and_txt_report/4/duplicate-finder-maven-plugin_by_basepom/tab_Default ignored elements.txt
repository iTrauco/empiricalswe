[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The duplicate finder plugin ignores the following classpath elements by default unless the <code>useDefaultResourceIgnoreList</code> flag is set to <code>false</code>.</p>
<table>
<thead>
<tr>
<th>Regular expression</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^META-INF/.*</code></td>
<td>matches any resource inside a <code>META-INF</code> directory in the classpath hierarchy root. Jars store information in <code>META-INF</code> and some resources actually must be on the classpath multiple times (e.g. for the Java Service Provider facility).</td>
</tr>
<tr>
<td><code>^OSGI-INF/.*</code></td>
<td>matches any resource inside an <code>OSGI-INF</code> directory in the classpath hierarchy root. OSGi components store their information in this directory.</td>
</tr>
<tr>
<td><code>^licenses/.*</code></td>
<td>matches any resource inside a <code>licenses</code> directory in the classpath hierarchy root. This is a common place for storing component specific license resources which often have the same name.</td>
</tr>
<tr>
<td><code>.*license(\.txt)?$</code></td>
<td>matches any resource ending in <code>license</code> or <code>license.txt</code>. This is a common name for license resources which tend to get sprinkled all across dependencies.</td>
</tr>
<tr>
<td><code>.*notice(\.txt)?$</code></td>
<td>matches any resource ending in <code>notice</code> or <code>notice.txt</code>. This is a common name for resources (e.g. in Apache provided jars) which tend to get sprinkled all across dependencies.</td>
</tr>
<tr>
<td><code>.*readme(\.txt)?$</code></td>
<td>matches any resource ending in <code>readme</code> or <code>readme.txt</code>. This is a common name for component information which tend to get sprinkled all across dependencies.</td>
</tr>
<tr>
<td><code>.*third-party(\.txt)?$</code></td>
<td>matches any resource ending in <code>third-party</code> or <code>third-party.txt</code>. This is a common name for resources (e.g. in Apache provided jars) which tend to get sprinkled all across dependencies.</td>
</tr>
<tr>
<td><code>.*package\.html$</code></td>
<td>matches any resource ending in <code>package.html</code>. The old name of <code>package-info.java</code> which tend to get sprinkled across jars and then clash if a package is populated from multiple jars.</td>
</tr>
<tr>
<td><code>.*overview\.html$</code></td>
<td>matches any resource ending in <code>overview.html</code>. This is a common name for documentation which tend to get sprinkled all across dependencies.</td>
</tr>
</tbody>
</table>
<p>The duplicate finder plugin ignores the following classes by default unless the <code>useDefaultClassIgnoreList</code> flag is set to <code>false</code>.</p>
<table>
<thead>
<tr>
<th>Regular expression</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^.*\$/.*</code></td>
<td>matches Java inner and nested classes. Before plugin version 1.2.1, this match was implicit and could not be turned off.</td>
</tr>
<tr>
<td><code>module-info</code></td>
<td>JDK 9 module-info class. <strong>Plugin version 1.3.0+</strong>
</td>
</tr>
</tbody>
</table>
<p>The following local directory names will also always be ignored. Files in these directory are never checked or touched by the plugins:</p>
<table>
<thead>
<tr>
<th>Regular expression</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^.git$</code></td>
<td>git SCM directory</td>
</tr>
<tr>
<td><code>^.svn$</code></td>
<td>Subversion SCM directory</td>
</tr>
<tr>
<td><code>^.hg$</code></td>
<td>Mercurial SCM directory</td>
</tr>
<tr>
<td><code>^.bzr$</code></td>
<td>Bazaar SCM directory</td>
</tr>
</tbody>
</table>

        </div>

    </div>]