[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#openlayers-3-phase-1" id="user-content-openlayers-3-phase-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>OpenLayers 3 Phase 1</h1>
<p>This document defines the functionality that OpenLayers 3 will offer as the
result of the first development phase.</p>
<p>Stated and anticipated future client requirements necessitate architectural
considerations in Phase 1 to ensure that this functionality can be implemented
later phases. Each section of the document includes an <em>Enabling future
functionality</em> for that matter.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#animation" id="user-content-animation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Animation</h2>
<p>In Phase 1 we will make OpenLayers 3 animate</p>
<ul>
<li>Zoom transition</li>
<li>Panning (kinetic)</li>
<li>Tile displaying</li>
<li>Camera movement</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#enabling-future-functionality" id="user-content-enabling-future-functionality"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Enabling future functionality</h3>
<p>This requires a solid and flexible framework that makes animations possible
with both the WebGL and the DOM renderers.</p>
<p>Animations with WebGL will be based
on <em>requestAnimationFrame</em> loops, while, for performance reasons, animations
with DOM will be based on CSS3 transitions. The animation framework should
accomodate both implementations.</p>
<p>Related to the animation framework is the way the DOM renderer translates
and scales the layers pane. The DOM renderer currently scales each tile
image individually by changing the dimensions of its DOM element. For
performance reasons we may instead want to apply a CSS scale transform
on container elements.</p>
<p>We will implement the animation framework in Phase 1,
as a foundation for current and future animation requirements.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#camera" id="user-content-camera"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Camera</h2>
<p>In Phase 1 we will experiment with 3D features. We will work on</p>
<ul>
<li>Integrating with the Cesium virtual globe</li>
<li>Adding "limited tilt" support (i.e. tilt with same-resolution tiles)</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#enabling-future-functionality-1" id="user-content-enabling-future-functionality-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Enabling future functionality</h3>
<p>For 3D in general, and integration with virtual globes in particular, we need
to introduce the concept of a camera. In Phase 1 we will therefore add a Camera
type. The Camera will be part of the API. One requirement though is that the
API remain easy for developers of "simple", 2D map applications.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#data-source" id="user-content-data-source"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Data Source</h2>
<p>OpenLayers 3 has the concept of data sources. One type only is currently
supported: <em>tile</em>. (OpenLayers 3 currently supports the XYZ/OSM tile source
family, and tiled WMS.)</p>
<p>In Phase 1 we will add support for the following layer type:</p>
<ul>
<li>WMTS</li>
<li>Single Image WMS</li>
<li>Image (OpenLayers 2's <code>OpenLayers.Layer.Image</code>)</li>
<li>Vector (detailed in the following section)</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#enabling-future-functionality-2" id="user-content-enabling-future-functionality-2"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Enabling future functionality</h3>
<p>To be able to rate-control, abort, prioritize tile requests, and manage
resource management a Tile Queue (or Tile Manager) will be implemented.
This work will be based on past experience with OpenLayers 2 and WebGLMaps.</p>
<p>Also, writing custom, application-specific layer/data source types should be
possible. The architecture and build tool must be designed with this
in mind.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#vector" id="user-content-vector"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Vector</h2>
<p>In Phase 1 we will add the following vector functionality:</p>
<ul>
<li>Display styled points, linestrings and polygons with Canvas 2D (or SVG [*])</li>
<li>Display unstyled points with WebGL</li>
<li>Draw, interact with, and modify features</li>
<li>Support various <em>formats</em>, <em>protocols</em>, and <em>strategies</em>
</li>
</ul>
<p>We will consider 2D vectors only in Phase 1.</p>
<p>[*] To be decided considering performance and browser compatibility.</p>
<p>Note: it is not yet clear whether we will have a Markers layer type as in OpenLayers 2.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#enabling-future-functionality-3" id="user-content-enabling-future-functionality-3"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Enabling future functionality</h3>
<p>OpenLayers 2 offers many vector-related features. It has a flexible
architecture enabling to work with different <em>strategies</em>, <em>protocols</em>, and
<em>formats</em>. It also provides a powerful styling framework, based on SLD.</p>
<p>Eventually, OpenLayers 3 will, at least, provide the same level of
functionality and flexibility.</p>
<p>Displaying styled geometries of any type (point, linestring and polygon) with
WebGL must also be possible in the future, and it must exhibit good
performance. For example, sending the vector data to the GPU must not require
expensive memory operations (data copies), and it must be possible to batch the
drawing of multiple objects.</p>
<p>Also, applying styles to geometries should probably be easier than with
OpenLayers 2, but without compromising on flexibility and performance.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#control" id="user-content-control"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Control</h2>
<p>In Phase 1 we will port the following OpenLayers 2 controls, or
functionality thereof, to OpenLayers 3:</p>
<ul>
<li>ArgParser</li>
<li>Attribution</li>
<li>MousePosition</li>
<li>Navigation</li>
<li>PanZoomBar</li>
<li>Permalink</li>
<li>ScaleLine</li>
<li>TouchNavigation</li>
<li>Zoom</li>
<li>ZoomToMaxExtent</li>
<li>OverviewMap</li>
<li>DrawFeature</li>
<li>Geolocate</li>
<li>GetFeature</li>
<li>Measure</li>
<li>ModifyFeature</li>
<li>NavigationHistory</li>
<li>SelectFeature</li>
</ul>
<p>OpenLayers 2 includes a <code>Panel</code> control, for addings buttons onto a map.
Whether something similar will be be ported to OpenLayers 3 is yet to be
determined.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#enabling-future-functionality-4" id="user-content-enabling-future-functionality-4"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Enabling future functionality</h3>
<p>The control architecture will be built with the following requirements in mind:</p>
<ul>
<li>Controls must work with both the DOM and WebGL renderers.</li>
<li>Controls can be composed of other controls.</li>
<li>Writing controls must be easy.</li>
<li>Working with application-specific controls should be possible.</li>
</ul>
<p>Note: OpenLayers 3 has <em>interactions</em> and <em>controls</em>. We will need to clarify
these concepts in order to implement the required functionality in a generic
way.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#format" id="user-content-format"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Format</h2>
<p>In Phase 1 we will implement the following formats:</p>
<ul>
<li>WMS Capabilities</li>
<li>WMTS Capabilities</li>
<li>GeoJSON (implies JSON)</li>
<li>KML</li>
<li>WKT</li>
<li>GPX</li>
<li>WFTS (implies GML)</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#enabling-future-functionality-5" id="user-content-enabling-future-functionality-5"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Enabling future functionality</h3>
<p>OpenLayers 2 includes an architecture to work with XML (mainly OGC), and share
code between various formats. A similar architecture will be implemented in
OpenLayers 3.</p>
<p>We will also attempt to make it possible to share formats with other
open-source toolkits (Cesium, Leaflet). This may require collaboration with
other communities.</p>
<ul>
<li>Define format architecture</li>
<li>define XML format architecture</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#mobile" id="user-content-mobile"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Mobile</h2>
<p>OpenLayers 3 must obviously work on mobile. Panning and zooming should be very
smooth.  The common gestures for interacting with the map should be available.
For example, we will add a <code>PinchZoom</code> interaction (which we don't have
currently).</p>
<p>We will focus on supporting the iOS and Android native browsers (WebKit). See
the Browser Support section below for more information.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#overlaypopup" id="user-content-overlaypopup"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Overlay/Popup</h2>
<p>OpenLayers 3 already includes the concept of overlays. Overlays are
things/elements that can be added atop the map. This is the concept onto which
popups and labels will rely. We will to continue this work, and add a popup
implementation based on the overlay architecture.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#browser-support" id="user-content-browser-support"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Browser support</h2>
<p>In Phase 1 we will make sure the features we develop work in</p>
<ul>
<li>IE 9+</li>
<li>FireFox 17+</li>
<li>Chrome 22+</li>
<li>Safari 5+</li>
<li>iOS 6 and Android 4.2 native browsers</li>
</ul>
<p>Supporting IE from version 9 makes it possible to not rely on VML at all for
vector rendering. VML is an obsolete technology.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#enabling-future-functionality-6" id="user-content-enabling-future-functionality-6"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Enabling future functionality</h3>
<p>OpenLayers 3 will need to be able to leverage modern web technologies such
as Filter Effects and CSS3 (3D) transforms.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#infrastructure-and-doc" id="user-content-infrastructure-and-doc"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Infrastructure and Doc</h2>
<p>OpenLayers 3 needs to have good documentations and tools.</p>
<p>We already generate an API doc using jsdoc3, but a lot
more remains to be done for a decent API documentation. We may need to extend
jsdoc3 to meet our needs.</p>
<p>We use Travis CI for Continuous testing and integration. We will need to
update our Travis script as we go.</p>
<p>OpenLayers 3 has to offer easy-to-use tools for creating custom builds of the
library.  A convenient command line interface (CLI) will be developed. This CLI
will serve as the base for a hosted build tool developed in a further phase of
the project.</p>
<p>We will also need to organize the website and the community around two code
bases (OpenLayers 2 and OpenLayers 3).</p>
<h2>
<a aria-hidden="true" class="anchor" href="#summary" id="user-content-summary"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Summary</h2>
<p>In the first phase of development we will mainly work on porting the
functionality from OpenLayers 2 to OpenLayers 3. At the end of the first phase
OpenLayers 3 should major features of OpenLayers 2, and should have a solid and
flexible architecture making it possible, and easy enough, to add more features
in the future.</p>
<p>In the first phase we will also work on more advanced features (e.g. Cesium
integration, client-side re-projection, millions of geometries handled by
WebGL, limited tilt close to the surface). The goal is twofold: assess our
architecture and design choices, and show off OpenLayers 3 to the public.</p>

        </div>

    </div>]