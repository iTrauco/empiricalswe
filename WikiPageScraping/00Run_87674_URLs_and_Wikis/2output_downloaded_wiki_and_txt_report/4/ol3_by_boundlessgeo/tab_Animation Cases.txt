[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#interruptible-transitions-in-map-state" id="user-content-interruptible-transitions-in-map-state"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Interruptible Transitions in Map State</h2>
<p>These types of animations change the map state (e.g. center and resolution) and re-render all layers with each change in state.  During these transition, user generated events (e.g. <code>mousedown</code>, <code>touchstart</code>, <code>mousewheel</code>) must cancel the animation.  During these transition, other events (e.g. tile loading) that might trigger a rendering must not cancel the animation.</p>
<p><strong>Examples</strong></p>
<ul>
<li>
<p>Fly to: a method is called that results in the map smoothly panning and zooming to a new center and resolution.</p>
</li>
<li>
<p>Kinetic pan: a method is called at the end of a drag-pan that results in the map gradually coming to a stop.</p>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#playback" id="user-content-playback"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Playback</h2>
<p>These types of animation display changes in data over time.  Typically the user would be presented with some playback controls and would start and stop the animation manually.  An animation playback of this sort does not interfere with the animated changes in map state described above and vice versa.</p>
<p><strong>Examples</strong></p>
<ul>
<li>Hurricane track: a vector layer is populated with hurricane positions from a <code>gx:Track</code> in KML.  The map is accompanied by a playback control that lets the user sit back and watch the position change over time.  Things like kinetic panning work during this playback - though the application may also decide to center the map at the hurricane position at specific key frames.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#display-effects" id="user-content-display-effects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Display Effects</h2>
<p>Some aspects of map rendering may be animated for a simple display effect (without an accompanying gradual change in map state).  These types of animations should be completely independent from the above animations.</p>
<p><strong>Examples</strong></p>
<ul>
<li>
<p>Tile fade: when tiles are drawn they may gradually fade in.</p>
</li>
<li>
<p>Animated zoom: when the user requests a change in resolution (e.g. 2x), the renderer may choose to animate the transition (though the map state changes immediately).</p>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#things-that-are-not-animations" id="user-content-things-that-are-not-animations"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Things that are not Animations</h2>
<p>There may be dynamic aspects of a map application that are not necessarily animation.</p>
<p><strong>Examples</strong></p>
<ul>
<li>"Real-time" data updates: say we have a vector layer that streams data changes via a WebSocket.  The layer may request a re-rendering of the map with every data change.  The renderers should handle this in an efficient way (i.e. the layer shouldn't have to know how to animate, it should just demand a re-rendering with every data change).</li>
</ul>

        </div>

    </div>]