[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The behaviour-detector project includes the <a href="https://github.com/amsa-code/risky/blob/master/behaviour-detector/src/main/java/au/gov/amsa/navigation/CollisionDetector.java">CollisionDetector</a> class that finds collision candidates in a stream of <code>VesselPosition</code>.</p>
<p>Given a stream of <code>VesselPosition</code>s ordered by ascending time, a sliding window of positions of duration D (say D=20 minutes) is maintained in memory (using an R-tree spatial index) and for each position P that arrives the window is searched for all positions (for vessels other than the vessel of P) within a certain maximum absolute time difference T (say T=5 minutes) and within a certain maximum distance (specified in lat, long separation which is a function of T and the maximum possible speed of vessels).</p>
<p>The list of positions is then tested for an extrapolated collision based on course and speed and a collision candidate is reported if circles drawn around extrapolated positions (of diameter equal to a factor F times the max dimension in metres of the vessel) intersect. The quadratic equation solved for this intersection is described in <a href="https://github.com/amsa-code/risky/blob/master/behaviour-detector/src/main/java/au/gov/amsa/navigation/VesselPosition.java"><code>VesselPosition.intersectionTimes</code></a>.</p>
<p>The algorithm as described is a rough first cut. Many refinements are possible (for instance the AIS set is not placed at the centre of the vessel) and collision candidate detection based also on interpolation might be desirable too.</p>
<p>This is a broad brush description of the algorithm and there are subtleties not mentioned that will need to be described here when time permits.</p>

        </div>

    </div>]