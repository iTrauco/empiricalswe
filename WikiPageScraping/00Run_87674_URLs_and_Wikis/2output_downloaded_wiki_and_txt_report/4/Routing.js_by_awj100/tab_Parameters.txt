[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#specifying-a-parameter" id="user-content-specifying-a-parameter"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Specifying a parameter</h3>
<p>Parameters are mandatory segments of a URL, <em>i.e.</em> a corresponding value <em>must</em> be present in the URL.</p>
<p>Routing.js allows parameters to be specified by a preceding <code>:</code>:</p>
<pre><code>Routing.map("#!/users/:name")
       .to(...);
</code></pre>
<p>The above example will match any of the following routes</p>
<pre><code>#!/users/andrew    // name = "andrew"
#!/users/27        // name = "27"
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#optional-parameters" id="user-content-optional-parameters"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Optional Parameters</h3>
<p>Optional parameters are non-mandatory segments of a URL, <em>i.e.</em> a corresponding value <em>may or may not</em> be present in the URL.</p>
<p>Routing.js allows optional parameters to be specified similar to mandatory parameters, but wrapped in parentheses:</p>
<pre><code>Routing.map("#!/users(/:name)")
       .to(...);
</code></pre>
<p>The above example will match any of the following routes</p>
<pre><code>#!/users
#!/users/andrew    // name = "andrew"
#!/users/27        // name = "27"
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#retrieving-a-parameter-object" id="user-content-retrieving-a-parameter-object"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Retrieving a Parameter Object</h3>
<p>Each parameter object exists as a property of the <code>params</code> object, and can consequently be obtained using</p>
<pre><code>var my_param = this.params["myParam"];
</code></pre>
<p>or, if the parameter name meets the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors" rel="nofollow">requirements of a JavaScript property name</a>,</p>
<pre><code>var my_param = this.params.myParam;
</code></pre>
<p>[Also, read the section on <a href="https://github.com/awj100/Routing.js/wiki/Parameters#retrieving-optional-parameters">retrieving optional parameters</a>.]</p>
<h3>
<a aria-hidden="true" class="anchor" href="#the-param-object" id="user-content-the-param-object"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>The <code>param</code> object</h3>
<p>Each property on the <code>params</code> object is itself a Parameter object with the following properties:</p>
<ul>
<li>
<code>value</code>: this is a <em>string value</em> containing the parameter segment as it appeared in the URL. <strong>Routing.js</strong> does not expend any effort determining what might the correct type of the URL parameter in case the exact type is not needed. Besides, JavaScript being both <a href="https://en.wikipedia.org/wiki/Programming_language#Weak_and_strong_typing" rel="nofollow">weakly</a> and <a href="https://en.wikipedia.org/wiki/Programming_language#Static_versus_dynamic_typing" rel="nofollow">dynamically typed</a> means that this initial type is not rigidly held to.</li>
<li>
<code>hasChanged</code>: A boolean property indicating whether this parameter has changed its value since the previous route. This will always be <code>true</code> if the route has changed, but in instances where the route is the same but with a modified parameter(s), this property reflects whether this parameter has been modified.</li>
</ul>
<p>For example, consider the following route</p>
<pre><code>Routing.map("#!/route/:param1/segment/:param2");
</code></pre>
<p>Upon first arrival at this route using the path "#!/route/1/segment/2", the <code>params</code> object will contain two properties.</p>
<pre><code>params: {
    "param1": {
        hasChanged: true,
        value: "1"
    },
    "param2": {
        hasChanged: true,
        value: "2"
    }
}
</code></pre>
<p>However, if the user then navigates to "#!/route/1/segment/3" the <code>params</code> object will reflect this change.</p>
<pre><code>params: {
    "param1": {
        hasChanged: false,
        value: "1"
    },
    "param2": {
        hasChanged: true,
        value: "3"
    }
}
</code></pre>
<p>Notice that <code>param1.hasChanged</code> is now <code>false</code> whereas <code>param2.hasChanged</code> shows that it was this parameter which invoked the change in route.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#retrieving-optional-parameters" id="user-content-retrieving-optional-parameters"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Retrieving Optional Parameters</h4>
<p>Special consideration must be given to optional parameters. If not specified in the URL then no corresponding parameter object will be present. In such a case,</p>
<pre><code>var my_param = this.params.myOptionalParam;
</code></pre>
<p>will return <code>undefined</code>.</p>
<p>To make your JavaScript more robust, use either of the following before calling <code>value</code> or <code>hasChanged</code> on an optional parameter:</p>
<pre><code>var my_param = this.params.myOptionalParam;
if (typeof (my_param) !== "undefined") {
    // .value or .hasChanged may now be safely called
}
</code></pre>
<p>or</p>
<pre><code>if (this.params.hasOwnProperty("myOptionalParam")) {
    var my_param = this.params.myOptionalParam;
    // .value or .hasChanged may now be safely called
}
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#example" id="user-content-example"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Example</h2>
<p>Here is an example where this <code>hasChanged</code> property may become useful.</p>
<p>Let's suppose you have a page with a list of records, with each record having an ID property. In order to allow a user to have a record-specific URL, the current URL allows an optional parameter.</p>
<p>So the page showing all the records may have a URL such as</p>
<pre><code>#!/records/:log(/:id)
</code></pre>
<p>This would allow a user navigating to, for example</p>
<pre><code>#!/records/my-log
</code></pre>
<p>to see a list of records, or a user navigating to</p>
<pre><code>#!/records/my-log/723
</code></pre>
<p>to see the record in "my-log" with the corresponding ID of "723".</p>
<p>Now, let's suppose you want the URL in the browser's address bar to change each time the user clicks or scrolls to another record in the list. Normally this change to the <code>document.location.href</code> would cause <strong>Routing.js</strong> to trigger the function referenced in the <code>to</code> handler, but it's possible to instruct <strong>Routing.js</strong> to allow specific changes to be made to the URL <em>without</em> triggering the code which rendered the collection of records.</p>
<p>To do this we'll make use of a <code>before</code> filter.</p>
<pre><code>Routing.map("#!/records/:log(/:id)")
       .before(function() {
           var param_log = this.params["log"],
               param_id = this.params["id"];

           return param_log.hasChanged 
                  &amp;&amp; typeof(param_id) !== "undefined" 
                  &amp;&amp; !param_id.hasChanged;
       })
       .to(display_records);
</code></pre>
<p>In the above example, we obtain both possible parameters, "log" (which <em>will</em> be present) and "id" (which may or may not be present). We then wish to determine if <em>the only change</em> which was made to the URL was the modification of "id", and to do this we check that</p>
<ul>
<li>"log" has not been modified</li>
<li>"id" does exist</li>
<li>"id" has been changed since the previous URL</li>
</ul>
<p>Remembering that if a <code>before</code> function returns <code>false</code> the processing of that route is aborted, we therefore wish to return <code>false</code> if the above conditions are met. This results in</p>
<pre><code>var id_is_only_change = !param_log.hasChanged 
                        &amp;&amp; typeof(param_id) !== "undefined" 
                        &amp;&amp; param_id.hasChanged;
return !id_is_only_change;
</code></pre>
<p>or simply</p>
<pre><code>return param_log.hasChanged 
       &amp;&amp; typeof(param_id) !== "undefined" 
       &amp;&amp; !param_id.hasChanged;
</code></pre>
<p>The above <code>return</code> statement returns <code>false</code> if these three conditions are satisfied, and <code>true</code> otherwise. This means that if these three conditions are satisfied, this particular routing process is aborted at the point of the <code>return</code> statement and no further handler functions will be executed.</p>

        </div>

    </div>]