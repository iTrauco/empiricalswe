[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#dbmocklibrarydatacontainer" id="user-content-dbmocklibrarydatacontainer"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>DbMockLibrary\DataContainer</h1>
<p>DataContainer extends <a href="https://github.com/ajant/DbMockLibrary/wiki/Base">Base</a> class and is therefore singleton as well. It provides most basic features for handling dummy data. On its own, it is not terribly useful for the users, but its features form the backbone of the library, while providing nice code separation.</p>
<p>Mock data should be a three-dimensional array, in order to simulate database with collections which contain rows, which contain fields, though there are no formal restrictions, other then that it has to be an array. Example:</p>
<pre><code>[
  'collection1' =&gt; [], // empty collection
  'collection2' =&gt; [
    'row1' =&gt; ['field1' =&gt; 1]
    'row2' =&gt; ['field1' =&gt; 2, 'field1' =&gt; [1, true]]
  ]
]
</code></pre>
<p>Dummy data represents schemaless database (such as <a href="https://www.mongodb.org/" rel="nofollow">MongoDB</a>) and provides no referential integrity features, at the moment, but those features are implemented to a degree in the <a href="https://github.com/ajant/DbMockLibrary/wiki/DependencyHandler">DependencyHandler</a> class.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#library-will-always-use-encapsulating-array-as-a-database-its-sub-arrays-as-collections-or-tables-in-sql-terminology-and-their-sub-arrays-as-documents-rows-in-sql-terminology-all-those-terms-are-used-interchangeably-in-this-wiki-to-emphasize-implementation-neutrality-of-the-libraryusage-examples" id="user-content-library-will-always-use-encapsulating-array-as-a-database-its-sub-arrays-as-collections-or-tables-in-sql-terminology-and-their-sub-arrays-as-documents-rows-in-sql-terminology-all-those-terms-are-used-interchangeably-in-this-wiki-to-emphasize-implementation-neutrality-of-the-libraryusage-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Library will always use encapsulating array as a database, its sub-arrays as collections (or tables in SQL terminology) and their sub-arrays as documents (rows in SQL terminology). All those terms are used interchangeably in this wiki, to emphasize implementation neutrality of the library.
Usage examples</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#for-additional-help-look-at-the-tests-additional-input-scenarios-are-testedinitdatacontainer" id="user-content-for-additional-help-look-at-the-tests-additional-input-scenarios-are-testedinitdatacontainer"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>For additional help, look at the tests, additional input scenarios are tested.
initDataContainer</h2>
<p>Initializes dummy data.</p>
<pre><code>DataContainer::initDataContainer(['collection1' =&gt; ['row1' =&gt; ['field1' =&gt; 1]]]);
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#resetdata" id="user-content-resetdata"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>resetData</h2>
<p>Resets data to the starting state, by undoing any changes dummy data might have suffered after initialization. Should be done during tear down process of any test which manipulated dummy data, so that next test can work with clean data.</p>
<pre><code>DataContainer::resetData();
</code></pre>

        </div>

    </div>]