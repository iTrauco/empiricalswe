[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#dbmocklibraryabstractimplementation" id="user-content-dbmocklibraryabstractimplementation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>DbMockLibrary\AbstractImplementation</h1>
<h1>
<a aria-hidden="true" class="anchor" href="#abstractimplementation-extends-dependencyhandler-class-and-is-abstract-while-class-that-extend-it-are-therefore-singletons-as-well-it-provides-set-of-common-database-agnostic-features-that-are-required-for-concrete-database-implementationsusage-examples" id="user-content-abstractimplementation-extends-dependencyhandler-class-and-is-abstract-while-class-that-extend-it-are-therefore-singletons-as-well-it-provides-set-of-common-database-agnostic-features-that-are-required-for-concrete-database-implementationsusage-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>AbstractImplementation extends <a href="https://github.com/ajant/DbMockLibrary/wiki/DependencyHandler">DependencyHandler</a> class and is abstract, while class that extend it are therefore singletons as well. It provides set of common database-agnostic features that are required for concrete database implementations.
Usage examples</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#for-additional-help-look-at-the-tests-additional-input-scenarios-are-testedsetuparray-records--" id="user-content-for-additional-help-look-at-the-tests-additional-input-scenarios-are-testedsetuparray-records--"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>For additional help, look at the tests, additional input scenarios are tested.
setUp(array $records = [])</h2>
<p>Inserts mock data into the database. Argument points to which collections/rows are to be inserted. Empty array results in all dummy data being inserted. Array of collection names causes all of listed collections to be inserted. Array of collection names pointing arrays of row ids, causes only specified rows to be inserted. If dependencies are defined, order of insertion is generated based on the dependencies, with collection being depended upon being inserted before those depending on them. Additionally any data that listed collections depend upon is also inserted. If no dependencies were defined, insertion is performed based on order in which they were listed.</p>
<pre><code>DataContainer::setUp(['collection' =&gt; ['id1', 'id2']]);
DataContainer::setUp(['collection']);
DataContainer::setUp([]);
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#teardownarray-records--" id="user-content-teardownarray-records--"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>tearDown(array $records = [])</h2>
<p>Deletes mock data from the database. Only listed collections/rows are deleted, regardless of whether dependencies were defined.</p>
<pre><code>DataContainer::tearDown(['collection' =&gt; ['id1', 'id2']]);
DataContainer::tearDown(['collection']);
DataContainer::tearDown([]);
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#cleanup" id="user-content-cleanup"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>cleanUp()</h2>
<p>Deletes mock data from the database, which was inserted by the setUp method. Any mock data inserted outside of the setUp is unaffected.</p>
<pre><code>DataContainer::cleanUp()
</code></pre>

        </div>

    </div>]