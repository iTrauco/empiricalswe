[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>An overview of features of the <code>RtmClient</code> object beyond simply opening a WebSocket.</p>
<ul>
<li>
<strong>Event Emission:</strong> Team events in scope of the token used to connect are emitted by the client by message <code>type</code> and, for messages of type <code>"message"</code>, by <code>"message::{subtype}"</code>.</li>
<li>
<strong>Response Management:</strong> Callback functions (or Promises) are associated with every sent message and invoked (or completed) once the Platform responds with an acknowledgement or an error. The responses are designed to be resilient to reconnects.</li>
<li>
<strong>Ping/Pong Management:</strong> At the WebSocket protocol level, the client will respond to pings from the server with a matching pong. In addition, the Slack RTM API defines messages types for "ping" and "pong". This client will send the server a "ping" message on an interval (default interval length is 5 seconds). It expects the server to "pong" within a timeout (default timeout is 20 seconds). The server can "pong" either with an explicit "pong" message or any other non-internal message. If the timeout is reached, the client begins automatic reconnection. The time constants can be configured.</li>
<li>
<strong>Data Store:</strong> A caching mechanism for team data with an abstract interface: <code>SlackDataStore</code>.
<ul>
<li>
<code>MemoryDataStore</code> is a default implementation</li>
<li>Consumes RTM messages and processes them to build a model of the team, users, and channels.</li>
</ul>
</li>
<li>
<strong>Automatic Reconnection:</strong> The client attempts to reconnect if the server initiates a disconnect, if a team migration begins, if the pong timeout is exceeded, or if a recoverable error happens during connection. This feature can be turned off.</li>
<li>
<strong>Proxy Support:</strong> Exposes an API to <a href="https://www.npmjs.com/package/https-proxy-agent" rel="nofollow"><code>HttpsProxyAgent</code></a> to create an alternative <code>transport</code> in order to proxy traffic via another HTTP server. This currently only supports HTTP tunnels.</li>
<li>
<strong>Message Updating:</strong> Exposes functionality for the <code>chat.update</code> Web API method.
<ul>
<li>The client has a <code>slackAPIUrl</code> configuration property which can be used to change the base URL of requests sent to the Web API.</li>
</ul>
</li>
<li>
<strong>Convenience Methods:</strong> Defines explicit methods for sending messages of types <code>typing</code>, <code>message</code>, and <code>presence_sub</code>.</li>
<li>
<strong>Pluggable Socket Factory:</strong> The default WebSocket factory comes from the popular <a href="https://www.npmjs.com/package/ws" rel="nofollow"><code>ws</code></a> module. The client allows this to be replaced, which is mostly useful for testing.</li>
<li>
<strong>Logging:</strong> Logs information at several log levels. Logging function can be configured.</li>
<li>
<strong>User Agent Instrumentation:</strong> The client reports information about itself via the <code>User-Agent</code> request header. The format is <code>@slack:client/${package version} ${os}/${os version} node/${node version}</code>
</li>
<li>
<strong>Lifecycle Events:</strong> <strong>TODO</strong> see <code>docs/RtmClient Event Lifecycle.xml</code>
</li>
</ul>
<p><strong>TODO</strong> how do retries work?</p>
<p><strong>NOTE:</strong> this is a WIP, feel free to contribute edits.</p>

        </div>

    </div>]