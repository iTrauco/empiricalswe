[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#basic-sinewave-generation-with-the-tsunami" id="user-content-basic-sinewave-generation-with-the-tsunami"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Basic sinewave generation with the Tsunami</h1>
<p>The Tsunami is capable of generating waveforms from DC all the way up to 2 megahertz. The Tsunami has a really easy to use Arduino library that makes doing this really straightforward. Here's the code to initialize the Tsunami and set the frequency to 440Hz - A4, for those of you who make music.</p>
<pre><code>void setup() {
    // Initialize the Tsunami
    Tsunami.begin();
}

void loop() {
    Tsunami.setFrequency(440.0);
}
</code></pre>
<p>By default, the Tsunami will output at its loudest amplitude - 6 volts peak to peak - and with 0 DC offset. We can adjust those parameters just as easily as setting the frequency:</p>
<pre><code>void main() {
    Tsunami.setAmplitude(1.0); // 1 volt peak-peak
    Tsunami.setOffset(-1.0); // -1 volt DC offset.
    Tsunami.setFrequency(440.0);
}
</code></pre>
<p>Let's make things a little more interesting and demonstrate how to do a frequency sweep. Let's do it musically, going up in octaves:</p>
<pre><code>void main() {
    float frequency = 110.0;
    while(frequency &lt; 8000.0) {
        Tsunami.setFrequency(frequency);
        frequency *= 1.05946309;
        delay(500);
    }
}
</code></pre>
<p>First, we set the starting frequency to 110 hz - A2 - and tell the Tsunami to output it. Then, we multiply the frequency by 1.05.... This is the twelfth root of two, which is to say that it will take 12 steps to double the frequency: that's the number of notes in an octave. Next, we delay half a second, and the loop repeats again until we reach 8 kilohertz - just after playing the musical note B8.</p>
<p>If you hook a speaker up to the Tsunami while it's running this code, you'll hear a series of musical scales, with notes half a second apart. Easy!</p>

        </div>

    </div>]