[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p><a href="https://getcomposer.org" rel="nofollow">Composer</a> is used to manage dependencies. GWP considers any 3rd party library as a dependency including WordPress itself and any plugins.</p>
<p>See these two blogs for more extensive documentation:</p>
<ul>
<li><a href="https://roots.io/using-composer-with-wordpress/" rel="nofollow">Using Composer with WordPress</a></li>
<li><a href="https://roots.io/wordpress-plugins-with-composer/" rel="nofollow">WordPress Plugins with Composer</a></li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#plugins" id="user-content-plugins"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Plugins</h2>
<p>WordPress Packagist is already registered in the <code>composer.json</code> file so any plugins from the WordPress Plugin Directory can easily be required.</p>
<p>To add a plugin, add it under the require directive or use composer require <code>&lt;namespace&gt;/&lt;packagename&gt;</code> from the command line. If it's from WordPress Packagist then the namespace is always wpackagist-plugin.</p>
<p>Example: <code>"wpackagist-plugin/akismet": "dev-trunk"</code></p>
<p>Whenever you add a new plugin or update the WP version, run composer update to install your new packages.</p>
<p>plugins, and mu-plugins are Git ignored by default since Composer manages them. If you want to add something to those folders that isn't managed by Composer, you need to update <code>.gitignore</code> to whitelist them:</p>
<p><code>!web/app/plugins/plugin-name</code></p>
<blockquote>
<p><strong>Note:</strong> Some plugins may create files or folders outside of their given scope, or even make modifications to wp-config.php and other files in the app directory. These files should be added to your .gitignore file as they are managed by the plugins themselves, which are managed via Composer. Any modifications to wp-config.php that are needed should be moved into config/config.php.</p>
</blockquote>
<p>##Updating WP and plugin versions</p>
<p>Updating your WordPress version (or any plugin) is just a matter of changing the version number in the composer.json file.</p>
<p>Then running composer update will pull down the new version.</p>
<p>##Themes</p>
<p>Themes can also be managed by Composer but should only be done so under two conditions:</p>
<p>You're using a parent theme that won't be modified at all
You want to separate out your main theme and use that as a standalone package
Under most circumstances we recommend NOT doing #2 and instead keeping your main theme as part of your app's repository.</p>
<p>Just like plugins, WPackagist maintains a Composer mirror of the WP theme directory. To require a theme, just use the wpackagist-theme namespace.</p>

        </div>

    </div>]