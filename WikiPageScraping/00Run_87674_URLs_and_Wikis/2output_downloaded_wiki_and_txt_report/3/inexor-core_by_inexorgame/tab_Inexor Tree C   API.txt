[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#c-api-for-creating-the-inexor-tree" id="user-content-c-api-for-creating-the-inexor-tree"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>C++ API for creating the Inexor Tree</h1>
<p>The Inexor Tree in Inexor Core is actually just a number of exposed variables.<br/>
The only difference between a normal variable and a variable shared in the tree is, that upon change, the change gets distributed to all other components which have the same Tree.</p>
<p>The Tree contains no functions, only data.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#generate-the-invisible-code" id="user-content-generate-the-invisible-code"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Generate the invisible code</h2>
<p>We use an in-house code generator for building the synchronization code for all <em>SharedVars</em>.
We must do this, since C++ has very poor support of [code reflection](</p>
<p>The "InexorGlueGen" code generator gets executed whenever the build folder was deleted or when explicitly triggered by building the target <code>gen_bindings_client</code> or <code>gen_bindings_server</code> (i.e. <code>make gen_bindings_client</code> when using make).
This is necessary when you added, removed or modified <em>SharedVars</em>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#sharedvars" id="user-content-sharedvars"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>SharedVars</h2>
<p>Declaring SharedVars is possible for various types of variables:</p>
<ul>
<li>The primitive types <code>char *</code>, <code>float</code>, <code>int</code>
</li>
<li>A std::list, std::array, std::deque or std::map
<ul>
<li>or any other which can be dropped in for these (e.g. a std::unordered_map)</li>
</ul>
</li>
<li>A class or struct</li>
<li>A pointer to any of the above</li>
</ul>
<p>All SharedVars must be in <strong>global scope</strong>.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#the-path-in-the-tree" id="user-content-the-path-in-the-tree"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>The Path in the Tree</h4>
<p>When declaring a SharedVar it's path in the Tree is implicitly given following the <em>namespace</em> and the <em>class variables</em> in which it is contained.</p>
<p>Exemplary the variable <code>::rendering::screen.width</code> (where <code>rendering</code> is a namespace in which a variable of a struct-type called <code>screen</code> is placed, which contains a variable <code>width</code>) results in the path <code>rendering/screen/width</code>.</p>
<p><strong>Note:</strong>
The namespace <code>inexor</code> – which is used in C++ as the uppermost namespace for all (non-legacy) code – gets ignored when creating the Tree path.
I.e. the variable <code>::inexor::rendering::screen.width</code> will be placed in the Tree as <code>rendering/screen/width</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#primitives" id="user-content-primitives"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Primitives</h3>
<p>The code</p>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">namespace</span> <span class="pl-en">rendering</span> {
    <span class="pl-en">SHAREDVAR</span>(<span class="pl-k">int</span>, maxfps, Default(<span class="pl-c1">200</span>)|Range(<span class="pl-c1">0</span>, <span class="pl-c1">1000</span>)|Persistent());
}</pre></div>
<p>creates a SharedVar of type <code>int</code> named <code>maxfps</code>.
It gets initialized with the value <code>200</code>, each time the variable is set, it is clamped to the range of 0 to 1000, see <a href="#SharedVar-Attributes">SharedVarAttributes</a>.
The resulting path of the variable in the Inexor Tree is <code>rendering/maxfps</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#classes-sharedvars" id="user-content-classes-sharedvars"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Classes SharedVars</h3>
<p>Often a good design tries to encapsulate connected variables in a class or struct.</p>
<p>In the nature of C++ it is clear, that only <code>public</code> class elements can be synchronized. All <em>SharedVar</em>-elements must be public or get ignored.</p>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">namespace</span> <span class="pl-en">inexor</span> {
<span class="pl-k">namespace</span> <span class="pl-en">rendering</span> {
    <span class="pl-k">class</span> <span class="pl-en">screen_t</span>
    {
      <span class="pl-k">public:</span>
        <span class="pl-en">SHAREDVAR</span>(<span class="pl-k">int</span>, width, Default(<span class="pl-c1">1024</span>)|Range(<span class="pl-c1">0</span>, <span class="pl-c1">10000</span>));
    };
    <span class="pl-en">SHAREDVAR</span>(<span class="pl-c1">screen_t</span>, screen, Persistent());
} } <span class="pl-c"><span class="pl-c">//</span> ns inexor::rendering</span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#lists-of-sharedvars" id="user-content-lists-of-sharedvars"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Lists of SharedVars</h3>
<h3>
<a aria-hidden="true" class="anchor" href="#pointer-to-sharedvars" id="user-content-pointer-to-sharedvars"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Pointer to SharedVars</h3>
<h3>
<a aria-hidden="true" class="anchor" href="#using-sharedvars" id="user-content-using-sharedvars"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using SharedVars</h3>
<p>You can treat the variable as if it is a normal primitive.<br/>
For example a SharedVar <code>maxfps</code> could be used just like a normal variable</p>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">int</span> minframetime = <span class="pl-c1">1</span>/maxfps;</pre></div>
<p>However when setting the SharedVar, the change will be synchronized to any other component which has the tree</p>
<div class="highlight highlight-source-c++"><pre>maxfps = <span class="pl-c1">300</span>;</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#sharedvar-attributes" id="user-content-sharedvar-attributes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>SharedVar-Attributes</h2>
<p>With <em>SharedVar-Attributes</em> one can attach logic to the variables with minimal effort.
Each <em>SharedVar-Attribute</em> is actually a class definition, hence they get syntax-highlighted correctly in most IDEs.
Using the Operator <code>|</code> one can attach more than just a single <em>SharedVar-Attribute</em> to a <em>SharedVar</em>.</p>
<p>Although it is easily possible to create SharedVar-Attributes oneself, there are currently four SharedVar-Attributes usable by default.</p>
<ul>
<li>Default(value)
<ul>
<li>set the default value of the variable (if no such SharedVar-Attribute is given, the default value is <code>0</code> or <code>""</code>)</li>
</ul>
</li>
<li>Range(minimal, maximal)</li>
<li>Persistent()
<ul>
<li>remember the value of the variable after shutdown</li>
</ul>
</li>
<li>OnChange(functor)
<ul>
<li>execute a given code as soon as the variable changes (</li>
</ul>
</li>
</ul>
<p><strong>Do not use logic as arguments for SharedVar-Attributes</strong>!
* e.g. <code>Range(1024, std::min(1200, 1440))</code> will definitely not work!
* Preprocessor logic is not forbidden though: defines will be correctly replaced before parsing the SharedVar.</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>Need help? <a class="internal present" href="/inexorgame/inexor-core/wiki/Contact">Contact</a> us.</p>

          </div>
        </div>
    </div>]