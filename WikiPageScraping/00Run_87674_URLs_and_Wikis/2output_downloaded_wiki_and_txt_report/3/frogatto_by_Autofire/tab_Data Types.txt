[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>All expressions in Anura are stored as a particular data type.  This is used by our "strict mode", which amongst other things, protects you from accidentally feeding in function parameters that are quite different from what the code you wrote to receive them can handle.</p>
<p>Generally, the engine refuses to let you assign a type to some variable that can't store it (or pass a type into a function that doesn't understand it).  To get around this, you generally have to winnow down the type through type-inference, or use type-casting.  95% of the time, automatic type inference works really well; we have a means to manually infer/insist that something is a type if the automatic type inference system gets confused.  We also can actually convert the underlying data to a different type.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#general-concepts" id="user-content-general-concepts"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>General Concepts</h1>
<h5>
<a aria-hidden="true" class="anchor" href="#type-casting" id="user-content-type-casting"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Type Casting</h5>
<p>Type inference is just the bookkeeping wherein the engine tries to keep track of what's legal to pass into what; it's like a label on a box.  For example, if you mislabeled a burger as a steak, "type inference" would be replacing the label so it correctly says "burger".</p>
<p>Type <em>casting</em> is when you have a steak labeled as a burger, and you fix the problem by actually grinding the steak into a burger.  Or to drop the metaphor; when you turn a <code>decimal</code> into an <code>integer</code> by rounding it.  It's a really apt metaphor;  like a steak-&gt;burger grinding, rounding a decimal to an integer is a destructive, one-way conversion.  You can't get those decimal places back; they're deleted if you convert them.</p>
<p>Generally in frogatto, manual type-casting is done via a function that's got the same name as the type; for example you can make a string out of a number with <code>str(3)</code>; or a boolean out of a number with <code>bool(0)</code>.</p>
<p>We do have automatic type-casting; if there's a conversion that doesn't destroy data, then the engine doesn't need to ask you what you'd want to do with it if there's only one reasonable option.  An example of this would be if you provide an integer to a function that expects a decimal.  The purpose of forcing you to manually type-cast things is that it's extremely common for you to need to make an intelligent decision about what to do - the number of times you need to <code>floor()</code> or <code>ceil()</code> a decimal might be a minority compared to just <code>round()</code>ing the thing, but it's a big minority; it's at least 1 in 10, rather than 1 in 10,000.  By comparison, if we asked you to manually convert an int to a decimal..  well, what you'd always do is just provide the exact same thing with a <code>.0</code> at the end.  There's not an 'intelligent decision' to be made there, and information isn't being deleted, so the engine just safely does it for you.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#type-inference" id="user-content-type-inference"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Type Inference</h5>
<p>Type inference is really like a "natural form of type-casting";  it happens when you do something that, in the eyes of any human, rules out the possibility of something being a different type.  For example:  <code>if(foo is int, do_stuff, other_stuff)</code>.  In that <code>do_stuff</code> block, we're 100% sure that <code>foo</code> is an int.  These are a lot like unit tests you might write in something like javascript/ruby/python, except the engine is basically watching your back and it'll catch you if you forget to check for a certain type.</p>
<p>The thing that's cool about this is that even though we have an <code>any</code> type (where we don't know what type it is) or a <code>null</code> type (where it's 'nothing'), they're not some sort of cheap copout where you're just secretly turning the type-system off, and breaking the rules - instead, they're the way to make the engine hand-hold you through unit-testing all the possible edge-cases, and preventing any possible bugs from bogus data.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#type-unions" id="user-content-type-unions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Type Unions</h5>
<p>Now, that would be really annoying if you truly had to check "all possible data types" every time you weren't sure (and had an else clause in your <code>if()</code> conditional that actually did something with the variable); that'd be a nasty nest of something like 5-8 different <code>if()</code>s inside each other.  Ick.  Not only that, most of the time when we're not sure what type something's going to be, we definitely can narrow it down to just one or two types;  for example, sometimes we do a point-target as just a raw <code>[x,y]</code> pair, but we've often found it convenient to make functions that accept it also accept a <code>custom_obj</code>, since those always have <code>x</code> and <code>y</code> values for their position.  So what we've done, is we've built a feature called <strong>type unions</strong> where if you know something is just one of two types (such as <code>int</code> or <code>string</code>), you can declare it as such (<code>int|string</code>), and then you only have to have one <code>if()</code> check, and then you're set; you've handled both possibilities of what the thing could be.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#interfaces" id="user-content-interfaces"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Interfaces</h5>
<p>We also have a feature, <strong>interfaces</strong>, that handles common cases like the target thing above;  when you know you want something that has an <code>x</code> and <code>y</code> member, but you don't care if it's just the raw pair of numbers (provided in this case as a map <code>{x: 2, y:4}</code>, or as part of an object.  An interface just makes sure it lives up to providing those ingredients, and spares you from even needing the <code>if()</code> clause.  There is one gotcha with interfaces; if you have child members that have the same name, but different meanings in multiple objects (for example, <code>attack</code> meaning attack-damage in one object, and <code>attack</code> meaning number-of-attacks in another, then you'll hobble this safety check.  This is very rare, though, if you use verbose names.  If you frequently used single-character property names like <code>u</code>, <code>t</code>, and <code>v</code>, though, you could quickly trip yourself up.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#manual-type-inference" id="user-content-manual-type-inference"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Manual Type Inference</h5>
<p>Manual Type Inference (or type-insistence if you'd like) can be done via:  <code>string &lt;- my_val</code>.  You'd only use this if (for whatever reason) the automatic type-inference system just can't figure something out.  This is sad to use because it defeats type checking, and makes it possible to have an error at runtime, rather than load time.  You might use it like so, if for some reason the engine can't see the obvious <code>if()</code> clause eliminating a possibility:</p>
<pre><code>if(my_val is string, do_stuff(string &lt;- myval) )
</code></pre>
<p>So it's a shame it's not <em>perfect</em>, but it works the vast majority of the time, and is overwhelmingly worth having.  Having "used it in anger", the automatic type inference system is really quite good, but occasionally crazy linkages between the levels and the objects on them leave it confused as to what type something is supposed to be - even though, to a human, the obvious fact is staring the engine in the face.  Typically if you run into this, a sign that this is afoot is that an object should be a specific type, but the engine is interpreting it as "of type <code>any</code>".  It also might crop up with type unions, or special rules like the module.cfg file declaring the player objects to always be a special type.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#basic-data-types" id="user-content-basic-data-types"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Basic Data Types</h5>
<p>We have some values where an obvious value-in-memory gets stored:</p>
<ul>
<li>int</li>
<li>decimal</li>
<li>string</li>
<li>functions</li>
<li>object (references, really)</li>
</ul>
<p>We have a few special data types:</p>
<ul>
<li>null</li>
<li>any</li>
<li>commands</li>
</ul>
<p>And we have a few container types:</p>
<ul>
<li>list</li>
<li>map</li>
</ul>
<p>Our containers can store any kind of data in them, and the data can be mixed if you're like (mixing strings and ints in the same list), however, be aware that this will put the onus of lots of manual type-checking on you, whenever you use such a thing.  Maps with pre-named elements where an element of a certain name points to a specific type don't suffer from this.</p>
<p>I could start with the basic data types (strings, ints and all that); they're described below, but for understanding the engine, I think it's much more important that we cover a different basic data type, first:</p>
<h1>
<a aria-hidden="true" class="anchor" href="#basic-data-types-1" id="user-content-basic-data-types-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Basic Data Types</h1>
<h3>
<a aria-hidden="true" class="anchor" href="#commands" id="user-content-commands"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Commands</h3>
<p>Firstly, all expressions resolve to a value.  <em>Period.</em>  It's a bit confusing, because there are often snippets of code in an Anura game that look like this:</p>
<pre><code>on_process: "animation('normal')",
</code></pre>
<p>That statement says that during the process event (i.e. once every frame of the game), we want to execute the following line of code.  That line of code looks like an instruction to "do something", it doesn't look like a numerical/textual value - how can it resolve to a value?</p>
<p>The trick lies in how our engine handles the core design problem of a "game loop".  During each frame, it runs through a bunch of expressions inside all the different object files (the player, the monsters, etc) that describe what it's supposed to do - these include things like changing an animation, removing/adding an object, subtracting hitpoints, etc.  The big trick is; we don't run through these commands <em>whilst we're deciding what to do</em> because they could change what we decide to do as we're in the process of doing it - at worst, we could be expecting to read a number from another object, but end up having a disaster where that object gets removed by something else, first.  That's a whole sea of problems called (<a href="http://en.wikipedia.org/wiki/Race_condition)%5Brace" rel="nofollow">http://en.wikipedia.org/wiki/Race_condition)[race</a> conditions], and by designing our engine to avoid them, you don't have to worry about these.</p>
<p>Instead, we pile up all of the changes we want to do at the end of the frame, which ends up eliminating how they 'depend on' other stuff, and then we run them all in sequence.  <strong>An expression that describes one of these "change something" instructions is of the <code>commands</code> type.</strong>  Part of why we're able to do this is that - if you look at any complicated expression; once you resolve any part of it (merging, say, <code>3 + 5</code> into <code>8</code>), everything else 'boils away' and you just get left with a straight list of <code>commands</code> to run.  For example:</p>
<pre><code>on_process:  "if(cycle = 100, animation('explode'), animation('normal'))",
</code></pre>
<p>In that expression, you'll never have both sides of that <code>if()</code> execute.  Ultimately, once you crunch the expressions (let's say it's cycle 80), all you're left with is merely:</p>
<pre><code>animation('normal')
</code></pre>
<p>And that's just a <code>command</code>.  Quite often you'll have a series of them, but at the end, they'll be all that's left.  So commands are a fundamental part of our engine, and they're very frequently the return type of a function.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#caveats-of-how-at-the-end-of-the-frame-processing-works" id="user-content-caveats-of-how-at-the-end-of-the-frame-processing-works"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Caveats of how 'At the End of the Frame' processing works:</h5>
<p>For an example of what the "run it at the end of the frame" timing's consequences are, consider the following:  If <code>x</code> is currently <code>5</code>, <code>[set(x, x+10), debug(x)]</code> will print <code>5</code>.  On the next frame of the game, it will print <code>15</code>.</p>
<p>This may seem confusing if, in your head, you're imagining the game as running a command like:  <code>set x to itself + 10, then print the value of x</code>.  That's not how it works.  Instead, it's prepping a series of completely independent commands, with all the internal "numerical ingredients" completely evaluated - this means that something like <code>x</code> that depends on an external value is gone, and is now just directly "that value".  Instead, what the game is actually running is the following two commands: <code>[Set x to 15. Print 5.]</code></p>
<p>This might seem simple enough, but if you're used to thinking in imperative-style programming, this can really drive you crazy when you get into some more complicated stuff.  You can't mess with the ingredients of this frame's calculations and "tweak" them before they actually get processed to make some clever iteration trick work.  It's always fairly easy to do the same thing in a functional style, but if you slip back into imperative-style thinking right when things get complicated, you'll end up with some fairly goofy bugs which you'll probably be blind to.  You'll miss them because the act of slipping back into habits means you're doing something complex enough that your brain's really tapped out and doesn't have spare bandwidth to introspect on itself.  It's the worst time for it to do something like that, but if you're aware at least, you can fight it.</p>
<p>So let's look at this common source of baldness:  In this example, we're building a list of point targets; we've got one already - let's assume that <code>list</code> is set to <code>[[10,5]]</code> before this event is fired.  Now we want to add three more to it from a list of objects called <code>chars</code>, pulling in their <code>x,y</code> coordinates.  They're at: <code>1,2</code>, <code>3,20</code>, and <code>0,6</code>, respectively.</p>
<pre><code>on_find_targets="
  map(chars, 'char', 
    set(list, list + [[char.x, char.y]]))
  where chars = filter(level.chars, 'char', char.type = 'target')"
</code></pre>
<p>If we were to <code>debug(list)</code> in another event, we would find that <code>list</code> contained</p>
<pre><code>[[10,5],[0,6]]
</code></pre>
<p>What's going on? Aw man...  maybe we did something wrong with <code>filter()</code> or <code>map()</code>; those are scary and complicated.  We <strong>clearly</strong> set the list to be added to correctly.</p>
<p>Well, not quite.</p>
<p>As we know, a <a href="%60map(...)%60">FormulaMap</a> command returns a list. Since <code>set()</code> returns a command, and all the ingredients that go into that get 'evaluated' before the end of the frame when we run all the commands at once, what we'd actually ended up running, was a list of commands that looked like: <code>[Set list to [[10,5],[1,2]]. Set list to [[10,5],[3,20]]. Set list to [[10,5],[0,6]].</code> Each time we iterated over our <code>set(list, ...)</code> function, we got a fully independent command. Since all the commands were determined before any were ran, we set <code>list</code> three times and we could only see what we set it to the final time, because a <code>set()</code> command overwrites the value that comes before it (if you set something to <code>3</code>, <code>4</code>, then <code>5</code>, and then ask what value it is when it's all over with, it's going to be <code>5</code>). The correct way to set our list would be:</p>
<pre><code>on_find_targets:"
  set(list, 
    map(chars, 'char', [char.x, char.y])
  ) where chars = filter(level.chars, 'char', char is obj target)"
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#decimals" id="user-content-decimals"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Decimals</h3>
<p>Decimals store numbers.  They're almost always what you should use.  Our decimals can store any value between <code>-2^63/10^6 to 2^63/10^6 ... which comes out to (9.2 * 10^12)</code>.  In english:  up to a trillion.  Fairly roomy, but might break down if you're doing and sort of math that changes orders-of-magnitude, like square-root calculations and such (check out the <code>hypot()</code> function if you're doing that, btw, you won't regret it).</p>
<p>If you keep adding and subtracting to one of these for a long time, it will "wrap around" like a clock, and you'll start from the other end. 90,000,000,000 + some more will turn into -90,000,000,000 after adding to it for long enough.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#int" id="user-content-int"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Int</h3>
<p>Integers store whole numbers only, not fractions.  Our integers are "32-bit signed", which means they can be positive or negative, and they can store values from:  <code>-2^31 to 2^31 ... which comes out to 2.14 × 10^9</code> (in english, up to a billion).</p>
<p>The point of using integers isn't any fluff about optimization or memory-usage or any of that crap.  <strong>Use integers when the value you are storing is intrinsically indivisible.</strong>  Like, when you're talking about, say, the number of shots the player has on the screen - there's no such thing as "half of a shot".  If one does come up in your calculations, then it's probably a mistake, and you'll want to know about it and fix it.</p>
<p>If you try to add an int and a decimal (or other arithmetic operations); the result will be a decimal (because that doesn't destroy information).  If you try and set an int to a decimal, implicit rounding would destroy information, so we force you to make a human decision how that's going to be done.  There's an <code>int()</code> function which is really just the classic <code>floor()</code> function by another name - it always rounds down, so <code>lib.math.floor(1.9)</code> would equal <code>1</code>.  <code>lib.math.ceil()</code> always rounds up.  <code>lib.math.round()</code> rounds to the nearest whole number just like you learned in elementary school.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#booleans" id="user-content-booleans"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Booleans</h3>
<p>A boolean statement evaluates to either <code>true</code> or <code>false</code>. Operators that produce a boolean value include =, !=, &lt;, and so on.  An <code>if()</code> function takes a boolean value for its first argument, and a <code>filter()</code> function takes one as the last augment.  You can cast to a bool with the function <code>bool(expression)</code>; passed into this, <code>0</code> will be considered <code>false</code>, and any non-zero number, <code>true</code>.  It's also worth noting that <code>null</code> will be considered <code>false</code>, but any objects or strings will be considered <code>true</code>.</p>
<p>Boolean functions may be combined with <code>and</code>, and can also be prefaced with <code>not</code> for negation. You can't say <code>and not</code>, however, so enclose the boolean to be negated in brackets.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#strings" id="user-content-strings"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Strings</h3>
<p>Anura has strings, which can be delimited with single-quotes.  <code>'I am a string'</code>  They can also be delimited, perl-style with the letter <code>q</code>, and whatever character-pair comes <em>immediately</em> after that <code>q</code>.  For example, parentheses are popular:  <code>q(I am a string.)</code>  In part, because this style lets you use single-quotes inside the string:  <code>q(I'm a string.)</code>.</p>
<p>Using tildes <code>~</code> marks a string as being "translatable", which means if you run gettext on your Anura Module, it'll pull out a giant list of every translatable string, and set them all up to be translated by another person, into a different language.  It also solves the 'escaping quote-marks' problem, so you can use single and double quotes in dialogue just fine.  Dialogue between characters is obviously the big application of this.</p>
<p>It's worth noting that <code>\n</code> acts as a newline, and <code>\\n</code> acts as a newline that won't get eaten by the editor when you save a level.  For dialogue that's written inline in a level file, always use <code>\\n</code>.</p>
<p>Strings can be concatenated with <code>+</code>, for example: <code>'I'll charge you ' + 4 + ' dollars.'</code> Strings can also evaluate expressions inline: <code>'I'll charge you {4} dollars.'</code>  Only during these ops is 'number -&gt; string' implicit typecasting considered intentional; if you try to <code>set(my_string, 1)</code>, it'll complain.  In this case, the <code>str()</code> function will do the explicit cast.  For example, a working chunk of code there would be <code>set(my_string, str(1) )</code>.</p>
<p>Remember that these concatenations and <code>{4}</code> substitutions can accept any expression that can convert to a string, so if you want to actually, say, calculate a price that a shopkeeper is going to tell you, based on some math, or by referring to some value in another object, you totally can.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#lists" id="user-content-lists"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Lists</h3>
<p>Lists are your basic way of storing "more than one of something".  They're synonymous with what most languages call "arrays".  You can have a list of numbers, a list of strings - a list of other objects;  you can also mix-and-match as needed and have a list that's got both strings and numbers in it (though with type checking you'll need to explicitly say that you're doing so).</p>
<p>A list in FFL is created using the syntax <code>[thing1, thing2, thing3, ...]</code> and so on. Let's set the property <code>var</code> to <code>[a, b, c, d]</code>. If we want to access <code>a</code>, we would check <code>var[0]</code>. Similarly, if we wanted to check <code>b</code>, we would look in <code>var[1]</code>. A slice of the list may be obtained using the syntax <code>list[e1:e2]</code>. For example, the statement <code>debug(var[1:3])</code> would print <code>[b, c]</code>. <code>debug(var[2:4])</code> would print <code>[c, d]</code>. If you want to add to a list, you must append another list. For example, <code>var + [e, f]</code> would be <code>[a,b,c,d,e,f]</code>. It is important to remember that you can only assign a variable once per FML event. (See FrogattoMarkupLanguage for more details.)</p>
<p>To iterate over a list, you can use <code>map(list, 'thing', [*code goes here*])</code>. The code in the bit where code goes is executed once for every item in the list, and the item is accessed via the variable <code>thing</code>. eg, <code>set(thing.x, thing.x+1)</code> would set each of the list's elemets's x value to be one higher. It is useful to note that you can iterate through a list by index by saying <code>map(range(size(var)), 'index', var[index])</code>.</p>
<p>To make a list shorter, you can use <code>filter(list, 'thing', *condition*)</code>. This works much the same as <code>map(...)</code>, but instead of returning a list of commands it returns the list you passed in less the elements where the condition did not evaluate to <code>true</code>. For example, <code>filter(var, 'letter', 1d2 = 1)</code> would randomly select half the list.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#maps" id="user-content-maps"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Maps</h3>
<p>A map is a set of correspondences between 'names' and 'things'.  You ask for something by name, and you get a value in return.  They can be defined in code as follows: <code>{'thing_one' -&gt; 1, 'thing_two' -&gt; ~two~, ...}</code> and so on. Now, if we set the property <code>var</code> to that map, <code>var.thing_one</code> evaluates to <code>1</code>, and <code>var.thing_two</code> would evaluate to the translatable string <code>'two'</code>. You can also look up individual slots via an array-style access:  <code>var['think_one']</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#objects" id="user-content-objects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Objects</h3>
<p>Speaking from my own experience, objects are a bit hard to conceptualize without the touchstone of "custom objects" in the game; objects are like custom objects minus all the game-specific stuff like position, hitpoints and so forth.  They're basically a pointer to a "thing" that has a set of functions built-into it, and carries a collection of variables.  Like custom_objects, a particular type of object would typically be written as a single file on disk, and you'd have a properties block in it, and so on.</p>
<p>#####TODO talk about how objects are usually only from libraries and stuff</p>
<p>Objects get passed around by pointers, but there's no funny pointer arithmetic or anything.  You just get a reference to an object from something, and <code>set(my_var, the_object_reference)</code>.  Getting the reference to one is interesting, but handling a reference you've got is dead-simple.  You don't have to worry about memory management, or anything; our objects are automatically reference-counted, and when a level ends, they're even garbage-collected, so circular references aren't a big worry.  When an object doesn't have anything else storing it in a property, the game will just delete it - one such thing that counts is the level; if an object is a <code>custom_obj</code> that's a part of gameplay, it'll automatically get attached to the level when you create it, and when it dies, it'll get detached from the level.  The detachment typically kills it, unless something else has a reference to it (this is useful, for example, for a monster-spawner keeping track of how many things the player has killed).  A circular reference would be if you had two objects that referred to each other; a parent (like some fancy floating monster that has a little thing that orbits it - it would be reasonable to write such a thing with both sides needing a reference to the other one).  Try to avoid circular references if you can, but be aware that they're not a big deal if you're not spawning and destroying a ton of them indefinitely.  Take note that when you do set one object to another, you're <em>not</em> creating a new object, you're just making a new pointer pointing to the same original object.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#todo-does-deep-copying-have-to-be-done-manually-or-do-we-have-a-feature--its-sure-not-a-common-need" id="user-content-todo-does-deep-copying-have-to-be-done-manually-or-do-we-have-a-feature--its-sure-not-a-common-need"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>TODO: does deep-copying have to be done manually or do we have a feature?  It's sure not a common need.</h5>
<p>To get a reference, there are a few common techniques.  Most often, what you're getting a reference to is just an object you're creating yourself, from the current object.  You can do that with something like <code>set(my_var, object('type_name') )</code>.  The level acts as an object, itself, and it has a container in it containing all of the active <code>custom_obj</code>s attached to the level in play, called <code>level.chars</code> (the name mismatch is a historical wart we should probably fix at some point; basically we used to call objects characters).  The <code>level</code> object has a few other niceties like <code>level.camera</code> which returns a list saying where the screen is, or <code>level.active_chars</code> for only those objects which are on/near the screen.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#custom-objects" id="user-content-custom-objects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Custom Objects</h3>
<p>Custom objects (named <code>custom_obj</code> as a type) are all of the moving (or non-moving) objects inside of Anura that make up the game world.  They're a special case of the <code>object</code> type that comes along with nice built-in ideas like position, hitpoints, so on and so forth.  Within Frogatto and most Anura games, most objects are inert, non-interactive scenery, and some objects are interactive, moveable things which do things.  Even the player object, is one of these and simply has additional events to respond to the player hitting keys by invoking appropriate behavior (like starting a walk animation when the player presses the right arrow key).</p>
<p>Custom objects all have common variables, listed in ObjectProperties. For more on working with objects, see the GameObjectProgrammingGuide. Objects such as these may be created with ObjectFunctions  such as <code>object(...)</code> or <code>spawn(...)</code>.</p>
<p>= Properties =
A property is like a [Functions function], but it can access all the variables an event can. Instead of being declared with a functions="...", a property is described like this:
{{{
[properties]
fun = "def(var_in), <em>your code here using var_in</em>"
prop = "<em>your code here</em>"
[/properties]
}}}
In the first case, <code>fun</code>, we have some code which returns some [FormulaDataTypes value] and takes a value. You would call it by saying <code>fun(x)</code>. The second case, <code>prop</code>, just returns a value when it's name comes up. It is used, simply, <code>prop</code>.</p>
<p>Properties can be accessed by using the dot operator on an object. If we have the variable <code>obj</code> set to be some object with a property <code>prop</code>, we can simply access that object's property by saying <code>obj.prop</code>. It is important to remember that properties are executed in the context of the object calling them, so if we want to set a variable in the object where we defined the property and we are calling the property from another object, we need to use the syntax <code>set(me.variable, ...)</code> instead of just <code>set(variable, ...)</code>.</p>
<p>Properties can also recurse. A property with an ALL_CAPS name is treated as a static constant by the engine. Properties can be typed, the details of which can be found at <a href="http://www.frogatto.com/forum/index.php?topic=533.0" rel="nofollow">http://www.frogatto.com/forum/index.php?topic=533.0</a>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#functions" id="user-content-functions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Functions</h3>
<p>Functions are a first-class data type in Anura; you can write them, and you can store them in the same places you'd store a variable (such as properties), and use them later.  <strong>Note that carefully:  not only can you define them ahead of time, as static expressions, but you can instead make them a variable and replace them on the fly as the game is running.</strong></p>
<p>What this means is that - instead of essentially saying that your object will always respond to a certain X stimuli with the same response (maybe with an if statement or whatnot in there to give it a bit of dynamism), you can instead just have "what we do in response to X happening" be a variable, and what you do then can be completely up for grabs.  Your object can then be infinitely flexible on that point.</p>
<p>If you need to write a function inline, you can create it with an expression like: <code>def(var) var/5</code>.  This won't do anything on its own.  It'll just sit there like an unused tool; like a string or a number; you need to put it to use to make it mean something.  You could for example put it in a where clause:</p>
<pre><code>on_process:  "set(velocity_x, dampened_speed(velocity_x)) where dampened_speed = def(var) var/5",
</code></pre>
<p>Or you could put it in a property:</p>
<pre><code>properties: {
	dampened_speed: "def(var) var/5",
}
on_process:  "set(velocity_x, dampened_speed(velocity_x))",
</code></pre>
<p>Remember that functions aren't <em>special</em>; they're just a normal expression type, so you can slot them into more complex conditionals and stuff.  This can be really powerful!  Take this, for example:</p>
<pre><code>properties: {
	dampened_speed: "if(stuffy_in_here, def(var) var/5, def(var) var)",
}
on_process:  "set(velocity_x, dampened_speed(velocity_x))",
</code></pre>
<p>As I said, though, storing them is the real coup-de-grace of dynamic_behavior, opening all sorts of possibilities</p>
<pre><code>properties: {
	dampened_speed: {type: "function", default: "def(var) var/5" }
}
on_get_aerodynamic: "set(dampened_speed, def(var) var)"
on_process:  "set(velocity_x, dampened_speed(velocity_x))",
</code></pre>
<p>With great power comes great responsibility; though setting functions from another object may be a powerful way to reduce code duplication, it does make it less intuitive to track where an object's behavior is coming from.</p>
<p>Functions in Anura can recurse by calling themselves by name.  Since they're all anonymous functions, and they don't have names, you have to put them inside <em>something else that has a name</em> to do this; be it a where clause, or a property.  (This is more generally true of just calling them <em>at all</em>, just regular, everyday usage of functions;  it's so pervasive that when you make a property like <code>double_a_number: "def(x) x*2"</code>, you tend to think that you're making a function called <code>double_a_number</code>, and then writing how the function works.  You're not.  You're actually making an anonymous function, and then putting it in a property that has a name.  This is important because - as alluded to in that earlier example similar to <code>if(condition, def(x) x*2, def(x) x*4)</code> - you can put <em>something else</em> in between the act of making the name, and making the anonymous function; some act of control flow, or anything you want.  It's powerful.</p>
<p><strong>Recursing on a named property, though, is dangerous, because you will overflow the stack (aka crash Anura, hard) with a very small number of recursions; a mere ~5000 or so.</strong>  We have a special solution for this; a special recursion syntax that does some special engine magic to avoid this problem.  If you're going to recurse and there's any chance you don't have a really predictable (preferably guaranteed) and also low-number limit on how many times you'll recurse, use this syntax.  This example searches for an element in a list.</p>
<pre><code>    def my_index(ls, item, n)
      base ls = []: -1       #case where we've got to the end of the list and nothing found#
      base ls[0] = item: n   #case where we've found a match#
      recursive: my_index(ls[1:], item, n+1)  #recursive case: no match -- search next item#

</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#todo" id="user-content-todo"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>TODO:</h1>
<ul>
<li>Write about type unions; i.e. int|decimal</li>
<li>Write about the any type, and how it's really just the ultimate type union.</li>
<li>Write about the null type, and how it only gets used if there's really a case where something might not exist (like targets)</li>
<li>Write about how commands (and something else?) can potentially be null.</li>
<li>Write about how strings do empty strings via ''.</li>
<li>Write about declaring types via ::</li>
<li>Write about declaring function type signatures, since they've got special rules  (mostly the stuff about parameters, default parameters and so forth)</li>
<li>Write about casting types with type &lt;- expression.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#some-built-in-data-types" id="user-content-some-built-in-data-types"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Some Built-in Data Types</h2>
<p>These data types were found in the source code. They are mostly maps.</p>
<pre><code>david@ubuntu:~/anura$ grep DECLARE_CALLABLE src/*.hpp
src/bar_widget.hpp:     DECLARE_CALLABLE(bar_widget);
src/button.hpp: DECLARE_CALLABLE(button);
src/camera.hpp: DECLARE_CALLABLE(camera_callable);
src/color_picker.hpp:           DECLARE_CALLABLE(color_picker);
src/custom_object_widget.hpp:           DECLARE_CALLABLE(custom_object_widget);
src/data_blob.hpp:      DECLARE_CALLABLE(data_blob);
src/dialog.hpp:DECLARE_CALLABLE(dialog);
src/draw_primitive.hpp: DECLARE_CALLABLE(draw_primitive);
src/formula_callable_definition.hpp:#define DECLARE_CALLABLE(classname) \
src/grid_widget.hpp:    DECLARE_CALLABLE(grid);
src/isochunk.hpp:               DECLARE_CALLABLE(chunk);
src/isoworld.hpp:               DECLARE_CALLABLE(logical_world);
src/isoworld.hpp:               DECLARE_CALLABLE(world);
src/label.hpp:  DECLARE_CALLABLE(label);
src/layout_widget.hpp:          DECLARE_CALLABLE(layout_widget);
src/level.hpp:  DECLARE_CALLABLE(level);
src/lighting.hpp:               DECLARE_CALLABLE(sunlight);
src/lighting.hpp:               DECLARE_CALLABLE(lighting);
src/pathfinding.hpp:    DECLARE_CALLABLE(directed_graph);
src/pathfinding.hpp:    DECLARE_CALLABLE(weighted_directed_graph);
src/shaders.hpp:        DECLARE_CALLABLE(program)
src/shaders.hpp:        DECLARE_CALLABLE(shader_program)
src/skybox.hpp:         DECLARE_CALLABLE(skybox);
src/text_editor_widget.hpp:     DECLARE_CALLABLE(text_editor_widget);
src/view3d_widget.hpp:          DECLARE_CALLABLE(view3d_widget);
src/voxel_model.hpp:    DECLARE_CALLABLE(voxel_model);
src/voxel_object.hpp:   DECLARE_CALLABLE(voxel_object);
src/widget.hpp:DECLARE_CALLABLE(widget);
</code></pre>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>More help can be found via IRC, <a href="irc://irc.freenode.net/#frogatto" rel="nofollow">#Frogatto</a> on freenode.net. This wiki is not a complete reference.</p>

          </div>
        </div>
    </div>]