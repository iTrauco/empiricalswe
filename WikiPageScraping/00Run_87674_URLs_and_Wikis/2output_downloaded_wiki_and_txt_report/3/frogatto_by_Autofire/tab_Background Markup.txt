[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Besides drawing pixels on the screen via objects and tiles, frogatto has one other primary means to blit stuff to the screen, heavily inspired by historic 8/16-bit games:  the ability to blit large, repeating textures, typically used for a parallax background (such as a distant horizon).</p>
<h2>
<a aria-hidden="true" class="anchor" href="#using-backgrounds" id="user-content-using-backgrounds"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using Backgrounds</h2>
<p>Each level can only have one background;  this is specified via a top-level <code>background: "background_name",</code> tag in the level file.  This background can have two modifications applied to it in a level:  it can be given a palette-shift via <code>background_palette: "palette_name",</code> (and this can be the same as a palette used for the level objects/tiles), and it can be given a positional offset via <code>background_offset: [x,y],</code>.  The positional offset is useful for backgrounds that need to line up with tiles or objects (such as a floor that recedes into the distance), since the only alternative to make them line up would be to simultaneously shift all objects and tiles on a level.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#defining-backgrounds" id="user-content-defining-backgrounds"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Defining Backgrounds</h2>
<p>Backgrounds are defined in the <code>~/data/backgrounds/</code> folder of your module.  The name of each background's file is the name of the background when referenced in a level.  Backgrounds have a few global values (mostly colors), and otherwise are entirely defined via layers which correspond to individual graphics drawn onscreen.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#global-values" id="user-content-global-values"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Global Values</h3>
<ul>
<li>
<code>bottom: "RRGGBB"</code> and <code>top</code> are hexadecimal color values.  If you simply set them to the same value, they result in a single flat color being applied to the furthest backdrop of your level.  If you combine them with the <code>height</code> value, then they split the backdrop color for your level into two halves an upper half, and a lower half.  We used to use this on e.g. frogatto's seaside background to provide a bright-blue flat color in the "sky area" above, and a dark blue for the "underwater area" below, stretching on forever.  However, there's a major caveat at the moment which is the reason we don't use this in frogatto:  the "height" value does not play well with adjusting the level zoom.  This is a known bug which would need to be fixed if you intend to use this in your module.</li>
<li>
<code>top</code> a hexadecimal color value; see <code>bottom</code>.</li>
<li>
<code>height</code> an integer value corresponding to level coords, denotes where the top and bottom background colors meet.  See <code>bottom</code>'s description for more info.</li>
<li>
<code>width</code> how wide, in level coords, the background is drawn.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#layer-values" id="user-content-layer-values"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Layer Values</h3>
<p>Layers are drawn in order from top-to-bottom;  the topmost layers go further "back" in the image, and layers below them are drawn in front of them.</p>
<ul>
<li>
<code>image: "path/image.png"</code> relative to the <code>~/images/</code> directory, where the image for this layer is.  One image can be reused across many layers, to slice different strips out of it.  <strong>Optimization tip:</strong> put all background layers from the same image next to each other in the background file, and they can all be done as a single draw operation, which is faster on many graphics cards. <strong>Format Requirements:</strong> images must be a power-of-two in width and height.  Width and height need not be equal.  Support for images bigger than 1024 in a given dimension may be unpredictable on some hardware.</li>
<li>
<code>xscale</code>: an integer, as a percent.  This defines how quickly the background layer moves compared to the camera. A value like 75 will make it move 75% as quickly, and thus appear distant.  Values greater than 100 are valid and probably only make sense with layers flagged to be in the foreground.</li>
<li>
<code>yscale</code>: see <code>xscale</code>.</li>
<li>
<code>xspeed</code>: an background layer can be made to gradually drift, of its own accord, even if the camera is still.  This is perfect for banks of clouds.</li>
<li>
<code>yspeed</code>: there is no <code>yspeed</code> (which would do the same thing as <code>xspeed</code>, but on the y axis).  This might have a use for a waterfall effect, or for an "elevator" level.  Fortunately this can be emulated with a large parallax object, if you really need it.</li>
<li>
<code>xoffset</code> a positional offset, in game coords, of what position the layer is drawn at.  This corresponds to level coordinates - an image with an xscale of 0 and an xoffset of 0 should start drawing at the level-coordinate x=0.  Note that this is modified by the <code>xscale</code> value so layers which have slower parallax movement require much higher offset values to move the same physical number of pixels onscreen.  For an <code>xscale</code> value of 100, this should directly correlate to onscreen pixels.</li>
<li>
<code>yoffset</code> see <code>xoffset</code>.</li>
<li>
<code>xpad</code> an integer value which "pads" an image with additional (virtual) transparent pixels.  An example usage of this would be a small puff of cloud on the seaside background - to make one cloud only repeat every 1000 pixels, we would otherwise need to actually make the image the cloud was drawn in a full 1000 pixels wide, have a tiny image of a cloud over on the far left side, and then have ~900 pixels of empty space.  This is obviously inefficient, and the engine allows us to space these out.</li>
<li>
<code>ypad</code> does not exist at the time of this writing.  It'd be quite nice to have.</li>
<li>
<code>y1</code> and <code>y2</code> are integers that let you select only a specific horizontal "band" of an image to be drawn in the given layer.  This allows you to put several horizontal elements (such as long, thin clouds) in a single file, in strips, and reference each strip separately in a separate layer.  There is no corresponding <code>x1</code> or <code>x2</code> value; you can't slice out vertical strips.</li>
<li>
<code>blend</code> is a boolean, and is a simple explicit optimization.  If a layer is the furthest back, and should be fully opaque, this lets the game omit any attempt to draw things behind it.</li>
<li>
<code>tile_upwards</code> by default, background layers tile in the X direction (and in fact this is impossible to override, but can in limited ways have the effects of not tiling be otherwise emulated*), but they do not tile by default in the y direction.  <code>tile_upwards</code> will make them repeat upwards - they'll start drawing in the y position the background layer is originally placed any, and at any position above that, will repeat indefinitely.  This is useful for, say, forest canopy.  This is especially useful combined with <code>tile_downwards</code> also being set to true, to simply make an object tile in the y direction like it does in the x direction.</li>
<li>
<code>tile_downwards</code> see <code>tile_upwards</code>.  Works in the down direction, useful for, say, repeating textures of earth and roots (to use a forest example).</li>
<li>
<code>alpha</code>: a decimal value (e.g. 1.0, 0.5, etc) to specify how opaque the layer should be drawn.  Fog and such can be partly opaque.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#experimental-values" id="user-content-experimental-values"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Experimental Values</h3>
<p>These are features we've added to backgrounds which frogatto doesn't currently use, but which may be useful to you.  Please work with us if you need them but they're not working in your copy - engine support may have been neglected and become broken for them, but might be easy to restore.</p>
<ul>
<li>
<code>red</code>, <code>green</code>, <code>blue</code>: opengl-style vertex values to change the color of a layer multiplicatively.</li>
<li>
<code>notile</code>: a boolean which makes a layer not get tiled in the x direction.</li>
<li>
<code>scale</code>: an integer which lets you make a background layer be drawn at a larger size.  Will get truncated to a minimum of 1.</li>
<li>
<code>foreground</code> makes a background layer get drawn in front of all game tiles/objects, rather than behind.</li>
<li>
<code>mode</code> allows you to specify an alternate OpenGL blending mode, rather than the default (which is <code>GL_FUNC_ADD</code>).  The two supported values are <code>GL_MAX</code> and <code>GL_MIN</code>, and this feature is unsupported on our OpenGL ES port.</li>
<li>
<code>image_formula</code>:  ???</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#common-solutions" id="user-content-common-solutions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Common Solutions</h2>
<ul>
<li>
<p>One common desire in a side-scrolling game is to have a fairly repetitive background "until you get to a certain point", and then to have a single, large, decorative feature.  For example, you might walk along a road, and finally walk up to a large building.  Such a feature in frogatto would most easily be done with an object given a parallax offset and a distant zorder, rather than an actual background.  It could also be done with an <strong>enormous</strong> and carefully tuned <code>xpad</code> value.  Or possibly a <code>notile</code> value and a large <code>xoffset</code>.</p>
</li>
<li>
<p>Distant, immobile objects like moons or suns can be done with extremely low <code>xscale</code> values and high <code>xoffset</code> and <code>xpad</code> values.</p>
</li>
</ul>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>More help can be found via IRC, <a href="irc://irc.freenode.net/#frogatto" rel="nofollow">#Frogatto</a> on freenode.net. This wiki is not a complete reference.</p>

          </div>
        </div>
    </div>]