[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>As you write stuff for the game, things inevitably won't behave as intended, and you'll need to debug them.  Rather than guessing what went wrong, we have some tools that can let you diagnose what's going wrong.</p>
<p>Whilst the game is running, if you press <code>control-D</code>, the game will freeze, and a debugging console will appear on the screen (visually, it's not much at the moment, just an insertion point which lets you type).  This allows you to type any formula that's valid in FFL, and have the game output the results of that formula.  You can use this to ask all sorts of things that aren't visually obvious, such as how many hitpoints something has, what something's exact x,y position is, you can check variables - and most importantly, if you have an object that uses variables to keep track of what it's doing, or what's attached to it, you can check what's stored in them.  FFL is able, of course, to not just query values, but <strong>change</strong> them.  You can use the debug console to set any value you want, or run any function you want, just like you would when writing an object.</p>
<p>When you type in a variable like hitpoints, it can't mean anything on its own;  hitpoints are always "of a certain object".  To know which object is being referred to, the debug console lets you click on an object, and select it; frogatto himself (or really, the player object) starts as being selected by default, and you can select anything else by clicking on it, just like you would in the editor.</p>
<p>If I wanted to know how many hitpoints frogatto had, I could open the debug console, and type <code>hitpoints</code>.  If I wanted to set frogatto to having only one hitpoint, I could type <code>set(hitpoints,1)</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#the-debug-console-also-has-a-few-other-helpful-commands" id="user-content-the-debug-console-also-has-a-few-other-helpful-commands"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>The debug console also has a few other helpful commands:</h3>
<ul>
<li>
<code>step</code> - will advance the <em>current object</em> only one frame and keep all other objects unchanged.</li>
<li>
<code>next</code> - will advance the game one frame.</li>
<li>
<code>prev</code> - will reverse a <code>next</code> command. <code>prev</code> doesn't work that nicely yet, though and after using it your game probably won't be able to continue outside of debug mode.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#there-are-a-few-functions-useable-either-inside-an-object-or-on-the-debug-console-that-are-helpful" id="user-content-there-are-a-few-functions-useable-either-inside-an-object-or-on-the-debug-console-that-are-helpful"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>There are a few functions, useable either inside an object, or on the debug console, that are helpful:</h3>
<ul>
<li>
<code>plot_x(val)</code> and <code>plot_y(val)</code> draw a straight vertical line at the given location (or horizontal, respectively).  Both this and <code>debug_rect(x,y,w,h)</code> display for only one frame;  in an object, this means they're useful only for use in <code>on_process</code>, but on the debug console, they'll display continuously, because the game is "paused" in a single frame.</li>
<li>
<code>debug_rect(x,y,w,h)</code> draws a rectangle at the target location.  This is very helpful because a lot of things in game operate with rects, and you can't see what these rects actually correspond to (there's a function, for example, called <code>solid(x,y,w,h)</code> that tests if anything is solid inside it).  We've found that guessing is actually incredibly error-prone; far, far more than we expected.  If you just explicitly display the rect being tested, you don't have to guess.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#there-are-a-few-related-functions-that-are-really-only-useful-inside-an-object" id="user-content-there-are-a-few-related-functions-that-are-really-only-useful-inside-an-object"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>There are a few related functions that are really only useful inside an object:</h3>
<ul>
<li>
<code>debug()</code> takes a expression, and outputs what it evaluates to.  Like anything typed on the debug console, it will display in a little box on the screen, and it will also output to the standard unix console, as is present on macs and linux.  It's not very useful in frogatto's debug console, because from there, you can just type anything directly and it will automatically be output.  Remember you can concatenate numbers with strings via 'string'+variable.  Example:  <code>debug('frogatto has '+hitpoints+' HP.')</code> might print "Frogatto has 4 HP."</li>
<li>
<code>debug_console()</code> will open the debug console when evaluated, with the object that called it selected by default.  It's not very useful when you're already inside the debug console, <a href="http://knowyourmeme.com/memes/subcultures/inception" rel="nofollow">for obvious reasons.</a>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#there-are-also-a-few-helpful-command-line-options" id="user-content-there-are-also-a-few-helpful-command-line-options"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>There are also a few helpful command-line options</h3>
<ul>
<li>
<code>--set-fps=</code> - if you follow this with something less than <code>50</code>, which is our maximum frame rate, the game will run in slow motion.  E.g. <code>25</code> would be half-speed.  Sometimes broken animations and such are really hard to see right at full speed.</li>
<li>
<code>--show-hitboxes</code> - this surrounds everything with translucent boxes indicating solidity, named collision rects (like attack_area), and terrain solidity.  Useful for seeing how these actually line up with an object's sprite.</li>
<li>
<code>--fps</code> - shows the actual FPS of the game, and some other more detailed output, to help diagnose if something you wrote is too processor-intensive.</li>
<li>
<code>--profile</code> - dumps a much more detailed recording of what was consuming what amount of processing time to the console.  This is done when the game exits.  You can do <code>--profile=output_file</code> to dump this to a file named <code>output_file</code> instead.</li>
<li>
<code>--width 1200 --height 900</code> - can be used to set the screen to any arbitrary size - this will zoom the active gameplay to keep the same amount of stuff on-screen, but this does <strong>not</strong> zoom the editor, which allows you to have a much bigger editor window for designing levels.</li>
</ul>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>More help can be found via IRC, <a href="irc://irc.freenode.net/#frogatto" rel="nofollow">#Frogatto</a> on freenode.net. This wiki is not a complete reference.</p>

          </div>
        </div>
    </div>]