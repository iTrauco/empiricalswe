[<div class="wiki-body gollum-creole-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>This page contains a semi-ordered list of most defined function calls you can find in Frogatto. Some of these are engine, some are defined in functions.cfg (or the frogatto module's functions-custom.cfg), and I expect some might be defined in a common prototype. To use this page, just search for the function you want. To find out which function you want, drop by the forums or IRC and ask us.</p><hr/><ul>
<li>
<tt> a_star_search(weighted_directed_graph, src_node, dst_node, heuristic) </tt> -&gt; A list of nodes which represents the 'best' path from src_node to dst_node.</li>
<li>
<tt> abs(value) -&gt; value </tt>: evaluates the absolute value of the value given</li>
<li>
<tt> achievement(id) </tt>: unlocks the achievement with the given id</li>
<li>
<tt> acos(x) </tt>: Standard arc cosine function.</li>
<li>
<tt> acosh(x) </tt>: Standard arc hyperbolic cosine function.</li>
<li>
<tt> add_level_module(string lvl, int xoffset, int yoffset) </tt>: adds the level module with the given level id at the given offset</li>
<li>
<tt> add_object(object) </tt>: inserts the given object into the level. The object should not currently be present in the level. The position of the object is tweaked to make sure there are no solid overlaps, however if it is not possible to reasonably place the object without a solid overlap, then the object will not be placed and the object and caller will both receive the event add_object_fail.</li>
<li>
<tt> add_particles(string id) </tt>: adds the particle system with the given id to the object</li>
<li>
<tt> add_water(int x1, int y1, int x2, int y2, (optional)[r,g,b,a]=[70,0,0,50]) </tt>: adds water of the given color in the given rectangle.</li>
<li>
<tt> add_wave(int x, int y, int xvelocity, int height, int length, int delta_height, int delta_length) </tt>: will add a wave with the given characteristics at the surface of the water above the (x,y) point. (x,y) must be within a body of water. Waves are a visual effect only and may not display at all on slower devices.</li>
<li>
<tt> angle(x1, y1, x2, y2) -&gt; int </tt>: Returns the angle, from 0Â°, made by the line described by the two points (x1, y1) and (x2, y2).</li>
<li>
<tt> angle_delta(a, b) -&gt; int </tt>: Given two angles, returns the smallest rotation needed to make a equal to b.</li>
<li>
<tt> animation(string id) </tt>: changes the current object's animation to the given animation. time_in_animation is reset to 0.</li>
<li>
<tt> asin(x) </tt>: Standard arc sine function.</li>
<li>
<tt> asinh(x) </tt>: Standard arc hyperbolic sine function.</li>
<li>
<tt> atan(x) </tt>: Standard arc tangent function.</li>
<li>
<tt> atanh(x) </tt>: Standard arc hyperbolic tangent function.</li>
<li>
<tt> back(list) </tt>: gives the last element of a list, or null for an empty list</li>
<li>
<tt> begin_script(string id) </tt>: begins the script with the given ID.</li>
<li>
<tt> begin_skip_dialog_sequence() </tt>: command that will cause everything up until the next time end_skip_dialog_sequence() is called to be considered a single storyline sequence. If the player selects to skip the sequence between now and then everything up until the call to end_skip_dialog_sequence() will be skipped.</li>
<li>
<tt> benchmark(expr) </tt>: Executes expr in a benchmark harness and returns a string describing its benchmark performance</li>
<li>
<tt> bind_closure(fn, obj) </tt>: binds the given lambda fn to the given object closure</li>
<li>
<tt> blur(int alpha=0, int fade=10, int granularity=1) </tt>: creates a motion blur for the current object.</li>
<li>
<tt> can_load_game() </tt>: returns true if there is a saved game available to load</li>
<li>
<tt> checkpoint_game() </tt>: saves a checkpoint of the game</li>
<li>
<tt> choose(list, (optional)scoring_expr) -&gt; value </tt>: choose an item from the list according to which scores the highest according to the scoring expression, or at random by default.</li>
<li>
<tt> choose(list, ffl) </tt>: Returns the object which the ffl ranks highest. This works like map or filter. So, for example, to choose the smallest object in a list, we'd say <tt>choose([1,2,3], -value)</tt>. In this case, the list would evaluate to -1,-2,-3 and we'd choose the largest number, -1. So, because 1 evaluated to -1, we'd get 1 from the function.</li>
<li>
<tt> circle_light(object, radius) </tt>: creates a circle of light with the given radius</li>
<li>
<tt> clear_textv(object) </tt>: Clears all the custom text from the object</li>
<li>
<tt> clear_widgets(obj) </tt>: Clears all widgets from the object.</li>
<li>
<tt> collides(object a, string area_a, object b, string area_b) -&gt; boolean </tt>: returns true if area_a within object a collides with area_b within object b.</li>
<li>
<tt> collides_with_level(object) -&gt; boolean </tt>: returns true if the given object collides with the level.</li>
<li>
<tt> compress(string, (optional) compression_level) </tt>: Compress the given string object</li>
<li>
<tt> cos(x) </tt>: Standard cosine function.</li>
<li>
<tt> cosh(x) </tt>: Standard hyperbolic cosine function.</li>
<li>
<tt> cosmic_shift(int xoffset, int yoffset) </tt>: adjust position of all objects and tiles in the level by the given offset</li>
<li>
<tt> cost_search(weighted_directed_graph, src_node, max_cost) </tt> -&gt; A list of all possible points reachable from src_node within max_cost.</li>
<li>
<tt> create_graph_from_level(level, (optional) tile_size_x, (optional) tile_size_y) -&gt; directed graph  </tt>: Creates a directed graph based on the current level.</li>
<li>
<tt> debug(...) </tt>: outputs arguments to the console</li>
<li>
<tt> debug_chart(string id, decimal value) </tt>: plots a sample in a graph</li>
<li>
<tt> debug_console() </tt>: provides an interactive debugging console. Can also be opened with ctrl-d.</li>
<li>
<tt> debug_fn(msg, expr) </tt>: evaluates and returns expr. Will print 'msg' to stderr if it's printable, or execute it if it's an executable command.</li>
<li>
<tt> debug_rect(int x, int y, (optional)int w=1, (optional) int h=1) </tt> -&gt; Draws, for one frame, a rectangle on the level</li>
<li>
<tt> decimal(value) -&gt; decimal </tt>: converts the value to a decimal</li>
<li>
<tt> decompress(expr) </tt>: Tries to decompress the given object, returns the data if successful.</li>
<li>
<tt> default(a,b) </tt>: If a is false, use b instead. (Basically, wraps <tt>if(a, a, b)</tt>.)</li>
<li>
<tt> delay_until_end_of_loading(string) </tt>: delays evaluation of the enclosed until loading is finished</li>
<li>
<tt> dialog(obj, template) </tt>: Creates a dialog given an object to operate on and a template for the dialog.</li>
<li>
<tt> die() </tt>: causes the current object to die. The object will receive the on_die signal and may even use it to resurrect itself. Use remove_object() to remove an object from play without it receiving on_die.</li>
<li>
<tt> directed_graph(list_of_vertexes, adjacent_expression) </tt> -&gt; a directed graph</li>
<li>
<tt> distance(u,v) </tt>: Returns the distance between points u and v. u and v may be an x/y pair in a list, an object, or a map with keys midpoint_x and midpoint_y.</li>
<li>
<tt> dump(x) </tt>: Equivalent to <tt>debug_fn(x, x)</tt>. Essentially a no-op code-wise, it prints whatever x is to console and returns x.</li>
<li>
<tt> dump2(x, y) </tt>: Equivalent to <tt>debug_fn([x, y], y)</tt>. Like <tt>dump()</tt>, dump2 is also a no-op for your logic. However, now you can include an identifying string before the stuff to be dumped so you can actually tell which dump function is dumping what data.</li>
<li>
<tt> end_game() </tt>: Displays 'to be continued...', and returns to titlescreen.</li>
<li>
<tt> end_script() </tt>: ends the most recent script to have begun.</li>
<li>
<tt> end_skip_dialog_sequence() </tt>: ends the sequence begun with begin_skip_dialog_sequence().</li>
<li>
<tt> eval(str) </tt>: Evaluate the given string as FFL. Unlike every other function in Frogatto, this one will try its hardest to not cause errors. It doesn't 'fail fast'. This makes it safe for parsing user input. (Unlike Javascript's eval(), this one is 100% safe to use.)</li>
<li>
<tt> execute(object context, command cmd) </tt>: this function will execute the command or list of commands given by cmd on the object given by context. For instance, animation('foo') will set the current object to animation 'foo'. execute(obj, animation('foo')) can be used to set the object given by obj to the animation 'foo'.</li>
<li>
<tt> facing(int new_facing) </tt>: changes the current object's facing according to the value of new_facing (1 for right, otherwise left).</li>
<li>
<tt> find(list[, element_name='value'], test) </tt>: Returns the first element in <tt>list</tt> for which test returns true, otherwise return null. The <tt>test</tt> code may reference the element being tested by using the element_name string, like map() and friends do. The default name is 'value'. So, for example, to search for the first truthy element in a list, we would say: <tt>find(my_list, value)</tt> where mylist is something like <tt>[null, false, 'foo']</tt>. The return value in this case would be <tt>'foo'</tt>. To check for values, we could say <tt>find(all_scores, 'score', score&gt;4)</tt> where all_scores is a property you defined earlier, returning <tt>[1,2,3]</tt> at the moment. This would return null, which is falsey, because no score is above 4. To check if any element of a list is in another list, we could say: <tt>find(list_one, value in list_two</tt>. This would return the first element of list 1 that occurs in list 2.</li>
<li>
<tt> fire_event((optional) object target, string id, (optional)callable arg) </tt>: fires the event with the given id. Targets the current object by default, or target if given. Sends arg as the event argument if given</li>
<li>
<tt> flatten(list) </tt>: Returns a list with a depth of 1 containing the elements of any list passed in.</li>
<li>
<tt> float_array(list, (opt) num_elements) -&gt; callable </tt>: Converts a list of floating point values into an efficiently accessible object.</li>
<li>
<tt> fold(list, expr, [default]) </tt> -&gt; value</li>
<li>
<tt> get_all_files_under_dir(path) </tt>: Returns a list of all the files in and under the given directory</li>
<li>
<tt> get_clipboard_text() </tt>: Get whatever's been copied to the clipboard. See also set_clipboard_text().</li>
<li>
<tt> get_document(string filename) </tt>: Return a reference to the given JSON document. Compliments <tt>set_document(string, data)</tt>.</li>
<li>
<tt> get_files_in_dir(path) </tt>: Returns a list of the files in the given directory</li>
<li>
<tt> get_mid(object) </tt>: Returns the midpoint of <tt>object</tt> as a list.</li>
<li>
<tt> get_object(level, string label) -&gt; object|null </tt>: Returns the object that is present in the given level that has the given label, or null if it could not be found.</li>
<li>
<tt> get_object_or_die(level, string label) -&gt; object </tt>: Returns the object that is present in the given level that has the given label. The engine will throw an error and halt if the object can't be found.</li>
<li>
<tt> get_save_document(int slot) </tt>: gets the FFL document for the save in the given slot</li>
<li>
<tt> get_widget(object obj, string id) </tt>: returns the widget with the matching id for given object</li>
<li>
<tt> group_size(level, int group_id) -&gt; int </tt>: gives the number of objects in the object group given by group_id</li>
<li>
<tt> head(list) </tt>: gives the first element of a list, or null for an empty list</li>
<li>
<tt> hex_get_random_tile(regex, (opt)count) -&gt; hex_tile object(s) </tt>: Generates either a single random tile or an array of count random tiles, picked from the given regular expression</li>
<li>
<tt> hex_get_tile(string) -&gt; hex_tile object </tt>: Returns a hex tile object with the given name.</li>
<li>
<tt> hex_get_tile_at(hexmap, x, y) -&gt; hex_tile object </tt>: Finds the hex tile at the given level co-ordinates</li>
<li>
<tt> hex_location(x,y,string dir) -&gt; [x,y] </tt>: calculates the co-ordinates of the tile in the given direction.</li>
<li>
<tt> hex_pixel_coords(x,y) -&gt; [x,y] </tt>: Converts a pair of pixel co-ordinates to the corresponding tile co-ordinate.</li>
<li>
<tt> if(ffl_1, ffl_2[, ffl_3]) </tt>: When ffl_1 evaluates to a true value, return (and run) ffl_2. Otherwise, return ffl_3 if it's defined, and null if it's not.</li>
<li>
<tt> index(list, value) -&gt; index of value in list </tt>: Returns the index of the value in the list or -1 if value wasn't found in the list.</li>
<li>
<tt> integer(value) -&gt; int </tt>: converts the value to an integer</li>
<li>
<tt> is_bool(any var) </tt> -&gt; Returns true if the variable passed in is <tt>true</tt> or <tt>false</tt>.</li>
<li>
<tt> is_decimal(any var) </tt> -&gt; Returns true if the variable passed in is a decimal.</li>
<li>
<tt> is_int(any var) </tt> -&gt; Returns true if the variable passed in is an int.</li>
<li>
<tt> is_map(any var) </tt> -&gt; Returns true if the variable passed in is a map.</li>
<li>
<tt> is_null(any var) </tt> -&gt; Returns true if the variable passed in is null.</li>
<li>
<tt> is_number(any var) </tt> -&gt; Returns true if the variable passed in is an integer or a decimal.</li>
<li>
<tt> is_string(any var) </tt> -&gt; Returns true if the variable passed in is a string.</li>
<li>
<tt> keys(map) -&gt; list </tt>: gives the keys for a map</li>
<li>
<tt> load_game() </tt>: loads the saved game</li>
<li>
<tt> load_game(transition) </tt>: loads the saved game. If transition (a string) is given, it will use that type of transition.</li>
<li>
<tt> map(list A, B, ffl C) </tt>: For each element in list A, run C on it with the element available to C as whatever B is. B is evaluated as a string. For example, <tt>map(range(10), start_number, start_number*2)</tt> would return a list of even numbers from 0 to 18 inclusive.</li>
<li>
<tt> mapping(x) </tt>: Turns the args passed in into a map. The first arg is a key, the second a value, the third a key, the fourth a value and so on and so forth.</li>
<li>
<tt> max(args...) -&gt; value </tt>: evaluates to the maximum of the given arguments. If given a single argument list, will evaluate to the maximum of the member items.</li>
<li>
<tt> median(args...) -&gt; value </tt>: evaluates to the median of the given arguments. If given a single argument list, will evaluate to the median of the member items.</li>
<li>
<tt> min(args...) -&gt; value </tt>: evaluates to the minimum of the given arguments. If given a single argument list, will evaluate to the minimum of the member items.</li>
<li>
<tt> module_client() </tt>: creates a module client object. The object will immediately start retrieving basic module info from the server. module_pump() should be called on it every frame. Has the following fields: <strong>is_complete</strong>: true if the current operation is complete and a new operation can be started. When the module_client is first created it automatically starts an operation to get the summary of modules. <strong>downloaded_modules</strong>: a list of downloaded modules that are currently installed. <strong>module_info</strong>: info about the modules available on the server. <strong>error</strong>: contains an error string if the operation resulted in an error, null otherwise. <strong>kbytes_transferred</strong>: number of kbytes transferred in the current operation <strong>kbytes_total</strong>: total number of kbytes to transfer to complete the operation.</li>
<li>
<tt> module_install(module_client, string module_id) </tt>: begins downloading the given module and installing it. This should only be called when module_client.is_complete = true (i.e. there is no operation currently underway)</li>
<li>
<tt> module_launch(string module_id) </tt>: launch the game using the given module.</li>
<li>
<tt> module_pump(module_client) </tt>: pumps module client events. Should be called every cycle.</li>
<li>
<tt> module_rate(module_client, string module_id, int num_stars (1-5), (optional) string review) </tt>: begins a request to rate the given module with the given number of stars, optionally with a review.</li>
<li>
<tt> module_uninstall(string module_id) </tt>: uninstalls the given module</li>
<li>
<tt> move_to_standing() </tt>: tries to move the object downwards if it's in the air, or upwards if it's in solid space, until it's standing on solid ground.</li>
<li>
<tt> music(string id) </tt>: plays the music file given by 'id' in a loop</li>
<li>
<tt> music_onetime(string id) </tt>: plays the music file given by 'id' once</li>
<li>
<tt> object(string type_id, int midpoint_x, int midpoint_y, int facing, (optional) map properties) -&gt; object </tt>: constructs and returns a new object. Note that the difference between this and spawn is that spawn returns a command to actually place the object in the level. object only creates the object and returns it. It may be stored for later use.</li>
<li>
<tt> object_playable(string type_id, int midpoint_x, int midpoint_y, int facing, (optional) map properties) -&gt; object </tt>: constructs and returns a new object. Note that the difference between this and spawn is that spawn returns a command to actually place the object in the level. object_playable only creates the playble object and returns it. It may be stored for later use.</li>
<li>
<tt> orbit(x, y, angle, dist) -&gt; [x,y] </tt>: Returns the point as a list containing an x/y pair which is dist away from the point as defined by x and y passed in, at the angle passed in. Useful in conjunction with angle_to(obj, obj).</li>
<li>
<tt> paused_speech_dialog(...) </tt>: Like speech_dialog(), except the game is paused while the dialog is displayed.</li>
<li>
<tt> performance() </tt>: returns an object with current performance stats</li>
<li>
<tt> pixel_to_tile_coords(args) -&gt; [x,y] </tt>: Gets the tile at the pixel position given in the arguments. The positioncan either be a single list of two values suck as [x,y] or two seperate x,y co-ordinates.</li>
<li>
<tt> plot_path(level, from_x, from_y, to_x, to_y, heuristic, (optional) weight_expr, (optional) tile_size_x, (optional) tile_size_y) -&gt; list  </tt>: Returns a list of points to get from (from_x, from_y) to (to_x, to_y)</li>
<li>
<tt> plot_x(int x) </tt>: plots a vertical debug line at the given position</li>
<li>
<tt> plot_y(int x) </tt>: plots a horizontal debug line at the given position</li>
<li>
<tt> pp(_) </tt>: <strong>Removed in 1.4 in favour of lib.debug.pp.</strong> Pretty-print. Returns a human-readable string describing the data structure passed in. Despite the name, does not actually *print* the string. Lossy, abbreviates long lists/maps, doesn't expand many objects. Does indentation. Was designed to, where debug() shows you the <em>data</em> of a structure, show you the <em>structure</em> of the structure.</li>
<li>
<tt> preload_sound(string id) </tt>: preload the given sound so it'll be in the sound effects cache</li>
<li>
<tt> proto_event(prototype, event_name, (optional) arg) </tt>: for the given prototype, fire the named event. e.g. proto_event('playable', 'process')</li>
<li>
<tt> query(object, str) </tt>: Equivalent to object.str. You may also use execute(object, str).</li>
<li>
<tt> radial_current(int intensity, int radius) -&gt; current object </tt>: Creates a current generator with the given intensity and radius.</li>
<li>
<tt> range([start, ]finish)</tt>: Returns a list containing all numbers smaller than the finish value and and larger than or equal to the start value. The start value defaults to 0.</li>
<li>
<tt> range([start, ]finish[, step]) </tt>: Returns a list containing all numbers smaller than the finish value and and larger than or equal to the start value. The start value defaults to 0.</li>
<li>
<tt> rect_current(int x, int y, int w, int h, int xvelocity, int yvelocity, int strength) -&gt; current generator object </tt>: creates a current generator object that has a current with the given parameters. Set the return value of this function to an object's rect_current to attach it to an object and thus place it in the level.</li>
<li>
<tt> regex_match(string, re_string) -&gt; string </tt>: returns null if not found, else returns the whole string or a list of sub-strings depending on whether blocks were demarcated.</li>
<li>
<tt> regex_replace(string, string, string) -&gt; string </tt>: Unknown.</li>
<li>
<tt> remove_level_module(string lvl) </tt>: removes the given level module</li>
<li>
<tt> remove_object(object) </tt>: removes the given object from the level. If there are no references to the object stored, then the object will immediately be destroyed. However it is possible to keep a reference to the object and even insert it back into the level later using add_object()</li>
<li>
<tt> remove_water(int x1, int y1, int x2, int y2) </tt>: removes water that has the given rectangular area.</li>
<li>
<tt> report() </tt>: Write a key and a value into [custom] in the stats.</li>
<li>
<tt> reduce() </tt>: See <tt>fold()</tt>.</li>
<li>
<tt> resolve_solid(object, int xdir, int ydir, int max_cycles=100) </tt>: will attempt to move the given object in the direction indicated by xdir/ydir until the object no longer has a solid overlap. Gives up after max_cycles. If called with no arguments other than the object, will try desperately to place the object in the level.</li>
<li>
<tt> reverse(list) </tt>: reverses the given list</li>
<li>
<tt> rotate_rect(int center_x, int center_y, int rotation, int[8] rect) -&gt; int[8] </tt>: rotates rect and returns the result</li>
<li>
<tt> save_game() </tt>: saves the current game state</li>
<li>
<tt> schedule(int cycles_in_future, list of commands) </tt>: schedules the given list of commands to be run on the current object the given number of cycles in the future. Note that the object must be valid (not destroyed) and still present in the level for the commands to be run.</li>
<li>
<tt> screen_flash(list int[4] color, (optional) list int[4] delta, int duration) </tt>: flashes the screen the given color, and keeps the flash going for duration cycles. If delta is given, the color of the flash will be changed every cycle until the duration expires.</li>
<li>
<tt> scroll_to(object target) </tt>: scrolls the screen to the target object</li>
<li>
<tt> set_clipboard_text(str x) </tt>: Equivalent of copying some text to the clipboard. Ctrl-c for FFL. See also get_clipboard_text().</li>
<li>
<tt> set_group((optional)int group_id) </tt>: sets the current object to have the given group id, or to be in no group if group_id is not given</li>
<li>
<tt> set_mid(object, target) </tt>: Sets the <tt>object</tt>'s midpoint to that of target. Target may be a list or another object. Set(mid_xy, obj.mid_xy) does the same thing, though, so this can be considered deprecated.</li>
<li>
<tt> set_save_slot((optional) int slot) </tt>: Allows the user to select the save slot, if no slot is specified a dialog is displayed.</li>
<li>
<tt> set_solid(x1, y1, x2, y2, boolean is_solid=false) </tt>: modifies the solidity of the level such that the rectangle given by (x1, y1, x2, y2) will have its solidity set to the value of is_solid</li>
<li>
<tt> set_var(string varname, variant value) </tt>: sets the variable named varname within the current object. Note that you should generally use set(vars.blah, x) rather than set_var('blah', x). The only exception is if you want to create the command and save it for later execution on an object you don't yet have access to -- most useful with the spawn() function.</li>
<li>
<tt> set_widgets((optional) obj, widget, ...) </tt>: Adds a group of widgets to the current object, or the specified object</li>
<li>
<tt> shake_screen(int x_offset, int y_offset, int x_velocity, int y_velocity) </tt>: makes the screen camera shake</li>
<li>
<tt> short_array(list) -&gt; callable </tt>: Converts a list of integer values into an efficiently accessible object.</li>
<li>
<tt> show_modal(dialog) </tt>: Displays a modal dialog on the screen.</li>
<li>
<tt> shuffle(list) </tt> - Returns a shuffled version of the list. Like shuffling cards.</li>
<li>
<tt> sign(value) -&gt; value </tt>: evaluates to 1 if positive, -1 if negative, and 0 if 0</li>
<li>
<tt> sin(x) </tt>: Standard sine function.</li>
<li>
<tt> sinh(x) </tt>: Standard hyperbolic sine function.</li>
<li>
<tt> solid(level, int x, int y, (optional)int w=1, (optional) int h=1, (optional) int debug=0) -&gt; boolean </tt>: returns true iff the level contains solid space within the given (x,y,w,h) rectangle. If 'debug' is set, then the tested area will be displayed on-screen.</li>
<li>
<tt> sort(list, criteria) </tt>: Returns a nicely-ordered list. If you give it an optional formula such as <tt>a&gt;b</tt> as the criteria it will sort it according to that. This example favours larger numbers first instead of the default of smaller numbers first. The criteria should be deterministic, or else the engine may segfault. A function, such as <tt>def(a,b) a &gt; b</tt> is not deterministic and will not sort anything.</li>
<li>
<tt> sound(string id, decimal volume) </tt>: plays the sound file given by 'id'</li>
<li>
<tt> sound_loop(string id, decimal volume) </tt>: plays the sound file given by 'id' in a loop</li>
<li>
<tt> sound_volume(int volume) </tt>: sets the volume of sound effects</li>
<li>
<tt> spawn(string type_id, int midpoint_x, int midpoint_y, int facing | {variables:values}, (optional) commands [cmd]) </tt>: Will create a new object of type given by type_id with the given midpoint and facing. Immediately after creation the object will have any commands given by cmd executed on it. You can reference the spawned object with <tt>child</tt> here. The child object will have the spawned event sent to it, and the parent object will have the child_spawned event sent to it. Note: A similar effect may be achieved with <tt>add_object(object(â¦))</tt>, which is useful if you want to pull out the reference to the object for something else - or insert the object from a variable.</li>
<li>
<tt> spawn_player(string type_id, int midpoint_x, int midpoint_y, int facing, (optional) list of commands cmd) </tt>: identical to spawn except that the new object is playable.</li>
<li>
<tt> speech_dialog(...) </tt>: schedules a sequence of speech dialogs to be shown modally. Arguments may include a list of strings, which contain text. An integer which sets the duration of the dialog. An object which sets the speaker. A string by itself indicates an option that should be shown for the player to select from. A string should be followed by a list of commands that will be executed should the player choose that option.</li>
<li>
<tt> split(string, deliminator) </tt>: Returns a list of strings separated by the deliminator string. eg, <tt>split('test.cfg','.')</tt> gives <tt>['test', 'cfg']</tt>
</li>
<li>
<tt> sqrt(x) </tt>: Returns the square root of x.</li>
<li>
<tt> standable(level, int x, int y, (optional)int w=1, (optional) int h=1) -&gt; boolean </tt>: returns true iff the level contains standable space within the given (x,y,w,h) rectangle</li>
<li>
<tt> stop_sound(string id) </tt>: stops the sound that the current object is playing with the given id</li>
<li>
<tt> sum(list[, counter]) </tt>: Adds all elements of the list together. If counter is supplied, all elements of the list are added to the counter instead of to 0.</li>
<li>
<tt> swallow_event() </tt>: when used in an instance-specific event handler, this causes the event to be swallowed and not passed to the object's main event handler.</li>
<li>
<tt> swallow_mouse_event() </tt>: when used in an instance-specific event handler, this causes the mouse event to be swallowed and not passed to the next object in the z-order stack.</li>
<li>
<tt> switch(A, B, C[, D, E[, F, G [, ..., ..., [, Z]]]]) </tt>: Evaluate A. If B equals A, run C. Otherwise, if D equals A, evaluate E. Repeat for all args. If we have at the end one even-lettered arg without an odd match to run, this becomes the default value of the function which is evaluated if all else fails.</li>
<li>
<tt> switch(value, case1, result1, case2, result2 ... casen, resultn, default) -&gt; value </tt>: returns resultn where value = casen, or default otherwise.</li>
<li>
<tt> tan(x) </tt>: Standard tangent function.</li>
<li>
<tt> tanh(x) </tt>: Standard hyperbolic tangent function.</li>
<li>
<tt> tween(number, number, percent) </tt> -&gt; Calculates the number <em>percent</em> of the way from <em>number</em> two to <em>number</em> one.</li>
<li>
<tt> tbs_client(host, port, session=-1) </tt>: creates a client object to the tbs server</li>
<li>
<tt> tbs_process(tbs_client) </tt>: processes events for the tbs client</li>
<li>
<tt> tbs_send(tbs_client, msg) </tt>: sends a message through the given tbs_client connection</li>
<li>
<tt> teleport(string dest_level, (optional)string dest_label, (optional)string transition, (optional)playable) </tt>: teleports the player to a new level. The level is given by dest_level, with null() for the current level. If dest_label is given then the player will be teleported to the object in the destination level with that label. If transition is given, it names a type of transition (such as 'flip' or 'fade') which indicates the kind of visual effect to use for the transition. If a playable is specified it is placed in the level instead of the current one. If no_move_to_standing is set to true, rather than auto-positioning the player on the ground under/above the target, the player will appear at precisely the position of the destination object - e.g. this is useful if they need to fall out of a pipe or hole coming out of the ceiling.</li>
<li>
<tt> text(string text, (optional)string font='default', (optional)int size=2, (optional)bool centered=false) </tt>: adds text for the current object. Frogatto proxies this through the text_controller for more control. Uses a bitmap font, if you want a vector-based font use <tt>textv()</tt>.</li>
<li>
<tt> textv(object, text_map, ...) </tt>: Adds text objects to the object. <tt>object</tt> format: <tt> {text:&lt;string&gt;, align: "left|right|center", size:&lt;n&gt;, rect:[x,y,w,h]} </tt>. Uses a vector font instead of a bitmap font like <tt>text()</tt> does.</li>
<li>
<tt> tile_to_pixel_coords(x, y, (opt)string) -&gt; [x,y] </tt>: Gets the center pixel co-ordinates of a given tile co-ordinate. String can be effect the co-ordinates returned. "bounding" -&gt; <tt>[x,y,w,h]</tt> Bounding rect of the tile. "center" -&gt; <tt>[x,y]</tt> center co-ordinates of the tile(default)"hex" -&gt; <tt><a class="internal absent" href="/Autofire/frogatto/wiki/x0%2Cy0%5D%2C%5Bx1%2Cy1%5D%2C%5Bx2%2Cy2%5D%2C%5Bx3%2Cy3%5D%2C%5Bx4%2Cy4%5D%2C%5Bx5%2Cy5">x0,y0],[x1,y1],[x2,y2],[x3,y3],[x4,y4],[x5,y5</a></tt> Co-ordinates of points around outside of the tile.</li>
<li>
<tt> tiles_at(x, y) </tt> -&gt; [tile_object]: Gives a list of the tiles at the given x, y position. A tile_object has id, info, damage, friction, traction.</li>
<li>
<tt> time() -&gt; timestamp </tt>: returns the current real time</li>
<li>
<tt> title(string text, int duration=50) </tt>: shows level title text on the screen for duration cycles</li>
<li>
<tt> transform(list, ffl) </tt>: Deprecated in favour of map(). Each element of list has the ffl executed on it. This executed FFL is returned in a new list. The list element is accessed via <tt>v</tt>, and the iteration is accessed by <tt>i</tt>. Example: <tt>transform(['a','b','c'], v+i)</tt> produces <tt>['a0', 'b1', 'c2']</tt>.</li>
<li>
<tt> transient_speech_dialog(...) </tt>: schedules a sequence of speech dialogs to be shown. Arguments may include a list of strings, which contain text. An integer which sets the duration of the dialog. An object which sets the speaker.</li>
<li>
<tt> translate(str) </tt>: returns the translated version of the given string</li>
<li>
<tt> unique(list) </tt>: Returns a (sorted) list without duplicates.</li>
<li>
<tt> unzip(list of lists) -&gt; list of lists </tt>: Converts <tt><a class="internal absent" href="/Autofire/frogatto/wiki/1%2C4%5D%2C%5B2%2C5%5D%2C%5B3%2C6">1,4],[2,5],[3,6</a></tt> -&gt; <tt><a class="internal absent" href="/Autofire/frogatto/wiki/1%2C2%2C3%5D%2C%5B4%2C5%2C6">1,2,3],[4,5,6</a></tt>
</li>
<li>
<tt> values(map) -&gt; list </tt>: gives the values for a map</li>
<li>
<tt> wave(int) -&gt; int </tt>: a wave with a period of 1000 and height of 1000</li>
<li>
<tt> write_document(string, map) </tt>: String is a file name, and map is a standard FFL map of data. Writes the data to a file. The string should not be a path. Can be retrieved with <tt>get_document(string)</tt>.</li>
<li>
<tt> weighted_graph(directed_graph, weight_expression) </tt> -&gt; a weighted directed graph</li>
<li>
<tt> zip(list1, list2, expr) </tt> -&gt; list3. Each element in list 3 is the elements from list 1 and list 2 ran through expr(a, b).</li>
</ul><p>Note: A function defined in an object's prototype can be called from the current object by <tt>%{prototype_name}_{function_name}()</tt>.</p><hr/><p>Functions in libraries are accessible via lib.<tt>library name</tt>.<tt>function name</tt>(). These are listed separately of the above functions, since they're not in the global namespace. Future globally-accessible functions should prefer libraries, since they don't pollute the global namespace like functions.cfg-based functions do. Libraries also have much better static typing support.</p><p><strong><tt>debug</tt>:</strong></p><p><em>Note: This library is disabled by default.</em></p><ul>
<li>
<tt> xywh(x,y,w,h) </tt>: Returns a command to draw a debug rect on screen, enclosing the rectangle as defined by start x, start y, rectangle width, rectangle height.</li>
<li>
<tt> xywh(list) </tt>: See above. Same args, but this time contained in a list <tt>[x,y,w,h]</tt>.</li>
<li>
<tt> xyxy(x1, y1, x2, y2) </tt>: Returns a command to draw a debug rect on screen, enclosing the rectangle as defined by the points x1/y1 and x2/y2.</li>
<li>
<tt> xyxy(list) </tt>: See above. Same args, but this time contained in a list <tt>[x1,y1,x2,y2]</tt>.</li>
</ul><p><strong><tt>math</tt>:</strong></p><ul>
<li>
<tt> interpolate(thing, percent, thing) </tt> -&gt; Given two compatible <em>thing</em>s, calculate the thing <em>percent</em> of the way from <em>thing</em> 1 to <em>thing</em> 2. Number-number and list-list combinations return numbers and lists. If both elements have a mid_x and mid_y value, then a map containing an interpolated mid_x and mid_y will be returned. A list containing an x/y value may be substituted for an object with <tt>{mid_x, mid_y}</tt>. In the case that a list is used, the returned object will contain a 0 and a 1 field, and so can be used in many situations where a list would otherwise be called for.</li>
<li>
<tt> floor(number) </tt> -&gt; Returns the number passed it without the decimal part.</li>
<li>
<tt> ceil(number) </tt> -&gt; Returns the next whole number which is larger than or equal to the number passed in.</li>
<li>
<tt> tenth(number) </tt> -&gt; Gives the decimal place, ie, anything less than or including the tenths place.</li>
<li>
<tt> constrain(number u, number v, number w) </tt> -&gt; Returns n, where n is as close to v as possible given that u &lt; n &lt; w. If u &gt; w, then v will be half-way between both.</li>
<li>
<tt> loop(number[, max=360]) </tt> -&gt; Returns the number passed in, looped to be between 0, the number, and the max. Somewhat useful for circle calculations. For example: <tt>map([-90,0,90,270,450], lib.math.loop(value))</tt> â <tt>[270, 0, 90, 270, 90]</tt>.</li>
<li>
<tt> in_range(min, var, max) </tt> -&gt; Returns true if min &lt;= var &lt;= max. A convenient shortcut. Kin to constrain.</li>
<li>
<tt> round(number) </tt> -&gt; Rounds to the nearest whole number. For example, 2.5 rounds to 3 and -2.5 rounds to -3.</li>
<li>
<tt> sin_in(percent) </tt> -&gt; Given a percentage, uses a sine-based formula to weight the midpoint towards 1.0 (100%). This looks like acceleration as the arg approaches 1.0.</li>
<li>
<tt> sin_in_out(percent) </tt> -&gt; Applies both sin_in and sin_out to the decimal passed in. As with all easing functions, acceptable input ranges between 0.0 and 1.0.</li>
<li>
<tt> sin_out(percent) </tt> -&gt; Given a percentage, uses a sine-based formula to weight the midpoint towards 0.0 (0%). This looks like deceleration as the arg approaches 1.0.</li>
<li>
<tt> default(maybe-a-decimal, decimal) </tt> -&gt; Takes an arg that might be a decimal or might be null, and an arg that is a decimal. Returns the first arg if it is a decimal, or the second arg if the first arg is not a decimal. Good for when you may be dealing with an undefined value, such as a default that is often left blank. See the non-lib <tt>default()</tt> for a solution for objects and other such things that are always true if they're defined at all.</li>
<li>
<tt> bezier_curve([â[points]] points, decimal percent) </tt> -&gt; Returns a point <em>percent</em> way along the bezier curve with control points as listen in <em>points</em>. (Points is a list of <tt>[x,y]</tt>s.) Note that this list defines only one bezier curve, so each point you append to the list makes all previous points matter less. This is unlike a bezier curve in something like Inkscape (a vector graphics program), which chains together bezier curves with a length of 3. (Perhaps someday.)</li>
</ul><p><strong><tt>standardize</tt>:</strong></p><ul>
<li>
<tt> toPoints(list points) </tt>: Takes a list of points in any common format. (object, map, or [x,y]). Returns a list of [x,y]-type points.</li>
<li>
<tt> toPoint(point) </tt>: Takes a point in any common format (see <tt>toPoints()</tt>). Returns a point in [x,y] format.</li>
<li>
<tt> camera(level) </tt>: Given the current level, returns the focus-point of the camera. This is usually the middle of the screen in level coordinates.</li>
<li>
<tt> decimal(any) </tt>: Returns the decimal value of anything. Could perhaps be substituted by something like boolToDecimal(), but that seems a bit pedantic.</li>
<li>
<tt> int(any) </tt>: Returns the integer value of anything.</li>
</ul>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>More help can be found via IRC, <a href="irc://irc.freenode.net/#frogatto" rel="nofollow">#Frogatto</a> on freenode.net. This wiki is not a complete reference.</p>

          </div>
        </div>
    </div>]