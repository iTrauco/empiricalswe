[<div class="wiki-body gollum-creole-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>An object has many, many assumed variables. Some of these are flags, which are set at the beginning of the object's life and left alone, while others are properties of the object and change as the object changes. To change a property yourself, use <tt>set(property, value)</tt> or <tt>add(property, value</tt>. For example, <tt>set('rotate', 45)</tt> would cause the object rotate to the 45 degree point. A property can be any type, including <tt>integer</tt>, <tt>decimal</tt> (six points of precision), <tt>string</tt>, <tt>list</tt>, <tt>map</tt>, <tt>function</tt>, or <tt>object</tt>.</p><h2>
<a aria-hidden="true" class="anchor" href="#general-properties" id="user-content-general-properties"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>General Properties</h2><p>This is a table of values available to a custom_obj in the Anura engine.</p><h3>
<a aria-hidden="true" class="anchor" href="#table-keys" id="user-content-table-keys"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Table Keys</h3><p>property name, t=type, p=permissions, units as above, long description, v=verification status; t=verified true, v = verification requested, ?=murky, or x=false.</p><h3>
<a aria-hidden="true" class="anchor" href="#table" id="user-content-table"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Table</h3><p>These properties are available on all objects.</p><table>
<tbody><tr>
<td>property</td>
<td>t</td>
<td>p</td>
<td>units</td>
<td>purpose</td>
<td>v</td>
</tr>
<tr>
<td>%PROTO%</td>
<td></td>
<td>r</td>
<td></td>
<td>This inserts the entirety of an object's prototype's event-handler of the same name, into the place where you type it - just as if you'd copy-pasted it into that spot. Because frogatto requires anything consisting of two commands to be expressed as a list, the usual idiom for this will be <tt>[%PROTO%, do_other_stuff_ specific_to_this_object_type() ]</tt> For those familiar with object-oriented programming, this is like calling a superclass's implementation of a function inside a subclass's implementation. See swallow_event() for the opposite effect.</td>
<td>t</td>
</tr>
<tr>
<td>accel_x</td>
<td>i</td>
<td>rw</td>
<td>cpx/frame</td>
<td>The acceleration in the object horizontally, relative to its facing; positive values accelerate it forward, negative accelerates it backwards. <strong>Note:</strong> to accelerate on the x axis (y is exempt from this), an object must have <tt>traction</tt> of some kind. Measured in "cpx" ("centipixels"), 1/100th of a pixel.</td>
<td>t</td>
</tr>
<tr>
<td>accel_y</td>
<td>i</td>
<td>rw</td>
<td>cpx/frame</td>
<td>The acceleration in the object vertically. A positive value indicates the object is accelerating downwards. Measured in "cpx" ("centipixels"), 1/100th of a pixel.</td>
<td></td>
</tr>
<tr>
<td>activation_area</td>
<td>l</td>
<td>w</td>
<td>list</td>
<td>A list containing a rectangle defined by it's upper-left and lower-right corners. When this rectangle intersects with the screen area, the object becomes active.</td>
<td></td>
</tr>
<tr>
<td>alpha</td>
<td>i</td>
<td>rw</td>
<td>0-255</td>
<td>The opacity of the object, where 0 is transparent, and 255 opaque.</td>
<td>v</td>
</tr>
<tr>
<td>animation</td>
<td>s</td>
<td>rw</td>
<td>name</td>
<td>What animation the object is currently in. Note that setting this property resets time_in_frame to 0, as well as same other processing.</td>
<td>v</td>
</tr>
<tr>
<td>attached_objects</td>
<td>l</td>
<td>rw</td>
<td>objects</td>
<td>A list containing strings that name any objects attached to this one.</td>
<td></td>
</tr>
<tr>
<td>available_animations</td>
<td>l</td>
<td>r</td>
<td>list</td>
<td>A list containing all the animation names available to the object.</td>
<td></td>
</tr>
<tr>
<td>back</td>
<td>i</td>
<td>r</td>
<td>px</td>
<td>Returns the <tt>x</tt> position value. Duplicates <tt>front</tt>.</td>
<td></td>
</tr>
<tr>
<td>blue</td>
<td>i</td>
<td>rw</td>
<td>0-255</td>
<td>How strongly the blue color channel (of RGB) is drawn for the object.</td>
<td></td>
</tr>
<tr>
<td>clip_area</td>
<td>l</td>
<td>rw</td>
<td>xywh</td>
<td>A list containing x, y, width, and height for the rectangle inside which to draw the object. In level coordinates.</td>
<td></td>
</tr>
<tr>
<td>consts</td>
<td></td>
<td>r</td>
<td></td>
<td>A non-variable container. Set in an object's [vars] tag in it's .cfg file. Accessible via the dot operator, such as in <tt>vars.value</tt>.</td>
<td></td>
</tr>
<tr>
<td>custom_draw</td>
<td>w</td>
<td>list</td>
<td>[decimal…, Point2d…]</td>
<td>Setting custom_draw distorts the object's image on screen. It is set to a list containing at least four decimal offsets and a similar number of points. The initial offsets, such as <tt>0,1,2,3</tt>, specify a place on the edge of the square image. 0 is the upper-left corner, 1 is the upper-right, and so on. Each offset has a point paired with it. The points are a standard Point2d, or <tt>[x,y]</tt>, and specify a warp factor to apply to the image. For example, the basic does-nothing value for custom_draw is <tt>set(custom_draw, [0.0, 1.0, 2.0, 3.0, [0,0], [0,0], [0,0], [0,0]])</tt>. This sets all four corners of the image to no offset.</td>
<td>v</td>
</tr>
<tr>
<td>cycle</td>
<td>i</td>
<td>r</td>
<td>ticks</td>
<td>The number of frames the object has existed. The game adds 50 cycles per second.</td>
<td></td>
</tr>
<tr>
<td>damage</td>
<td>i</td>
<td>rw</td>
<td>hp</td>
<td>Damage the object causes to other objects.</td>
<td></td>
</tr>
<tr>
<td>destroyed</td>
<td>s</td>
<td>r</td>
<td>t/f</td>
<td>Is the object destroyed?</td>
<td>?</td>
</tr>
<tr>
<td>distance_to_cliff</td>
<td>i</td>
<td>r</td>
<td>px</td>
<td>The distance from the object to a terrain drop-off.</td>
<td></td>
</tr>
<tr>
<td>down</td>
<td>i</td>
<td>r</td>
<td><tt>-1,1</tt></td>
<td>Returns the value of <tt>upside-down</tt>.</td>
<td></td>
</tr>
<tr>
<td>driver</td>
<td>o</td>
<td>rw</td>
<td></td>
<td>The object that is driving the current object.</td>
<td>?</td>
</tr>
<tr>
<td>event_handlers</td>
<td>t</td>
<td>rw</td>
<td>string</td>
<td>A container for event handlers. To retrieve or set an event's FFL, you ask for it by <tt>event_handlers.event</tt>. For example, to set your object's on_process to print 'hi' every frame, you would say <tt>set(event_handlers.process, q~debug('hi')~)</tt>. (Remember, <tt>q</tt> is the quote operator.) </td>
</tr>
<tr>
<td>facing</td>
<td>s</td>
<td>rw</td>
<td><tt>-1,1</tt></td>
<td>An object can face either left or right.</td>
<td></td>
</tr>
<tr>
<td>fragment_shaders</td>
<td></td>
<td></td>
<td></td>
<td>define OpenGL shaders and then have objects use those shaders when drawn</td>
<td>?</td>
</tr>
<tr>
<td>friction</td>
<td>i</td>
<td>r</td>
<td></td>
<td>Values greater than zero will decay an object's velocity, whether standing, or in the air.</td>
<td>?</td>
</tr>
<tr>
<td>front</td>
<td>i</td>
<td>r</td>
<td>px</td>
<td>Returns the <tt>x</tt> position value. Duplicates <tt>back</tt>.</td>
<td></td>
</tr>
<tr>
<td>green</td>
<td>i</td>
<td>rw</td>
<td>0-255</td>
<td>How strongly the green color channel (of RGB) is drawn for the object.</td>
<td></td>
</tr>
<tr>
<td>group</td>
<td>i</td>
<td></td>
<td></td>
<td>The numeric group that the object is a member of; typically assigned in the editor. All members of a group activate/pause at once, the use of this is typically to make puzzles that require timing and are made from multiple objects, stay in sync.</td>
<td></td>
</tr>
<tr>
<td>hit_by</td>
<td>s</td>
<td>r</td>
<td>name</td>
<td>What object has collided with this object?</td>
<td></td>
</tr>
<tr>
<td>hitpoints</td>
<td>i</td>
<td>rw</td>
<td>hp</td>
<td>How much health remains for the object. A value of less than or equal to 0 causes death.</td>
<td></td>
</tr>
<tr>
<td>img_h</td>
<td>i</td>
<td>r</td>
<td>pixels</td>
<td>How high is the object's image?</td>
<td></td>
</tr>
<tr>
<td>img_mid_x</td>
<td>i</td>
<td>rw</td>
<td>pixels</td>
<td>Object midpoint, based on image.</td>
<td></td>
</tr>
<tr>
<td>img_mid_y</td>
<td>i</td>
<td>rw</td>
<td>pixels</td>
<td>See img_mid_x.</td>
<td></td>
</tr>
<tr>
<td>img_w</td>
<td>i</td>
<td>r</td>
<td>pixels</td>
<td>How wide is the object's image?</td>
<td></td>
</tr>
<tr>
<td>invincible</td>
<td>s</td>
<td>rw</td>
<td>t/f</td>
<td>Can be set to 'true' or 'false'. When true, the object does not take damage or react to a damaging event.</td>
<td></td>
</tr>
<tr>
<td>is_human</td>
<td>s</td>
<td>rw</td>
<td>t/f</td>
<td>Is the object controllable by a player? Having more than one is_human object causes Frogatto to start an internet multiplayer game.</td>
<td></td>
</tr>
<tr>
<td>is_standing</td>
<td>s</td>
<td>r</td>
<td>t/f</td>
<td>Is the object standing on anything?</td>
<td></td>
</tr>
<tr>
<td>is_standing_on_platform</td>
<td>s</td>
<td>r</td>
<td>t/f</td>
<td>If the object is standing on a moving platform, this is set to 'true'.</td>
<td></td>
</tr>
<tr>
<td>jumped_on_by</td>
<td>s</td>
<td>r</td>
<td>name</td>
<td>The name of the object that just landed on this one.</td>
<td></td>
</tr>
<tr>
<td>label</td>
<td>s</td>
<td>rw</td>
<td></td>
<td>An identifying string. Can be set in the editor.</td>
<td></td>
</tr>
<tr>
<td><a class="internal present" href="/Autofire/frogatto/wiki/level">level</a></td>
<td></td>
<td>r</td>
<td>name</td>
<td>The current level. See it's page for a description of the variables in it.</td>
<td></td>
</tr>
<tr>
<td>max_hitpoints</td>
<td>i</td>
<td>rw</td>
<td>health</td>
<td>How healthy can the object be, maximum?</td>
<td></td>
</tr>
<tr>
<td>me</td>
<td>s</td>
<td>r</td>
<td>name</td>
<td>I, me, myself. The current object.</td>
<td></td>
</tr>
<tr>
<td>midpoint_x</td>
<td>i</td>
<td>rw</td>
<td>pixels</td>
<td>The horizontal component of the centre of the object, in global coordinates.</td>
<td></td>
</tr>
<tr>
<td>midpoint_y</td>
<td>i</td>
<td>rw</td>
<td>pixels</td>
<td>The vertical component of the centre of the object, in global coordinates.</td>
<td></td>
</tr>
<tr>
<td>near_cliff_edge</td>
<td>s</td>
<td>r</td>
<td>t/f</td>
<td>Is the object near a cliff edge?</td>
<td></td>
</tr>
<tr>
<td>paused</td>
<td>b</td>
<td>rw</td>
<td></td>
<td>Is the object paused? A paused object doesn't respond to events fired at it.</td>
</tr>
<tr>
<td>solid_mid_x</td>
<td>i</td>
<td>rw</td>
<td>pixels</td>
<td>Object midpoint, based on solidity data.</td>
<td></td>
</tr>
<tr>
<td>solid_mid_y</td>
<td>i</td>
<td>rw</td>
<td>pixels</td>
<td>See solid_mid_x.</td>
<td></td>
</tr>
<tr>
<td>parent</td>
<td>o</td>
<td>rw</td>
<td>custom_obj</td>
<td>The parent of the object. Enables relative_x/y. You should read <a class="internal present" href="/Autofire/frogatto/wiki/Relative-Positioning">Relative Positioning</a> now, because this mechanism is not intuitive.</td>
<td></td>
</tr>
<tr>
<td>red</td>
<td>i</td>
<td>rw</td>
<td>0-255</td>
<td>How strongly the red color channel (of RGB) is drawn for the object.</td>
<td></td>
</tr>
<tr>
<td>registry</td>
<td></td>
<td>rw</td>
<td></td>
<td>A permanent variable container. Values stored in here are saved across sessions and across save games.</td>
<td>v</td>
</tr>
<tr>
<td>relative_x</td>
<td>i</td>
<td>rw</td>
<td>coordinates</td>
<td>If parent is set, this object's relative horizontal position to it's parent.</td>
</tr>
<tr>
<td>relative_y</td>
<td>i</td>
<td>rw</td>
<td>coordinates</td>
<td>If parent is set, this object's relative vertical position to it's parent.</td>
</tr>
<tr>
<td>reverse_global_vertical_zordering</td>
<td>b</td>
<td></td>
<td>boolean</td>
<td>If true, objects with a lower vertical midpoint will be drawn over objects with a higher midpoint. If false (the default), objects with a higher vertical midpoint will drawn over those with a vertical midpoint. See z_order and zsub_order for more info.</td>
<td>v</td>
</tr>
<tr>
<td>rotate</td>
<td>f</td>
<td>rw</td>
<td>degrees</td>
<td>Setting a value other than zero will rotate the object's sprite. <em>This is purely cosmetic</em>, nothing about the object's behavior or solidity is rotated for you. Rotate can be set to values outside 0-360 degrees, they wrap around using normal modulo arithmetic (e.g. 380° = 20°).</td>
<td></td>
</tr>
<tr>
<td>rotation_schedule</td>
<td>l</td>
<td>w</td>
<td>list of ints</td>
<td>When set, the object's rotation value will loop over this list, being set to each point. You can specify tweening between points by setting schedule_speed. This is used for repetitive motion, and is quite efficient.</td>
<td>v</td>
</tr>
<tr>
<td>schedule_speed</td>
<td>i</td>
<td>w</td>
<td>steps</td>
<td>Controls how many frames to tween between each point set in x_schedule and y_schedule.</td>
<td>v</td>
</tr>
<tr>
<td>shader</td>
<td>s</td>
<td>w</td>
<td>OpenGL shader</td>
<td>Specify an OpenGL shader to use. See <a href="https://github.com/frogatto/frogatto/commit/d9d130c2d4a579664acf9ede7b23cab14e48a04d">this commit</a> for an example.</td>
<td>?</td>
</tr>
<tr>
<td>slope_standing_on</td>
<td>i</td>
<td>r</td>
<td>degrees</td>
<td>The terrain slope the object is standing on, in degrees.</td>
<td></td>
</tr>
<tr>
<td>solid_dimensions_in</td>
<td>l</td>
<td>rw</td>
<td>string list</td>
<td>An object can be in many "solid" dimensions. It collides with objects in similar dimensions. A ~ means it only listens on the plane, it does not project itself on the plain.</td>
<td>?</td>
</tr>
<tr>
<td>solid_rect</td>
<td>l</td>
<td>w</td>
<td>px</td>
<td>The area of an object that is it's sacred own. No other object can occupy this spot.</td>
<td></td>
</tr>
<tr>
<td>sound_volume</td>
<td>i</td>
<td>rw</td>
<td>percentage</td>
<td>How loud should the sound from this object be?</td>
<td></td>
</tr>
<tr>
<td>spawned_children</td>
<td></td>
<td></td>
<td>custom_obj list</td>
<td>A list of objects that have been spawned by the current object. Details unknown.</td>
<td></td>
</tr>
<tr>
<td>springiness</td>
<td>i</td>
<td>rw</td>
<td>percentage</td>
<td>How high things bounce off the current object.</td>
<td></td>
</tr>
<tr>
<td>standing_on</td>
<td>o</td>
<td>r</td>
<td></td>
<td>Returns the name of the thing the current object is standing on.</td>
<td></td>
</tr>
<tr>
<td>stood_on</td>
<td>s</td>
<td>r</td>
<td>t/f</td>
<td>Is the object being stood on?</td>
<td></td>
</tr>
<tr>
<td>stood_on_by</td>
<td>o</td>
<td>r</td>
<td></td>
<td>The name of the thing that is standing on the current object.</td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>?</td>
</tr>
<tr>
<td>time_in_animation</td>
<td>i</td>
<td>r</td>
<td>ticks</td>
<td>How many logic cycles the object has been in the current animation.</td>
<td></td>
</tr>
<tr>
<td>tmp</td>
<td></td>
<td>rw</td>
<td></td>
<td>A temporary variable container. Used to set internal vars for the current object. Use with the dot operator, as in set(tmp.variable, 10). These values are _not_ saved.</td>
<td>v</td>
</tr>
<tr>
<td>traction</td>
<td>i</td>
<td>r</td>
<td>1000 = 100%</td>
<td>How strongly an object is able to accelerate itself in the x direction (does not affect y) when its feet are touching ground. Internally, it reduces or increases accel_x proportionally; a value of 500 will reduce an object's acceleration by half. (Note: <tt>traction_in_air</tt> and <tt>traction_in_water</tt> could reasonably be replaced by boolean flags, since any objects that travel between mediums generally change their type upon entering a new medium, which could provide a different numerical value if necessary.)</td>
<td></td>
</tr>
<tr>
<td>traction_in_air</td>
<td>i</td>
<td>r</td>
<td>1000 = 100%</td>
<td>Like <tt>traction</tt>, but affects an object regardless of whether its feet are touching the ground. Separate from traction, because fliers should always be able to propel themselves anywhere, but walkers should only be able to propel themselves on land. Not cumulative with <tt>traction.</tt>
</td>
<td></td>
</tr>
<tr>
<td>traction_in_water</td>
<td>i</td>
<td>r</td>
<td>1000 = 100%</td>
<td>Like <tt>traction</tt>, but affects an object only when underwater. Separate from <tt>traction_in_air</tt> because swimmers can propel themselves whilst their feet aren't touching the ground, but can only do so if underwater. Not cumulative with <tt>traction.</tt>
</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>s</td>
<td>r</td>
<td></td>
<td>'Type' is what the object is. black_ant is a type, as is frogatto_playable.</td>
<td>v</td>
</tr>
<tr>
<td>underwater</td>
<td>s</td>
<td>r</td>
<td>t/f</td>
<td>Returns true if the object is in water.</td>
<td></td>
</tr>
<tr>
<td>up</td>
<td>i</td>
<td>r</td>
<td><tt>-1,1</tt></td>
<td>Returns the negative value of <tt>down</tt>, which returns the value of <tt>upside_down</tt>.</td>
<td>?</td>
</tr>
<tr>
<td>upside_down</td>
<td>i</td>
<td>rw</td>
<td><tt>-1,1</tt></td>
<td>Objects flagged with this will automatically have their graphics vertically flipped; the person scripting the object is expected to query this value to change the physics. Because this value is just positive/negative, it's often directly useful in making that change, since multiplying vertical velocities (or quantities in general) by it correctly flips them.</td>
<td></td>
</tr>
<tr>
<td>variations</td>
<td>l</td>
<td>rw</td>
<td></td>
<td>A list of modes for the object. Variations contain a series of "overrides" for existing animations and event handlers, and can be used to "as a group", change how the object looks, and how it acts, to different sets of behavior. This is used, for example, to make frogatto's powerups and fat state easy to switch between.</td>
<td></td>
</tr>
<tr>
<td>vars</td>
<td></td>
<td>rw</td>
<td></td>
<td>A variable container. Used to set internal vars for the current object. Use with the dot operator, as in set(vars.variable, 10). These values are saved.</td>
<td></td>
</tr>
<tr>
<td>velocity_x</td>
<td>i</td>
<td>rw</td>
<td>cpx/frame</td>
<td>The horizontal velocity, a positive value being right and negative being left.</td>
<td>?</td>
</tr>
<tr>
<td>velocity_y</td>
<td>i</td>
<td>rw</td>
<td>cpx/frame</td>
<td>The vertical velocity, a positive value being down and negative being up.</td>
<td>?</td>
</tr>
<tr>
<td>vertex_shaders</td>
<td></td>
<td></td>
<td></td>
<td>Define OpenGL shaders and then have objects use those shaders when drawn.</td>
<td>?</td>
</tr>
<tr>
<td>x,y</td>
<td>d</td>
<td>rw</td>
<td>pixels</td>
<td>Level coordinates, in pixels. Note that each displayed pixel corresponds to four pixels of level coordinates (i.e. the coordinates have twice the resolution).</td>
<td>v</td>
</tr>
<tr>
<td>x_schedule, y_schedule</td>
<td>l</td>
<td>w</td>
<td>list of ints</td>
<td>When set, the object's x or y position will loop over this list, being set to each point. You can specify tweening between points by setting schedule_speed. This is used for repetitive motion, and is very efficient.</td>
<td>v</td>
</tr>
<tr>
<td>z or zorder</td>
<td>i</td>
<td>rw</td>
<td>int</td>
<td>Determines what order objects are drawn in; objects with a lower zorder are drawn behind objects with a higher zorder. Objects with equal zorders are sorted by their midpoint; those with a lower vertical midpoint are drawn behind those with a higher midpoint. (Note: although it has always been this way, this behavior should be made configurable-per-level, because the opposite is desirable for platformer objects with a small amount of perspective. The current behavior is ideal for zelda-style overhead views. See reverse_global_vertical_zordering.)</td>
<td></td>
</tr>
<tr>
<td>zsub_order</td>
<td>i</td>
<td>w</td>
<td>int</td>
<td>"second order z-sorting". Objects with equal zorders are normally sorted by their midpoint; this overrides that, and allows you to specify a draw order for objects within a given zorder. It works just like zorder in that higher values go in front, and lower values go behind. This is useless in the context of frogatto proper, but can be useful for mods in frogatto that pretend to have isometric 3d space, but don't actually simulate 3d height. An example of this is the current rpg mod, where it is used to hand-sort table decorations and such, where e.g. some unusual placements cause an object sitting on a table to be rendered behind the table. The reason this sorting is used is because we want to allow the same objects to be placed at (an illusion of) different heights; perhaps on the table, perhaps on the floor behind the table.</td>
<td></td>
</tr>
</tbody></table><p>See UnstateAssumptions for more information.</p><h3>
<a aria-hidden="true" class="anchor" href="#player-specific-properties" id="user-content-player-specific-properties"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Player-Specific Properties</h3><p>The played is defined by <tt>is_human=true</tt>.</p><table>
<tbody><tr>
<td>can_interact</td>
<td>i</td>
<td>r</td>
<td>boolean</td>
<td>Returns true(1) if the player can interact with an object. For example, on an iPhone, this is the check for the context interact button appearing.</td>
<td>v</td>
</tr>
<tr>
<td>difficulty</td>
<td>i</td>
<td>r</td>
<td>level</td>
<td>Difficulty level of the game. Starts at one.</td>
<td>v</td>
</tr>
<tr>
<td>ctrl_keys</td>
<td>l</td>
<td>r</td>
<td>mixed</td>
<td>When the user presses any key on the keyboard, as long as it is pressed it will appear in this list. (Note, of course, that most keyboards cheaped out on the detection circuits and will only register three to five simultaneous key presses.) If a character is alphanumeric, it is returned as a string. However, if it is a non-printable character, it is returned as an integer value.</td>
<td>t</td>
</tr>
<tr>
<td>ctrl_mice</td>
<td>l</td>
<td>r</td>
<td></td>
<td>Returns a list of lists. Each sub-list lists a mouse state as <tt>[x,y,button(,s)]</tt>. If more than one mouse button is pressed, then there is more than one button in the list. Generally, you would check for <tt>value in ctrl_mice[0]</tt> on a computer, but multi-touch systems will return several mice instead of just the zeroth mouse. <tt>value</tt> can be <tt>'left'</tt>, <tt>'right'</tt>, <tt>'middle'</tt>, <tt>'x1'</tt>, or <tt>'x2'</tt>. <tt>x</tt> and <tt>y</tt> are window coordinates, the upper left corner always being <tt>0,0</tt>. (See <a class="internal present" href="/Autofire/frogatto/wiki/level">level</a>.camera_position for the offset value.)</td>
<td>t</td>
</tr>
<tr>
<td>is_standing_on_platform</td>
<td>i</td>
<td>r</td>
<td>boolean</td>
<td>True(1) for any platform frogatto can down-jump from. This is the property that is checked for when drawing the down-jump button on iOS.</td>
<td>t</td>
</tr>
<tr>
<td>no_move_to_standing</td>
<td>b</td>
<td></td>
<td>boolean</td>
<td>If using teleport() while no_move_to_standing is true (or non-zero), rather than auto-positioning the player on the ground under/above the target, the player will appear at precisely the position of the destination object - e.g. this is useful if they need to fall out of a pipe or hole coming out of the ceiling. (See teleport function) While you can set this on any object, it only has an effect on the player object. (More specifically, the object getting teleported.)</td>
<td>v</td>
</tr>
<tr>
<td>underwater_controls</td>
<td>i</td>
<td>r</td>
<td>boolean</td>
<td>Returns true(1) if the player is underwater and needs different controls. For example, on an iPhone, this is the check for the swim buttons appearing.</td>
<td>v</td>
</tr>
</tbody></table>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>More help can be found via IRC, <a href="irc://irc.freenode.net/#frogatto" rel="nofollow">#Frogatto</a> on freenode.net. This wiki is not a complete reference.</p>

          </div>
        </div>
    </div>]