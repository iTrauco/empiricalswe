[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#initial-setup" id="user-content-initial-setup"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Initial Setup</h1>
<p>Cloning the skeleton is the first step to any build. While cloning be sure to specify whatever folder name is most relevant for you and your project. After cloning you will also need to remove the inner <code>.git</code> folder so the skeleton reverts to just being a plain folder again (and isn't pointing at the skeleton github repository any more). This will allow you to re-initialise git and point the folder at any repository you please. See the code below:</p>
<pre><code>git clone git@github.com:rehabstudio/fe-skeleton.git my-first-application;
cd ./my-first-application &amp;&amp; rm -rf ./.git
</code></pre>
<p>Now that you've cloned the skeleton and disassociated it with the remote repository you're ready to get node dependencies in place. The build chain that the skeleton offers is powered by various node packages which you'll need to have before attempting to use any of the skeletons functionality. Ensure you have the required node packages by running the following command:</p>
<pre><code>npm install;
</code></pre>
<p>The NPM installation of packages will take a varying amount of time (dependant on version of NPM and also connection speed). Once the packages have been downloaded, you're ready to start building your first application!</p>
<h1>
<a aria-hidden="true" class="anchor" href="#html" id="user-content-html"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>HTML</h1>
<p>Markup is the foundation of any front-end project and the skeleton gives you the ability to write HTML and have it served in the distributable folder (<code>dist/</code>).</p>
<p>Add the following markup into <code>html/index.html</code>:</p>
<pre><code>&lt;!doctype html&gt;
&lt;html lang="en"&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8" /&gt;
        &lt;title&gt;My First Application&lt;/title&gt;
        &lt;link href="/css/main.css" rel="stylesheet" /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;button class="js-test-button"&gt;Click Me&lt;/button&gt;
        &lt;script src="/js/main.js"&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>With this source file created lets get it copied into our <code>dist/</code> folder for serving. Run the following command to do so:</p>
<pre><code>gulp html;
</code></pre>
<p>In your project folder a newly created <code>dist/</code> folder should have appeared with an <code>index.html</code> contained within it. To serve your static files simply run the webserver via gulp with the following command:</p>
<pre><code>gulp server;
</code></pre>
<p>The gulp task should automatically open a tab in your browser and navigate to a localhost URL and port that's being used to serve the <code>dist/</code> folder, but if it hasn't, examine the terminal output where you should see the URL to use.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#css" id="user-content-css"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CSS</h1>
<p>The skeleton has a gulp task to compile SCSS into CSS. Let's start by having a stylesheet. Place the following code into <code>css/src/main.scss</code>:</p>
<pre><code>html,
body {
    background: #CCC;
}
</code></pre>
<p>Now we need to make the skeleton aware that the stylesheet is there and needs compiled. Open <code>run/config.js</code> and find the <code>taskConfiguration.styles.bundles</code> array. Add the following into the array:</p>
<pre><code>{ sourceFilePath: './css/src/main.scss', outputFileName: 'main' }
</code></pre>
<p>With the source file in place and the skeleton aware of the desired bundle, let's trigger the build:</p>
<p><code>gulp styles;</code></p>
<p>This will have compiled the styles and placed them into the <code>dist/</code> folder. If you refresh the page in your browser you should see CSS styles taking effect.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#js" id="user-content-js"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>JS</h1>
<p>JavaScript functionality is bundled and minified via Webpack. Let's add some interaction to the page. Create <code>js/src/main.js</code> and add the following to it:</p>
<pre><code>setTimeout(() =&gt; {
    console.info('Test log within an ES2015 arrow function.');
}, 0);

document.querySelector('.js-test-button').addEventListener('click', function() {
    alert('Hello World.');
}, false);
</code></pre>
<p>With source code in place we need to tell the skeleton where it is. Open the skeletons config file (<code>run/config.js</code>) and look for <code>taskConfiguration.scripts.webpackSettings</code>. This is where we'll inform webpack of the bundle needing built. Add the following to the <code>entry</code> object:</p>
<pre><code>   main: './js/src/main.js'
</code></pre>
<p>All that's left is to make the build tools compile the JS. You can do so with the following command:</p>
<pre><code>gulp scripts;
</code></pre>
<p>Refresh the page in your browser again and you should be able to see the console logging as well as have some click interaction on the button. Congratulations; you've now compiled and served your own HTML, CSS and JS!</p>

        </div>

    </div>]