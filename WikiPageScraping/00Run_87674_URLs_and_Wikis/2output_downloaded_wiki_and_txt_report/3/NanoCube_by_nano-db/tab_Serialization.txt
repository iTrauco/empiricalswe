[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#why-serialize" id="user-content-why-serialize"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Why serialize?</h1>
<p>The creation of a Nanocube is relatively long, but once in memory the serialization can be executed by depth-first parcourt of the data-structure. The main advantage of the serialization is to send a part to the client side to avoid numerous query on the server.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#serialization-structure" id="user-content-serialization-structure"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Serialization structure</h1>
<p>So that we can serialize the NanoCube, we'll need an arbitrary data structure that can be written into a file.</p>
<p>The <strong>5 first</strong> lines will contains some general information about the NanoCube:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>Name</td>
<td>String</td>
<td>Name of the cube</td>
</tr>
<tr>
<td>Count</td>
<td>Integer</td>
<td>Number of event stored in the cube</td>
</tr>
<tr>
<td>Localization Granularity</td>
<td>Integer</td>
<td>Quad-tree complexity of the location</td>
</tr>
<tr>
<td>Dimension</td>
<td>List(String)</td>
<td>List of the dimensions labels ordered</td>
</tr>
<tr>
<td>Mapping</td>
<td>JSON</td>
<td>Map(category name, key)</td>
</tr>
</tbody>
</table>
<p>The following lines will represent all the nodes/leafs composing the Nanocube structure. All group informations are separated by <code>|</code>. Line prefixed by <code>n</code> represent nodes of the Nanocudes, and lines prefixed by <code>t</code> represent leafs containing a summed time-serie.</p>
<p><strong>Node:</strong></p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>Prefix</td>
<td>String</td>
<td><code>n</code></td>
</tr>
<tr>
<td>Id</td>
<td>Integer</td>
<td>id of the node in the data-structure</td>
</tr>
<tr>
<td>Proper Children</td>
<td>Map(Key,Id)</td>
<td>Map linking proper node with key</td>
</tr>
<tr>
<td>Shared Children</td>
<td>Map(Key,Id)</td>
<td>Map linking shared node with key</td>
</tr>
<tr>
<td>Proper Content (Optional)</td>
<td>Id</td>
<td>Proper content Id</td>
</tr>
<tr>
<td>Shared Content (Optional)</td>
<td>Id</td>
<td>Shared content Id</td>
</tr>
</tbody>
</table>
<p><strong>Leaf:</strong></p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>Prefix</td>
<td>String</td>
<td><code>t</code></td>
</tr>
<tr>
<td>Id</td>
<td>Integer</td>
<td>id of the node in the data-structure</td>
</tr>
<tr>
<td>Start Time</td>
<td>Datetime</td>
<td>Starting date of the time serie table</td>
</tr>
<tr>
<td>Table</td>
<td>List(Time diff)</td>
<td>List of count difference</td>
</tr>
</tbody>
</table>

        </div>

    </div>]