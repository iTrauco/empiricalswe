[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Go Endpoints has its own field tag <code>endpoints</code> which you can use to let your clients know what a service method data constraints are (on input):</p>
<ul>
<li>
<code>req</code>, means "required". Validation will fail if the value equals the zero value of the type.</li>
<li>
<code>d</code>, default value, cannot be used together with <code>req</code>.</li>
<li>
<code>min</code> and <code>max</code> constraints. Can be used only on <code>int</code> and <code>uint</code> (8/16/32/64 bits) and strings.</li>
<li>
<code>desc</code>, a field description. Cannot contain a <code>,</code> (comma) for now.</li>
</ul>
<p>Let's see an example:</p>
<div class="highlight highlight-source-go"><pre><span class="pl-k">type</span> <span class="pl-v">TaggedStruct</span> <span class="pl-k">struct</span> {
    <span class="pl-v">A</span> <span class="pl-k">int</span>    <span class="pl-s"><span class="pl-pds">`</span>endpoints:"req,min=0,max=100,desc=An int field"<span class="pl-pds">`</span></span>
    <span class="pl-v">B</span> <span class="pl-k">int</span>    <span class="pl-s"><span class="pl-pds">`</span>endpoints:"d=10,min=1,max=200"<span class="pl-pds">`</span></span>
    <span class="pl-v">C</span> <span class="pl-k">string</span> <span class="pl-s"><span class="pl-pds">`</span>endpoints:"req,d=Hello gopher,desc=A string field"<span class="pl-pds">`</span></span>
}</pre></div>
<ul>
<li>
<code>A</code> field is <code>required</code> and has <code>min</code> &amp; <code>max</code> constrains, is described as <code>"An int field"</code>
</li>
<li>
<code>B</code> field is not required, <code>defaults</code> to 10 and has <code>min</code> &amp; <code>max</code> constrains</li>
<li>
<code>C</code> field is <code>required</code>, <code>defaults</code> to <code>"Hello gopher"</code>, is described as <code>"A string field"</code>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#json-tag-and-path-templates" id="user-content-json-tag-and-path-templates"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>JSON tag and path templates</h2>
<p>You can use JSON tags to shape your service method's response (the output).</p>
<p>Endpoints will honor Go's <code>encoding/json</code> <a href="http://golang.org/pkg/encoding/json/#Marshal" rel="nofollow">marshaling rules</a>, which means having this struct:</p>
<div class="highlight highlight-source-go"><pre><span class="pl-k">type</span> <span class="pl-v">TaggedStruct</span> <span class="pl-k">struct</span> {
    <span class="pl-v">A</span>       <span class="pl-k">int</span>
    <span class="pl-v">B</span>       <span class="pl-k">int</span>    <span class="pl-s"><span class="pl-pds">`</span>json:"myB"<span class="pl-pds">`</span></span>
    <span class="pl-v">C</span>       <span class="pl-k">string</span> <span class="pl-s"><span class="pl-pds">`</span>json:"c"<span class="pl-pds">`</span></span>
    <span class="pl-v">Skipped</span> <span class="pl-k">int</span>    <span class="pl-s"><span class="pl-pds">`</span>json:"-"<span class="pl-pds">`</span></span>
}</pre></div>
<p>a service method path template could then look like:</p>
<pre><code>some/path/{A}/other/{c}/{myB}
</code></pre>
<p>Notice, the names are case-sensitive.</p>
<p>Naturally, you can combine <code>json</code> and <code>endpoints</code> tags to use a struct for both input and output:</p>
<div class="highlight highlight-source-go"><pre><span class="pl-k">type</span> <span class="pl-v">TaggedStruct</span> <span class="pl-k">struct</span> {
    <span class="pl-v">A</span>       <span class="pl-k">int</span>    <span class="pl-s"><span class="pl-pds">`</span>endpoints:"req,min=0,max=100,desc=An int field"<span class="pl-pds">`</span></span>
    <span class="pl-v">B</span>       <span class="pl-k">int</span>    <span class="pl-s"><span class="pl-pds">`</span>json:"myB" endpoints:"d=10,min=1,max=200"<span class="pl-pds">`</span></span>
    <span class="pl-v">C</span>       <span class="pl-k">string</span> <span class="pl-s"><span class="pl-pds">`</span>json:"c" endpoints:"req,d=Hello gopher,desc=A string field"<span class="pl-pds">`</span></span>
    <span class="pl-v">Skipped</span> <span class="pl-k">int</span>    <span class="pl-s"><span class="pl-pds">`</span>json:"-"<span class="pl-pds">`</span></span>
}</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#long-integers-int64-uint64" id="user-content-long-integers-int64-uint64"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Long integers (int64, uint64)</h2>
<p>As per <a href="https://developers.google.com/discovery/v1/type-format" rel="nofollow">Type and Format Summary</a>:</p>
<blockquote>
<p>a 64-bit integer cannot be represented in JSON (since JavaScript and JSON support integers up to 2^53). Therefore, a 64-bit integer must be represented as a string in JSON requests/responses</p>
</blockquote>
<p>In this case, it is sufficient to append <code>,string</code> to the json tag:</p>
<div class="highlight highlight-source-go"><pre><span class="pl-k">type</span> <span class="pl-v">Int64Struct</span> <span class="pl-k">struct</span> {
  <span class="pl-v">Id</span> <span class="pl-k">int64</span> <span class="pl-s"><span class="pl-pds">`</span>json:",string"<span class="pl-pds">`</span></span>
}</pre></div>

        </div>

    </div>]