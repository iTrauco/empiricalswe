[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p><img alt="" src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/header.png"/></p>
<h1>
<a aria-hidden="true" class="anchor" href="#introduction" id="user-content-introduction"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Introduction</h1>
<p>Atomic development builds can be used to work on the Atomic Game Engine itself as well as when debugging Atomic C++ projects.</p>
<p>If you're primarily interested in trying out or testing the latest features, please see <a href="Building-Atomic-from-Source">Building Atomic The Quick and Easy Way</a> for a simpler method to compiling the engine.</p>
<p><strong>Jump to:</strong></p>
<ul>
<li>
<p><a href="How-to-set-up-a-Debug-Development-Build#setting-up-a-development-build-with-visual-studio"><strong>Visual Studio on Windows</strong></a></p>
</li>
<li>
<p><a href="How-to-set-up-a-Debug-Development-Build#setting-up-a-development-build-with-qtcreator"><strong>QtCreator on Linux and macOS</strong></a></p>
</li>
<li>
<p><strong>XCode</strong> - It is possible to use XCode, though a guide needs to be written. Hint: <code>./CMake_XCode.sh</code> in the root of the repository with XCode and CMake installed and then open the generated project</p>
</li>
</ul>
<hr/>
<h2>
<a aria-hidden="true" class="anchor" href="#clone-the-repository-for-all-platforms" id="user-content-clone-the-repository-for-all-platforms"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Clone the repository (for all platforms)</h2>
<p>Before we can build the engine, we need to clone the repository recursively. To do this, you must have <code>git</code> installed.  To clone the repository, use this command:</p>
<pre><code>git clone --recursive https://github.com/AtomicGameEngine/AtomicGameEngine
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#setting-up-a-development-build-with-visual-studio" id="user-content-setting-up-a-development-build-with-visual-studio"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Setting up a development build with Visual Studio</h2>
<p><strong>Install Visual Studio</strong></p>
<p>You may either install Visual Studio 2015 or 2017 - they can both be downloaded from <a href="https://www.visualstudio.com/downloads/" rel="nofollow">https://www.visualstudio.com/downloads/</a>.</p>
<ul>
<li>
<p>Make sure to install the C++ compiler and optionally the C# tools and Xamarin for mobile development</p>
</li>
<li>
<p>For VS2015, you also need CMake installed which can be downloaded from <a href="https://cmake.org/download/" rel="nofollow">https://cmake.org/download/</a>. In the installer, make sure you allow it to add itself to <code>PATH</code></p>
</li>
</ul>
<p><strong>Configure the project</strong></p>
<p>Open <code>cmd</code> and change directory to the root of the repository you just pulled down:</p>
<pre><code>cd C:\Users\User\path_to_repository
</code></pre>
<p>Now, type in <code>CMake_VS2015.bat</code> or <code>CMake_VS2017.bat</code> depending on the version of Visual Studio you have. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/cmdCommands.png" vspace="10"/> <br/>
When it's finished, it'll have created a new folder for you in the same location as the root repository folder. If this is not the case, see <a href="CMake-Issues">CMake Issues</a>. From here, open <code>Atomic.sln</code> with Visual Studio. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/folderLayout.png" vspace="10"/> <br/>
Once the solution is prepared for you, set <code>AtomicEditor</code> as the startup project. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/vsStartupProject.png" vspace="10"/> <br/>
Build the solution by navigating to <code>Build &gt; Build Solution</code> or using <code>F6</code>. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/vsBuildSolution.png" vspace="10"/> <br/></p>
<p><strong>Start debugging</strong><br/>
Once the build is complete, open the source file you want to debug and set a <em>breakpoint</em> by clicking on a line of code in the left gutter.<br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/vsStartDebugging.png" vspace="10"/> <br/>
Now, you can start debugging the project by navigating to <code>Debug &gt; Start Debugging</code> or using <code>F5</code>.<br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/vsRunDebug.png" vspace="10"/><br/>
Visual Studio should now start debugging the engine. Once the breakpoint has been hit, you'll be able to inspect variables and view the callstack.<br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/vsVariablesCallstack.png" vspace="10"/></p>
<p><strong>Debugging a C++ Atomic Project</strong></p>
<p>You can also debug an Atomic project by launching the editor in player mode. To do so, navigate to the project properties and add the <code>--player</code> and <code>--project</code> flag followed by the absolute path to your project. Ensure that you have loaded the project at least once into the editor first, to generate the cache. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/vsAddArgument.png" vspace="10"/></p>
<hr/>
<h2>
<a aria-hidden="true" class="anchor" href="#setting-up-a-development-build-with-qtcreator" id="user-content-setting-up-a-development-build-with-qtcreator"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Setting up a development build with QtCreator</h2>
<p>These instructions can be used to setup a development build on macOS and Linux.</p>
<p><strong>Install QtCreator</strong><br/>
First, install QtCreator, which can be downloaded from <a href="https://www.qt.io/download/" rel="nofollow">https://www.qt.io/download/</a>. (You may install it without a runtime, since it won't be necessary in this case)</p>
<p><strong>Configure the project</strong></p>
<p>Open QtCreator and select <code>File &gt; Open File or Project</code>. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/qtOpenProject.png" vspace="10"/> <br/>
Navigate to the root of the repository you just pulled down, and open <code>CMakeLists.txt</code>. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/qtSelectCMakeLists.png" vspace="10"/> <br/>
At this point, leave everything as-is and click <code>Configure Project</code>. <br/>
Wait until QtCreator is finished setting up the project for you. Now, in order to speed up compilation time, navigate to <code>Project &gt; Build Steps</code> and add the <code>-j4</code> argument. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/qtAddArgument.gif" vspace="10"/> <br/>
<strong>Start debugging</strong> <br/>
Select <code>Debug</code> and choose <code>Atomic Editor</code> in the lower left of QtCreator. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/qtDebugMode.png" vspace="10"/> <br/>
Build the project by navigating to <code>Build &gt; Build All</code> or using <code>CMD</code>/<code>CTRL + SHIFT + B</code>.
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/qtBuild.png" vspace="10"/> <br/>
Navigate to whatever file you'd like to debug and create a <em>breakpoint</em> by clicking a line of code in the left gutter.
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/qtBreakpoint.png" vspace="10"/> <br/>
Finally, you can start debugging the engine by navigating to <code>Debug &gt; Start Debugging</code> or using <code>F5</code>. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/qtStartDebugging.png" vspace="10"/> <br/>
QTCreator should start debugging for you, and once the breakpoint has been hit, you will be able to inspect variables and view the callstack. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/qtVariablesCallstack.png" vspace="10"/></p>
<p><strong>Debugging a C++ Atomic Project</strong></p>
<p>You can also debug an Atomic project by launching the editor in player mode. To do so, select the <code>Project</code> tab on the left and under the <code>Run</code> settings, add the <code>--player</code> and <code>--project</code> flag followed by the absolute path to your project. Ensure that you have loaded the project at least once into the editor first, to generate the cache. <br/>
<img src="images/repo/setting-up-atomic/how-to-set-up-a-debug-development-build/qtRunSettings.png" vspace="10"/> <br/></p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><img align="left" data-canonical-src="https://atomicwiki.us/atomicwiki_imgs/atomicLogo.png" height="22" src="https://camo.githubusercontent.com/221d0a11732835c9763ed76a29958208a863bdfd/68747470733a2f2f61746f6d696377696b692e75732f61746f6d696377696b695f696d67732f61746f6d69634c6f676f2e706e67"/><a href="https://github.com/AtomicGameEngine/AtomicGameEngine/wiki">Home</a> | Copyright (c) 2014 - 2017 THUNDERBEAST GAMES LLC</p>

          </div>
        </div>
    </div>]