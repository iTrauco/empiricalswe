[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Back to <a href="Getting-Started">Getting Started</a></p>
<p><img alt="" src="https://raw.githubusercontent.com/wiki/AtomicGameEngine/AtomicGameEngine/images/repo/scripting/basics-scripting-in-csharp/header.png"/></p>
<h2>
<a aria-hidden="true" class="anchor" href="#basic-scripting-in-csharp" id="user-content-basic-scripting-in-csharp"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Basic scripting in CSharp</h2>
<p>In this article, we'll be using C# to move a <a href="node">node</a> at runtime when a key is pressed on the keyboard.<br/>
Before we dive in, make sure you've got what is needed to proceed with C#: <br/></p>
<p><strong>1) A copy of Visual Studio 2015 or 2017 RC</strong> (with C# features installed) <br/>
<strong>2) A project in the Atomic Game Engine</strong> (read more <a href="https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/The-Atomic-Editor#creating-a-new-project">here</a>)</p>
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#so-how-does-it-work" id="user-content-so-how-does-it-work"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>So, how does it work?</h3>
<p>When working with code, you're either working with <strong>Scripts</strong> or <em>Logic</em> <strong>Components</strong>. Where you'd usually use Scripts with the back-end of your project, Logic Components are used as attachments to nodes. You can read more about components in general <a href="components">here</a>. <br/>
In this article, we will create a Logic Component and attach it to a node. In that Logic Component, we will instruct the node to move position when a key is pressed on the keyboard.</p>
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#getting-started" id="user-content-getting-started"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting started</h3>
<p>I created a project in the Atomic Game Engine using the Basic3D example. You may do so also, but you can use any other project as well. <br/>
<img src="https://raw.githubusercontent.com/wiki/AtomicGameEngine/AtomicGameEngine/images/repo/scripting/basics-scripting-in-csharp/projectOverview.png" vspace="25"/> <br/>
&lt;img src="<a href="https://raw.githubusercontent.com/wiki/AtomicGameEngine/AtomicGameEngine/images/repo/scripting/basics-scripting-in-csharp/createComponent.PNG" rel="nofollow">https://raw.githubusercontent.com/wiki/AtomicGameEngine/AtomicGameEngine/images/repo/scripting/basics-scripting-in-csharp/createComponent.PNG</a>" align="left" width="312" vspace"10"&gt;<strong>Creating a new component</strong><br/> Now, in the <a href="https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/The-Atomic-Editor#opening-a-project">Project Section</a>, right click on <code>Resources &gt; Components</code> and click <code>Create Component</code>. You will be prompted to name this new component of yours. In this case I'll name mine "moveChest", but you may call it whatever you like. Where it says <code>Component Template</code>, make sure to pick <code>Basic - C#</code>, as that'll be the language we'll be working with.<br/><br/></p>
<img align="left" height="208" src="https://raw.githubusercontent.com/wiki/AtomicGameEngine/AtomicGameEngine/images/repo/scripting/basics-scripting-in-csharp/componentAdded.png"/>
**Opening it in Visual Studio**<br/>The Project Section should now list the newly created component in the folder you created it in (in my case, it is the `Components` folder). Visual Studio might also have opened your new component up automatically since this type of component is a `.cs` file. If not, click on the component in the Project Section, and Visual Studio will boot it up for ya.
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#start-coding" id="user-content-start-coding"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Start coding</h3>
<p>Now that our component is ready to use, let's start coding. Since we chose the <code>Basic - C#</code> template, the code should currently look like this: <br/></p>
<pre><code>using System;
using AtomicEngine;

public class Component : CSComponent
{

    void Update(float timeStep)
    {

    }

}
</code></pre>
<p>If you're just a bit familiar with programming, you'll have an idea of what's up here. But if you do not, fear not, it's not as bad as it looks. Don't worry too much about what is going on here, we'll be focusing mostly on what happens here: <br/></p>
<pre><code>void Update(float timeStep)
    {

    }
</code></pre>
<p>Whatever goes inside these two curly braces "<code>{ }</code>" will be updated at every frame at runtime - which basically means all the time. So let's add instructions inside of here that, all the time, checks if a key is being pressed - and if so, then moves the node that this component is attached to (we will attach this component to a node later on). <br/><br/>
But first of all, we need to tell Atomic what keyboard input is. And this doesn't have to happen every frame, so let's add that line of code just above where it says <code>void Update(float timeStep)</code>. <br/></p>
<pre><code>Input input = AtomicNET.GetSubsystem&lt;Input&gt;();
</code></pre>
<p>So your code should look something like this now:</p>
<pre><code>using System;
using AtomicEngine;

public class Component : CSComponent
{
    Input input = AtomicNET.GetSubsystem&lt;Input&gt;();
    void Update(float timeStep)
    {

    }

}
</code></pre>
<p><code>Input</code> is a type of variable, just like an integer or a float. Then we name that variable <code>input</code>, and that variable is equal to an internal subsystem called <code>Input</code>. When we access this variable, it will allow us to access that subsystem, and then use its functions - checking whether a key is down or not, for example. <br/><br/>
Now, inside of the <code>void Update(float timeStep)</code> curly braces, let's make magic happen. First, we need to check whether or not a key is being held down on the keyboard:</p>
<pre><code>if ( input.GetKeyDown(Constants.KEY_D) )
        {

        }
</code></pre>
<p>Here, we access the variable named <code>input</code> we just created, and access one of its functions called <a href="http://docs.atomicgameengine.com/csharp/AtomicEngine/Input.html#M:AtomicEngine.Input.GetKeyDown(System.Int32)" rel="nofollow">GetKeyDown</a>. This function checks whether a key is being held down or not - there is also another function called <a href="http://docs.atomicgameengine.com/csharp/AtomicEngine/Input.html#M:AtomicEngine.Input.GetKeyPress(System.Int32)" rel="nofollow">GetKeyPress</a>, but that only returns true once, while <code>GetKeyDown</code> keeps returning true while a key is being held down. <br/>
Then we access something called <code>Constants</code> and specify the keyboard key we would like to monitor - in this case, the "D" key. <br/><br/>
Now, inside of these newly created curly braces in the <code>if</code> statement, we'll tell Atomic to move the node. We do it like this:</p>
<pre><code>Node.Translate(new Vector3(0.1f, 0f, 0f));
</code></pre>
<p>We access the <code>Node</code> that this component is attached to (we haven't attached it yet, but will do so later), and then tells it to <a href="http://docs.atomicgameengine.com/csharp/AtomicEngine/Node.html#M:AtomicEngine.Node.Translate(AtomicEngine.Vector3,AtomicEngine.TransformSpace)" rel="nofollow">translate</a>. The <code>translate</code> method requires a <a href="http://docs.atomicgameengine.com/csharp/AtomicEngine/Vector3.html" rel="nofollow">Vector3</a>, so we're making a new one and giving it some values.<br/><br/>Now your code should look similar to this:</p>
<pre><code>using System;
using AtomicEngine;

public class Component : CSComponent
{
    Input input = AtomicNET.GetSubsystem&lt;Input&gt;();
    void Update(float timeStep)
    {
        if ( input.GetKeyDown(Constants.KEY_D) )
        {
            Node.Translate(new Vector3(0.1f, 0f, 0f));
        }
    }

}
</code></pre>
<p>And that's it. <br/><br/>
To test our new code, you can either run it directly from within Visual Studio by clicking "Start" in the upper toolbar or by running it from inside of Atomic. You may have to compile it inside of Atomic first however, by using <code>Developer &gt; Plugins &gt; AtomicNET &gt; Compile Project</code>. <br/></p>
<blockquote>
<p><strong>(!)</strong> If Visual Studio tells you that "A Project with an Output Type of Class Library cannot be started directly", right click on <code>ProjectName.Desktop</code> in the Solution Explorer and select <code>Set as StartUp project</code>.<br/></p>
</blockquote>
<p>But it doesn't work!<br/>
And that's because of a few things that we haven't done yet. First of all, inside your component script, change <code>public class Component : CSComponent</code> to <code>public class moveChest : CSComponent</code> or whatever you named the component. Second of all, we need to attach the component to a node - otherwise the component isn't used by anything.<br/></p>
<p>In the Atomic Editor, select the desired node, create a <code>CSComponent</code> and type in the name of the component in the "class" field.</p>
<img src="https://raw.githubusercontent.com/wiki/AtomicGameEngine/AtomicGameEngine/images/repo/scripting/basics-scripting-in-csharp/attachComponent.png"/>
<p>And now, when running the project, you should be able to press "D" to make the node move. Notice that this chest also has the default "Spinner" component attached, so it's also spinning.<br/></p>
<img src="https://raw.githubusercontent.com/wiki/AtomicGameEngine/AtomicGameEngine/images/repo/scripting/basics-scripting-in-csharp/result.gif"/>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><img align="left" data-canonical-src="https://atomicwiki.us/atomicwiki_imgs/atomicLogo.png" height="22" src="https://camo.githubusercontent.com/221d0a11732835c9763ed76a29958208a863bdfd/68747470733a2f2f61746f6d696377696b692e75732f61746f6d696377696b695f696d67732f61746f6d69634c6f676f2e706e67"/><a href="https://github.com/AtomicGameEngine/AtomicGameEngine/wiki">Home</a> | Copyright (c) 2014 - 2017 THUNDERBEAST GAMES LLC</p>

          </div>
        </div>
    </div>]