[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>#LAN.Core.Eventing.SignalR</p>
<p>##3.3.2.0
BUGFIX: Errors will now get returned to the UI as intended.</p>
<p>##3.1.1.0
Adding a bunch XML of documentation, for better intellisense.</p>
<p>##3.1.0.0
Changed signature of all <code>IMessagingContext</code> members to have generic type, to allow for better targeting with Moq and other Mocking libraries.</p>
<p>Added <code>AssociatedEventName</code> property to the <code>SignalRExceptionEventArgs</code>, "OnConnected" and "OnDisconnected" are the value found when the exception occurred outside of the context of event processing.</p>
<p>##3.0.0.0
<code>ISignalRGroupRegistrar</code> renamed <code>IGroupRegistrar</code> and moved to the <code>LAN.Core.Eventing</code> for consistency.</p>
<p>Signature of <code>IGroupRegistrar</code> has changed to provide <code>principle</code> instead of the <code>userName</code>.  You can get some help with casting if you inherit from <code>GroupRegistrarBase&lt;TPrinciple&gt;</code></p>
<p><code>IMessagingContext</code> - All methods now return a running task that can be awaited, or left to run.</p>
<p><code>HandlerBase&lt;TReq, TPrinciple&gt;</code> maintains current functionality, however there is now also an option for <code>AsyncHandlerBase&lt;TReq, TPrinciple&gt;</code>, that gives you an API that dovetails well with the async API changes that several .Net projects have adopted.</p>
<p>##2.2.0.0
Migrating over to the async signature for OnConnect/OnDisconnect - This gives us more consistent behavior when tasks are long running.</p>

        </div>

    </div>]