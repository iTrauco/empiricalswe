[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#subclassing-api-methods" id="user-content-subclassing-api-methods"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Subclassing API methods</h3>
<p>One way to extend or alter the functionality of ChemBio Hub is to subclass the API methods.</p>
<p>Here follows a short guide to doing this:</p>
<p>If you wish for your new method to overwrite existing functionality, follow these steps:</p>
<ol>
<li>
<p>Create a new deployment app in django by copying our "<a href="https://github.com/thesgc/chembiohub_ws/tree/master/example_custom_deployment">example custom deployment folder</a>"</p>
</li>
<li>
<p><a href="https://github.com/thesgc/chembiohub_ws/blob/master/example_custom_deployment/urls.py#L4">Import the default urls.py configuration</a> into your urls.py function</p>
</li>
<li>
<p><a href="https://github.com/thesgc/chembiohub_ws/blob/master/example_custom_deployment/resources.py#L46">Create a new class overriding one or more of the base classes API functions</a> or <a href="http://django-tastypie.readthedocs.org/en/latest/resources.html#advanced-data-preparation" rel="nofollow">the default api functions of tastypie</a>.</p>
</li>
<li>
<p>Import this new class to your urls.py and <a href="https://github.com/thesgc/chembiohub_ws/blob/master/example_custom_deployment/urls.py#L10">declare its URLs using the tastypie Api class</a>.</p>
</li>
<li>
<p>Prepend your new URLs tuple to the original API URLs. Because <a href="https://docs.djangoproject.com/es/1.9/topics/http/urls/#how-django-processes-a-request" rel="nofollow">django matches URLs in order they are declared</a>, you will now have overwrittten the original compounds api URLs.</p>
</li>
<li>
<p>Declare this url conf as the root url conf for the whole application in your own settings file.</p>
</li>
<li>
<p>Set the DJANGO_SETTINGS_MODULE environment variable for all the processes being started by supervisor and add it to you ~/.bashrc. This will ensure that you are loading this settings file when you run manage.py commands.</p>
</li>
</ol>
<h3>
<a aria-hidden="true" class="anchor" href="#calling-api-methods-during-other-python-functions" id="user-content-calling-api-methods-during-other-python-functions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Calling API methods during other python functions</h3>
<p>Tastypie API functions tend to require a HTTPRequest in order to be run programatically. If you have one from a user request then you can just use request.copy() as shown in <a href="https://github.com/thesgc/chembiohub_ws/blob/master/example_custom_deployment/resources.py#L50">this example</a>.</p>
<p>In other use cases such as backend management commands then the HTTPRequest can be <a href="https://github.com/thesgc/chembiohub_ws/blob/master/cbh_chem_api/resources.py#L565">generated programatically</a>.</p>
<p>If a specific (e.g. superuser) instance is required to be logged in and attached to the request then this can be achieved using the <a href="https://docs.djangoproject.com/en/1.9/topics/testing/advanced/#the-request-factory" rel="nofollow">django requestfactory</a>.</p>
<p>Alternatively, API key authentication can be enabled for tastypie and an API key created each time a user is added <a href="http://django-tastypie.readthedocs.org/en/latest/authentication.html#apikeyauthentication" rel="nofollow">as shown here</a>.</p>

        </div>

    </div>]