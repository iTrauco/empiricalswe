[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Below is a list of the module folder structure of the project and the function of each module folder</p>
<pre><code>.
├── anaconda_requirements.txt      The dependencies installed by anaconda 
|                                  (other dependencies are installed using pip)
|
├── cbh_chem_api                   The new API for registration and search 
|                                  of compound batches for chemical or inventory
|
├── cbh_chembl_id_generator        To be removed - experimental plugins
|
├── cbh_chembl_model_extension     Link to the compound batch api models
|
├── cbh_core_api                   Link to Core API which handles requests 
|                                  for projects, users and the data schema 
|
├── cbh_core_model                 Link to Core models which handle database 
|                                  access for projects and the data schema 
|
├── cbh_tests                      Behaviour driven development tests 
|                                  which provide end to end testing of the APIs
|
├── cbh_utils                      Utility functions for accessing elasticsearch            
|
├── chembl_business_model          Link to che chembl business model 
|                                  which is the implementation of the chembl 
|                                  database models used by ChemBio Hub 
|                                  because it contains useful data processing functions
|
├── chembl_core_db                 Link to Chembl Core DB - the manager 
|                                  methods and django fields used to provide oracle 
|                                  compatibility and structure search
|
├── chembl_core_model              Link to the abstract implementation of the chembl 
|                                  database access code, cannot be used in isolation, 
|                                  it is here so Chembl can have the same model with 
|                                  different numbers of fields in different circumstances
|
├── chembl_extras                  Chembl Extras - management commands originally 
|                                  used as part of the chembl database setup to be removed
|
├── deployment                     Settings and URL config required to deploy the app
|
├── example_custom_deployment      An examople app to show how to override the compound api
|
├── fabfile.py
|
├── flowjs                         A link to the file management app flowjs - to be deprecated
|
├── LICENSE
├── pip_requirements.txt           The pip requirements (for which conda packages do not exist)
├── README.md
├── scripts                        Installation scripts
|
└── src                            Location of the subrepositories 
    |                              (cannot be in root folder as code is in a deeper subfolder
    └── ng-chem                           Front end code
        ├── app
        ├── bower_components
        ├── dist
        ├── node_modules
        └── test
</code></pre>
<p>###Controllers</p>
<p>Controller files at app/scripts/controllers</p>
<p>**AddCompoundsCtrl **- addcompounds.js</p>
<p>This controller is used to manage adding items to the system. It provides methods for the addition single page app and manages the flow of file upload, checking chemical data, storing temporary compound data (for editing via the system before final registration), sorting and filtering file content previews, reporting errors and warnings and submitting data to the server.</p>
<p>**AddSingleCompoundCtrl **- addsinglecompound.js</p>
<p>This controller is used to power the registration of compounds via the Chemdoodle sketcher. It creates a batch containing a single record, mirroring an SD file containing one record, so that the same validation, temporary data  and saving pathways can be used.</p>
<p>**BatchesCtrl **- batches.js - NOT USED / DEPRECATED</p>
<p>**CompoundbatchCtrl **- compoundbatch.js</p>
<p>This controller handles edit functionality and result retrieval within the compound search page. It is the backing for the tables displaying search results, and handles switching to edit mode (and saving changes) and archive mode, along with pagination, filter and sort functionality, as well as applying search form selections and parameters to the displayed results.</p>
<p>**PlatemapCtrl **- platemap.js</p>
<p>This is used to control Plate Map functionality - users can define some required parameters to set up their plate, then sequentially add data to each well. It is intended to link added records by their system ID to a particular plate for an overview.</p>
<p>**ProjectCtrl **- project.js</p>
<p>This controller is used to fetch the appropriate projects for the given user for display on the project list page. It is essentially a holder for the appropriate angular services.</p>
<p>**ProjectfieldsCtrl **- projectfields.js</p>
<p>This controller is used for the project setup functionality (adding and editing projects through the user interface).</p>
<p>**ProjectpermissionsCtrl **- projectpermissions.js</p>
<p>This controller is used to fetch and initiate changes to project permissions for the UI admin tasks. It utilises a number of services to perform these tasks.</p>
<p>**SearchCtrl **- search.js</p>
<p>This controller is responsible for fetching data to construct the search form for ChemiReg. It initialises the search and handles all of the search form changes - calls to update the results are broadcast around the application. It also handles the saved search functionality within the search page.</p>
<p>**SinglemolCtrl **- singlemol.js</p>
<p>This controller handles fetching, editing and cloning data for viewing a single record within a modal window (which has its own route).</p>
<p>###Directives</p>
<p>Directive files at app/scripts/directives</p>
<p>**chemdoodleWindow **- chemdoodlewindow.js</p>
<p>This directive is used to provide access to the ChemDoodle sketcher window by acting as a wrapper for the required  element and to allow structural information to be passed to a new structure record, or to a search page form, in ctab / SD format using ChemDoodle's built in functionality. It also enables auto-resizing to fit the space allocated on the page and re-sizing as the window dimensions change.</p>
<p>**chemsvg **- chemsvg.js (is this still being used?)</p>
<p>This directive provides a wrapper to allow dynamic lookup of image data for a chemical structure based on ID or ctab / SD format data.</p>
<p><strong>compoundtableheader</strong>.js - NOT BEING USED / DEPRECATED</p>
<p>**disableAnimation **- diableanimation.js</p>
<p>A small utility directive to prevent animations being run on a specified element for performance or blocking reasons.</p>
<p><strong>dynamic</strong>.js - NOT BEING USED / DEPRECATED</p>
<p>**handsoncompoundtable **- handsoncompoundtable.js</p>
<p>This directive is used to add extra functionality to the handsontable js library. Note we are not using the angular-specific ng-handsontable version since it is using an older version of handsontable.js.</p>
<p>The directive configures column and datatype handlers for some of the different content types used within the application, some of which are chemical specific or offer more complicated functionality. Mostly though they are provided types within handsontable.js</p>
<p>The directive allows injection of chemical search data to a table which can be set as editable and includes drag-to-fill functionality.</p>
<p>**platemap **- platemap.js</p>
<p>This directive is used to provide the functionality around the actual platemaps within the system - adding data to wells, providing the template, building well config into a created whole-plate record etc. The platemap page controller is used to save data to the system.</p>
<p><strong>processstep</strong>.js -NOT BEING USED / DEPRECATED</p>
<p>**projectlist **- projectlist.js</p>
<p>Wrapper directive for listing projects available to the user across the application. It also holds a function to add colour to svg icons in the page based on class name.</p>
<p>###Filters</p>
<p>Filter files at app/scripts/filters</p>
<p>notempty.js</p>
<p>Custom filter for determining whether a JSON object which exists contains any sub data.</p>
<p>removeSpaces.js</p>
<p>Custom filter for converting spaces in inputted text into <strong>space</strong> for the creation of unique identifiers.</p>
<p>titlecase.js</p>
<p>Custom filter for converting text passages to title case, for printing field titles.</p>
<p>totrusted.js - NOT BEING USED / DEPRECATED</p>
<p>###Services and Factories</p>
<p>Service and Factory files at app/scripts/services</p>
<p>CBHCompoundBatch - cbhcompoundbatch.js</p>
<p>Service to provide interface to web API for adding and saving new data records into the system as well as validation of input, editing existing records, performing archiving. This service also provides the interface to the search APIs.</p>
<p>chembl.js - NOT BEING USED / DEPRECATED</p>
<p>chemfilevalidation.js - NOT BEING USED / DEPRECATED</p>
<p>chemicalSearch - chemicalsearch.js</p>
<p>Service for interfacing with chemistry-specific search API. Chemical searches are performed separately to other types of search because they do not go directly through elasticsearch.</p>
<p>compoundlistsetup.js - NOT BEING USED / DEPRECATED</p>
<p>customfieldconfig.js - NOT BEING USED / DEPRECATED</p>
<p>draft.js - NOT BEING USED / DEPRECATED</p>
<p>FlowFileFactory - flowfilefactory.js</p>
<p>Service to allow access to APIs for uploading files via the FlowFile system (allows checking for duplicates, progress indicator, chunked uploads etc.) through their angular implementation. For more information on FlowFile please visit (TODO - flowfile.js and ng-flow link).</p>
<p>httpproject.js - NOT BEING USED / DEPRECATED</p>
<p>InvitationFactory - invitationfactory.js</p>
<p>Provides an interface to the APIs which allow invitation of new users to the system</p>
<p>loginservice.js - NO EVIDENCE OF USAGE - PLEASE CHECK</p>
<p>MessageFactory - messagefactory.js</p>
<p>This service provides key value pairs to deliver consistent system messages across the application. Also used to provide messages to the info-box directive implementation. Done ths way to provide a human readable document of system messages and also potentially editable by non-devs.</p>
<p>PlateMapFactory - platemapfactory.js</p>
<p>Service to provide an interface to API for creating and editing whole plate maps within the system. (TODO - check this is still required as plates are no longer created as a single project so this may not be necessary).</p>
<p>ProjectFactory - projectfactory.js</p>
<p>Service to act as an interface to Project level APIs for retrieval and saving of project data, to confine functionality to a specific project for security and access purposes.</p>
<p>ProjectPermissionAllRoles - projectpermissionallroles.js</p>
<p>Service for obtaining project permissions for a given project for all roles (owner, editor and viewer)</p>
<p>Projectpermissions - projectpermissions.js</p>
<p>Service for saving changes to project permissions made through the user interface.</p>
<p>ProjectTypeFactory - projecttypefactory.js</p>
<p>Simple service to obtain a single project type or lists of project types via the project types API.</p>
<p>renderers - renderers.js</p>
<p>Service to provide logic and on-the-fly DOM construction for the header cells of handsontable ( or in our case handsoncompoundtable) and also DOM manipulation of the datacells depending on the data type of that cell. It contains various HTML DOM utility functions. Different renderers are constructed based on the type of data specified and returned to handsontable as a td DOM object.</p>
<p>SavedSearchFactory - savedsearchfactory.js</p>
<p>This service provides an interface to SavedSearch releated APIs for retrieval and saving of saved searches.</p>
<p>SearchUrlParamsV2 - searchurlparamsv2.js</p>
<p>Service to set up search parameters and generate forms from data within the URL, add back into URL from inputted form data (to retain back button functionality) and handle conversion of query to an elasticsearch-friendly format. It also generates filter, sort and chemical queries based on broadcast events from the search parts of the application. It also generates a capped saved search, providing a snapshot of how the search parameters would have performed at the time of saving, which is useful for auditing purposes.</p>
<p>SkinningFactory - skinning.js - NOT BEING USED / DEPRECATED</p>
<p>UserFactory - userfactory.js</p>
<p>Servie to allow acess to the User based APIs for retrieving a user object or lists of users.</p>
<p>viewdatafactory - NOT BEING USED / DEPRECATED</p>
<p>##Other Key Scripts</p>
<p>app/config.js</p>
<p>This file contains configuration for absolute and relative URLs for the web APIs, utility functions for getting backend schema form configurations via an inbuilt factory CustomFieldConfig and also setting up global objects to be injectable throughout the application (for example skinning configurations and the current logged in user)</p>
<p>The back end schemata must load before the angular application is initialised. This is done using the angular bootstrap function. This function replaces the standard way in which angular applications are started up. This means that if there is a failure of these backend services.</p>
<p>app/cbh_angular_schema_form_extension.js</p>
<p>This file holds some custom directives to be used as form input elements for angular-schema-form. To extend angular-schema-form functionality it is possible to provide these custom directive fitting a pattern specified in their documentation.</p>
<p>filtereddropdown - this is to provide a typeahead and pick-from-list combined in a convenient selector form element, for use with angular-schema-form.</p>
<p>chemdoodle - this provides a wrapper directive which in turn includes our other custom directive <em>chemdoodleWindow</em> and allows it to be used as a form element within angular-schema-form for chemical searching.</p>
<p>##Extra custom modules</p>
<p>We have a number of custom angular modules which we have built and use within the main ChemBio Hub platform and are included as bower dependencies.</p>
<p>angular-info-box
This is a small custom module designed to provide a popover help system for the application. It allows the injection of our pre-configured system messages via our MessageFactory and handles orientation based on screen position (hover left v right, up v down). More details <a href="https://github.com/PaulBarrett79/angular-info-box">here</a></p>
<p>schemaForm-file-upload
This is an angular-schema-form plugin designed to work with ng-flow. We adapted it for our purpose andnow it is the form input for uploading files witihn a form. More details <a href="https://github.com/PaulBarrett79/schema-form-file-upload">here</a></p>
<p>##Third party modules</p>
<p>We employ a number of third party modules to provide key functionality to the application. The fuill list is in the bower.json file but here are the ones which are the most intrinsic to the way the app works.</p>
<p>ui.router - provides stateful routes for all of the pages within the app. more info <a href="https://github.com/angular-ui/ui-router">here</a>.</p>
<p>ui.bootstrap - provides some of Bootstrap's javascript animations and other utilities in a way that does not clash with angular namespacing. More info <a href="https://angular-ui.github.io/bootstrap/" rel="nofollow">here</a>.</p>
<p>dndLists - NOT USED / DEPRECATED</p>
<p>flow - an angular implementation of flow.js which allows chunked file uploads, duplicate checking an progress reporting. More info <a href="https://flowjs.github.io/ng-flow/" rel="nofollow">here</a>.</p>
<p>ngClipboard - allows copy-via-click of angular form fields and is cross browser. More details <a href="https://sachinchoolur.github.io/ngclipboard/" rel="nofollow">here</a>.</p>
<p>schemaForm - this module allows the use of schema-form form delivery and configuration. Forms are set as json and renderered by the angular-schema-form engine. Very flexible and allows the use of subforms, layout sections, Bootstrap integration etc. More info <a href="http://schemaform.io/" rel="nofollow">here</a>.</p>
<p>ui.select - an angular schema form plugin allowing mulit-select "tagging" type fields. More info <a href="https://github.com/angular-ui/ui-select">here</a></p>
<p>angularUtils.directives.dirPagination - provides a lightweight pagination wherever an ng-repeat can exist. More information <a href="https://github.com/michaelbromley/angularUtils/tree/master/src/directives/pagination">here</a></p>

        </div>

    </div>]