[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <ul>
<li><a href="#get-skinningconfigs">GET SkinningConfigs</a></li>
<li>POST and PATCH have not been tested but may be supported</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#get-skinningconfigs" id="user-content-get-skinningconfigs"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><strong>GET SkinningConfigs</strong>
</h2>
<p>Return a list containing the single SkinningConfig object on the system which is used to transer configuration from the back end to the front end where needed. The SkinningConfig object is a singleton generated by <a href="https://github.com/lazybird/django-solo">django-solo</a>. The contents of the SkinConfig can be updated via the <a class="internal absent" href="/thesgc/chembiohub_ws/wiki/Django-Admin-Site">Django Admin Site</a>.</p>
<ul>
<li>
<p><strong>Tests</strong></p>
<ul>
<li>Tests are available for the skinning API to test that it contains the relevant fields and is valid JSON see <a href="../blob/master/cbh_tests/features/skinningconfig.feature">here</a>
</li>
</ul>
</li>
<li>
<p><strong>Source Code links</strong></p>
<ul>
<li><strong><a href="https://github.com/thesgc/ng-chem/blob/master/app/scripts/config.js#L118">Front end code where this is used</a></strong></li>
<li><strong><a href="https://github.com/thesgc/chembiohub_ws/search?utf8=%E2%9C%93&amp;q=SkinningResource">Back end code</a></strong></li>
</ul>
</li>
<li>
<p><strong>URL</strong></p>
<p>/{namespace}/api/cbh_skinning/?format={format}</p>
</li>
<li>
<p><strong>Method:</strong></p>
<p><code>GET</code></p>
</li>
<li>
<p><strong>URL Params</strong></p>
<p><strong>Required:</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Param</th>
<th>Default</th>
<th>Description</th>
<th>options</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">namespace</td>
<td>Default for your installation is chembiohub</td>
<td>the URL path, conda environment name etc.</td>
<td></td>
</tr>
<tr>
<td align="center">format</td>
<td>json if Ajax</td>
<td>Data format to return</td>
<td>json, xml, yaml</td>
</tr>
</tbody>
</table>
<p><strong>Optional:</strong></p>
<p>None</p>
<ul>
<li>
<p><strong>Success Response:</strong></p>
<ul>
<li>
<p><strong>Code:</strong> 200 <br/></p>
</li>
<li>
<p><strong>Notable response attributes</strong></p>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Param</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">objects[].chem_query_schemaform</td>
<td>The chemical angular schema form for chemical search</td>
</tr>
<tr>
<td align="center">objects[].data_manager_email</td>
<td>Email address for support requests</td>
</tr>
<tr>
<td align="center">objects[].data_manager_name</td>
<td>Name of support requests manager</td>
</tr>
<tr>
<td align="center">objects[].enable_smiles_input</td>
<td>Whether the SMILES input field should be enabled when adding multiple compounds</td>
</tr>
<tr>
<td align="center">objects[].field_type_choices</td>
<td>List of the fields types which the user must pick from when creating a project</td>
</tr>
<tr>
<td align="center">objects[].file_errors_from_backend</td>
<td>Whether the error message on file upload should be the exception message from the back end</td>
</tr>
<tr>
<td align="center">objects[].filters_applied</td>
<td>empty list which is filled on the front end with the filters currently active on the dataset</td>
</tr>
<tr>
<td align="center">objects[].filters_objects</td>
<td>empty list which is filled on the front end with the columns which are currently filtered</td>
</tr>
<tr>
<td align="center">objects[].hide_objects</td>
<td>empty list which is filled on the front end with the columns which are currently hidden</td>
</tr>
<tr>
<td align="center">objects[].hide_schemaform</td>
<td>The angular schema form json schema used for hiding fields</td>
</tr>
<tr>
<td align="center">objects[].hides_applied</td>
<td>empty list which is filled on the front end with the hidden fields on the dataset</td>
</tr>
<tr>
<td align="center">objects[].instance_alias</td>
<td>What the instance of ChemBio Hub should be labelled as (not really used, deprecated</td>
</tr>
<tr>
<td align="center">objects[].project_alias</td>
<td>What projects on the system should be called (not really used, could be deprecated)</td>
</tr>
<tr>
<td align="center">objects[].query_schemaform</td>
<td>The angular schema form schema and form used to render the search forms in ChemBio Hub Platform</td>
</tr>
<tr>
<td align="center">objects[].result_alias</td>
<td>What search results on the system should be called (not really used, could be deprecated)</td>
</tr>
<tr>
<td align="center">objects[].savedsearch_schemaform</td>
<td>The angular schema form json schema used for the saved search feature</td>
</tr>
<tr>
<td align="center">objects[].sort_objects</td>
<td>empty list which is filled on the front end with the columns which are currently sorted</td>
</tr>
<tr>
<td align="center">objects[].sort_schemaform</td>
<td>The angular schema form json schema used for sorting fields</td>
</tr>
<tr>
<td align="center">objects[].sorts_applied</td>
<td>empty list which is filled on the front end with the sorts currently active on the dataset</td>
</tr>
<tr>
<td align="center">objects[].tabular_data_schema</td>
<td>empty dictionary, filled on the client side with the tabular data information in order to render handsontable</td>
</tr>
</tbody>
</table>
<pre><code>	{
		"meta": {
			"limit": 20,
			"next": null,
			"offset": 0,
			"previous": null,
			"total_count": 1
		},
		"objects": [{
			"chem_query_schemaform": {
				"default": {
					"form": [{
						"htmlClass": "row",
						"items": [{
							"disableSuccessState": true,
							"feedback": false,
							"htmlClass": "col-sm-4",
							"key": "query_type",
							"onChange": "chemicalUpdated(modelValue,form)",
							"style": {
								"selected": "btn-success btn-sm",
								"unselected": "btn-default btn-sm"
							},
							"title": "Filter type",
							"titleMap": [{
								"name": "Substructure",
								"value": "with_substructure"
							}, {
								"name": "Exact Match",
								"value": "flexmatch"
							}],
							"type": "radiobuttons"
						}, {
							"condition": "model.query_type==\"with_substructure\" || model.query_type==\"flexmatch\"",
							"disableSuccessState": true,
							"feedback": false,
							"htmlClass": "col-sm-8",
							"key": "molfile",
							"onChange": "not avaliable",
							"title": "Sketch",
							"type": "chemdoodle"
						}],
						"type": "section"
					}, {
						"htmlClass": "row",
						"items": [{
							"condition": "!model.inprogress &amp;&amp; model.error &amp;&amp; model.molfile!=\"\"",
							"template": "&lt;div class=\"help-block col-xs-12 has-error\"&gt;Invalid molecule, check number of bonds around each atom.&lt;/div&gt;",
							"type": "template"
						}, {
							"condition": "model.molfile &amp;&amp; !model.filter_is_applied &amp;&amp; !model.error",
							"template": "&lt;div class=\"help-block col-xs-12 has-warning\"&gt;Structure search has changed, Click Apply Filter to search or clear to cancel.&lt;/div&gt;",
							"type": "template"
						}, {
							"condition": "!model.inprogress &amp;&amp; model.molfile!=\"\" &amp;&amp; model.filter_is_applied",
							"template": "&lt;div class=\"help-block col-xs-12 \"&gt;Data below is filtered for this molecule.&lt;/div&gt;",
							"type": "template"
						}, {
							"condition": "!model.inprogress &amp;&amp; model.molfile==\"\"",
							"template": "&lt;div class=\"help-block col-xs-12 has-error\"&gt;Draw a molecule and click Apply Filter to run structure search.&lt;/div&gt;",
							"type": "template"
						}],
						"type": "section"
					}, {
						"htmlClass": "row",
						"items": [{
							"condition": "model.smiles &amp;&amp; !model.inprogress",
							"htmlClass": "col-xs-3 pull-right",
							"onClick": "chemicalsubmit();closeMenu()",
							"style": "btn-success btn-block ",
							"title": "Apply and Close",
							"type": "button",
							"value": "submit"
						}, {
							"condition": "!model.smiles || model.inprogress",
							"template": "&lt;div class=\"col-xs-3 pull-right\"&gt;&lt;button class=\"btn btn-success  btn-block \" type=\"button\" disabled&gt;Apply and Close&lt;/button&gt;&lt;/div&gt;",
							"type": "template"
						}, {
							"htmlClass": "col-xs-3 pull-right",
							"onClick": "closeMenu()",
							"style": "btn-primary btn-block ",
							"title": "Close",
							"type": "button"
						}, {
							"htmlClass": "col-xs-3 pull-right",
							"onClick": "removeStructureSearch()",
							"style": "btn-danger btn-block ",
							"title": "Clear",
							"type": "button"
						}],
						"type": "section"
					}],
					"required": ["molfile"],
					"schema": {
						"properties": {
							"molfile": {
								"default": "",
								"type": "string"
							},
							"query_type": {
								"default": "with_substructure",
								"enum": ["with_substructure", "flexmatch"],
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"data_manager_email": "",
			"data_manager_name": "",
			"enable_smiles_input": true,
			"field_type_choices": [{
				"name": "Short text field",
				"value": "text"
			}, {
				"name": "Short text field",
				"value": "char"
			}, {
				"name": "Full text",
				"value": "textarea"
			}, {
				"name": "Choice field",
				"value": "uiselect"
			}, {
				"name": "Integer field",
				"value": "integer"
			}, {
				"name": "Decimal field",
				"value": "number"
			}, {
				"name": "Choice allowing create",
				"value": "uiselecttag"
			}, {
				"name": "Tags field allowing create",
				"value": "uiselecttags"
			}, {
				"name": "Percentage field",
				"value": "percentage"
			}, {
				"name": "Radio buttons",
				"value": "radios"
			}, {
				"name": "Date Field",
				"value": "date"
			}, {
				"name": "Link to server or external",
				"value": "href"
			}, {
				"name": "Image link to embed",
				"value": "imghref"
			}, {
				"name": "Decimal field",
				"value": "decimal"
			}, {
				"name": "checkbox",
				"value": "boolean"
			}, {
				"name": "TEST",
				"value": "related"
			}, {
				"name": "File Upload",
				"value": "file"
			}],
			"file_errors_from_backend": false,
			"filters_applied": [],
			"filters_objects": [],
			"hide_objects": [],
			"hide_schemaform": {
				"default": {
					"form": [{
						"disableSuccessState": true,
						"feedback": false,
						"htmlClass": "col-sm-12",
						"key": "hide",
						"onChange": "hideChanged(modelValue,form)",
						"style": {
							"selected": "btn-success btn-sm",
							"unselected": "btn-default btn-sm"
						},
						"titleMap": [{
							"name": "Show",
							"value": "show"
						}, {
							"name": "Hide &amp; Close",
							"value": "hide"
						}],
						"type": "radiobuttons"
					}],
					"schema": {
						"properties": {
							"hide": {
								"default": "show",
								"enum": ["show", "hide"],
								"title": "Hide / show Column",
								"type": "string"
							}
						},
						"required": [],
						"type": "object"
					}
				}
			},
			"hides_applied": [],
			"id": 1,
			"instance_alias": "ChemiReg",
			"project_alias": "project",
			"query_schemaform": {
				"default": {
					"form": [{
						"disableSuccessState": true,
						"feedback": false,
						"htmlClass": "row",
						"key": "query_type",
						"onChange": "queryTypeChanged(modelValue,form)",
						"style": {
							"selected": "btn-success btn-sm",
							"unselected": "btn-default btn-sm"
						},
						"title": "Filter type",
						"titleMap": [{
							"name": "Keyword",
							"value": "phrase"
						}, {
							"name": "Pick From List",
							"value": "pick_from_list"
						}, {
							"name": "Between",
							"value": "between"
						}, {
							"name": "Greater than",
							"value": "greater_than"
						}, {
							"name": "Less than",
							"value": "less_than"
						}, {
							"name": "Blank",
							"value": "blanks"
						}, {
							"name": "Not blank",
							"value": "nonblanks"
						}],
						"type": "radiobuttons"
					}, {
						"htmlClass": "row",
						"items": [{
							"condition": "model.query_type==\"phrase\"",
							"disableSuccessState": true,
							"feedback": false,
							"htmlClass": "col-sm-4",
							"key": "phrase",
							"onChange": "updated(modelValue,form)",
							"title": "Keyword or phrase"
						}, {
							"condition": "model.query_type==\"greater_than\" || model.query_type==\"between\"",
							"disableSuccessState": true,
							"feedback": false,
							"htmlClass": "col-sm-4",
							"key": "greater_than",
							"onChange": "updated(modelValue,form)"
						}, {
							"condition": "model.query_type==\"less_than\" || model.query_type==\"between\"",
							"disableSuccessState": true,
							"feedback": false,
							"htmlClass": "col-sm-4",
							"key": "less_than",
							"onChange": "updated(modelValue,form)"
						}, {
							"condition": "model.query_type==\"pick_from_list\"",
							"disableSuccessState": true,
							"feedback": false,
							"htmlClass": "col-sm-6",
							"key": "pick_from_list",
							"onChange": "updated(modelValue,form)",
							"options": {
								"dataArrivesEventName": "autoCompleteData",
								"fetchDataEventName": "openedSearchDropdown",
								"multiple": true,
								"staticItems": [],
								"tagging": false
							},
							"title": "Pick from list",
							"type": "filtereddropdown"
						}, {
							"htmlClass": "row pull-right",
							"items": [{
								"htmlClass": "col-xs-6",
								"onClick": "closeMenu()",
								"style": "btn-primary btn-block",
								"title": "Close",
								"type": "button"
							}, {
								"htmlClass": "col-xs-6",
								"onClick": "clearFilters()",
								"style": "btn-danger btn-block",
								"title": "Clear",
								"type": "button"
							}],
							"type": "section"
						}],
						"type": "section"
					}],
					"schema": {
						"properties": {
							"any_of": {
								"items": {
									"default": "",
									"disableSuccessState": true,
									"feedback": false,
									"required": true,
									"title": " ",
									"type": "string"
								},
								"type": "array"
							},
							"ends_with": {
								"default": "",
								"title": "Ends with",
								"type": "string"
							},
							"equals": {
								"default": "",
								"title": "Exactly equal to",
								"type": "string"
							},
							"field_path": {
								"default": "",
								"type": "string"
							},
							"greater_than": {
								"default": "",
								"title": "Greater than",
								"type": "string"
							},
							"less_than": {
								"default": "",
								"title": "Less than",
								"type": "string"
							},
							"phrase": {
								"default": "",
								"type": "string"
							},
							"pick_from_list": {
								"default": [],
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"query_type": {
								"default": "phrase",
								"enum": ["phrase", "pick_from_list", "between", "greater_than", "less_than", "blanks", "nonblanks"],
								"type": "string"
							},
							"sort_direction": {
								"default": "No Sort",
								"enum": ["No Sort", "asc", "desc"],
								"type": "string"
							},
							"starts_with": {
								"default": "",
								"title": "Starts with",
								"type": "string"
							}
						},
						"required": ["sort_direction", "query_type", "phrase", "any_of", "equals", "starts_with", "ends_with", "greater_than", "less_than"],
						"type": "object"
					}
				}
			},
			"resource_uri": "/dev/api/cbh_skinning/1",
			"result_alias": "result",
			"savedsearch_schemaform": {
				"form": [{
					"htmlClass": "col-xs-12",
					"key": "alias",
					"placeholder": "e.g. My Saved Search",
					"validationMessage": "Please add an alias for this search"
				}],
				"schema": {
					"properties": {
						"alias": {
							"title": "Save search as...",
							"type": "string"
						}
					},
					"required": ["alias"],
					"type": "object"
				}
			},
			"sort_objects": [],
			"sort_schemaform": {
				"default": {
					"form": [{
						"disableSuccessState": true,
						"feedback": false,
						"htmlClass": "col-sm-12",
						"key": "sort_direction",
						"onChange": "sortChanged(modelValue,form)",
						"style": {
							"selected": "btn-success btn-sm",
							"unselected": "btn-default btn-sm"
						},
						"title": "Sort direction",
						"titleMap": [{
							"name": "No Sort",
							"value": "No Sort"
						}, {
							"name": "Asc",
							"value": "asc"
						}, {
							"name": "Desc",
							"value": "desc"
						}],
						"type": "radiobuttons"
					}],
					"schema": {
						"properties": {
							"field_path": {
								"default": "",
								"type": "string"
							},
							"sort_direction": {
								"default": "No Sort",
								"enum": ["No Sort", "asc", "desc"],
								"type": "string"
							}
						},
						"required": ["sort_direction"],
						"type": "object"
					}
				}
			},
			"sorts_applied": [],
			"tabular_data_schema": {}
		}]
	}
</code></pre>
<ul>
<li>
<p><strong>Response Schema</strong></p>
<ul>
<li>Schema available at   /{namespace}/api/cbh_skinning/schema?format=json or view a <a class="internal present" href="/thesgc/chembiohub_ws/wiki/Copy-of-SkinningConfig-Schema">Copy of SkinningConfig Schema</a>
</li>
</ul>
</li>
<li>
<p><strong>Error Response:</strong></p>
<p>If you are not logged in to the application</p>
<ul>
<li>
<strong>Code:</strong> 401 UNAUTHORIZED <br/>
<strong>Content:</strong> ``</li>
</ul>
<p>OR</p>
<ul>
<li>
<strong>Code:</strong> 403 BAD REQUEST <br/>
<strong>Content:</strong>
</li>
</ul>
</li>
</ul>

<pre><code>   { error : "The error name from the back end" , traceback : "The traceback in python"}
</code></pre>
<ul>
<li>
<strong>Code:</strong> 500 INTERNAL SERVER ERROR <br/>
<strong>Content:</strong>
</li>
</ul>

<pre><code>    { error : "The error name from the back end" , traceback : "The traceback in python"}
</code></pre>
<ul>
<li>
<p><strong>Sample Call:</strong></p>
<pre><code>  $http({  method: "get",
              url: configuration.cbh_skinning.list_endpoint,
              params: {"limit":10000}, });
</code></pre>
</li>
<li>
<p><strong>Notes:</strong></p>
</li>
</ul>

        </div>

    </div>]