[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#basic-setup" id="user-content-basic-setup"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Basic Setup</h2>
<p>To create a Application Frame app, you usually need at least two files.</p>
<p>The first file will be your core application:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> App.js</span>

<span class="pl-k">import</span> <span class="pl-smi">Application</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>application-frame/core/Application<span class="pl-pds">'</span></span>;

<span class="pl-k">const</span> <span class="pl-c1">App</span> <span class="pl-k">=</span> {
    name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>Demo App<span class="pl-pds">'</span></span>,
    version<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>1.0.0<span class="pl-pds">'</span></span>,

    <span class="pl-en">init</span>() {
        <span class="pl-c1">this</span>.<span class="pl-c1">constructor</span>();
    },

    __proto__<span class="pl-k">:</span> Application,
};

<span class="pl-k">export</span> <span class="pl-c1">default</span> <span class="pl-smi">Application</span>;
</pre></div>
<p>What does this do?</p>
<p>with <code>const App</code> we create a new application. The properties <code>name</code> and <code>version</code> are meta information, they are not required, but are good to have.
The next property is where it gets interesting <code>init()</code> is a method on our application. This method will launch our application. Here you should place any start up code. At the moment it only contains <code>this.constructor()</code> which will setup all the default functionality of an Application Frame app.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> bootstrap.js</span>

<span class="pl-k">import</span> <span class="pl-smi">App</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>./App<span class="pl-pds">'</span></span>;

<span class="pl-k">const</span> <span class="pl-c1">ready</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {
    <span class="pl-smi">App</span>.<span class="pl-en">init</span>();
}

<span class="pl-k">if</span> (<span class="pl-c1">document</span>.<span class="pl-c1">readyState</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>complete<span class="pl-pds">'</span></span>) {
    <span class="pl-en">ready</span>();
} <span class="pl-k">else</span> {
    <span class="pl-c1">window</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">'</span>DOMContentLoaded<span class="pl-pds">'</span></span>, ready);
}</pre></div>
<p>This little bootstrap script will call your init function as soon as the page is ready. If you have to wait for other libraries, this is a good place to do so.</p>
<p>For instructions on how to build a UI check out <a href="https://github.com/TitanNanoDE/af-DataBinding/wiki/How-To:-Getting-Started-with-DataBinding">How To: Getting Started with DataBinding</a></p>

        </div>

    </div>]