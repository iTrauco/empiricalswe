[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>XN allows you declare properties for each part you create. Here is the simplest example of a property declaration:</p>
<pre><code>module User
    # ...
    property :name, type: :text
end
</code></pre>
<p>You can get/set the property's value as follows:</p>
<pre><code># Get the value
g.v(User).first.name
# Set the value
g.v(User).first.name = 'John'
</code></pre>
<p>Notice that the property method is defined for vertices, not routes. Therefore, the following command will result in an <strong>error</strong>.</p>
<pre><code>g.v(User).name
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#property-types" id="user-content-property-types"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Property Types</h2>
<p>As you saw, in the example above, a property is declared with a type. The following property types are recognized by XN</p>
<ul>
<li><code>:text</code></li>
<li><code>:numeric</code></li>
<li><code>:boolean</code></li>
<li><code>:select</code></li>
<li><code>:date</code></li>
<li><code>:date_time</code></li>
<li><code>:object</code></li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#filter" id="user-content-filter"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Filter</h2>
<p>In Pacer, you can always filter results based on property value. For example:</p>
<pre><code>g.v(name: 'John')
</code></pre>
<p>In XN, you need to explicitly declare which properties can be used for filtering via the REST API.
You do that by specifying the <code>filter: true</code> option on a property. For example:</p>
<pre><code>module User
    # ...
    property :name, type: :text, filter: true
end
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#additional-options" id="user-content-additional-options"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Additional Options</h2>
<ul>
<li>The <code>allow_blank: false</code> will be used by XN to prevent a remote client from creating/updating a model object with a missing/blank property.</li>
</ul>

        </div>

    </div>]