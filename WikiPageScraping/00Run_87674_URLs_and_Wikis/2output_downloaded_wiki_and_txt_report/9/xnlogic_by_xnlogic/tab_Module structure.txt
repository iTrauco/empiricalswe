[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>XN uses some simple conventions together with Ruby's standard modules to structure your application.</p>
<p>First, your Parts must be defined within a namespace module. I'll use <a href="http://lightmesh.com" rel="nofollow">Lightmesh</a> as an example throughout the documentation, so in our example we
need to define each part within a Lightmesh module:</p>
<div class="highlight highlight-source-ruby"><pre><span class="pl-k">module</span> <span class="pl-en">Lightmesh</span>
  <span class="pl-c"><span class="pl-c">#</span> ... part definition ...</span>
<span class="pl-k">end</span></pre></div>
<p>It is not a good idea to put anything else into this <code>Lightmesh</code> namespace, because pacer-model uses the contents of the namespace for name
resolution, and each additional non-domain-model class or module defined there is another potential hard-to-debug name conflict.</p>
<p>Each Part definition will be another module inside the namespace module.  If we are defining the <code>Asset</code> part, our definition will look like this:</p>
<div class="highlight highlight-source-ruby"><pre><span class="pl-k">module</span> <span class="pl-en">Lightmesh</span>
  <span class="pl-k">module</span> <span class="pl-en">Asset</span>
    pacer_vertex

    <span class="pl-c"><span class="pl-c">#</span> ...</span>
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>All of the XN DSL declarations would be made within that Asset module, but there is further structure available. We can define methods that will
appear either on individual vertices (individual records), or on collections of them - often called <code>routes</code>. We will get into how and when to use
these methods as we get deeper into the documentation, but let this be their first brief appearance.</p>
<div class="highlight highlight-source-ruby"><pre><span class="pl-k">module</span> <span class="pl-en">Lightmesh</span>
  <span class="pl-k">module</span> <span class="pl-en">Asset</span>
    pacer_vertex

    <span class="pl-c"><span class="pl-c">#</span> ... dsl declarations ...</span>

    <span class="pl-k">module</span> <span class="pl-en">Vertex</span>
      <span class="pl-c"><span class="pl-c">#</span> Methods defined here will be present on every Asset vertex</span>
    <span class="pl-k">end</span>

    <span class="pl-k">module</span> <span class="pl-en">Route</span>
      <span class="pl-c"><span class="pl-c">#</span> Methods defined here will be present on every route which produces</span>
      <span class="pl-c"><span class="pl-c">#</span> Asset vertices, as well as on every individual Asset vertex. If a</span>
      <span class="pl-c"><span class="pl-c">#</span> method with the same name is also in the Vertex module, the method </span>
      <span class="pl-c"><span class="pl-c">#</span> defined here will be used only for the route, while the one defined</span>
      <span class="pl-c"><span class="pl-c">#</span> in the Vertex module will override it on individual vertices.</span>
    <span class="pl-k">end</span>
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>

        </div>

    </div>]