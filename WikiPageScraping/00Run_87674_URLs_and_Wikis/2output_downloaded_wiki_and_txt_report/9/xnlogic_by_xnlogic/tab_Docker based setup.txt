[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>On the VM, start the server:</p>
<pre><code>âžœ  ~  xn-server
</code></pre>
<p>You should see the following output (with <code>YOUR_APP</code> replaced by your application's name):</p>
<pre><code>Recreating YOUR_APP_admin_1...
Recreating YOUR_APP_datomicfree_1...
Recreating YOUR_APP_api_1...
Recreating YOUR_APP_auth_1...
Recreating YOUR_APP_dev_1...
Initiated server boot for dev

Use the docker-compose tool from the ~/YOUR_APP directory to
manage your running containers.

Key commands:
  docker-compose ps       - show running containers
  docker-compose stop     - shut down the api server
  docker-compose logs api - show the api log
  docker-compose logs     - show all container logs

       Name                      Command               State                    Ports
-------------------------------------------------------------------------------------------------------
YOUR_APP_admin_1         /bin/sh -c puma -b tcp://0 ...   Up      80/tcp
YOUR_APP_api_1           /entrypoint.sh                   Up      8080/tcp
YOUR_APP_auth_1          /app/script/entrypoint.sh        Up      80/tcp
YOUR_APP_datomicfree_1   /bin/sh -c /usr/share/dato ...   Up      4334/tcp, 4335/tcp, 4336/tcp
YOUR_APP_dev_1           /bin/sh -c dockerize -temp ...   Up      0.0.0.0:443-&gt;443/tcp, 0.0.0.0:80-&gt;80/tcp
</code></pre>
<blockquote>
<p><strong>TIP:</strong> Don't forget to <code>cd ~/YOUR_APP</code> before running <code>docker-compose</code> commands.</p>
</blockquote>
<p>You can now open your web browser (on the host machine) at one of the following addresses:</p>
<ul>
<li>
<a href="http://192.168.168.168" rel="nofollow">http://192.168.168.168</a> - <strong>TODO:</strong> What is this page?</li>
<li>
<a href="http://192.168.168.168/users" rel="nofollow">http://192.168.168.168/users</a> - User management web application. <strong>TODO:</strong> Where are the email/pass configured?<br/>
If this is the first time you are running your application, you probably want to start here and create a new user.</li>
</ul>
<hr/>
<h2>
<a aria-hidden="true" class="anchor" href="#containers" id="user-content-containers"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Containers</h2>
<p>The different components of the XN framework run inside Docker containers.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>api</code></td>
<td>API server</td>
</tr>
<tr>
<td><code>datomic</code></td>
<td>History Graph (Datomic)</td>
</tr>
<tr>
<td><code>admin</code></td>
<td>XN application, responsible for authorization</td>
</tr>
<tr>
<td><code>auth</code></td>
<td>Ruby application, used for authentication</td>
</tr>
<tr>
<td><code>dev</code></td>
<td>Nginx proxy server used to tie applications together</td>
</tr>
</tbody>
</table>
<h3>
<a aria-hidden="true" class="anchor" href="#running-commands-inside-a-container" id="user-content-running-commands-inside-a-container"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Running commands inside a container</h3>
<p>In some cases, you may want to run a command inside one of the containers.
You can do that from the VM.</p>
<ul>
<li>
<p>Syntax</p>
<pre><code>on CONTAINER_NAME COMMAND
</code></pre>
</li>
<li>
<p>Example:</p>
<pre><code>on api bundle update
</code></pre>
<p>(running <code>bundle update</code> on the <code>api</code> container)</p>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#create-a-new-dev-client" id="user-content-create-a-new-dev-client"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Create a new dev client</h2>
<ul>
<li><code>xn -t admin create-db dev</code></li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#scripts" id="user-content-scripts"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Scripts</h2>
<p>Your XN application contains a <code>script</code> folder with a number of useful scripts:</p>
<ul>
<li>
<code>script/server</code>
<ul>
<li>Start/restart the API server.</li>
<li>This command will start/restart all 5 containers.</li>
<li>The <code>xn-server</code> command is an alias to this script.</li>
</ul>
</li>
<li>
<code>script/console</code>
<ul>
<li>Start an interactive XN console.</li>
<li>This will command will start a new <code>api</code> container, and start the <code>datomic</code> container (in case it wasn't already started).</li>
<li>The <code>xn-console</code> command is an alias to this script.</li>
</ul>
</li>
<li>
<code>script/bundle</code>
<ul>
<li>Rebuild all dependencies for your application API application (both Ruby and Java dependencies).</li>
<li>Useful for periodic minor updates.</li>
<li>To rebuild dependencies from scratch, remove the <code>vendor/bundle</code> and <code>vendor/jars</code> directory, then run <code>script/build api</code> instead of this command.</li>
</ul>
</li>
<li>
<code>script/build [CONTAINER-NAME]</code>
<ul>
<li>See your docker-compose.yml file for container names. The default containers that can be built are api, nginx, and auth.</li>
<li>Build the specified container.</li>
<li>If the container is currently running, it will be stopped.</li>
<li>If no container is specified, then the api containers will be built.</li>
</ul>
</li>
<li><code>script/cleanup [--data]</code></li>
</ul>

        </div>

    </div>]