[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#ros-standards-rep" id="user-content-ros-standards-rep"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>ROS Standards (REP)</h1>
<p>There are way too many to list, so I will just attach the link for <a href="http://www.ros.org/reps/rep-0000.html" rel="nofollow">ROS REPs</a>. You can use this as a reference, but we strictly go by these standards, to avoid later confusion (i.e Right or Left handed axis)</p>
<h1>
<a aria-hidden="true" class="anchor" href="#tips-on-the-art-of-coding" id="user-content-tips-on-the-art-of-coding"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tips on the art of coding</h1>
<p>These tips are a summary of <a href="https://d1b10bmlvqabco.cloudfront.net/attach/hkahbp2tblo2h5/gri6pulkfq5/hktvr01gyqd5/artInTheScience.pdf" rel="nofollow">this ACM article on the art of coding</a>:</p>
<ul>
<li>Vertical alignment to show symmetry and tabular structure.</li>
<li>Naming Conventions
<ul>
<li>Functions that modify their arguments should use verb names.</li>
<li>Functions that return values should use noun names.</li>
<li>Class names should use collective noun names.</li>
<li>Booleans should use adjective names.</li>
<li>Try to make names pronouncable</li>
<li>Think about how someone reading your code has to infer the concept based on the name (while the person writing the code makes the name based on the concept).</li>
</ul>
</li>
<li>Rely on context to simplify code. That means shorten names of frequently used variables (so they don't obscure the code), and lengthen names of rarely used variables.</li>
<li>Use white-space to show structure (kind of like sections and paragraphs in a book or paper)</li>
<li>Focus on writing clear code, not on writing comments. If you write clear enough code, you won't need too many comments.</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#c" id="user-content-c"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>C++</h1>
<p>Follow the <a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.html" rel="nofollow">Google Style Guide</a>.</p>
<p>Use cpplint.py available through the guide to lint cpp code.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#python" id="user-content-python"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Python</h1>
<p>Follow <a href="http://legacy.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a> for all python modules submitted to Repo!</p>
<p>You can use utilities like: pep8, flake8, pyflakes to satisfy this criteria</p>
<p><code>pip install flake8</code></p>
<p>There are plugins for most major text editors VIM, Sublime Text, etc.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#coding-style" id="user-content-coding-style"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Coding Style</h1>
<p>Consistency is the top priority. It doesn't matter what you think is better, what matters most is that the entire team uses a consistent style. Therefore, we should all conform to the official ROS standards here (for C++). For Python, just refer to the PEP8 link.</p>
<p>Here's a summary (or cheat-sheet) that you should use (it's not comprehensive but should be a helpful pointer):</p>
<h2>
<a aria-hidden="true" class="anchor" href="#naming" id="user-content-naming"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Naming</h2>
<ul>
<li>The following should be under_scored: packages, topics, files, libraries, and variables (including function arguments).</li>
<li>Constants should be ALL_CAPITALS.</li>
<li>Classes should be CamelCased, while functions should be camelCased. (note the first character case)</li>
<li>Global variable name example: g_my_var (note g_ at beginning)</li>
<li>Member variable name example: my_var_ (note trailing underscore)</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#licenses" id="user-content-licenses"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Licenses</h2>
<p>Please include a license statement at the beginning of every source code file. Check out the already-existing files in the repo for an example (just copy and paste them over). We use the GNU GPL license. Check out this article for Correctly Licensing.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#formatting" id="user-content-formatting"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Formatting</h2>
<ul>
<li>Indent each block using 2 spaces (don't use tab character).</li>
<li>Braces go on their own lines.</li>
<li>Use unsigned int instead of uint for portability.</li>
</ul>

        </div>

    </div>]