[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#how-to-get-the-duo-mini-lx-camera-up-and-running-in-ros-using-our-ros-driver" id="user-content-how-to-get-the-duo-mini-lx-camera-up-and-running-in-ros-using-our-ros-driver"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to get the DUO mini-lx camera up and running in ROS (using our <a href="https://github.com/l0g1x/DUO-Camera-ROS">ROS driver</a>)</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#installing-the-sdk-and-libraries-essentially-just-duolibh-and-libduoso-assuming-ubuntu-1204-should-work-on-1404-but-not-tested" id="user-content-installing-the-sdk-and-libraries-essentially-just-duolibh-and-libduoso-assuming-ubuntu-1204-should-work-on-1404-but-not-tested"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Installing the SDK and libraries (essentially just DUOLib.h and libduo.so), assuming Ubuntu 12.04 (should work on 14.04 but not tested)</h2>
<ol>
<li>Copy the entire DUOSDK folder into <code>/usr/local/</code>. Export the variable <code>DUO_SDK</code> to point to that folder. Just place this in your .bashrc file: <code>export DUO_SDK=/usr/local/DUOSDK</code>.</li>
<li>Copy the file <code>libduo.so</code> into <code>/usr/local/lib</code>.</li>
<li>Copy the file <code>DUOLib.h</code> into <code>/usr/local/include</code>.</li>
<li>Make sure all the above three files/folders have correct permissions (just run <code>sudo chmod -R 775 DUOSDK/</code> for example, to change the permissions of the DUOSDK folder to rwxrwxr-x recursively). Just do that for all three files. Note: you <strong>might</strong> have to also change ownership to your username (look at <code>chown</code> command).</li>
<li>Don't forget to run <code>ldconfig</code> again to reload your <code>.so</code> libraries (thanks to the awesome comment in this <a href="http://stackoverflow.com/q/480764/341505" rel="nofollow">SO question</a>).</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#use-the-ros-driver" id="user-content-use-the-ros-driver"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Use the <a href="https://github.com/l0g1x/DUO-Camera-ROS">ROS driver</a>
</h2>
<ol>
<li>Fork the <a href="https://github.com/l0g1x/DUO-Camera-ROS">repository for the driver</a>.</li>
<li>Clone your fork onto your hard drive (to make a local copy). Make sure it's placed inside <code>&lt;your_catkin_ws&gt;/src/</code>, because it's just another ROS package.</li>
<li>Now you can build using <code>catkin_make</code> and it should work. Use <code>rosrun duo3d_ros duo_node</code> to run it.</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#obviously-you-have-to-have-the-duo-mini-lx-camera-connected-through-usb" id="user-content-obviously-you-have-to-have-the-duo-mini-lx-camera-connected-through-usb"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Obviously, you have to have the DUO mini-lx camera connected through USB.</h2>
<ol>
<li>Don't break it. Seriously, Krystian will <strong>kill</strong> you! In general, you should never have access to it without Krystian's direct supervision.</li>
</ol>
<h1>
<a aria-hidden="true" class="anchor" href="#how-to-setup-multiple-ethernet-cameras" id="user-content-how-to-setup-multiple-ethernet-cameras"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to setup multiple ethernet cameras</h1>
<ul>
<li>do <a href="http://www.ptgrey.com/KB/10351" rel="nofollow">this</a>
</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#how-to-get-the-stereo-camera-bumblebee2-up-and-running-in-ros" id="user-content-how-to-get-the-stereo-camera-bumblebee2-up-and-running-in-ros"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to get the stereo camera (<a href="http://www.ptgrey.com/bumblebee2-stereo-vison-03-mp-color-firewire-1394a-38mm-sony-icx424-camera" rel="nofollow">Bumblebee2</a>) up and running in ROS</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#plug-er-in" id="user-content-plug-er-in"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Plug 'er in</h2>
<ol>
<li>Plug the FireWire (IEEE1394) cable in. Note: the laptop FireWire port doesn't supply power. Refer to the next step.</li>
<li>Connect the power pins on the Bumblebee connector (VCC is pin 11 and GND is pin 10) to a decent power supply. Give her a voltage around 14-15V and <strong>make sure you limit the current to 1A.</strong> Check the <a href="http://www.ptgrey.com/support/downloads/documents/Bumblebee2%20Getting%20Started%20Manual.pdf" rel="nofollow">manual</a> for more.</li>
<li>Check that the green light is on (on the front of the Bumblebee).</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#start-up-the-ros-nodes" id="user-content-start-up-the-ros-nodes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Start up the ROS nodes</h2>
<ol>
<li>Start up the stereo 1394 camera driver: <code>roslaunch camera1394stereo stereo_camera.launch</code> . This node will now publish the raw images and camera_info to topics (probably <code>/stereo_camera</code>). An alternate camera driver someone should try out is <a href="http://wiki.ros.org/pointgrey_camera_driver" rel="nofollow">Pointgrey's driver</a>.</li>
<li>Start up stereo_image_proc (the node that takes the two separate images and finds the disparity): <code>ROS_NAMESPACE=stereo_camera rosrun stereo_image_proc stereo_image_proc</code>. Note: make sure you set the ROS_NAMESPACE to the correct namespace (the prefix for the topic published by the camera driver above). Now the disparity and cloud images are being published to their topics.</li>
<li>Now you can display the images if you want, or bag them, or whatever.
<ul>
<li>To display the images: <code>rosrun image_view stereo_view stereo:=stereo_camera image:=image_raw</code>.</li>
<li>To bag the images: <code>rosbag record -O my_bagfile_name.bag /stereo_camera/left/image_raw /stereo_camera/right/image_raw /stereo_camera/disparity</code>. Notice that you can choose your output file name and what topics to record (do <strong>not</strong> record all topics when running the camera, this will result in choppy framerates).</li>
</ul>
</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#how-to-calibrate-the-bumblebee2-intrinsic-parameters" id="user-content-how-to-calibrate-the-bumblebee2-intrinsic-parameters"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to calibrate the Bumblebee2 (intrinsic parameters)</h2>
<p>TODO</p>
<h1>
<a aria-hidden="true" class="anchor" href="#how-to-get-a-generic-usb-monoscopic-camera-up-and-running-in-ros" id="user-content-how-to-get-a-generic-usb-monoscopic-camera-up-and-running-in-ros"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to get a generic USB monoscopic camera up and running in ROS</h1>
<ol>
<li>Plug USB cable in (this is important and cause of 80% of our WTF moments)</li>
<li>Start up the <code>usb_cam</code> ROS node (USB camera driver). You can just use launch files (look in the launch folder inside the <code>line_detection</code> package).</li>
<li>Make sure the <code>image_proc</code> node is running. It's just a node that takes in your raw image data (from <code>usb_cam</code>) and removes distortion. It publishes <code>image_rect_color</code>, which is probably what you want to use. You can find that in the launch files mentioned above.</li>
<li>You can bag images and stuff if you want (see the Bumblebee section above).</li>
</ol>
<h1>
<a aria-hidden="true" class="anchor" href="#how-to-rosbag-record-camera-image-data" id="user-content-how-to-rosbag-record-camera-image-data"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to <code>rosbag</code> (record) camera image data</h1>
<ol>
<li>Make sure the topic you want to record camera messages from is running. Use <code>image_view</code> to check (see below section).</li>
<li>run <code>rosbag record -O my_bag_name.bag /camera/image_raw/compressed</code>. This assumes you want your output bag file to be named <code>my_bag_name.bag</code>, and that the topic you're recording is named <code>/camera/image_raw/compressed</code>. <strong>Make sure you only record compressed image data! See <a href="https://github.com/chicagoedt/Software_IGVC/issues/21">this issue</a> for details.</strong>
</li>
</ol>
<h1>
<a aria-hidden="true" class="anchor" href="#how-to-display-rosbagged-camera-data-in-ros-using-image_view" id="user-content-how-to-display-rosbagged-camera-data-in-ros-using-image_view"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to display <code>rosbag</code>'ged camera data in ROS using <code>image_view</code>
</h1>
<ol>
<li>Find the name of the image topic you want to display. I recommend using <code>rostopic list</code> or the node graph in <code>rqt</code>. Let's say your topic name is <code>/camera/image_raw</code>.</li>
<li>Play your rosbag data using <code>rosbag play my_bag_name.bag</code>. You can use the <code>-l</code> parameter to make the bag loop like this <code>rosbag play -l my_bag_name.bag</code>.</li>
<li>Now run the <code>image_view</code> node:  <code>rosrun image_view image_view image:=/camera/image_raw</code>. If you bagged compressed image data <strong>which you should do</strong>, then throw <code>_image_transport:=compressed</code> at the end of the previous command (this basically changes the <code>_image_transport</code> parameter to <code>compressed</code>).</li>
</ol>

        </div>

    </div>]