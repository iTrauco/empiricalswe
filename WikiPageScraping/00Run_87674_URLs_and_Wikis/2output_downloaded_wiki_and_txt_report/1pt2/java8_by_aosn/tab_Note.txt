[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>本を読み進めていく上で気づいたとこ、疑問などを共有するページです。ページ数、内容等は特に記載ない場合和訳本ベースです。</p>
<p><img align="absmiddle" alt=":arrow_right:" class="emoji" data-canonical-src="https://assets-cdn.github.com/images/icons/emoji/unicode/27a1.png" height="20" src="https://camo.githubusercontent.com/cf6179d061d921875c256de49233420e105c77d7/68747470733a2f2f6173736574732d63646e2e6769746875622e636f6d2f696d616765732f69636f6e732f656d6f6a692f756e69636f64652f323761312e706e67" title=":arrow_right:" width="20"/> <a href="Schedule">スケジュール</a></p>
<p><img align="absmiddle" alt=":arrow_right:" class="emoji" data-canonical-src="https://assets-cdn.github.com/images/icons/emoji/unicode/27a1.png" height="20" src="https://camo.githubusercontent.com/cf6179d061d921875c256de49233420e105c77d7/68747470733a2f2f6173736574732d63646e2e6769746875622e636f6d2f696d616765732f69636f6e732f656d6f6a692f756e69636f64652f323761312e706e67" title=":arrow_right:" width="20"/> <a href="/aosn/java8">練習問題コード共有</a></p>
<ul>
<li>(原書正誤表) <a href="http://www.horstmann.com/java8/bugs.html" rel="nofollow">http://www.horstmann.com/java8/bugs.html</a>
</li>
<li>(訳書正誤表) <a href="http://www001.upp.so-net.ne.jp/yshibata/myhomepage/errata/js8rierrata.html" rel="nofollow">http://www001.upp.so-net.ne.jp/yshibata/myhomepage/errata/js8rierrata.html</a>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E7%AC%AC1%E7%AB%A0" id="user-content-第1章"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>第1章</h3>
<ul>
<li>
<strong>[p7]</strong> (Y) ラムダ計算のドットと Java のドットが混ざってるのでこの例はややこしい。<code>λ first . λ second .</code> までがラムダ式 (<code>&lt;expr&gt; ::= (λ&lt;identifier&gt;. &lt;expr&gt;)</code>) 、その後はただの Java の式。 (参考: <a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%A0%E3%83%80%E8%A8%88%E7%AE%97" rel="nofollow">Wikipedia</a>)</li>
<li>
<strong>[p15]</strong> (m) Thread.yield() は実装によっては全く何もしないので注意 (JPL より)。</li>
<li>
<strong>[p16]</strong> (m) これって ConcurrentModificationException は出ないんだっけ？あとで検証してみよう。</li>
<li>
<strong>[p20]</strong> (m) 多重継承になるので、両方の意味や契約に矛盾がないか、リスコフの置換原則に従えるかにも気を付けないといけないね。</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E7%AC%AC2%E7%AB%A0" id="user-content-第2章"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>第2章</h3>
<ul>
<li>[p31] Stream.close は close が必要ないときは呼ばなくてもよい。JavaDoc にはこうかいてある「ほとんどすべてのストリーム・インスタンスは、実際には使用後にクローズする必要はありません。一般に、クローズが必要になるのは、入出力チャネルをソースに持つストリーム(Files.lines(Path, Charset)から返されるものなど)だけです。」 (参考: <a href="http://docs.oracle.com/javase/jp/8/api/java/util/stream/Stream.html" rel="nofollow">JavaDoc</a>)。</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E7%AC%AC7%E7%AB%A0" id="user-content-第7章"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>第7章</h3>
<ul>
<li>
<strong>[ex1]</strong> これはシンタックスエラーですね: <a href="https://twitter.com/Sh1bumi/status/562008866322677761" rel="nofollow">https://twitter.com/Sh1bumi/status/562008866322677761</a>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E7%AC%AC9%E7%AB%A0" id="user-content-第9章"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>第9章</h3>
<ul>
<li><strong>[p212]</strong></li>
<li>(m) <code>java.io.Closable</code> が昔からあったやつで <code>java.lang.AutoCloseable</code> が Java 7 で追加されたやつ。</li>
<li><strong>[p216]</strong></li>
<li>(M) <code>Paths</code> の読み方は pǽðz 。 (参考: <a href="http://ejje.weblio.jp/content/paths" rel="nofollow">Weblio</a>)</li>
<li><strong>[p221]</strong></li>
<li>(m) <code>Files.copy(...)</code> は signature が 3 つあるけど、1 つだけ <code>Path</code> を返す不思議 (参考: <a href="https://docs.oracle.com/javase/jp/8/api/java/nio/file/Files.html" rel="nofollow">JavaDoc</a>)。 (L) メソッドチェーンが出来て便利だけど、確かに腑に落ちない。</li>
<li><strong>[p222]</strong></li>
<li>(M) <code>FileVisitor</code> に型変数 T 付いてるのどういうこと？なんでもいいの？ (m) 上限境界すらついてないね。</li>
<li>(M) <code>FileVisitor</code> の実装 <code>SimpleFileVisitor</code> の中身がショボすぎる件 (参考: <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/nio/file/SimpleFileVisitor.java" rel="nofollow">OpenJDK Source</a>)。Adapter パターン的に使う？ (L) 確かに、コンストラクタも protected だね。そのまま new できない。</li>
<li>(Y) なんか使ってる例みつけたよ (参考: <a href="http://waman.hatenablog.com/entry/20120816/1345150695" rel="nofollow">倭マン's BLOG</a>)。</li>
<li><strong>[p226]</strong></li>
<li>(m) 再目的化攻撃 (repurposing attack) がわからん。 (Y) 解説してるブログ発見 (参考: <a href="http://heasman.blogspot.nl/2008/02/repurposing-attacks-against-java.html" rel="nofollow">AUT DISCE, AUT DISCEDE</a>)。</li>
<li><strong>[p228]</strong></li>
<li>(m) <del><code>BitInteger</code> は <code>BigInteger</code> の誤植と思われる。</del> → 訳者に報告済。正誤表参照。</li>
<li><strong>[Ex.9-3]</strong></li>
<li>(L) 複数の例外をキャッチするときの実際の型はどうなるのか?</li>
<li>(m) javap で調べたら <code>FileNotFoundException | UnknownHostException</code> の型は <code>IOException</code> になったので、共通のスーパークラスがあてがわれると推測 (検証コード: <a href="/Java8Workshop/Exercises/blob/master/src/com/tasktoys/java8ws/mikan/ch9/ex03/MultiCatchAndThrow.java">MultiCatchAndThrow.java</a>)。</li>
<li>(L) ならば、なぜ throws には <code>IOException</code> ではなく <code>FileNotFoundException</code> と <code>UnknownHostException</code> を別々に書けるのか?</li>
<li>(m) クラスファイル上は <code>IOException</code> だとしても、そうしたときのコンパイラは <code>FileNotFoundException</code> と <code>UnknownHostException</code> を扱っていることを知ってるから問題ない。</li>
<li><strong>[Ex.9-8]</strong></li>
<li>(L) この問題は <code>Integer.compareTo</code> だけ禁止しているが、<code>Integer.compare</code> も禁止しないといけないのでは・・・</li>
<li><strong>[Ex.9-10]</strong></li>
<li>(L) label を順序付けに含めるか否かは議論になる。そもそも (Point ではなく) LabeledPoint に対して Comparable を実装させるのは意味的におかしいのでは。</li>
<li>(m) Integer.compare(int, int) がやっているのはたったこれだけだった <code>return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);</code>
</li>
<li><strong>[Ex.9-11]</strong></li>
<li>Windows の場合、findstr が利用できる。ただし使える正規表現が大幅に限られるなど grep と比べて制約が多い。</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E3%81%9D%E3%81%AE%E4%BB%96" id="user-content-その他"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>その他</h3>
<p>雑談とかで挙がったキーワードなど</p>
<ul>
<li>(M) 大阪締めのやり方 (参考: <a href="http://ja.wikipedia.org/wiki/%E6%89%8B%E7%B7%A0%E3%82%81#.E5.A4.A7.E9.98.AA.E7.B7.A0.E3.82.81" rel="nofollow">Wikipedia</a>)</li>
<li>(m) StackOverflow 日本語版 <a href="https://ja.stackoverflow.com/" rel="nofollow">リンク</a>
</li>
<li>(L) BDD (振る舞い駆動開発) F/W: Spock (Groovy), Specs2 (Scala)</li>
</ul>
<p>次回ネタが決定した段階で、本プロジェクトの名称を Java 8 Workshop から何か適切な名前に変更予定 (代わりに Exercises リポジトリの名前を Java8Workshop に変更)。</p>
<p>m: <a href="/mikan">mikan</a>, M: <a href="/MrBearing">MrBearing</a>, Y: <a href="/YuichiroSato">YuichiroSato</a>, n: <a href="/namichan0801">namichan0801</a>, L:<a href="/LagunaPresa">LagunaPresa</a>, i: <a href="/intptr-t">intptr-t</a>, s: <a href="/s-hosoai">s-hosoai</a></p>

        </div>

    </div>]