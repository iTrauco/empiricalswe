[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#very-soon" id="user-content-very-soon"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Very soon</h3>
<ul>
<li>Check VM unit tests are good.</li>
<li>VM unit tests should include calls.</li>
<li>Full state unit tests.</li>
<li>Tests for trie ref counting.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#fairly-soon" id="user-content-fairly-soon"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Fairly soon</h3>
<ul>
<li>Include files in LLL.</li>
<li>Compiler &amp; code-gen library for LLL.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#soon" id="user-content-soon"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Soon</h3>
<p>GUI</p>
<ul>
<li>Make address/block chain list model-based, JIT populated.</li>
<li>Make everything else model-based.</li>
<li>Qt/QML class.</li>
</ul>
<p>Core</p>
<ul>
<li>Signalling for changes to State.</li>
</ul>
<p>Thread-Safety</p>
<ul>
<li>BlockChain</li>
<li>TransactionQueue</li>
<li>State</li>
</ul>
<p>Cleanups &amp; caching</p>
<ul>
<li>All caches should flush unused data (I'm looking at you, BlockChain) to avoid memory overload.</li>
</ul>
<p>Network:</p>
<ul>
<li>"Error sending: Broken pipe" should only display once before killing session.</li>
<li>Genesis block to encode network/PoC version.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#soonish" id="user-content-soonish"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Soonish</h3>
<p>Crypto stuff:</p>
<ul>
<li>kFromMessage</li>
<li>Check all the tweak instructions.</li>
</ul>
<p>Network:</p>
<ul>
<li>*** Exponential backoff on bad connection.</li>
<li>*** Handle exception when no network.</li>
<li>*** Only download blocks from one peer at once.
<ul>
<li>Parallelise block download.</li>
</ul>
</li>
<li>Better handling of bad blocks
<ul>
<li>Track which peers passed which blocks and punish them.</li>
<li>Don't pass on block until they're known good.</li>
</ul>
</li>
<li>NotInChain will be very bad for new peers - it'll run through until the genesis.
<ul>
<li>Check how many it has first.</li>
</ul>
</li>
<li>Crypto on network - use id as public key?</li>
<li>Make work with IPv6</li>
<li>Peers rated.
<ul>
<li>Useful/useless - new blocks/transactions or useful peers?</li>
<li>Solid communications?</li>
</ul>
</li>
<li>Strategy for peer suggestion?</li>
</ul>
<p>Cleanups &amp; caching</p>
<ul>
<li>State DB should keep only last few N blocks worth of nodes (except for restore points - configurable, defaults to every 30000th block - all blocks that are restore points should be stored so their stateRoots are known good).</li>
<li>Logger: cleanup windows-specific code, determine impact of Release vs Debug, settings</li>
</ul>
<p>General:</p>
<ul>
<li>Better logging.
<ul>
<li>Colours.</li>
<li>Move over to new system.</li>
</ul>
</li>
</ul>
<p>Robustness</p>
<ul>
<li>Remove aborts</li>
<li>Recover from all exceptions.
<ul>
<li>Especially RLP &amp; other I/O.</li>
</ul>
</li>
<li>RLP should never assert; only throw.</li>
<li>Better handling of corrupt blocks.
<ul>
<li>Kill DB &amp; restart.</li>
</ul>
</li>
</ul>
<p>GUI:</p>
<ul>
<li>Turn on/off debug channels.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#later" id="user-content-later"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Later</h3>
<p>Trie on DB.</p>
<ul>
<li>Move the restore point stuff into block restore points
<ul>
<li>i.e. keep all nodes from last 127 blocks with counter, at 128, kill but keep every (60<em>24</em>7)th or so i.e. one per week as a restore point.</li>
<li>maybe allow this to be configured.</li>
</ul>
</li>
</ul>

        </div>

    </div>]