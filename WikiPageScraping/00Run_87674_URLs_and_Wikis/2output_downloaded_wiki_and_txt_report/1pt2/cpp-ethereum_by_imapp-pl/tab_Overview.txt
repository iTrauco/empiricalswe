[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The library code exists as several separate projects:</p>
<ul>
<li>
<p>Fundamental ÐΞV-software, namespace <code>dev</code>:</p>
<ul>
<li>
<strong>libdevcore</strong> Core components used by Peer library, Ethereum, Whisper and Swarm along with other related projects. Only depends on Boost.</li>
<li>
<strong>libdevcrypto</strong> Core crypto components used by Peer library, Ethereum, Whisper and Swarm along with other related projects. Includes RLP and the Merkle Patricia tree. Depends on libsecp256k1 and libcrypto++.</li>
</ul>
</li>
<li>
<p><strong>libp2p</strong>: ÐΞV Peer networking framework, namespace <code>dev::p2p</code>.</p>
</li>
<li>
<p><strong>libwhisper</strong>: The Whisper software, namespace <code>dev::shh</code>.</p>
</li>
<li>
<p><strong>libswarm</strong>: The Swarm software, namespace <code>dev::bzz</code>.</p>
</li>
<li>
<p>Ethereum software, namespace <code>dev::eth</code>, depends on libdev* and libp2p.</p>
<ul>
<li>
<strong>libethcore</strong> Core interfaces and components.</li>
<li>
<strong>libevmface</strong> The Ethereum Virtual Machine interface.</li>
<li>
<strong>liblll</strong> The Low-level LISP-like Language compiler &amp; assembler.</li>
<li>
<strong>libevm</strong> The Ethereum Virtual Machine implementation.</li>
<li>
<strong>libethereum</strong> Class library that forms a complete implementation of an Ethereum node. Includes the State and BlockChain classes.</li>
<li>
<strong>libqethereum</strong> Classes to provide Qt Javascript and QML bindings to the Ethereum API.</li>
<li>
<strong>libserpent</strong> Vitalik's C++ Serpent implementation.</li>
</ul>
</li>
<li>
<p><strong>libwebthree</strong>: Amalgamation of all projects, and includes a DB multiplexing class. Namespace <code>dev</code>.</p>
</li>
</ul>
<p>In addition to these libraries, a set of third-party libraries are also distributed alongside the core libraries including:</p>
<ul>
<li>
<strong>secp256k1</strong> An implementation of the SECP 256k1 ECDSA signing algorithm.</li>
<li>
<strong>json_spirit</strong> A C++ JSON parser written for Boost's Spirit library.</li>
</ul>
<p>The core executable projects within cpp-ethereum are four:</p>
<ul>
<li>
<strong>eth</strong> A command-line Ethereum server and shell able to be a full-node on the Ethereum network.</li>
<li>
<strong>alethzero</strong> A Qt-based all-encompassing GUI for interacting with Ethereum.</li>
<li>
<strong>third</strong> A basic Ethereum browser.</li>
<li>
<strong>test</strong> A set of unit tests for the Ethereum libraries.</li>
<li>
<strong>walleth</strong> An optimised QML-based UI for Ethereum. Currently unmaintained.</li>
<li>
<strong>neth</strong> An NCurses-based command line UI for Ethereum.</li>
<li>
<strong>exp</strong> Experimental code.</li>
<li>
<strong>lllc</strong> The LLL command-line compiler.</li>
<li>
<strong>sc</strong> The Serpent command-line compiler.</li>
</ul>
<p>There are additional support directories:</p>
<ul>
<li>
<strong>windows</strong> For building in MSVC.</li>
<li>
<strong>docker</strong> For building using docker.</li>
</ul>

        </div>

    </div>]