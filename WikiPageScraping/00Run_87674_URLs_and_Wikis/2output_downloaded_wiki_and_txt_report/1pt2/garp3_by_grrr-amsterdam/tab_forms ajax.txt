[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#creating-an-ajax-form" id="user-content-creating-an-ajax-form"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creating an AJAX form</h3>
<p>Make sure the <strong>"ajax"</strong> class is on the form. The easiest way is to use the <code>setAjax()</code> method:</p>
<pre><code>&lt;?php
$form-&gt;setAjax(true);
?&gt;
</code></pre>
<p>The form will be hijacked (code for this is found in <code>garp.front.js</code>) and an XMLHttpRequest will be made to the action of the form, using the method of the form.</p>
<p>In the controller, the easiest way to handle an AJAX call is like this:</p>
<pre><code>&lt;?php
if ($this-&gt;getRequest()-&gt;isPost()) {
    // Do your usual form processing here.
    // This also acts as proper fallback code for 
    // the poor folks without Javascript
    $this-&gt;view-&gt;valid = true;
    
    if ($this-&gt;getRequest()-&gt;isXmlHttpRequest()) {
        $this-&gt;_helper-&gt;layout-&gt;setLayoutPath(
            GARP_APPLICATION_PATH . '/modules/g/views/layouts'
        );
	
        $this-&gt;_helper-&gt;layout-&gt;setLayout('form_json_response');
    }
}
?&gt;
</code></pre>
<p>This will take the HTML from the view of your controller actions (e.g. <code>views/forms/submit.phtml</code>). Your response HTML will be rendered in a JSON wrapper looking like this:</p>
<pre><code>&lt;?php
{
	"success": 1,
	"html": "&lt;p&gt;Thanks for registering!&lt;/p&gt;"
}
?&gt;
</code></pre>
<p>The HTML is what is rendered in your view. Make sure it can be used in place of the form itself, because the hijacking code will do exactly that: replace the form with whatever's in "html".</p>

        </div>

    </div>]