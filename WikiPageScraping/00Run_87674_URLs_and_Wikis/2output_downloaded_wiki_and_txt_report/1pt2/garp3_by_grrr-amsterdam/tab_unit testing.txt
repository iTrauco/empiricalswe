[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#unit-testing" id="user-content-unit-testing"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unit testing</h1>
<p>We strive to have a very complete test suite to provide developers a way to validate changes and new functionality.
Garp uses <a href="http://phpunit.de" rel="nofollow">PHPUnit</a>, albeit an older version, to execute unit tests.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#installation" id="user-content-installation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Installation</h2>
<p>See <a href="http://code.grrr.nl/golem/wiki/installing-php-unit" rel="nofollow">http://code.grrr.nl/golem/wiki/installing-php-unit</a> for more!</p>
<h2>
<a aria-hidden="true" class="anchor" href="#running-the-suite" id="user-content-running-the-suite"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Running the suite</h2>
<p>Just run <code>phpunit</code> in the root of your project!</p>
<pre><code>phpunit
</code></pre>
<p>Test cases can be grouped (see <em>Grouping test cases</em> below). This allows you to run only the given group:</p>
<pre><code>phpunit --group=MyGroup
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#database" id="user-content-database"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Database</h3>
<p>Make sure you have a database setup for your testing environment! It can be configured just like you would the development database in <code>/application/configs/db.ini</code>. You might want to run a <code>spawn</code> beforehand:</p>
<pre><code>g spawn --e=testing
</code></pre>
<p>Depending on your app, you might also need snippets:</p>
<pre><code>g snippet create --e=testing
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#writing-tests" id="user-content-writing-tests"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Writing tests</h2>
<p>Conventionally, the name of a testcase follows the name of the class it tests.</p>
<p>A test for <code>/application/modules/default/models/Article.php</code> should go in <code>/tests/application/modules/default/models/ArticleTest.php</code> and look a little something like this:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Model_ArticleTest</span> <span class="pl-k">extends</span> <span class="pl-e">Garp_Test_PHPUnit_TestCase</span> {</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>
<p>Inside the test class, all methods starting with <em>test</em> are executed by phpunit:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Model_ArticleTest</span> <span class="pl-k">extends</span> <span class="pl-e">Garp_Test_PHPUnit_TestCase</span> {</span>
<span class="pl-s1">  </span>
<span class="pl-s1">  <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">testShouldOnlyFetchPublishedArticles</span>() {</span>
<span class="pl-s1">    <span class="pl-smi">$model</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-c1">Model_Article</span>();</span>
<span class="pl-s1">    <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>assertCount(<span class="pl-c1">3</span>, <span class="pl-smi">$model</span><span class="pl-k">-&gt;</span>fetchAll());</span>
<span class="pl-s1">  }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>
<p>Alternatively, add <code>@test</code> to the docblock for the test method (might aid readability, depending on your preference):</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">Model_ArticleTest</span> <span class="pl-k">extends</span> <span class="pl-e">Garp_Test_PHPUnit_TestCase</span> {</span>
<span class="pl-s1">  </span>
<span class="pl-s1">  <span class="pl-c"><span class="pl-c">/*</span>* @test <span class="pl-c">*/</span></span></span>
<span class="pl-s1">  <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">should_only_fetch_published_articles</span>() {</span>
<span class="pl-s1">    <span class="pl-smi">$model</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-c1">Model_Article</span>();</span>
<span class="pl-s1">    <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>assertCount(<span class="pl-c1">3</span>, <span class="pl-smi">$model</span><span class="pl-k">-&gt;</span>fetchAll());</span>
<span class="pl-s1">  }</span>
<span class="pl-s1"></span>
<span class="pl-s1">}</span></pre></div>
<p>A couple of things to take from this:</p>
<ul>
<li>It's encouraged to make the method name self-documenting. Try to make it into a little sentence that communicates the intent of the test. We like underscores over camelcase for this very purpose.</li>
<li>PHPUnit offers a wide range of <code>assertSomething()</code> methods you can use to do assertions. <a href="https://phpunit.de/manual/current/en/appendixes.assertions.html" rel="nofollow">Here is a complete list.</a>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#testing-controllers" id="user-content-testing-controllers"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Testing controllers</h3>
<p>⚠️ Testing controllers is deprecated because Zend Framework's <code>ControllerTestCase</code> depended on old phpunit versions._</p>
<h3>
<a aria-hidden="true" class="anchor" href="#setup-and-teardown" id="user-content-setup-and-teardown"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>setUp and tearDown</h3>
<p>Two special methods can be used to prepare your environment: <code>setUp</code> and <code>tearDown</code>. The former is called <em>before</em> every test, the latter <em>after</em> every test. Use them to prepare your environment and cleanup after yourself.</p>
<p>It's important enough to write in all caps that YOU MUST ALWAYS CALL <code>parent::setUp()</code> AND <code>parent::tearDown()</code>! If you don't you're in the best case missing out on very, very useful functionality, and in the worst case leaving behind some debris from your testing:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">setUp</span>() {</span>
<span class="pl-s1">  <span class="pl-k">parent</span><span class="pl-k">::</span>setUp();</span>
<span class="pl-s1">  <span class="pl-c"><span class="pl-c">//</span> setup some stuff</span></span>
<span class="pl-s1">}</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">tearDown</span>() {</span>
<span class="pl-s1">  <span class="pl-k">parent</span><span class="pl-k">::</span>tearDown();</span>
<span class="pl-s1">  <span class="pl-c"><span class="pl-c">//</span> cleanup after yourself</span></span>
<span class="pl-s1">}</span></pre></div>
<p>The following is an example of what automatically gets done for you in <code>Garp</code>'s <code>setUp</code> and <code>tearDown</code> methods:</p>
<ul>
<li>Clearing the cache</li>
<li>Inserting and deleting mock data (see below)</li>
<li>Making sure <code>Garp_Auth</code> is setup</li>
<li>Making sure no user is logged in</li>
</ul>
<p>All <code>Garp_Test_PHPUnit_TestCase</code> and <code>Garp_Test_PHPUnit_ControllerTestCase</code> instances are setup with a <code>_helper</code> property, thru which various utility functions can be accessed. The following two chapters elaborate on this.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#configuring-the-runtime" id="user-content-configuring-the-runtime"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Configuring the runtime</h3>
<p>The helper allows you to set configuration values at runtime. This is especially helpful because the unit test environment should be predictable. You don't want your Garp tests to fail because the application at hand happens to be configured differently.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-c"><span class="pl-c">//</span> From a testcase method</span></span>
<span class="pl-s1"><span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">_helper</span><span class="pl-k">-&gt;</span>injectConfigValues(<span class="pl-c1">array</span>(</span>
<span class="pl-s1">  <span class="pl-s"><span class="pl-pds">'</span>cdn<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>domain<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>http://example.com<span class="pl-pds">'</span></span>)</span>
<span class="pl-s1">));</span></pre></div>
<p>As you can see, the parameter follows the usual ini file structure. Everything you set in an ini file can also be set by the helper.</p>
<p><em>Note</em>, the helper <em>merges</em> the given configuration values with the configuration runtime, so only the values you pass to the helper are changed.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#logging-in-users" id="user-content-logging-in-users"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Logging in users</h3>
<p>Need a logged in user for a test?</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">_helper</span><span class="pl-k">-&gt;</span>login(<span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>Henk<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>, <span class="pl-s"><span class="pl-pds">'</span>role<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>fire marshall<span class="pl-pds">'</span></span>));</span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#inserting-mock-data" id="user-content-inserting-mock-data"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Inserting mock data</h3>
<p>Two possible approaches:</p>
<h4>
<a aria-hidden="true" class="anchor" href="#insert-mock-data-at-runtime-from-a-single-test" id="user-content-insert-mock-data-at-runtime-from-a-single-test"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Insert mock data at runtime from a single test</h4>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-smi">$postId</span> <span class="pl-k">=</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">_helper</span><span class="pl-k">-&gt;</span>insertMockData(</span>
<span class="pl-s1">  <span class="pl-k">new</span> <span class="pl-c1">Model_BlogPost</span>,</span>
<span class="pl-s1">  [<span class="pl-s"><span class="pl-pds">'</span>status<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>PUBLISHED<span class="pl-pds">'</span></span>]</span>
<span class="pl-s1">);</span></pre></div>
<p>Note that the second argument is optional and can be used to override randomly generated data.</p>
<p><strong>Note that you should configure a database profiler to make sure inserted data gets automatically removed</strong></p>
<pre><code>[testing : development]

resources.db.params.profiler.enabled = true
</code></pre>
<h4>
<a aria-hidden="true" class="anchor" href="#specify-mock-data-as-property-of-the-test-class" id="user-content-specify-mock-data-as-property-of-the-test-class"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Specify mock data as property of the test class</h4>
<p><strong>Note that the previous method is more preferable and there are not a lot of reasons to specify mockdata globally unless you need the same data for every test.</strong></p>
<p>Specify mock data as a property of the test class:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-smi">$_mockData</span> <span class="pl-k">=</span> <span class="pl-c1">array</span>(</span>
<span class="pl-s1">  <span class="pl-s"><span class="pl-pds">'</span>Tag<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">array</span>(</span>
<span class="pl-s1">    <span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>development<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>),</span>
<span class="pl-s1">    <span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>design<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>),</span>
<span class="pl-s1">    <span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>project management<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>)</span>
<span class="pl-s1">  ),</span>
<span class="pl-s1">  <span class="pl-s"><span class="pl-pds">'</span>Article<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">array</span>(</span>
<span class="pl-s1">    <span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>How to Javascript in 1 hour<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>),</span>
<span class="pl-s1">    <span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>Five CSS properties you might not know!<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>)</span>
<span class="pl-s1">  ),</span>
<span class="pl-s1">  <span class="pl-s"><span class="pl-pds">'</span>ArticleTag<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">array</span>(</span>
<span class="pl-s1">    <span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>article_id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>tag_id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>),</span>
<span class="pl-s1">    <span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>article_id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">'</span>tag_id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>),</span>
<span class="pl-s1">    <span class="pl-c1">array</span>(<span class="pl-s"><span class="pl-pds">'</span>article_id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">'</span>tag_id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>)</span>
<span class="pl-s1">  )</span>
<span class="pl-s1">);</span></pre></div>
<p>This will insert the given records automatically before every test and deletes them after each test. It's also important to note that the <code>$_mockData</code> array will be populated by fresh data from the database, for you to use in the tests.</p>
<p>For instance, in the case of the above example, <code>$this-&gt;_mockData['Tag'][0]</code> will most likely be populated with:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">[<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>development<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>created<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>2014-11-11 13:03<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>modified<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">null</span>, <span class="pl-s"><span class="pl-pds">'</span>slug<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>development<span class="pl-pds">'</span></span>]</span></pre></div>
<p>For internationalized models, specify <code>'i18n' =&gt; true</code> on the array:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-smi">$_mockData</span> <span class="pl-k">=</span> [</span>
<span class="pl-s1">  <span class="pl-s"><span class="pl-pds">'</span>Tag<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> [</span>
<span class="pl-s1">    <span class="pl-s"><span class="pl-pds">'</span>i18n<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,</span>
<span class="pl-s1">    [<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">'</span>en<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>development<span class="pl-pds">'</span></span>], <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>],</span>
<span class="pl-s1">    [<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">'</span>en<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>design<span class="pl-pds">'</span></span>], <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>],</span>
<span class="pl-s1">    [<span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">'</span>en<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>project management<span class="pl-pds">'</span></span>], <span class="pl-s"><span class="pl-pds">'</span>id<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>]</span>
<span class="pl-s1">  ]</span>
<span class="pl-s1">];</span></pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#grouping-test-cases" id="user-content-grouping-test-cases"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Grouping test cases</h3>
<p>Running the whole test suite can take a lot of time. Grouping your cases allows you to run a smaller portion and thus speed up development. Add a group like so:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-c"><span class="pl-c">/**</span></span></span>
<span class="pl-s1"><span class="pl-c"> * @group Foobar</span></span>
<span class="pl-s1"><span class="pl-c"> <span class="pl-c">*/</span></span></span>
<span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">FoobarTest</span> <span class="pl-k">extends</span> <span class="pl-e">Garp_Test_PHPUnit_TestCase</span> {</span>
<span class="pl-s1">}</span></pre></div>
<p>You can then run only that group by running</p>
<pre><code>phpunit --group=Foobar
</code></pre>
<p>(this will run the group <code>Foobar</code> on both the <code>Garp</code> and <code>default</code> modules. You can add <code>--module=default</code> to filter further)</p>
<h2>
<a aria-hidden="true" class="anchor" href="#using-mockery" id="user-content-using-mockery"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Using Mockery</h2>
<p><a href="http://docs.mockery.io" rel="nofollow">Mockery</a> is a great mock framework that allows you to mock services you'd rather not call during testing.</p>
<p>A quick example:</p>
<pre><code>$mockNotifier = \Mockery::mock('App_Notifier');
$mockNotifier-&gt;shouldReceive('sendNotification')
    -&gt;with(
        'bestuur_afgehandeld',
        \Mockery::any(),
        $expectedMutation
    )
    -&gt;once();

$statusUpdate = new App_Aanvraag_StatusUpdate('vloa', $aanvraag1, $mockNotifier);
$statusUpdate-&gt;save(['beschikker_status' =&gt; Status::BESCHIKKER_TOEGEKEND], $userId);
</code></pre>
<p>This tests wether method <code>sendNotification</code> of class <code>App_Notifier</code> as dependency of <code>App_Aanvraag_StatusUpdate</code> gets called with three specific arguments.</p>
<p><a href="http://docs.mockery.io/en/latest/reference/phpunit_integration.html" rel="nofollow">Check out this page for full documentation on how to integrate with PHPUnit</a>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#testing-workflow" id="user-content-testing-workflow"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Testing workflow</h2>
<p>For starters, find articles on <em>Test Driven Development</em> for a broader overview.</p>
<p>In a nutshell, you should:</p>
<ul>
<li>Create the TestCase class for the given class</li>
<li>Think about the environment necessary for running the test</li>
<li>Use the helper or <code>setUp</code> to setup said environment</li>
<li>Start adding tests for the functionality that should be in the class. Write the test first, then the implementation, which should be doing minimum effort to make the test succeed.</li>
<li>Run the test after every modification. This means you're starting with a failing test, then succeeding, then failing again, and so on and so forth.</li>
<li>Expand the TestCase and the functionality it tests until it fulfils your business goal</li>
<li>When you're done, run the entire suite one more time to ensure your work did not break other stuff</li>
</ul>

        </div>

    </div>]