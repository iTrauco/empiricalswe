[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Iodine is a multi-paradigm language and while it retains much of imperative object oriented languages such as Python and C# it also borrows some features from the functional language. One such feature is pattern matching which can be implemented with the <code>match</code> keyword. The <code>match</code> keyword will match a given expression against a series of patterns prefixed with the <code>case</code> keyword. This is similar to Iodine's <code>given</code>/<code>when</code> statement however is much more powerful. The syntax for pattern matching is</p>
<div class="highlight highlight-source-scala"><pre><span class="pl-k">match</span> &lt;<span class="pl-ent">expression</span>&gt;{
    <span class="pl-k">case</span> &lt;<span class="pl-ent">pattern</span>&gt; [when &lt;<span class="pl-ent">expression</span>&gt;] <span class="pl-k">=&gt;</span> &lt;<span class="pl-ent">expression</span>&gt;
}</pre></div>
<p><strong>Examples</strong></p>
<p>The following example will match a users input between three numbers and return a textual representation of the number they choose. If they do not enter one of the three numbers, "Error" will be returned.</p>
<div class="highlight highlight-source-scala"><pre>value <span class="pl-k">=</span> <span class="pl-k">Int</span> (input (<span class="pl-s"><span class="pl-pds">"</span>Enter a number between 1-3<span class="pl-pds">"</span></span>));
result <span class="pl-k">=</span> <span class="pl-k">match</span> value {
    <span class="pl-k">case</span> <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>One<span class="pl-pds">"</span></span>
    <span class="pl-k">case</span> <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Two<span class="pl-pds">"</span></span>
    <span class="pl-k">case</span> <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Three<span class="pl-pds">"</span></span>
    <span class="pl-k">case</span> _ <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Error<span class="pl-pds">"</span></span>;
}
print (result);</pre></div>
<p>Patterns support two operators. These are <code>|</code> (Or) and ``&amp;<code>(And). The value of</code>_``` denotes a wild card value. Values can be matched against literals, identifiers, function calls, attributes and tuples. The following example is an implementation of fizz buzz that uses pattern matching.</p>
<div class="highlight highlight-source-scala"><pre><span class="pl-c1">0</span> ... <span class="pl-c1">100</span> <span class="pl-k">|</span><span class="pl-k">&gt;</span> map (lambda (n) <span class="pl-k">=&gt;</span> <span class="pl-k">match</span> (n <span class="pl-k">%</span> <span class="pl-c1">3</span>, n <span class="pl-k">%</span> <span class="pl-c1">5</span>) {
                <span class="pl-k">case</span> (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Fizz Buzz<span class="pl-pds">"</span></span>
                <span class="pl-k">case</span> (<span class="pl-c1">0</span>, _) <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Fizz<span class="pl-pds">"</span></span>
                <span class="pl-k">case</span> (_, <span class="pl-c1">0</span>) <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Buzz<span class="pl-pds">"</span></span>
                <span class="pl-k">case</span> _ <span class="pl-k">=&gt;</span> n
            })
          <span class="pl-k">|</span><span class="pl-k">&gt;</span> map (print);</pre></div>
<p>The above code first generates a sequence of numbers between 0 and 100 (inclusive) which is then piped to the <code>map</code> function. The map function applies each element to an anonymous function which matches a two element tuple containing <code>n % 3</code> and <code>n % 5</code>. If both elements of the tuple are 0 then "Fizz Buzz" is returned. If the first element is 0 then "Fizz" is returned. If the second element is 0, then "Buzz" is returned. Lastly, if none of those matches succeed <code>n</code> is returned. The output of the first call to <code>map</code> is then piped into another call to <code>map</code> which applies each item to the function <code>print</code></p>

        </div>

    </div>]