[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Iodine exceptions do not support a finally block. However, it is still sometimes necessary to ensure that a piece of code be executed even if the intended operation fails. Iodine supports this in the form of the <code>with</code> statement. The <code>with</code> statement ensures that an object's <code>__exit__</code> method will be called regardless of what happens inside of it.</p>
<p><strong>Examples</strong></p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">with</span> (fd = <span class="pl-c1">open</span> (<span class="pl-s"><span class="pl-pds">"</span>something.txt<span class="pl-pds">"</span></span>)) {
    fd.write (<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>);
}</pre></div>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">class</span> <span class="pl-en">FooBar</span> {
    <span class="pl-k">func</span> <span class="pl-en">__enter__</span> (self) {
        <span class="pl-c1">print</span> (<span class="pl-s"><span class="pl-pds">"</span>We have entered with with statement<span class="pl-pds">"</span></span>);
    }

    <span class="pl-k">func</span> <span class="pl-en">__exit__</span> (self) {
        <span class="pl-c1">print</span> (<span class="pl-s"><span class="pl-pds">"</span>We are now leaving the with statement<span class="pl-pds">"</span></span>);
    }
}

<span class="pl-k">func</span> <span class="pl-en">main</span> (args) {
    <span class="pl-c1">with</span> (foo <span class="pl-k">=</span> <span class="pl-c1">FooBar</span> ()) {
        <span class="pl-k">return</span>;
    }
}</pre></div>

        </div>

    </div>]