[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <ul>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/F.1.-Reviewing-Examples-for-Principles">Reviewing Examples</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/F.2.-Event-Emitters-and-hasOwnProperty">Event Emitters and hasOwnProperty</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/F.3.-Canvas-Paint-Multiplier">Canvas Paint Multiplier</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/F.4.-Alphabet-Invasion">Alphabet Invasion</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/F.5.-Worzone">Worzone</a></li>
</ul>
<p>Much more detail appears in the next learning section, <a href="https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines">Design Guidelines</a></p>
<h1>
<a aria-hidden="true" class="anchor" href="#concurrency" id="user-content-concurrency"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Concurrency</h1>
<p>I like this bit on <a href="https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines#43-consider-passing-a-specific-scheduler-to-concurrency-introducing-operators">Concurrency</a>:</p>
<pre><code>Rx.Observable.range(0, 90000, Rx.Scheduler.requestAnimationFrame)
  .subscribe(draw);
</code></pre>
<p>Uses window.requestAnimationFrame.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#do-and-tap" id="user-content-do-and-tap"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Do and Tap</h1>
<p>Also, use of <a href="https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines#46-make-side-effects-explicit-using-the-dotap-operator">do and tap</a>:</p>
<pre><code>doOnNext/tapOnNext, doOnError/tapOnError,doOnCompleted/tapOnCompleted
</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#publish-and-share" id="user-content-publish-and-share"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Publish and Share</h1>
<p>As well as the following section on <a href="https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines#48-use-the-publish-operator-to-share-side-effects">using publish to share subscriptions</a> to avoid firing multiple side effects.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#custom-operators-exceptions-monads" id="user-content-custom-operators-exceptions-monads"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Custom Operators, Exceptions, Monads</h1>
<p>The section about defining custom operators starts to get to some deeper matters and are applicable to a recent discussion about when and how to handle exceptions in Play / Akka code in my work situation.</p>
<p>From: <a href="https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines#53-protect-calls-to-user-code-from-within-an-operator">Protect Calls to User Code..</a>:</p>
<blockquote>
<p><strong>Sample</strong></p>
</blockquote>
<pre><code>Rx.Observable.prototype.map = function (selector, thisArg) {
  var source = this;
  return Rx.Observable.create(function (observer) {
    var idx = 0;
    return source.subscribe(
      function (x) {
        var result;
        try {
          result = selector.call(thisArg, x, idx++, source);
        } catch (e) {
          observer.onError(e);
          return;
        }

        observer.onNext(result);
      },
      observer.onError.bind(observer),
      observer.onCompleted.bind(observer)
    );
  })
};
</code></pre>
<blockquote>
<p>This sample invokes a selector function which is user code. It catches any exception resulting from this call and transfers the exception to the subscribed observer instance through the onError call.</p>
</blockquote>
<blockquote>
<p><strong>When to ignore this guideline</strong></p>
</blockquote>
<blockquote>
<p>Ignore this guideline for calls to user code that are made before creating the observable sequence (outside of the Observable.create call). These calls are on the current execution context and are allowed to follow normal control flow.</p>
</blockquote>
<blockquote>
<p><strong>Note</strong>: do not protect calls to subscribe, dispose, onNext, onError and onCompleted methods. These calls are on the <em>edge of the monad</em>. Calling the onError method from these places will lead to unexpected behavior.</p>
</blockquote>
<p>Sequel idea -- <strong><a href="http://en.wikipedia.org/wiki/Gleaming_the_Cube" rel="nofollow">Gleaming the Cube</a> 2: Edge of the Monad</strong></p>
<h1>
<a aria-hidden="true" class="anchor" href="#avoid-introducing-concurrency" id="user-content-avoid-introducing-concurrency"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a href="https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines#59-avoid-introducing-concurrency">Avoid introducing Concurrency</a>
</h1>
<blockquote>
<p>This includes not using such mechanisms as setTimeout, setImmediate, requestAnimationFrame, process.nextTick, etc which should be avoided directly in your code, and instead be wrapped by a Scheduler class.</p>
</blockquote>
<h1>
<a aria-hidden="true" class="anchor" href="#recursion-scheduler-or-infinite-loop-generator" id="user-content-recursion-scheduler-or-infinite-loop-generator"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a href="https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines#512-avoid-deep-stacks-caused-by-recursion-in-operators">Recursion Scheduler or Infinite Loop Generator</a>
</h1>
<p>scheduleRecursive can be used or:</p>
<pre><code>Rx.Observable.repeat = function (value) {
  return Rx.Observable.from(
    function* () {
      while(true) { yield value; }
    }());
};
</code></pre>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <ul>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/0.-History-leadup">History, Lead Up</a></p>
</li>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/1.-First-steps%2C-purescript-is-magic">Purescript is Magic</a></p>
</li>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/Z.1.-ReactiveJS-Sections">ReactiveJS</a>
&lt;- Click here for breakdown of sections within these parts.</p>
<ul>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/2.-Initial-ReactiveJS-Port">ReactiveJS Part 1: Reactive Donkey</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/B.-ReactiveJS-Part-2%3A-Completed-LearnRX">ReactiveJS Part 2: Learn RX</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/F.-RXJs-Design-Principles">ReactiveJs Part 3: Design Guidelines and Examples</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/G.-RxJS-Donkey-Refactor">ReactiveJs Part 4: Refactor Donkey</a></li>
</ul>
</li>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/A.-Audio-Break">Audio Break</a></p>
<ul>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/A.1.-WebAudioX">WebAudioX</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/A.2.-iOS-Audio-Combined-with-RXJs-Issues">iOS Issues</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/A.3.-Debugging-jquery.mb.audio">Debugging jquery.mb.audio</a></li>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/A.4.-HowlerJS---WebAudio-with-HTML5-Audio-fallback">HowlerJS for WebAudio</a></li>
</ul>
</li>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/C.-Video-Editing-and-Game-Modding">Video Editing and Game Modding</a></p>
<ul>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/C.1.-Sims4-Modding">Sims 4 Python</a></li>
</ul>
</li>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/D.-Ramda">Ramda Functional Javascript</a></p>
</li>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/E.-Javascript-Testing">Javascript Testing</a></p>
<ul>
<li><a class="internal present" href="/cycle23/cycle23.github.io/wiki/E.1.-Testing-with-QUnit">Testing with QUnit</a></li>
</ul>
</li>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/H.-Angular-Donkey">AngularJs Part 1: Angular Donkey</a></p>
</li>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/I.-Android-Development">Android Development</a></p>
</li>
<li>
<p><a class="internal present" href="/cycle23/cycle23.github.io/wiki/Z.-Appendix">Appendix, references</a></p>
</li>
</ul>

          </div>
        </div>
    </div>]