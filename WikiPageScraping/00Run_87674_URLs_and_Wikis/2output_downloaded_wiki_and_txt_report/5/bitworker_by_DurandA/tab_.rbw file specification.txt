[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Data in a torrent file is bencoded, with the following keys:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>info</td>
<td>dictionary</td>
<td>File information for the torrent.</td>
</tr>
<tr>
<td>announce</td>
<td>string</td>
<td>The URL of the tracker for the torrent.</td>
</tr>
<tr>
<td>announce-list</td>
<td>list</td>
<td>A listing of the URLs of alternate trackers for the torrent. The URLs are divided into groups (each is a list), trackers in each group may be shuffled, and groups are processed in the order they appear. Optional.</td>
</tr>
<tr>
<td>command</td>
<td>string</td>
<td>Unix shell command. Variables set are $PIECE_IDX, $FILE_IDX and $PART_IDX (see <a href="#command-handling">below</a>)</td>
</tr>
<tr>
<td>complete command</td>
<td>string</td>
<td>Unix shell command. Variables set are $PART_LIST and $FILE.</td>
</tr>
<tr>
<td>creation date</td>
<td>integer</td>
<td>The creation date and time, expressed as the number of seconds since January 1, 1970 12:00. Optional.</td>
</tr>
<tr>
<td>comment</td>
<td>string</td>
<td>Any user comment for the torrent. Optional.</td>
</tr>
<tr>
<td>created by</td>
<td>string</td>
<td>Application-generated string that may include its name, version, etc. Optional.</td>
</tr>
</tbody>
</table>
<h2>
<a aria-hidden="true" class="anchor" href="#file-information-info" id="user-content-file-information-info"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>File information (info)</h2>
<p>The info key corresponds to the files in the torrent. There are two-forms: a single-file format that contains only a single file, and a multi-file format that may contain multiple files and directories. The info key itself corresponds to a another (essentially "nested") dictionary with the keys as follows:</p>
<h3>
<a aria-hidden="true" class="anchor" href="#common-file-keys" id="user-content-common-file-keys"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Common file keys</h3>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>piece length</td>
<td>integer</td>
<td>The number of bytes in each piece. Files in a torrents are divided into "pieces" with a specific length.</td>
</tr>
</tbody>
</table>
<h3>
<a aria-hidden="true" class="anchor" href="#single-file-format-keys" id="user-content-single-file-format-keys"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Single-file format keys</h3>
<p><em>Omitted</em></p>
<h3>
<a aria-hidden="true" class="anchor" href="#multi-file-format-keys" id="user-content-multi-file-format-keys"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Multi-file format keys</h3>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>string</td>
<td>The proposed name of directory to store the files.</td>
</tr>
<tr>
<td>files</td>
<td>list (of dictionary)</td>
<td>A list of dictionaries, one dictionary for each file in the torrent, which is described in the next table.</td>
</tr>
<tr>
<td>A dictionary in the file list corresponds to one file and contains the following:</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>length</td>
<td>integer</td>
<td>The length of the file, in bytes.</td>
</tr>
<tr>
<td>path</td>
<td>list (of string)</td>
<td>A list of strings representing the relative path to the file.</td>
</tr>
</tbody>
</table>
<h2>
<a aria-hidden="true" class="anchor" href="#command-handling" id="user-content-command-handling"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Command handling</h2>
<p>Output pieces are built from unix command stdout. Stderr is ignored. For example the following command
<code>I=0; for i in {0..4095}; do printf -v hex '%x' $I; printf "\x$hex"; done &gt; zeros.file</code> creates a 4k file filled with 0. If we want to create N files filled with \x$N (the first file is filled with \x00s, the second file is filled with \x01s...) we can use the command <code>for i in {0..4095}; do printf -v hex '%x' $FILE_IDX; printf "\x$hex"; done</code></p>
<p>The following environment variables are set in the execution environment</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Descripion</th>
</tr>
</thead>
<tbody>
<tr>
<td>$PIECE_IDX</td>
<td>Piece index (starting from 0).</td>
</tr>
<tr>
<td>$FILE_IDX</td>
<td>Index of the output file (starting from 0).</td>
</tr>
<tr>
<td>$PART_IDX</td>
<td>Piece index of the current file (starting from 0 for each file).</td>
</tr>
</tbody>
</table>

        </div>

    </div>]