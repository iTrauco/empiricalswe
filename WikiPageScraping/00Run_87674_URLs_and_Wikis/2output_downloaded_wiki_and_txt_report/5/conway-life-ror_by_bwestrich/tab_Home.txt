[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Notes by: Brian Westrich, <a href="mailto:bw@mcwest.com">bw@mcwest.com</a></p>
<h1>
<a aria-hidden="true" class="anchor" href="#code-retreat-minneapolis-2012" id="user-content-code-retreat-minneapolis-2012"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Code Retreat Minneapolis, 2012</h1>
<p>Code Retreat is a set of intentional practice sessions intended to improve one’s craft of coding. The analogy our moderator used was that of football practice: players run through drills (e.g. high stepping through tires) that hone the skills needed in game conditions, but in a situation where other game day pressures (crowds, pressure from opponents) do not distract.  To practice coding, we should use similar drills, free from our project oriented such as “get it done now”, “use the legacy code base”, and “adhere to our existing team structures”.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#venue" id="user-content-venue"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Venue</h2>
<ul>
<li>Code Retreat Minneapolis was held on December 8, 2012 at Bloom Health in downtown Minneapolis from 9am to 4pm, and was moderated by Kyle Boon. The retreat was held the day after a blizzard, so even though I only heard about it the evening before (from my colleague, Mike Calvo) I was able to sneak in without preregistration due to a number of cancellations.  About 20 participants attended.</li>
<li>We wrote code on our own laptops, though were able to dock these to the high resolution monitors and keyboards provided by the host. All laptops were MacBooks unless otherwise noted.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#practice-sessions" id="user-content-practice-sessions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Practice Sessions</h2>
<p>The day consisted of five practice sessions. During each session, we paired with a different person. At the end of each session, the entire group reflected on what we learned, and then we discarded any code developed during that session.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#initial-session" id="user-content-initial-session"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Initial session</h3>
<ul>
<li>Structure: We learned the problem domain that we were to solve: Conway’s game of life. References for this included the Wikipedia page, as well as a few other very interesting running examples of the game.</li>
<li>Team: I paired with Mike, and we implemented a partial solution. Much of our time was spent discussing the names of the domain objects.</li>
<li>Technology: We used Java and JUnit as language/testing framework, and IntelliJ for an IDE.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#no-conditionals-or-branching" id="user-content-no-conditionals-or-branching"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>No conditionals or branching</h3>
<ul>
<li>Structure: In this session, we were not allowed to use various fundamental programming constructs. The one that stood out for me was to not being able to do branching (if statements). The only way we could do without these was to use a cumbersome and impractical combination of polymorphism and maps.  “Running with your hands behind your back”.</li>
<li>Team: I paired with someone who was knowledgeable in LUA. Prior to our implementation session, she gave me a tour of some code she was aware of that used Spock to do table driven tests.</li>
<li>Technology: We didn’t get as far as we’d liked in LUA due to the programming constraints of the session, and ended up sketching out our ideas on this using Java/Eclipse.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#test-driven-development-tdd" id="user-content-test-driven-development-tdd"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Test Driven Development (TDD)</h3>
<ul>
<li>Structure: In this session, one of us wrote a test that failed, and then the other fixed the test and cleaned up the code. We then switched roles, repeating for the remainder of the session. We were instructed not to talk, but instead to only communicate via the code we wrote.</li>
<li>Team: I paired with someone who was familiar with using the “shoulda” framework which makes ruby unit tests more readable. I wasn’t as productive as I’d like to be, as I hadn’t yet before used the “class” related syntax of ruby, and also was not very familiar with how ruby responds to syntax errors. So we ended up talking as a pair related to questions regarding ruby syntax. Still, we were able to get several iterations of testing done.</li>
<li>Technology: We used ruby for the language, “shoulda” and Test::Unit for testing framework, and TextMate for the IDE.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#2-minute-fix" id="user-content-2-minute-fix"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>2 minute fix</h3>
<ul>
<li>Structure: One of us would write a test, and then the other would try to fix it in two minutes or less.  If we didn’t finish, we used version control (everyone used git) to rollback the changes we’d done and then the same person tried again. If needed, the other person (who wrote the broken test) would attempt to pare down the scope of the test to make it possible to fix in 2 minutes.</li>
<li>Team: I paired with someone who knew Java/JUnit. We found that the first few tests we wrote were difficult to fix in the allotted time. The session helped us keep testable units at a bare minimum of size, and was also great pairing practice related to all the TDD related tools (IDE, testing library, etc.).</li>
<li>Technology: We used Java/JUnit, with Eclipse for an IDE. Unlike the other sessions, for this session we used a laptop running MS Windows.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#final-implementation" id="user-content-final-implementation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Final implementation</h3>
<ul>
<li>Structure: We went back to the person we originally paired with and spent 45 minutes trying to recreate the application from scratch.</li>
<li>Team: I again paired with Mike. We were able to complete the domain model and a number of tests, but not the related Grails application. Within a few minutes after the session ended, Mike had added a few more tests and finalized the domain model implementation. A few days later he implemented the Grails part of the application. I then tweaked the Grails part a bit and posted it at <a href="https://bitbucket.org/bwestrich/conway-life-gg" rel="nofollow">https://bitbucket.org/bwestrich/conway-life-gg</a>.</li>
<li>Technology: Groovy/Grails for application, JUnit for testing, IntelliJ for IDE.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#reflections" id="user-content-reflections"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Reflections</h2>
<ul>
<li>It was interesting to learn how other people approached a particular problem, and the benefits of each.</li>
<li>Throwing away code five times within a single day was actually quite productive: We could iteratively improve our designs very rapidly as we weren’t constrained by early design decisions. Examples of such decisions included what to name the key domain objects (we evolved from ‘grid’ to ‘board’), and the responsibilities that each object should be (we evolved from allowing the cell to be able to calculate whether it was alive or dead to having the grid do this).</li>
<li>There was considerable ramp-up time when pairing due to differences in machine setup, language, IDE, and tools used, etc.</li>
<li>Only one team completed an implementation that could be demoed to the group: they implemented their solution in Ruby on Rails.</li>
<li>During the TDD session that used Ruby/shoulda, the ability to express the intent of test cases in plain English helped greatly with the communication, especially because we weren’t supposed to talk as pairs.</li>
<li>There was some skepticism on whether TDD was a productivity gain, though I sensed many participants didn’t have appreciable experience with TDD.  In the particular example of our (Mike and my) implementation, the tests that were failing at the end of the session eventually led us to a simple error we’d made in parameter order. This error would have taken longer to resolve if we had not written tests.</li>
<li>Several participants mentioned they have gotten good results (in their workplace) using the mockito test framework.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#other-notes" id="user-content-other-notes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Other notes</h2>
<p>###Groovy grails mercurial commands</p>
<ul>
<li>IDE: Groovy Grails ToolSuite (from SpringSource)</li>
<li>Creating a local repo
Right click, Team, Mercurial, …….</li>
<li>Pushing committed changes back to the public repo (requires ssh public key)</li>
</ul>
<pre><code>cd …../workspace-ggts-3.1.0.RELEASE/conway-life-gg
hg push ssh://hg@bitbucket.org/bwestrich/conway-life-gg
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#ruby-unit-testing" id="user-content-ruby-unit-testing"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Ruby unit testing</h3>
<ol>
<li>installed dvm/ruby version 1.9(using curl command, for more info  google: rvm.io). Note: wasn’t able to get sublime to use this version of ruby, so installed the ruby gems listed below into the 1.8 version of ruby.</li>
<li>installed shoulda (via admin account, as sudo) using:
a.	gem install shoulda-context
b.	gem install shoulda-matchers</li>
<li>Used Test:Unit and shoulda. For example, here is a minimal test:</li>
</ol>
<div class="highlight highlight-source-ruby"><pre><span class="pl-k">require</span> <span class="pl-s"><span class="pl-pds">'</span>test/unit<span class="pl-pds">'</span></span>
<span class="pl-k">require</span> <span class="pl-s"><span class="pl-pds">'</span>rubygems<span class="pl-pds">'</span></span>
<span class="pl-k">require</span> <span class="pl-s"><span class="pl-pds">'</span>shoulda-context<span class="pl-pds">'</span></span>
<span class="pl-k">require</span> <span class="pl-s"><span class="pl-pds">'</span>shoulda-matchers<span class="pl-pds">'</span></span>
<span class="pl-k">require</span> <span class="pl-s"><span class="pl-pds">'</span>../app/cell<span class="pl-pds">'</span></span>

<span class="pl-k">class</span> <span class="pl-en">TestCell<span class="pl-e"> &lt; Test::Unit::TestCase</span></span>
  context <span class="pl-s"><span class="pl-pds">"</span>new cell<span class="pl-pds">"</span></span> <span class="pl-k">do</span> 
    setup <span class="pl-k">do</span>
    	<span class="pl-smi">@cell</span> <span class="pl-k">=</span> <span class="pl-c1">Cell</span>.<span class="pl-k">new</span> 
    <span class="pl-k">end</span>
    should <span class="pl-s"><span class="pl-pds">"</span>not be alive by default<span class="pl-pds">"</span></span> <span class="pl-k">do</span>
    	assert <span class="pl-smi">@cell</span>.alive <span class="pl-k">==</span> <span class="pl-c1">false</span>
    <span class="pl-k">end</span> 
  <span class="pl-k">end</span> 
<span class="pl-k">end</span></pre></div>
<p>As a learning exercise, I then began implementing a Ruby on Rails version of the above mentioned Groovy Grails app here: <a href="https://github.com/bwestrich/conway-life-ror">https://github.com/bwestrich/conway-life-ror</a>.</p>

        </div>

    </div>]