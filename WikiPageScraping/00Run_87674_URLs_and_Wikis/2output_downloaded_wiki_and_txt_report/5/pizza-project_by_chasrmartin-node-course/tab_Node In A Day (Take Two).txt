[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#introduction" id="user-content-introduction"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Introduction</h1>
<p><strong>Node In A Day</strong> is a course intended to take a moderately experienced programmer or front-end designer through the learning curve to create an example application using the "MEAN stack", a full stack for web application programming using Javascript both in the browser, and in the server.  "MEAN" stands for:</p>
<ul>
<li>MongoDB for the database</li>
<li>Express.js to provide an event-driven framework allowing the application to communicate between the browser component of the application to the server component</li>
<li>Angular.js to provide a basis for a very interactive browser application, and</li>
<li>Node.js to provide a high-performance server managing the application.</li>
</ul>
<p>At the end of the day, a student should have a basic application running, using the database, providing a working front end, and running under a node.js server.</p>
<p>We assume the student is already reasonably familiar, in particular, with HTML, so we don't concentrate on the pretty front end.  Instead, we will concentrate on these topics:</p>
<ul>
<li>Installing the full MEAN stack</li>
<li>Familiarizing the student with <em>document-oriented</em>, "NoSQL" databases</li>
<li>Understanding the basic concepts of "RESTful" APIs to web applications</li>
<li>Constructing a RESTful application</li>
</ul>
<p><a class="internal present" href="/chasrmartin-node-course/pizza-project/wiki/Notes-taken">Notes taken</a></p>
<h1>
<a aria-hidden="true" class="anchor" href="#prework" id="user-content-prework"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Prework</h1>
<ol>
<li>
<p>Set-up your development environment</p>
<ul>
<li>install node.js <a href="https://github.com/joyent/node/wiki/installation">instructions here</a>;</li>
<li>Either install MongoDB on your local machine (download <a href="https://www.mongodb.org/downloads" rel="nofollow">here</a>)or set up a MongoLab free account (which you can do <a href="https://mongolab.com/" rel="nofollow">here</a>.)  Make sure you can <a class="internal absent" href="/chasrmartin-node-course/pizza-project/wiki/run-the-mongo-command-line-client-on-your-mongo-instance">run the mongo command line client on your mongo instance</a>.
<ul>
<li><a class="internal absent" href="/chasrmartin-node-course/pizza-project/wiki/setting-up-a-local-Mongo">setting up a local Mongo</a></li>
<li><a class="internal absent" href="/chasrmartin-node-course/pizza-project/wiki/setting-up-a-MongoLab-instance">setting up a MongoLab instance</a></li>
<li><em>other free mongos?</em></li>
</ul>
</li>
<li>install <a href="https://pypi.python.org/pypi/httpie" rel="nofollow">httpie</a>
</li>
</ul>
</li>
<li>
<p>Review these tutorials</p>
<ul>
<li><a href="http://scotch.io/bar-talk/setting-up-a-mean-stack-single-page-application" rel="nofollow">Setting up a MEAN stack single page application</a></li>
<li>
<a href="http://scotch.io/tutorials/javascript/creating-a-single-page-todo-app-with-node-and-angular" rel="nofollow">Create a single-page to-do app with Node and Angular</a>.</li>
</ul>
</li>
<li>
<p>Download and unpack (or clone using <code>git clone</code>) the To-Do tutorial code.  We will be stealing liberally from this.  If you clone it, you will get the results in a directory names <code>node-todo</code>. We'll assume that this is the name of the toturial code, and we'll assume your code is in a peer directory named <code>project</code>.</p>
</li>
</ol>
<pre><code>$ ls -FaCd
node-todo/ project/
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#project" id="user-content-project"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Project</h3>
<p>We're going to follow the To Do tutorial.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#step-0" id="user-content-step-0"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Step 0.</h4>
<p>Download and install the Scotch.io To Do list tutorial.  We'll be referring to this (and stealing code) as we go.</p>
<p>The instructions on the web page a slightly wrong, so use these steps below:</p>
<pre><code>$ git clone https://github.com/scotch-io/node-todo.git
</code></pre>
<pre><code>$ npm install 
</code></pre>
<p>Look at the file <code>package.json</code>:</p>
<pre><code>{
  "name"         : "node-todo",
  "version"      : "0.0.0",
  "description"  : "Simple todo application.",
  "main"         : "server.js",
  "author"       : "Scotch",
  "dependencies" : {
    "express"         : "~4.6.1",
    "mongoose"        : "~3.8.13",
    "morgan"          : "~1.1.1",
    "body-parser"     : "~1.4.3",
    "method-override" : "~2.1.1"
  }
}
</code></pre>
<p>The dependencies section shows which packages are to be installed. These are:</p>
<ul>
<li>
<a href="http://expressjs.com/" rel="nofollow">express.js</a> -- an application framework that will provide tools for building our APIs under HTTP</li>
<li>
<a href="http://mongoosejs.com/" rel="nofollow">mongoose.js</a> -- a "object-document mapper" layer for MongoDB in Node.</li>
</ul>
<p>This includes three packages we aren't interested in for the day.</p>
<ul>
<li>morgan.js -- a logging package</li>
<li>body-parser -- tools for manipulating the DOM components from the browser side inside the Node server</li>
<li>method-override -- a tool that lets you interpose your own code into a request handler.</li>
</ul>
<h4>
<a aria-hidden="true" class="anchor" href="#step-1-create-the-base-setup-in-a-new-directory" id="user-content-step-1-create-the-base-setup-in-a-new-directory"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Step 1: Create the "Base Setup" in a new directory.</h4>
<pre><code>$ mkdir -p project/public
</code></pre>
<p>You can pick your own name for "project".  This creates the <code>project</code> directory and one subdirectory <code>public</code>.</p>
<p>Copy in the <code>package.json</code> file above, and run <code>npm install</code>.</p>
<p>Copy the code below into the base <code>server.js</code>:</p>
<pre><code>// server.js

    // set up ========================
    var express  = require('express');
    var app      = express();                               // create our app w/ express
    var mongoose = require('mongoose');                     // mongoose for mongodb
    var morgan = require('morgan');             // log requests to the console (express4)
    var bodyParser = require('body-parser');    // pull information from HTML POST (express4)
    var methodOverride = require('method-override'); // simulate DELETE and PUT (express4)

    // configuration =================

    mongoose.connect('mongodb://node:node@mongo.onmodulus.net:27017/uwO3mypu');     // connect to mongoDB database on modulus.io

    app.use(express.static(__dirname + '/public'));                 // set the static files location /public/img will be /img for users
    app.use(morgan('dev'));                                         // log every request to the console
    app.use(bodyParser.urlencoded({'extended':'true'}));            // parse application/x-www-form-urlencoded
    app.use(bodyParser.json());                                     // parse application/json
    app.use(bodyParser.json({ type: 'application/vnd.api+json' })); // parse application/vnd.api+json as json
    app.use(methodOverride());

    // listen (start app with node server.js) ======================================
    app.listen(8080);
    console.log("App listening on port 8080");

</code></pre>
<p>Modify the <code>mongoose.connect()</code> line to point to your Mongo instance.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#step-two-create-a-model" id="user-content-step-two-create-a-model"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Step Two: Create a model</h4>
<p>Again, following the tutorial, add:</p>
<pre><code>// define model =================
    var Todo = mongoose.model('Todo', {
        text : String
    });
</code></pre>
<p>Yeah, that's it.  No DDL.  Our database consists of a bunch of JSON records:</p>
<pre><code>{ _id: ObjectID(horrible hex number here), text:"Do this!" }
</code></pre>
<p>and the <code>_id</code> part -- which is the "primary key" is generated automagically by Mongo.</p>
<blockquote>
<p>Note that this is just demonstration so far. Our real model will be tied in with the Angular component.</p>
</blockquote>
<h4>
<a aria-hidden="true" class="anchor" href="#step-3-create-routes" id="user-content-step-3-create-routes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Step 3: Create Routes</h4>
<p>Again, following the tutorial:</p>
<pre><code>// routes ======================================================================

    // api ---------------------------------------------------------------------
    // get all todos
    app.get('/api/todos', function(req, res) {

        // use mongoose to get all todos in the database
        Todo.find(function(err, todos) {

            // if there is an error retrieving, send the error. nothing after res.send(err) will execute
            if (err)
                res.send(err)

            res.json(todos); // return all todos in JSON format
        });
    });

    // create todo and send back all todos after creation
    app.post('/api/todos', function(req, res) {

        // create a todo, information comes from AJAX request from Angular
        Todo.create({
            text : req.body.text,
            done : false
        }, function(err, todo) {
            if (err)
                res.send(err);

            // get and return all the todos after you create another
            Todo.find(function(err, todos) {
                if (err)
                    res.send(err)
                res.json(todos);
            });
        });

    });

    // delete a todo
    app.delete('/api/todos/:todo_id', function(req, res) {
        Todo.remove({
            _id : req.params.todo_id
        }, function(err, todo) {
            if (err)
                res.send(err);

            // get and return all the todos after you create another
            Todo.find(function(err, todos) {
                if (err)
                    res.send(err)
                res.json(todos);
            });
        });
    });

</code></pre>
<h4>
<a aria-hidden="true" class="anchor" href="#step-4-run-the-app-and-stop-and-think" id="user-content-step-4-run-the-app-and-stop-and-think"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Step 4: Run the app and stop and think</h4>
<p>You can now run the primitive application with <code>node server.js</code> or <code>npm start</code>.</p>
<p>What have we done?</p>
<ul>
<li>we have the basic structure for the application</li>
<li>we've defined out API</li>
</ul>
<p>But what's a RESTful API?</p>
<p>Representational State Transfer (REST) is the natural architectural style for Web APIs. The basic idea is this:</p>
<ul>
<li>we create a hierarchy of <em>resources</em> which are the data that we will manage, in this case "to do items".</li>
<li>we name those resources using HTTP URL paths</li>
<li>we manipulate them using the HTTP verbs: GET for "read", POST for "create", PUT for "update", and DELETE for, you guessed it, "delete".</li>
</ul>
<p>Our API now has a route to '/api/todos/' and defines two operations: "read all existing todos" and "create a new todo and return the whole list of todos again."</p>
<p>So now that you have the app running, let's add a simple front end.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#step-5-steal-the-front-end" id="user-content-step-5-steal-the-front-end"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Step 5: Steal the front end.</h4>
<p>We're going to now steal the scotch.io app from the download. We will assume the code is in a directory at <code>../node-todo</code>.</p>
<ul>
<li>copy the <code>config</code>, <code>public</code>, and <code>app</code> directories and the <code>server.js</code> file from the tutorial code.</li>
</ul>
<p>This gives us:</p>
<pre><code>config
└── database.js
app
├── models
│   └── todo.js
└── routes.js
public/
├── index.html
└── js
    ├── controllers
    │   └── main.js
    ├── core.js
    └── services
        └── todos.js
</code></pre>
<ul>
<li>Modify the <code>database.js</code> file to point to your own Mongo DB.</li>
</ul>
<p>Run with <code>node server.js</code>, open <a href="http://localhost:8080" rel="nofollow">http://localhost:8080</a> and add a couple of to-do's.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#step-6-experiment-with-the-api" id="user-content-step-6-experiment-with-the-api"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Step 6: Experiment with the API.</h4>
<p>Now we're going to look at the app from the command line, and ignore the front end we just installed.</p>
<ul>
<li>
<p>Read the instructions for <a href="https://pypi.python.org/pypi/httpie" rel="nofollow">HttPIE</a></p>
</li>
<li>
<p>Get the basic page:</p>
</li>
</ul>
<pre><code>$ http http://localhost:8080
</code></pre>
<p>By default, HttPIE does a GET of the address you give it, and sure enough, you should get the HTML (plus some headers) from the page we have.</p>
<p>Now, where are the to-do items you entered?  The HTML includes just this:</p>
<div class="highlight highlight-text-html-basic"><pre><span class="pl-c"><span class="pl-c">&lt;!--</span> LOOP OVER THE TODOS IN $scope.todos <span class="pl-c">--&gt;</span></span>
				&lt;<span class="pl-ent">div</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>checkbox<span class="pl-pds">"</span></span> <span class="pl-e">ng-repeat</span>=<span class="pl-s"><span class="pl-pds">"</span>todo in todos<span class="pl-pds">"</span></span>&gt;
					&lt;<span class="pl-ent">label</span>&gt;
						&lt;<span class="pl-ent">input</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>checkbox<span class="pl-pds">"</span></span> <span class="pl-e">ng-click</span>=<span class="pl-s"><span class="pl-pds">"</span>deleteTodo(todo._id)<span class="pl-pds">"</span></span>&gt; {{ todo.text }}
					&lt;/<span class="pl-ent">label</span>&gt;
				&lt;/<span class="pl-ent">div</span>&gt;

				&lt;<span class="pl-ent">p</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>text-center<span class="pl-pds">"</span></span> <span class="pl-e">ng-show</span>=<span class="pl-s"><span class="pl-pds">"</span>loading<span class="pl-pds">"</span></span>&gt;
					&lt;<span class="pl-ent">span</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>fa fa-spinner fa-spin fa-3x<span class="pl-pds">"</span></span>&gt;&lt;/<span class="pl-ent">span</span>&gt;
				&lt;/<span class="pl-ent">p</span>&gt;</pre></div>
<p>This is because the Angular application will load our to-do's dynamically.  The data comes from our API, and all the to-do items are at <code>/api/todos</code>.  Let's look:</p>
<pre><code>$ http http://localhost:8080/api/todos`
</code></pre>
<p>You might get an example list this:</p>
<pre><code>HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 118
Content-Type: application/json; charset=utf-8
Date: Sun, 18 Jan 2015 18:40:46 GMT
ETag: W/"76-127759608"
X-Powered-By: Express

[
    {
        "__v": 0,
        "_id": "54bbf95cd4268c8d0469e735",
        "text": "first"
    },
    {
        "__v": 0,
        "_id": "54bbfcded4268c8d0469e736",
        "text": "second"
    }
]
</code></pre>
<p>Now, open your Mongo command line client.  The database is <code>test</code>, the collection is <code>todos</code>, so (this example is from my setup, should be made generic):</p>
<pre><code>MongoDB shell version: 2.6.6
connecting to: test
loaded ~/.mongorc.js
18:01:46Z chasrmartin &gt; use test
switched to db test
18:01:01Z chasrmartin &gt; show collections
creds
kittens
system.indexes
todos
18:01:06Z chasrmartin &gt; db.todoes.find()
18:01:31Z chasrmartin &gt; db.todos.find()
{
	"_id" : ObjectId("54bbf95cd4268c8d0469e735"),
	"text" : "first",
	"__v" : 0
}
{
	"_id" : ObjectId("54bbfcded4268c8d0469e736"),
	"text" : "second",
	"__v" : 0
}
</code></pre>
<p>This right here demonstrates the major advantage of using the MEAN stack and MongoDB.  The database and the representation you use in the front end are clearly and closely related.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#step-seven-add-dates" id="user-content-step-seven-add-dates"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Step Seven: Add Dates</h4>
<p>At this point, we have a real application running.  Now for the fun part:  Add a "date due" field to the application in the Angular component.  Instead of worrying about migrating the database, use <code>db.todos.drop()</code> from the Mongo client to drop the collection.</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><strong>Thinkful</strong> Node In A Day</p>

          </div>
        </div>
    </div>]