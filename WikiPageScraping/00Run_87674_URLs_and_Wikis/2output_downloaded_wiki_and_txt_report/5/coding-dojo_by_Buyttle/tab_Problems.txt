[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#p1---calculator" id="user-content-p1---calculator"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>P1 - Calculator</h2>
<p>Create a simple simple calculator with the following operations:</p>
<ul>
<li>Sum(a, b)</li>
<li>Sub(a, b)</li>
<li>Mult(a, b)</li>
<li>Div(numerator, denominator)</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#p2---reload-countdown" id="user-content-p2---reload-countdown"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>P2 - Reload countdown</h2>
<p>In many games, the logic of firing your gun is as follows:</p>
<ol>
<li>When the gun is loaded, pressing the fire key fires the gun</li>
<li>During a certain time period, the gun is "reloading", so re-pressing the fire key has no effect (other than maybe making a 'clicking' sound)</li>
<li>After the time period has passed, the gun may be fired again (assuming infinite-ammo..)</li>
</ol>
<p>After giving that logic some thought, one idea is having a "Countdown clock" acting as the reload mechanism.</p>
<p>Create a helper class called Countdown with operations:</p>
<ol>
<li>Stopped() - true if the countdown has stopped. This is the initial state</li>
<li>Start(seconds) - set the countdown to seconds, therefore Stopped() will return false</li>
<li>Decrease(seconds) - decrease the countdown. If time reaches (or passes!) zero, Stopped() will return true again</li>
</ol>
<p>When developing the class, think about names. What names feel most "natural" when testing? Feel free to choose other names than Stopped, Start and Decrease, if those feel awkward when testing the class.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#p3---undo-redo-stack" id="user-content-p3---undo-redo-stack"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>P3 - Undo-redo stack</h2>
<p>In the editors we use daily, for text, graphics, sound and so on, we are happy to have functionality to Undo and Redo mistakes we make.</p>
<p>There is a certain logic to how the undo-redo system works. You know it by heart surely, but just to get you started TDD'ing. "Command" is anything that manipulates our document in the editor, eg. adding or deleting some text.</p>
<ul>
<li>If we add command 1 and then command 2, we can undo 2 (but not undo 1, nor redo anything). Then we can undo 1 or redo 2 (but not carry out any other undo/redo). If we undo 1, then we can only redo 1, and then we can redo 2</li>
<li>If we add command 1, then command 2, then undo 2, then add command 3, we can undo 3. When we undo 3, we can then redo 3 or undo 1. When we undo 1, we can redo 1. If we redo 1, we can then undo 1 or redo 3.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#p4---fizzbuzz" id="user-content-p4---fizzbuzz"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>P4 - FizzBuzz</h2>
<p>Write a program that prints the numbers from 1 to 100. But for multiples of three print "Fizz" instead of the number and for the multiples of five print "Buzz". For numbers which are multiples of both three and five print "FizzBuzz".</p>
<p>Sample output:</p>
<p>1<br/>
2<br/>
Fizz<br/>
4<br/>
Buzz<br/>
Fizz<br/>
7<br/>
8<br/>
Fizz<br/>
Buzz<br/>
11<br/>
Fizz<br/>
13<br/>
14<br/>
FizzBuzz<br/>
16<br/>
17<br/>
Fizz<br/>
19<br/>
Buzz<br/>
... etc up to 100</p>
<h2>
<a aria-hidden="true" class="anchor" href="#p5---prime-factors" id="user-content-p5---prime-factors"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>P5 - Prime Factors</h2>
<p>Write a static method generate() that given an integer N will return a list of integers such that the numbers are the factors of N and are arranged in increasing numerical order. generate(1) should return an empty list. generate(30) should return the numbers 2,3,5.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#p6---blog" id="user-content-p6---blog"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>P6 - Blog</h2>
<p>Everybody is familiar with a simple blogging webapp.
Using unit testing techniques such as mocking, faking and stubs (google it! they're used for example to 'fake' a database in memory instead of on some far away server..) try to develop your own blog software featuring:</p>
<p>Post new entry<br/>
Delete existing entry<br/>
Update existing entry<br/>
Show 10 most recent entries<br/>
Tag an entry<br/>
Show all tags<br/>
Show blog entry with a certain tag</p>
<h2>
<a aria-hidden="true" class="anchor" href="#p7---vending-machine" id="user-content-p7---vending-machine"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>P7 - Vending Machine</h2>
<p>The goal of this challenge is to model a vending machine and the state it must maintain during its operation. How exactly the actions on the machine are driven is left intentionally vague and is up to the implementor.</p>
<p>The machine works like all vending machines: it takes money then gives you items. The vending machine accepts money in the form of nickels, dimes, quarters, and paper dollars. You must have at least have 3 primary items that cost $0.65, $1.00, and $1.50. The user may hit a "coin return" button to get back the money they've entered so far. If you put more money in than the item's price, you get change back.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#specification" id="user-content-specification"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Specification</h3>
<p>The valid set of actions on the vending machine are:</p>
<ul>
<li>NICKEL(0.05), DIME(0.10), QUARTER(0.25), DOLLAR(1.00) - insert money</li>
<li>COIN-RETURN - returns all inserted money</li>
<li>GET-A, GET-B, GET-C - select item A ($0.65), B ($1), or C ($1.50)</li>
</ul>
<p>The valid set of responses from the vending machine are:</p>
<ul>
<li>NICKEL, DIME, QUARTER, DOLLAR - return coin</li>
<li>A, B, C - vend item A, B, or C</li>
</ul>
<p>The vending machine must track the following state:</p>
<ul>
<li>available items - each item has a count, a price, and a selector (A,B,or C)</li>
<li>available change - # of nickels, dimes, quarters, and dollars available</li>
<li>currently inserted money</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#examples--input-and-output" id="user-content-examples--input-and-output"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples – Input and Output</h3>
<p>Example 1 - Buy B with exact change<br/>
input: Q, Q, Q, Q, GET-B<br/>
output: B</p>
<p>Example 2 - Start adding change but hit coin return to get change back<br/>
input: Q, Q, COIN-RETURN<br/>
output: Q, Q</p>
<p>Example 3 - Buy A without exact change (return $.35)<br/>
input: DOLLAR, GET-A<br/>
output: A, Q, D</p>

        </div>

    </div>]