[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>###salt_shaker(raw_pages, conditions, intersection=False)
return a list of result matched conditions.<br/>
用于筛选出meta中包含特定字段的content_file，参数conditions为一个list，里面的元素可以为字符串或者dict。
当元素为字符串时，只筛选
intersection： True 正交模式，取所有条件筛选出来结果的交集
False 追加模式，取所有条件筛选出来结果的和集</p>
<pre><code>result_pages = salt_shaker(pages, [{'type':'test'},'thumbnail'],intersection=False)
</code></pre>
<p>###glue(args=None)
return a path + args, but not domain.<br/>
args为一个dict，将args中的key和value成对配成url参数，添加到url后面</p>
<pre><code>relative_path_args = glue(args)
</code></pre>
<p>###stapler(raw_pages, paged=1, perpage=12)
return dict for paginator.<br/>
用于分页，返回的dict中，pages为当前页的content files，max为最大页数，paged为当前页码</p>
<pre><code>booklet = stapler(pages, paged=1, perpage=12)
</code></pre>
<p>###barcode_scanner(raw_pages, condition="category")
return dict with category alias and count.<br/>
用于分析content的分类和每个分类下的条目数，返回字典中key为类别的名称，value为类别的数量
condition可以为tag，category, type等等
cate_count = barcode_scanner(raw_pages, condition="tag")</p>
<p>###time_machine(raw_pages, precision='month', time_format='%Y/%m/%d')
return a list<br/>
将content files按时间分组，precision为分组精度，year为每年一组，month为每月一组，day为每天一组，以此类推。 time_format参数为时间格式，对应于meta中date的格式。
time_machine(pages, precision='month', time_format='%Y/%m/%d')</p>

        </div>

    </div>]