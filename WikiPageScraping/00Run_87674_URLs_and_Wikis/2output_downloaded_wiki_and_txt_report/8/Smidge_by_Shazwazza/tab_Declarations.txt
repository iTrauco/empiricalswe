[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#pre-defined-bundles" id="user-content-pre-defined-bundles"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Pre-defined bundles</h1>
<p>Define your bundles during startup:</p>
<div class="highlight highlight-source-cs"><pre><span class="pl-smi">services</span>.<span class="pl-en">UseSmidge</span>(<span class="pl-smi">bundles</span> <span class="pl-k">=&gt;</span>
    {
        <span class="pl-c"><span class="pl-c">//</span>Defining using JavaScriptFile's or CssFile's:</span>

        <span class="pl-smi">bundles</span>.<span class="pl-en">Create</span>(<span class="pl-s"><span class="pl-pds">"</span>test-bundle-1<span class="pl-pds">"</span></span>, <span class="pl-c"><span class="pl-c">//</span>bundle name</span>
            <span class="pl-k">new</span> <span class="pl-en">JavaScriptFile</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Js/Bundle1/a1.js<span class="pl-pds">"</span></span>),
            <span class="pl-k">new</span> <span class="pl-en">JavaScriptFile</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Js/Bundle1/a2.js<span class="pl-pds">"</span></span>));

        <span class="pl-c"><span class="pl-c">//</span>Or defining using file/folder paths:</span>

        <span class="pl-smi">bundles</span>.<span class="pl-en">Create</span>(<span class="pl-s"><span class="pl-pds">"</span>test-bundle-2<span class="pl-pds">"</span></span>, <span class="pl-smi">WebFileType</span>.<span class="pl-smi">Js</span>, 
            <span class="pl-s"><span class="pl-pds">"</span>~/Js/Bundle2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>~/Js/OtherFolder*js<span class="pl-pds">"</span></span>);

        <span class="pl-c"><span class="pl-c">//</span>Then there's all sorts of options for configuring bundles with regards to customizing their </span>
        <span class="pl-c"><span class="pl-c">//</span>individual pipelines, customizing how rendering is done based on Debug or Production environments, </span>
        <span class="pl-c"><span class="pl-c">//</span>if you want to enable file watchers, configure custom cache busters or the </span>
        <span class="pl-c"><span class="pl-c">//</span>cache control options, etc... There's even a fluent API to do this! Example: </span>

        <span class="pl-smi">bundles</span>.<span class="pl-en">Create</span>(<span class="pl-s"><span class="pl-pds">"</span>test-bundle-3<span class="pl-pds">"</span></span>, <span class="pl-smi">WebFileType</span>.<span class="pl-smi">Js</span>, <span class="pl-s"><span class="pl-pds">"</span>~/Js/Bundle3<span class="pl-pds">"</span></span>)
		    .<span class="pl-en">WithEnvironmentOptions</span>(<span class="pl-smi">BundleEnvironmentOptions</span>.<span class="pl-en">Create</span>()
				.<span class="pl-en">ForDebug</span>(<span class="pl-smi">builder</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">builder</span>
					.<span class="pl-en">EnableCompositeProcessing</span>()
					.<span class="pl-en">EnableFileWatcher</span>()
					.<span class="pl-en">SetCacheBusterType</span>&lt;<span class="pl-en">AppDomainLifetimeCacheBuster</span>&gt;()
					.<span class="pl-en">CacheControlOptions</span>(<span class="pl-smi">enableEtag</span>: <span class="pl-c1">false</span>, <span class="pl-smi">cacheControlMaxAge</span>: <span class="pl-c1">0</span>))
              <span class="pl-c"><span class="pl-c">//</span>You could also do .ForProduction here too!</span>
				.<span class="pl-en">Build</span>()
    });</pre></div>
<p><em>There are quite a few overloads and options for creating bundles.</em></p>
<h1>
<a aria-hidden="true" class="anchor" href="#view-based-declarations" id="user-content-view-based-declarations"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>View based declarations:</h1>
<h4>
<a aria-hidden="true" class="anchor" href="#inline-individual-declarations" id="user-content-inline-individual-declarations"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Inline individual declarations:</h4>
<p>If you don't want to create named bundles and just want to declare dependencies individually, you can do that too and Smidge will generate the URLs for these dependencies (they are essentially runtime bundles)</p>
<p>Require multiple files</p>
<div class="highlight highlight-source-cs"><pre>@{ <span class="pl-smi">Smidge</span>.<span class="pl-en">RequiresJs</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Js/test1.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>~/Js/test2.js<span class="pl-pds">"</span></span>); }</pre></div>
<p>Require a folder - optionally you can also include filters (i.e. this includes all .js files)</p>
<div class="highlight highlight-source-cs"><pre>@{ <span class="pl-smi">Smidge</span>.<span class="pl-en">RequiresJs</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Js/Stuff*js<span class="pl-pds">"</span></span>); }</pre></div>
<p>Chaining:</p>
<div class="highlight highlight-source-cs"><pre>@{ <span class="pl-smi">Smidge</span>
    <span class="pl-c"><span class="pl-c">//</span>external resources work too!</span>
    .<span class="pl-en">RequiresJs</span>(<span class="pl-s"><span class="pl-pds">"</span>//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js<span class="pl-pds">"</span></span>)
    .<span class="pl-en">RequiresJs</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Js/Folder*js<span class="pl-pds">"</span></span>)
    .<span class="pl-en">RequiresCss</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Css/test1.css<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>~/Css/test2.css<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>~/Css/test3.css<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>~/Css/test4.css<span class="pl-pds">"</span></span>);  
}</pre></div>
<h4>
<a aria-hidden="true" class="anchor" href="#inline-bundles" id="user-content-inline-bundles"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Inline bundles:</h4>
<p>You can create/declare bundles inline in your views too using this syntax:</p>
<p>JS Bundle:</p>
<div class="highlight highlight-source-cs"><pre>@{ <span class="pl-smi">SmidgeHelper</span>
        .<span class="pl-en">CreateJsBundle</span>(<span class="pl-s"><span class="pl-pds">"</span>my-awesome-js-bundle<span class="pl-pds">"</span></span>)
        .<span class="pl-en">RequiresJs</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Js/test1.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>~/Js/test2.js<span class="pl-pds">"</span></span>)
        .<span class="pl-en">RequiresJs</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Js/Folder*js<span class="pl-pds">"</span></span>);
}</pre></div>
<p>CSS Bundle:</p>
<div class="highlight highlight-source-cs"><pre>@{ <span class="pl-smi">SmidgeHelper</span>
        .<span class="pl-en">CreateCssBundle</span>(<span class="pl-s"><span class="pl-pds">"</span>my-cool-css-bundle<span class="pl-pds">"</span></span>)
        .<span class="pl-en">RequiresCss</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Css/test1.css<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>~/Css/test2.css<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>~/Css/test3.css<span class="pl-pds">"</span></span>);
}</pre></div>
<h1>
<a aria-hidden="true" class="anchor" href="#custom-ordering" id="user-content-custom-ordering"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Custom ordering</h1>
<p>If you need to order your dependencies in a custom way, you can do this both by using an <code>Order</code> parameter on your assets, or via code with a callback method.</p>
<p>You can supply an <code>Order</code> property to any <code>IWebFile</code>, the default is zero and it cannot be less than zero. If you assign an <code>Order</code> then it will be taken into account before the collection of files is processed.</p>
<p>For a more dynamic approach when using bundles, you can assign a callback. So you bundle definition could look something like:</p>
<div class="highlight highlight-source-cs"><pre><span class="pl-smi">bundles</span>.<span class="pl-en">Create</span>(<span class="pl-s"><span class="pl-pds">"</span>test-bundle-1<span class="pl-pds">"</span></span>,
    <span class="pl-k">new</span> <span class="pl-en">JavaScriptFile</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Js/Folder*js<span class="pl-pds">"</span></span>),
    <span class="pl-k">new</span> <span class="pl-en">JavaScriptFile</span>(<span class="pl-s"><span class="pl-pds">"</span>~/Js/Bundle1/a2.js<span class="pl-pds">"</span></span>))
    .<span class="pl-en">OnOrdering</span>(<span class="pl-smi">collection</span> <span class="pl-k">=&gt;</span>
    {
        <span class="pl-c"><span class="pl-c">//</span>return some custom ordering</span>
        <span class="pl-k">return</span> <span class="pl-smi">collection</span>.<span class="pl-en">OrderBy</span>(<span class="pl-smi">x</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">x</span>.<span class="pl-smi">FilePath</span>);
    });</pre></div>

        </div>

    </div>]