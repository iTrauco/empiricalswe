[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The command line offers the same functionality as the <a href="https://github.com/robertour/cultural-simulations/wiki/I.-Batch-Mode">Batch Mode</a>, but is meant to be used with servers and without a graphical user interface. It might also be preferred by individuals who prefer the keyboard over the mouse. After the introductory learning phase with the GUI, the command line is the fastest way to interact with the Cultural Simulator. It is also more flexible than <a href="https://github.com/robertour/cultural-simulations/wiki/I.-Batch-Mode">Batch Mode</a>, as creating configuration files is not necessary. Instead, the main input is a csv file, a <a href="https://github.com/robertour/cultural-simulations/wiki/H.-Output-Files">results folder</a>), or event files (and the language is parsed from the parameters in the command line).</p>
<p>In order to use the command line, you open a terminal and go to the directory on your computer that contains the <code>culsim.jar</code>, a Java executable. You can execute this file directly with <code>java -jar culsim.jar $ARGS</code>, but you will also find two executables, <code>culsim.bat</code> for Windows and <code>culsim.sh</code> for Unix/Linux (and iOS - note that this is not tested). If no arguments (<code>$ARGS</code>) are provided, then the Graphical User Interface will appear. As with <a href="https://github.com/robertour/cultural-simulations/wiki/I.-Batch-Mode">Batch Mode</a>, the are two general tests that can be performed with the Command Line:</p>
<h2>
<a aria-hidden="true" class="anchor" href="#1-testing-convergence-states-of-simulations-from-a-csv-file" id="user-content-1-testing-convergence-states-of-simulations-from-a-csv-file"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>1. Testing convergence states of simulations (from a csv file):</h2>
<p>Here is an example of how to test the convergence state of different simulation configurations in Unix/Linux (for Windows, use <code>culsim.bat</code>):</p>
<pre><code>./culsim.sh -id sample_experiment -ef sample.csv 
</code></pre>
<p>The <code>-id</code> parameter is optional; it sets a name for the results folder and final results file (See <a href="https://github.com/robertour/cultural-simulations/wiki/H.-Output-Files">H. Output Files</a>) that are stored in the current directory; the directory where the command is executed. If no <code>-id</code> is provided, <code>results</code> will be used by default.</p>
<p>The <code>-ef</code> parameter indicates the csv file that contains the configurations of the simulations that are going to be executed. The file <code>sample.csv</code> is provided in the same folder as an example (the two rows are equivalent except for the institutional influence). Here is a description of all columns (parameters) of the simulation, corresponding to the <a href="https://github.com/robertour/cultural-simulations/wiki/B.-Initial-Parameters">Initial Parameters</a> (with the exception of <code>REPETITIONS</code>, which indicate the number of times the configuration will be repeated):</p>
<table>
<thead>
<tr>
<th>CSV Column</th>
<th><a href="https://github.com/robertour/cultural-simulations/wiki/B.-Initial-Parameters">Parameter</a></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>REPETIONS</code></td>
<td>Repetitions</td>
</tr>
<tr>
<td><code>MODEL</code></td>
<td>Model</td>
</tr>
<tr>
<td><code>RANDOM_INITIALIZATION</code></td>
<td>Random initialization</td>
</tr>
<tr>
<td><code>ITERATIONS</code></td>
<td>Iterations</td>
</tr>
<tr>
<td><code>SPEED</code></td>
<td>Speed</td>
</tr>
<tr>
<td><code>BUFFER_SIZE</code></td>
<td>Buffer size</td>
</tr>
<tr>
<td><code>ROWS</code></td>
<td>Rows</td>
</tr>
<tr>
<td><code>COLS</code></td>
<td>Columns</td>
</tr>
<tr>
<td><code>RADIUS</code></td>
<td>Radius</td>
</tr>
<tr>
<td><code>FEATURES</code></td>
<td>Features</td>
</tr>
<tr>
<td><code>TRAITS</code></td>
<td>Traits</td>
</tr>
<tr>
<td><code>MUTATION</code></td>
<td>Mutation</td>
</tr>
<tr>
<td><code>SELECTION_ERROR</code></td>
<td>Selection error</td>
</tr>
<tr>
<td><code>INST_INFLUENCE</code></td>
<td>Institutional influence</td>
</tr>
<tr>
<td><code>AGENT_LOYALTY</code></td>
<td>Agent loyalty</td>
</tr>
<tr>
<td><code>DEMOCRACY</code></td>
<td>Democracy</td>
</tr>
<tr>
<td><code>PROPAGANDA</code></td>
<td>Propaganda</td>
</tr>
</tbody>
</table>
<h2>
<a aria-hidden="true" class="anchor" href="#2-testing-the-effect-of-an-event-in-simulation-sets-from-results-folder" id="user-content-2-testing-the-effect-of-an-event-in-simulation-sets-from-results-folder"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>2. Testing the effect of an event in simulation sets (from Results Folder):</h2>
<p>There are two ways of inputting events in the batch mode. One is configuring the event(s) directly in the command line. The other requires the use of the interface, first, to define and save the event(s) into a file and, then, to use the file to execute the event.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#a-configuring-events-directly-in-the-command-line" id="user-content-a-configuring-events-directly-in-the-command-line"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>A. Configuring events directly in the command line</h3>
<p>Here is an example of a (composed) event in the simulation, set in Unix/Linux (for Windows, use <code>culsim.bat</code>):</p>
<pre><code>./culsim.bat -r -id sample_event_experiment -rd ./sample_experiment/ -r 1  -evs G@U,0.1 I@N,0.5,0.5,0.2 P@iterations,1000 
</code></pre>
<p>The <code>-id</code> parameter is optional; it sets a name for the results folder and final results file (See <a href="https://github.com/robertour/cultural-simulations/wiki/H.-Output-Files">H. Output Files</a>), so that, instead of the current directory, they are stored inside the results folder (see <code>-rd</code> parameter). If no <code>-id</code> is provided, <code>results</code> will be used by default.</p>
<p>The <code>-rd</code> parameter indicates the results directory that will be used to test the (simple or composed) event. In this case we are assuming that you executed the previous step with the example, and that you keep the same ID, i.e. <code>sample_experiment</code>.</p>
<p>The <code>-r</code> is optional; it indicates the number of times the (simple or composed) event will be executed, for each simulation state (repetitions). Repetitions make more sense when the events depend on a probabilistic distribution, e.g. a uniform distribution of the event, or there is an element of probability, e.g. when the (non-probabilistic) Neumann distribution has a center that is selected randomly, by using -1 in the rows and/or columns.</p>
<p>The <code>-evs</code> parameter indicates the events which will be executed in the provided simulation sets. A special syntax (instead of <a href="https://github.com/robertour/cultural-simulations/wiki/D.-Events">events files</a>) has been provided to define events. It basically follows the format <code>Event_type@Distribution</code> for events that affect institutions or agents, and <code>P@parameter,value</code> for parameter change event. The first letter(s) before the <code>@</code> indicates the event type according to the following table:</p>
<table>
<thead>
<tr>
<th>Id</th>
<th><a href="https://github.com/robertour/cultural-simulations/wiki/D.-Events">Event</a></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>A</code></td>
<td>Apostasy</td>
</tr>
<tr>
<td><code>D</code></td>
<td>Institutional destruction</td>
</tr>
<tr>
<td><code>RP</code></td>
<td>Content removal (Partial)</td>
</tr>
<tr>
<td><code>RF</code></td>
<td>Content removal (Full)</td>
</tr>
<tr>
<td><code>CP</code></td>
<td>Conversion (Partial)</td>
</tr>
<tr>
<td><code>CF</code></td>
<td>Conversion (Full)</td>
</tr>
<tr>
<td><code>S</code></td>
<td>Settlement</td>
</tr>
<tr>
<td><code>I</code></td>
<td>Immigration</td>
</tr>
<tr>
<td><code>G</code></td>
<td>Decimation</td>
</tr>
<tr>
<td><code>P</code></td>
<td>Parameter Change Event</td>
</tr>
</tbody>
</table>
<p>The part after the <code>@</code> defines a <a href="https://github.com/robertour/cultural-simulations/wiki/D.-Events">distribution for events</a> that affect agents or institutions. The table below explains the meaning of each parameter for each distribution (the first parameter identifies the distribution, and the rest its parameters):</p>
<table>
<thead>
<tr>
<th>Parameters</th>
<th><a href="https://github.com/robertour/cultural-simulations/wiki/D.-Events">Distribution</a></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>U,p</code></td>
<td>(U)niform distribution with probability p</td>
</tr>
<tr>
<td><code>N,row,col,max,sd</code></td>
<td>(N)ormal distribution centered at (row,col) with maximum value of max and standard deviation sd. The center can be chosen randomly by using -1 in the rows and/or columns.</td>
</tr>
<tr>
<td><code>E,row,col,max,p</code></td>
<td>Normal (E)stimated distribution centered at (row,col) with maximum value of max and proportion p. The center can be chosen randomly by using -1 in the rows and/or columns.</td>
</tr>
<tr>
<td><code>W,row,col,r</code></td>
<td>Neumann (not ne(W) man) distribution center at (row,col) with radius r.  The center can be chosen randomly by using -1 in the rows and/or columns.</td>
</tr>
<tr>
<td><code>R,row1,col1,row2,col2</code></td>
<td>(R)ectangular distribution with the initial position at (row1,col1), and final position at (row2,col2)</td>
</tr>
</tbody>
</table>
<p>For the <strong>Parameter Change Event</strong>, instead of a distribution, the part after the <code>@</code> defines the parameter that will be affected, and its value. For example <code>P@iterations,1000</code> will change the number of iterations to 1000. The following table shows the list of arguments that can be used instead of <code>iterations</code>.</p>
<table>
<thead>
<tr>
<th>Argument</th>
<th><a href="https://github.com/robertour/cultural-simulations/wiki/B.-Initial-Parameters">Parameter</a></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>iterations</code></td>
<td>Iterations</td>
</tr>
<tr>
<td><code>speed</code></td>
<td>Speed</td>
</tr>
<tr>
<td><code>mutation</code></td>
<td>Mutation</td>
</tr>
<tr>
<td><code>selection</code></td>
<td>Selection error</td>
</tr>
<tr>
<td><code>influence</code></td>
<td>Institutional influence</td>
</tr>
<tr>
<td><code>loyalty</code></td>
<td>Agent loyalty</td>
</tr>
<tr>
<td><code>democracy</code></td>
<td>Democracy</td>
</tr>
<tr>
<td><code>propaganda</code></td>
<td>Propaganda</td>
</tr>
</tbody>
</table>
<h3>
<a aria-hidden="true" class="anchor" href="#b-using-pre-configured-file-event" id="user-content-b-using-pre-configured-file-event"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>B. Using pre configured file event</h3>
<p>Alternatively, you can create event files with the interface (see <a href="https://github.com/robertour/CulSim/wiki/D.-Events">D. Events</a>), and use -evs_file to specify the path of the file. An equivalent to the previous command would be:</p>
<pre><code>./culsim.bat -r -id sample_event_experiment -rd ./sample_experiment/ -r 1  -evs_file path/to/event_file
</code></pre>

        </div>

    </div>]