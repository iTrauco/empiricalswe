[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The simulation advances in <strong>iterations</strong>. An iteration has passed when all agents have had on average one opportunity of interaction (i.e. an agent transmitting a trait to another agent). The number of opportunities to interact is the same as the number of agents in the system, however, not necessarily all agents receive an opportunity in each iteration, because agents are selected randomly for interaction. Additionally, agents might reject the interaction for several possible reasons outlined in the rules of each model (See <a href="https://github.com/robertour/cultural-simulations/wiki/B.-Initial-Parameters">B. Initial Parameters</a>), which is why we call it a number of opportunities, and not a number of interactions, per iteration.</p>
<p>Progress of the simulation is not registered by iteration, instead, there are <strong>checkpoints</strong>. A checkpoint occurs per every <code>s</code> iterations. The parameter for <code>s</code> is <a href="https://github.com/robertour/CulSim/wiki/C.-Control-the-simulation#controlling-the-speed">Speed</a>. We have also covered how to set the value for Speed in the chapter on <a href="https://github.com/robertour/cultural-simulations/wiki/B.-Initial-Parameters">B. Initial Parameters</a>).</p>
<h3>
<a aria-hidden="true" class="anchor" href="#checkpoints" id="user-content-checkpoints"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Checkpoints</h3>
<p>During a <strong>Checkpoint</strong>, all the following steps occur:</p>
<ol>
<li>
<strong><a href="./F.-Response-variables">Response Variables</a></strong> are calculated according to the current state of the simulation.</li>
<li>Response variables are sent to the <strong><a href="./H.-Output-Files">progression output file(s)</a></strong>.</li>
<li>
<strong><a href="./E.-Cultural-Panels">Cultural Panels</a></strong>, <strong><a href="./G.-Graphs-and-Status-Bar">Graphs and Status Bar</a></strong> are updated with the current results.</li>
<li>The simulation checks for <strong>current queued <a href="./D.-Events">Events</a></strong> and executes them, if any.</li>
<li>The simulation checks if the simulation has been paused via the <strong>Pause Button <img alt="Pause Button" src="./icons/media-playback-pause.png"/></strong>
</li>
</ol>
<h3>
<a aria-hidden="true" class="anchor" href="#main-controls" id="user-content-main-controls"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Main Controls</h3>
<p>The <strong>Main Controls</strong> of the simulation are in the top-left corner of the interface.  Controls can also be found in the in the <code>Controls</code> menu.</p>
<p><img alt="Main Controls" src="./img/Control-Controls.png"/></p>
<p>From this bar, you can start the simulation via the <strong>Play Button</strong> <img alt="Play Button" src="./icons/media-playback-start.png"/> and stop it via the <strong>Stop Button</strong> <img alt="Stop Button" src="./icons/media-playback-stop.png"/> or the <strong>Pause Button</strong> <img alt="Pause Button" src="./icons/media-playback-pause.png"/>. However, there are a few important things to consider when using the latter two:</p>
<ul>
<li>
<p>Their actions will take effect only at a checkpoint. Depending on the speed parameter, you might have to wait until their effects are processed.</p>
</li>
<li>
<p>The main difference between pausing and stopping the simulation is that stop will store final file results. When the Play Button <img alt="Play Button" src="./icons/media-playback-start.png"/> is pressed after you have stopped the simulation, a new result folder will be generated in the workspace (see <a href="https://github.com/robertour/CulSim/wiki/H.-Output-Files">Output Files</a> for details). Pause is non-intrusive. It freezes the simulation without further implications. Pausing also does not allow saving or reloading simulation states. Visually, there is no difference between Pause and Stop.</p>
</li>
</ul>
<p>The two last buttons (both yellow) in the main control area are straightforward. You can save the current state of the simulation by clicking the <strong>Save State Button</strong> <img alt="Save State" src="./icons/flag-yellow.png"/>. You can also save this state as a file by clicking on <code>File -&gt; Save Simulation State</code>. After the simulation runs for some iterations, you can go back to a previously saved state, by pressing the <strong>Reload Simulation Button</strong> <img alt="Reload Simulation Button" src="./icons/edit-undo.png"/> (or reload a previously saved file with <code>File -&gt; Load Simulation State</code>).</p>
<p>One use of these two buttons is that the Saved State can become the state against which the progressing state of the simulation is compared, for example to compare how similar the results of Saved State and Current State are at any given moment. You can read further on this topic in the chapter on <a href="https://github.com/robertour/CulSim/wiki/F.-Response-variables">Response Variables</a>. The response variables of both states, saved and current, can also be observed in the <a href="https://github.com/robertour/CulSim/wiki/G.-Graphs-and-Status-Bar#stats-bar">Status Bar</a> at the bottom of the interface (blue font), while the <a href="https://github.com/robertour/CulSim/wiki/G.-Graphs-and-Status-Bar#graph-panels">Graphs</a> are useful to note visual changes in the progression. A quick guide for this process is provided at the end of the <a href="https://github.com/robertour/CulSim/wiki/A.-Quick-Start#restore-the-simulation-state-compare-single-event-with-initial-saved-state-and-compare-two-events">Quick Start</a> chapter.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#simulation-states-files" id="user-content-simulation-states-files"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Simulation states files</h3>
<p>Apart from saving and reloading a state on memory with the <strong>Save State Button</strong> <img alt="Save State" src="./icons/flag-yellow.png"/>, it is possible to save a state in a file with <code>File -&gt; Save Simulation State</code> and then recover it via <code>File -&gt; Load Simulation State</code>. This can be useful for several things:</p>
<ul>
<li>
<p>Multiple saved files can be stored and accessed successively to compare many different <a href="https://github.com/robertour/CulSim/wiki/D.-Events">Events</a>.</p>
</li>
<li>
<p>It is possible to run multiple instances of the program, loading different files in each one.</p>
</li>
<li>
<p>Saved State files can be opened in the parameters dialog (See <a href="https://github.com/robertour/CulSim/wiki/B.-Initial-Parameters">Setting Up Initial Parameters</a>).</p>
</li>
<li>
<p>Saved State files can be used to run simulations in <a href="https://github.com/robertour/CulSim/wiki/I.-Batch-Mode">Batch Mode</a>.</p>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#controlling-speed" id="user-content-controlling-speed"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Controlling Speed</h3>
<p>Right below the Main Controls, you can find the <strong>Speed Bar</strong>:</p>
<p><img alt="Speed Controller" src="./img/Control-Speed.png"/></p>
<p>The Speed Bar controls the simulation speed via reduction or increase of the frequency of updates on the screen. Lower values cause the simulation to run for a longer time span, as updates are provided more often. The value next to the Speed label (set at 100 in the above figure) shows how many iterations have to pass in order for a checkpoint to occur. Review Checkpoints <a href="https://github.com/robertour/CulSim/wiki/C.-Control-the-simulation#checkpoints">here</a>.</p>
<p>Events are always added to the simulation at a checkpoint and visualized in the interface. When we change the speed via speed bar, updating the variable might take some time. The <a href="https://github.com/robertour/CulSim/wiki/H.-Output-Files">results file</a> for the current simulation will also be affected because results are sent during checkpoints. Due to changes in speed, results will not be stored in regular intervals.</p>

        </div>

    </div>]