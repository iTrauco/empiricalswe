[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#%E7%9B%AE%E6%AC%A1" id="user-content-目次"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>目次</h1>
<ul>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E7%8A%B6%E6%B3%81%E3%82%92%E6%95%B4%E7%90%86">状況を整理</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#milkcocoa%E3%81%AEsend%E3%81%AE%E5%8B%95%E4%BD%9C%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF">MilkcocoaのSendの動作チェック</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#unity%E3%81%AE%E5%AE%9F%E8%A3%85%E3%81%AE%E6%96%B9%E9%87%9D">Unityの実装の方針</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#webplayer%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86">WebPlayerの設定を行う</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E3%82%AD%E3%83%A3%E3%83%A9%E3%82%AF%E3%82%BF%E3%83%BC%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">キャラクターのパラメータにアクセスできるようにする</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">ログインできるようにする</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#indexhtml%E3%81%AE%E4%BD%9C%E6%A5%AD">index.htmlの作業</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#javascript%E3%81%AE%E4%BD%9C%E6%A5%AD">JavaScriptの作業</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E3%83%97%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E3%81%AE%E9%80%81%E4%BF%A1%E5%87%A6%E7%90%86">プレイヤーの送信処理</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#cmilkcocoa%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88">CMilkcocoaスクリプト</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#cplayerbase%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88">CPlayerBaseスクリプト</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#cplayer%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88">CPlayerスクリプト</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E9%80%81%E4%BF%A1%E7%A2%BA%E8%AA%8D">送信確認</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E5%8F%97%E4%BF%A1%E5%87%A6%E7%90%86">受信処理</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#cmilkcocoa%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88-1">CMilkcocoaスクリプト</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#cplayerbase%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E6%A9%9F%E8%83%BD%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B">CPlayerBaseスクリプトに機能を追加する</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E9%80%9A%E4%BF%A1%E5%B0%82%E7%94%A8%E3%81%AE%E3%83%97%E3%83%AC%E3%83%8F%E3%83%96%E3%82%92%E4%BD%9C%E6%88%90">通信専用のプレハブを作成</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#cenemycomm%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88">CEnemyCommスクリプト</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E4%B8%80%E5%AE%9A%E4%BB%A5%E4%B8%8A%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%8F%97%E4%BF%A1%E3%81%8C%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E7%9B%B8%E6%89%8B%E3%81%AF%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B">一定以上、データの受信がなかった相手は削除する</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E4%BB%8A%E5%BE%8C%E3%81%AE%E3%81%82%E3%82%8C%E3%81%93%E3%82%8C">今後のあれこれ</a></li>
<li><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#unity%E7%B4%94%E6%AD%A3%E3%81%AE%E3%83%9E%E3%83%AB%E3%83%81%E3%83%97%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF">Unity純正のマルチプレイヤーネットワークについて</a></li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#%E7%8A%B6%E6%B3%81%E3%82%92%E6%95%B4%E7%90%86" id="user-content-状況を整理"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>状況を整理</h1>
<p>要件を考えながら、何を送信するかを決めていく</p>
<ul>
<li>挙動はrigidbodyに任せたい</li>
<li>座標と速度をなるべく一致させたい</li>
<li>よって、<strong>座標と速度は送信</strong>する</li>
<li>通信はUnityのループに間に合わないことが想定されるので、情報が届かないことがあることを前提とする</li>
<li>通信がない場合は、前回と同じ行動をしたものとみなす</li>
<li>よって、<strong>移動入力とジャンプしたかを送信</strong>する</li>
<li>全キャラクタの体当たりの発動を全てのPCで行ってしまうと、それをまとめるのが大変である。よって、体当たりの発動は自分だけにする。</li>
<li>他のキャラクタの状態は、自分の端末上では変化させないので、他のキャラクタ自身から情報を受け取る必要がある</li>
<li>よって、体当たりを受けたことによる<strong>状態の変化(通常かDAMAGEか)と、体当たりが成功した相手の速度を0にするリストを送る</strong>
</li>
<li>アニメはひとまずそのままにして様子を見る</li>
</ul>
<p>以上を整理して、以下のようなデータを送信することにする</p>
<ul>
<li>自分の名前(URLエスケープ)</li>
<li>自分のスコア</li>
<li>座標x,y,z</li>
<li>速度x,y,z</li>
<li>入力x,y</li>
<li>ジャンプ(0=なし / 1=ジャンプ開始)</li>
<li>状態(0=通常 / 1=DAMAGE中)</li>
<li>跳ね飛ばされた相手の名前をコンマ区切りで列挙(URLエスケープ)</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#milkcocoa%E3%81%AEsend%E3%81%AE%E5%8B%95%E4%BD%9C%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF" id="user-content-milkcocoaのsendの動作チェック"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>MilkcocoaのSendの動作チェック</h1>
<ul>
<li>チュートリアルを少し改造して、送信をsendに変更して、Date.now()を送信。受信関数側のDate.now()と送られた時間を引くことで、受信にかかる時間を測定する</li>
<li><a href="http://tanakaedu.github.io/dat14_fall/spdtest/" rel="nofollow">測定ページ</a></li>
<li>自宅環境では、15ms-40ms程度。多くは20ms程度。環境により違うが一例として</li>
<li>sendしたメッセージは送信した本人にも届くので、受信チェックができる。以下のような送信方法とする</li>
<li>送信するのは、Updateの最後</li>
<li>受信フラグを用意して、受信済みにしておく</li>
<li>Update()の最後で、受信フラグをチェック。受信済みの時は、自分のデータを送信。受信していなかったらそのフレームは送信しない</li>
<li>Milkcocoaのデータを受信して、それが自分のものだったら受信済みフラグを設定して終わり</li>
<li><em>Update()に加えてデータ受信時に送信する方法もある。しかし、実装の複雑さ、処理の途中で送るデータの精度、効果のほどが不明なので、労力に合う効果があるか分からない。上記で十分な精度がでることも考えられるので、まずは単純に実装する。</em></li>
<li>他のプレイヤーの情報は、届き次第そのまま設定する</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#unity%E3%81%AE%E5%AE%9F%E8%A3%85%E3%81%AE%E6%96%B9%E9%87%9D" id="user-content-unityの実装の方針"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unityの実装の方針</h1>
<p>Milkcocoaに関連する処理はCMilkcocoaクラスに定義。ここを差し替えると、他の通信手段でも同様に利用できるように設計する。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#cmilkcocoa" id="user-content-cmilkcocoa"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CMilkcocoa</h2>
<p>Milkcocoaとの送受信メソッド</p>
<ul>
<li>新規にスクリプトを作成</li>
<li>変数の定義</li>
<li>プレイヤーと敵のプレハブを受け取る</li>
<li>ログインメソッド</li>
<li>指定の名前のキャラクタを探す</li>
<li>見つからなければその名前を設定して、プレイヤーとしてゲームに生成して、JavaScriptの成功関数を呼ぶ</li>
<li>見つかればエラーを返す</li>
<li>Milkcocoaへの送信メソッドSend</li>
<li>送信する文字列を受け取ってJavaScriptの送信関数を呼び出す</li>
<li>Milkcocoaからの受信メソッドOnRecv</li>
<li>JavaScriptから呼び出されるメソッド</li>
<li>名前を確認して、合致する名前のプレイヤのOnRecv関数に文字列を渡す</li>
<li>名前がない場合はログイン処理を行う</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#cplayerbase" id="user-content-cplayerbase"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CPlayerBase</h2>
<ul>
<li>変数の追加</li>
<li>Commオブジェクトを入れておく変数を追加。敵味方いずれにも必要なのでここに入れる</li>
<li>ぶつかった相手のリストをprotectedの文字列で用意</li>
<li>起動時に、Commオブジェクトを検索して取得する</li>
<li>衝突時に、ぶつかってきた相手の名前をリストに追加する</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#cplayer" id="user-content-cplayer"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CPlayer</h2>
<ul>
<li>変数の追加</li>
<li>受信済みフラグ(isRecved)を用意。最初の1回目は無条件に送信するので初期値はtrue</li>
<li>OnRecv関数を作成。中身は受信済みフラグを設定するのみ</li>
<li>Update()関数内に送信機能を追加</li>
<li>操作に使ったx,y,ジャンプフラグを記録</li>
<li>Commがnullか、あるいは、受信していない時は何もしない</li>
<li>上記以外の時、プレイヤーの情報をテキストにまとめてCMilkcocoaのSendを呼び出して送信する</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#cenemycomm" id="user-content-cenemycomm"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CEnemyComm</h2>
<ul>
<li>新規にスクリプトを作成</li>
<li>AIは不要なので、新しいプレハブを作り、CEnemyの代わりにこのスクリプトに入れ替える</li>
<li>変数の追加</li>
<li>privateで、入力x,y,ジャンプを記録する変数を用意</li>
<li>CMilkcocoaから、受信したデータを受け取るOnRectを以下の通り追加</li>
<li>現在の座標を直接移動</li>
<li>速度を設定する</li>
<li>タグを変更する</li>
<li>入力x,y,ジャンプを記録</li>
<li>跳ね飛ばしリストに自分の名前があったら、速度を0にする</li>
<li>Update()で、記録してあった入力x,y,ジャンプで移動操作。ジャンプは使ったらクリアする</li>
</ul>
<p>#　作業手順</p>
<h1>
<a aria-hidden="true" class="anchor" href="#webplayer%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86" id="user-content-webplayerの設定を行う"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>WebPlayerの設定を行う</h1>
<ul>
<li>こちらの<a href="https://github.com/tanakaedu/milkcocoa-unity/wiki/%E4%BD%9C%E6%A5%AD01-Unity%E3%81%AEWeb%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6%E3%80%81Milkcocoa%E3%81%AE%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%92%E8%BF%BD%E5%8A%A0(Unity4.6%E8%BF%BD%E8%A8%98)#webplayer%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">WebPlayerを設定する</a>に従って、このプロジェクトをWebPlayerで実行できるようにする。この時、画面設定を解説通り、640x360に変更する</li>
<li>
<a href="https://github.com/tanakaedu/milkcocoa-unity/wiki/%E4%BD%9C%E6%A5%AD01-Unity%E3%81%AEWeb%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6%E3%80%81Milkcocoa%E3%81%AE%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%92%E8%BF%BD%E5%8A%A0(Unity4.6%E8%BF%BD%E8%A8%98)#milkcocoa%E3%82%92unity%E3%81%AEweb%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%80">MilkcocoaをUnityのWebページに埋め込む</a>に従って作業して、Milkcocoaでチャットできるようにする</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#%E3%82%AD%E3%83%A3%E3%83%A9%E3%82%AF%E3%82%BF%E3%83%BC%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B" id="user-content-キャラクターのパラメータにアクセスできるようにする"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>キャラクターのパラメータにアクセスできるようにする</h1>
<ul>
<li>CPlayerBaseスクリプトを開く</li>
<li>sNameとiParamの変数宣言を探して、あれば次のように変更する。なければ以下を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* 名前<span class="pl-c">*/</span></span>
	[<span class="pl-en">SerializeField</span>]
	<span class="pl-k">private</span> <span class="pl-k">string</span> <span class="pl-smi">_sname</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;
	<span class="pl-k">public</span> <span class="pl-smi">string</span> <span class="pl-smi">sName</span> {
		<span class="pl-smi">get</span> 
		{
			<span class="pl-k">return</span> <span class="pl-smi">_sname</span>;
		}
		<span class="pl-smi">set</span>
		{
			<span class="pl-smi">_sname</span> <span class="pl-k">=</span> <span class="pl-smi">value</span>;
		}
	}
	<span class="pl-c"><span class="pl-c">/*</span>* パラメータ<span class="pl-c">*/</span></span>
	[<span class="pl-en">SerializeField</span>]
	<span class="pl-k">private</span> <span class="pl-k">int</span> <span class="pl-smi">_iparam</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>;
	<span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-smi">iParam</span> {
		<span class="pl-smi">get</span>
		{
			<span class="pl-k">return</span> <span class="pl-smi">_iparam</span>;
		}
		<span class="pl-smi">set</span>
		{
			<span class="pl-smi">_iparam</span> <span class="pl-k">=</span> <span class="pl-smi">value</span>;
		}
	}
</pre></div>
<ul>
<li>かなり長くなるが、上記は行儀がよさそうな変数（プロパティ）の用意方法である。</li>
<li>[SerializeField]をprivate変数の前に記載しておくと、Inspectorで編集可能になる。Unityのマニュアルでは「ほとんどのケースで使用する必要がありません」と書かれてあるが、publicを嫌う場合に利用する可能性があるので、例示しておく</li>
<li>getとsetは<strong>アクセサ</strong>という。代入文の形で操作できるが、内部的にはgetやsetの関数が呼ばれる。変数に直接アクセスさせないことで、データを記録する前に妥当な内容かを検証したりできるようになる</li>
<li>なぜこのようにするかなどの分かり易い解説→<a href="http://qiita.com/RyotaMurohoshi/items/b64b36009ba652b21e2c" rel="nofollow">RyotaMurohoshi. インスペクターで値も設定したいけど，プロパティを使いたい。めんどくさいのも嫌！</a>
</li>
<li>ここまでするかは開発方針や好み次第。小さいプロジェクトなら不要だろう。大きいプロジェクトの場合はこのようにした方がよいと思うが、開発方針に従えばよい</li>
<li>上記の通り書き換えたら、Unityで実行してみて動くことを確認する。初期値をなくしたので名前は表示されなくなり、パラメータは0だがそれで問題ない</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B" id="user-content-ログインできるようにする"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>ログインできるようにする</h1>
<ul>
<li>新しくCMilkcocoaというC#スクリプトを作成する</li>
<li>[GameObject]&gt;[Create Empty]で、新しい空のゲームオブジェクトを作成して、「Comm」という名前に変更する</li>
<li>[CMilkcocoa]スクリプトを、[Comm]オブジェクトにドラッグ＆ドロップする</li>
<li>[CMilkcocoa]スクリプトを開く</li>
<li>登録されているプレイヤーから、指定の名前のものを選択する関数を用意する。まずはListを使えるようにするため、3行目あたりに以下のusingを追加</li>
</ul>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">using</span> <span class="pl-en">System</span>.<span class="pl-en">Collections</span>.<span class="pl-en">Generic</span>;</pre></div>
<ul>
<li>6行目付近に、以下の変数定義を追加。これは、登録したゲームオブジェクトを記録するためのもの。List&lt;型&gt;は、可変長の配列のようなもの</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">//</span> 登録したゲームオブジェクト</span>
	<span class="pl-k">private</span> <span class="pl-en">List</span>&lt;<span class="pl-en">GameObject</span>&gt; <span class="pl-smi">goPlayers</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">List</span>&lt;<span class="pl-en">GameObject</span>&gt;();</pre></div>
<ul>
<li>以下の関数を追加</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">//</span> 指定の名前のゲームオブジェクトを返す。見つからない時はnullを返す</span>
	<span class="pl-en">GameObject</span> <span class="pl-en">getPlayerByName</span>(<span class="pl-k">string</span> <span class="pl-smi">nm</span>) {
		<span class="pl-k">foreach</span> (<span class="pl-en">GameObject</span> <span class="pl-smi">go</span> <span class="pl-k">in</span> <span class="pl-smi">goPlayers</span>) {
			<span class="pl-k">if</span> (<span class="pl-smi">go</span>.<span class="pl-en">GetComponent</span>&lt;<span class="pl-en">CPlayerBase</span>&gt;().<span class="pl-smi">sName</span>.<span class="pl-en">CompareTo</span>(<span class="pl-smi">nm</span>) <span class="pl-k">==</span> <span class="pl-c1">0</span>) {
				<span class="pl-k">return</span> <span class="pl-smi">go</span>;
			}
		}
		<span class="pl-k">return</span> <span class="pl-c1">null</span>;
	}</pre></div>
<ul>
<li>以下のログイン処理を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">//</span> プレイヤーのプレハブ</span>
	<span class="pl-k">public</span> <span class="pl-en">GameObject</span> <span class="pl-smi">prefPlayer</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;

	<span class="pl-c"><span class="pl-c">//</span> プレイヤーのインスタンス</span>
	<span class="pl-k">private</span> <span class="pl-en">GameObject</span> <span class="pl-smi">myPlayer</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;

	<span class="pl-c"><span class="pl-c">//</span> ログイン処理</span>
	<span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">login</span>(<span class="pl-k">string</span> <span class="pl-smi">nm</span>) {
		<span class="pl-c"><span class="pl-c">//</span> 名前が入力されていない、あるいは、同じ名前のプレイヤーがいたら、エラーを返す</span>
		<span class="pl-k">if</span> ((<span class="pl-smi">nm</span>.<span class="pl-smi">Length</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-k">||</span> (<span class="pl-en">getPlayerByName</span> (<span class="pl-smi">nm</span>) <span class="pl-k">!=</span> <span class="pl-c1">null</span>)) {
			<span class="pl-c"><span class="pl-c">//</span> 同じ名前のプレイヤーがいるので、JavaScriptのエラー関数を呼び出す</span>
			<span class="pl-smi">Application</span>.<span class="pl-en">ExternalCall</span> (<span class="pl-s"><span class="pl-pds">"</span>login_error<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>);
			<span class="pl-k">return</span>;
		}
		
		<span class="pl-c"><span class="pl-c">//</span> 登録</span>
		<span class="pl-smi">myPlayer</span> <span class="pl-k">=</span> (<span class="pl-en">GameObject</span>)<span class="pl-en">Instantiate</span> (<span class="pl-smi">prefPlayer</span>);
		<span class="pl-smi">myPlayer</span>.<span class="pl-en">GetComponent</span>&lt;<span class="pl-en">CPlayer</span>&gt;().<span class="pl-smi">sName</span> <span class="pl-k">=</span> <span class="pl-smi">nm</span>;
		<span class="pl-smi">myPlayer</span>.<span class="pl-en">SendMessage</span> (<span class="pl-s"><span class="pl-pds">"</span>Respawn<span class="pl-pds">"</span></span>);
		<span class="pl-smi">goPlayers</span>.<span class="pl-en">Add</span> (<span class="pl-smi">myPlayer</span>);
		<span class="pl-smi">Application</span>.<span class="pl-en">ExternalCall</span> (<span class="pl-s"><span class="pl-pds">"</span>login_ok<span class="pl-pds">"</span></span>);
	}</pre></div>
<ul>
<li>上書き保存</li>
<li>Unityに戻り、[Player]をプレハブ化したのち、[Hierarchy]ビューから[Player]を削除する</li>
<li>[Hierarchy]ビューで[Comm]を選択してから、[Project]ビューの[Player]プレハブを[Inspector]の[Pref Player]欄にドラッグ＆ドロップする</li>
<li>[File]&gt;[Build &amp; Run]でリビルドする</li>
</ul>
<p>以上で、Unity側の準備完了。引き続き、JavaScriptに機能を追加する。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#indexhtml%E3%81%AE%E4%BD%9C%E6%A5%AD" id="user-content-indexhtmlの作業"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>index.htmlの作業</h2>
<ul>
<li>Unityのプロジェクトフォルダ内の[web]フォルダを開いて、[index.html]をVisualStudioなどで開く</li>
<li>131行目付近に、textareaのタグがある。チャット機能は使わないのでタグは消す</li>
<li>消した行のかわりに名前の入力欄を作成するために以下のタグを追加</li>
</ul>
<div class="highlight highlight-text-html-basic"><pre>        &lt;<span class="pl-ent">input</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>text<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>nm<span class="pl-pds">"</span></span> <span class="pl-e">maxlength</span>=<span class="pl-s"><span class="pl-pds">"</span>16<span class="pl-pds">"</span></span> /&gt;</pre></div>
<ul>
<li>下の行にbuttonタグがあるので、以下のように修正。btnというIDで指定できるようにして、表示をlogin!に変更する</li>
</ul>
<div class="highlight highlight-text-html-basic"><pre>        &lt;<span class="pl-ent">button</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>button<span class="pl-pds">"</span></span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>btn<span class="pl-pds">"</span></span> <span class="pl-e">onClick</span>=<span class="pl-s"><span class="pl-pds">"</span>clickEvent()<span class="pl-pds">"</span></span>&gt;login!&lt;/<span class="pl-ent">button</span>&gt;</pre></div>
<ul>
<li>上書き保存する</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#javascript%E3%81%AE%E4%BD%9C%E6%A5%AD" id="user-content-javascriptの作業"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>JavaScriptの作業</h2>
<ul>
<li>main.jsをVisualStudioなどで開く</li>
<li>4行目を以下のように修正して、名前欄とログイン済みかのフラグを記録する変数を定義する</li>
</ul>
<div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> textName, isLogin;</pre></div>
<ul>
<li>すぐ下のwindow.onloadを以下のように修正。名前欄をtextNameでアクセスできるようにして、ログインフラグを下す</li>
</ul>
<div class="highlight highlight-source-js"><pre><span class="pl-c1">window</span>.<span class="pl-en">onload</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(){
  textName <span class="pl-k">=</span> <span class="pl-c1">document</span>.<span class="pl-c1">getElementById</span>(<span class="pl-s"><span class="pl-pds">"</span>nm<span class="pl-pds">"</span></span>);
  isLogin <span class="pl-k">=</span> <span class="pl-c1">false</span>;
}</pre></div>
<ul>
<li>ボタンの処理を行うclickEvent()を以下のように修正</li>
</ul>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">clickEvent</span>(){
  <span class="pl-k">if</span> (<span class="pl-k">!</span>isLogin) {
    isLogin <span class="pl-k">=</span> <span class="pl-c1">true</span>;
    <span class="pl-c1">document</span>.<span class="pl-c1">getElementById</span>(<span class="pl-s"><span class="pl-pds">"</span>btn<span class="pl-pds">"</span></span>).<span class="pl-c1">style</span>.<span class="pl-c1">display</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>none<span class="pl-pds">"</span></span>;
    <span class="pl-smi">textName</span>.<span class="pl-c1">style</span>.<span class="pl-c1">display</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>none<span class="pl-pds">"</span></span>;
    <span class="pl-c"><span class="pl-c">//</span> Unityのloginを呼び出す</span>
    <span class="pl-smi">u</span>.<span class="pl-en">getUnity</span>().<span class="pl-en">SendMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>Comm<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>login<span class="pl-pds">"</span></span>,<span class="pl-smi">textName</span>.<span class="pl-c1">value</span>);
  }
}</pre></div>
<ul>
<li>ファイルの一番下に、以下のプログラムを追加する</li>
</ul>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 成功。特にやることはないので空</span>
<span class="pl-k">function</span> <span class="pl-en">login_ok</span>() {
}

<span class="pl-c"><span class="pl-c">//</span> エラー</span>
<span class="pl-k">function</span> <span class="pl-en">login_error</span>() {
  isLogin <span class="pl-k">=</span> <span class="pl-c1">false</span>;
  <span class="pl-c1">document</span>.<span class="pl-c1">getElementById</span>(<span class="pl-s"><span class="pl-pds">"</span>btn<span class="pl-pds">"</span></span>).<span class="pl-c1">style</span>.<span class="pl-c1">display</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>inline<span class="pl-pds">"</span></span>;
  <span class="pl-smi">textName</span>.<span class="pl-c1">style</span>.<span class="pl-c1">display</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>inline<span class="pl-pds">"</span></span>;
  <span class="pl-en">alert</span>(<span class="pl-s"><span class="pl-pds">"</span>名前が入力されていないか、すでに同じ名前のユーザーがいます。<span class="pl-pds">"</span></span>);
}</pre></div>
<ul>
<li>続いて、送受信用の関数を追加しておく</li>
</ul>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> Unityから呼び出して、文字列をMilkcocoaに送信する関数Send</span>
<span class="pl-k">function</span> <span class="pl-en">Send</span>(<span class="pl-smi">dt</span>) {
  <span class="pl-smi">chatDataStore</span>.<span class="pl-c1">send</span>(dt);
}

<span class="pl-c"><span class="pl-c">//</span> Milkcocoaからsendが届いた時に呼ばれるイベント。UnityのOnRecv関数をdata.valueを渡して呼び出す</span>
<span class="pl-smi">chatDataStore</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">"</span>send<span class="pl-pds">"</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">data</span>){
  <span class="pl-smi">u</span>.<span class="pl-en">getUnity</span>().<span class="pl-en">SendMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>Comm<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>OnRecv<span class="pl-pds">"</span></span>,<span class="pl-smi">data</span>.<span class="pl-c1">value</span>);
});</pre></div>
<ul>
<li>上書き保存する</li>
<li>UnityのWebフォルダ内のindex.htmlを起動する。起動済みの場合は再読み込み</li>
<li>名前欄に文字を入力して[login]ボタンを押す。プレイヤーが登場して、入力した名前が表示されれば成功</li>
</ul>
<p>Milkcocoa側の作業はこれで終わり。後は全てUnity側の作業になる。</p>
<h1>
<a aria-hidden="true" class="anchor" href="#%E3%83%97%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E3%81%AE%E9%80%81%E4%BF%A1%E5%87%A6%E7%90%86" id="user-content-プレイヤーの送信処理"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>プレイヤーの送信処理</h1>
<p>事前に立てた方針に従って作業する。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#cmilkcocoa%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88" id="user-content-cmilkcocoaスクリプト"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CMilkcocoaスクリプト</h2>
<ul>
<li>CMilkcocoaスクリプトをエディタで開いて、送信用の以下の関数を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* milkcocoaへの送信<span class="pl-c">*/</span></span>
	<span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">Send</span>(<span class="pl-k">string</span> <span class="pl-smi">st</span>) {
		<span class="pl-c"><span class="pl-c">//</span> JavaScriptのSend()関数にstを送る</span>
		<span class="pl-smi">Application</span>.<span class="pl-en">ExternalCall</span>(<span class="pl-s"><span class="pl-pds">"</span>Send<span class="pl-pds">"</span></span>,<span class="pl-smi">st</span>);
	}</pre></div>
<ul>
<li>受信のテスト用に以下の関数を追加する。他のプレイヤーの追加ルーチンはあとで実装する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* milkcocoaから受信<span class="pl-c">*/</span></span>
	<span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">OnRecv</span>(<span class="pl-k">string</span> <span class="pl-smi">st</span>) {
		<span class="pl-c"><span class="pl-c">//</span> 届いたデータを分解</span>
		<span class="pl-k">string</span> [] <span class="pl-smi">srecv</span> <span class="pl-k">=</span> <span class="pl-smi">st</span>.<span class="pl-en">Split</span> (<span class="pl-s">','</span>);
		<span class="pl-smi">srecv</span>[<span class="pl-c1">0</span>] <span class="pl-k">=</span> <span class="pl-smi">WWW</span>.<span class="pl-en">UnEscapeURL</span> (<span class="pl-smi">srecv</span> [<span class="pl-c1">0</span>]);

		<span class="pl-c"><span class="pl-c">//</span> 名前で検索</span>
		<span class="pl-en">GameObject</span> <span class="pl-smi">go</span> <span class="pl-k">=</span> <span class="pl-en">getPlayerByName</span> (<span class="pl-smi">srecv</span> [<span class="pl-c1">0</span>]);
		<span class="pl-k">if</span> (<span class="pl-smi">go</span> <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {
			<span class="pl-c"><span class="pl-c">//</span> 見つかれば受信関数を呼び出す</span>
			<span class="pl-smi">go</span>.<span class="pl-en">SendMessage</span> (<span class="pl-s"><span class="pl-pds">"</span>OnRecv<span class="pl-pds">"</span></span>, <span class="pl-smi">srecv</span>);
		}
	}</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#cplayerbase%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88" id="user-content-cplayerbaseスクリプト"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CPlayerBaseスクリプト</h2>
<ul>
<li>CPlayerBaseをエディタで開いて、以下の変数を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* 通信用のゲームオブジェクト<span class="pl-c">*/</span></span>
	<span class="pl-k">protected</span> <span class="pl-en">GameObject</span> <span class="pl-smi">commObject</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;
	<span class="pl-c"><span class="pl-c">/*</span>* ぶつかった相手の名前リスト<span class="pl-c">*/</span></span>
	<span class="pl-k">protected</span> <span class="pl-k">string</span> <span class="pl-smi">sHitList</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;</pre></div>
<ul>
<li>DoStart()関数を探して、関数内に以下の行を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-smi">commObject</span> <span class="pl-k">=</span> <span class="pl-smi">GameObject</span>.<span class="pl-en">Find</span> (<span class="pl-s"><span class="pl-pds">"</span>Comm<span class="pl-pds">"</span></span>);</pre></div>
<ul>
<li>ぶつかった相手の名前リストを作成する。「OnCollisionEnter」関数の最後の方を確認して、まずは以下の行を探す</li>
</ul>
<div class="highlight highlight-source-cs"><pre>			<span class="pl-c"><span class="pl-c">//</span> 相手の速度は0にする</span>
			<span class="pl-smi">othvel</span> <span class="pl-k">=</span> <span class="pl-smi">Vector3</span>.<span class="pl-smi">zero</span>;
			<span class="pl-smi">othvel</span>.<span class="pl-smi">y</span> <span class="pl-k">=</span> <span class="pl-smi">col</span>.<span class="pl-smi">gameObject</span>.<span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">y</span>;
			<span class="pl-smi">col</span>.<span class="pl-smi">gameObject</span>.<span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span> <span class="pl-k">=</span> <span class="pl-smi">othvel</span>;</pre></div>
<ul>
<li>見つけた行の下に以下のコードを追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>			<span class="pl-c"><span class="pl-c">//</span> 当たった相手の名前を取り出してリストに加える</span>
			<span class="pl-smi">sHitList</span> <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">WWW</span>.<span class="pl-en">EscapeURL</span>(<span class="pl-smi">col</span>.<span class="pl-smi">gameObject</span>.<span class="pl-en">GetComponent</span>&lt;<span class="pl-en">CPlayerBase</span>&gt;().<span class="pl-smi">sName</span>);</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#cplayer%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88" id="user-content-cplayerスクリプト"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CPlayerスクリプト</h2>
<ul>
<li>CPlayerをエディタで開いて、以下の変数を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* 受信済みフラグ<span class="pl-c">*/</span></span>
	<span class="pl-k">private</span> <span class="pl-k">bool</span> <span class="pl-smi">isRecved</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</pre></div>
<ul>
<li>受信用のメソッドを追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* Milkcocoaからのデータの受信<span class="pl-c">*/</span></span>
	<span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">OnRecv</span>(<span class="pl-k">string</span> [] <span class="pl-smi">st</span>) {
		<span class="pl-c"><span class="pl-c">//</span> 受信フラグを設定</span>
		<span class="pl-smi">isRecved</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;
	}</pre></div>
<ul>
<li>Update()関数を以下のように修正する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-k">void</span> <span class="pl-en">Update</span>() {
		<span class="pl-k">float</span> <span class="pl-smi">x</span> <span class="pl-k">=</span> <span class="pl-smi">Input</span>.<span class="pl-en">GetAxisRaw</span> (<span class="pl-s"><span class="pl-pds">"</span>Horizontal<span class="pl-pds">"</span></span>);
		<span class="pl-k">float</span> <span class="pl-smi">y</span> <span class="pl-k">=</span> <span class="pl-smi">Input</span>.<span class="pl-en">GetAxisRaw</span> (<span class="pl-s"><span class="pl-pds">"</span>Vertical<span class="pl-pds">"</span></span>);
		<span class="pl-k">bool</span> <span class="pl-smi">isJump</span> <span class="pl-k">=</span> <span class="pl-smi">Input</span>.<span class="pl-en">GetButtonDown</span> (<span class="pl-s"><span class="pl-pds">"</span>Jump<span class="pl-pds">"</span></span>);
		<span class="pl-en">UpdateMove</span> (<span class="pl-smi">x</span>, <span class="pl-smi">y</span>, <span class="pl-smi">isJump</span>);

		<span class="pl-c"><span class="pl-c">//</span> 通信オブジェクトが見つかり、かつ、受信済みの時に送信</span>
		<span class="pl-k">if</span> ((<span class="pl-smi">commObject</span> <span class="pl-k">!=</span> <span class="pl-c1">null</span>) <span class="pl-k">&amp;&amp;</span> (<span class="pl-smi">isRecved</span>)) {
			<span class="pl-c"><span class="pl-c">//</span> 受信フラグを消す</span>
			<span class="pl-smi">isRecved</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;
			<span class="pl-c"><span class="pl-c">//</span> データを作成して送信</span>
			<span class="pl-k">string</span> <span class="pl-smi">st</span> <span class="pl-k">=</span> <span class="pl-smi">WWW</span>.<span class="pl-en">EscapeURL</span>(<span class="pl-smi">sName</span>)
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">iParam</span>
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">x</span>
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">y</span>
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">z</span>
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">x</span>
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">y</span>
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">z</span>
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">y</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span>(<span class="pl-smi">isJump</span> <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>)
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span>(<span class="pl-smi">tag</span><span class="pl-k">==</span><span class="pl-s"><span class="pl-pds">"</span>DAMAGE<span class="pl-pds">"</span></span> <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>)
				<span class="pl-k">+</span><span class="pl-smi">sHitList</span>;
			<span class="pl-smi">commObject</span>.<span class="pl-en">SendMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>Send<span class="pl-pds">"</span></span>,<span class="pl-smi">st</span>);
			<span class="pl-smi">sHitList</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;
		}
	}</pre></div>
<ul>
<li>上書き保存</li>
<li>Unityに戻って、エラーがないことを確認する</li>
</ul>
<p>以上で、プレイヤーの操作がMilkcocoaに送信されるようになった。動作を確認するために、以下の「送信確認」を行う。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E9%80%81%E4%BF%A1%E7%A2%BA%E8%AA%8D" id="user-content-送信確認"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>送信確認</h2>
<ul>
<li>CMilkcocoaスクリプトをエディタで開く</li>
<li>以下のコードを追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-k">private</span> <span class="pl-k">string</span> <span class="pl-smi">slog</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;
	<span class="pl-k">void</span> <span class="pl-en">OnGUI</span>() {
		<span class="pl-smi">GUI</span>.<span class="pl-en">Label</span> (<span class="pl-k">new</span> <span class="pl-en">Rect</span> (<span class="pl-c1">0</span>, <span class="pl-c1">10</span>, <span class="pl-c1">640</span>, <span class="pl-c1">20</span>), <span class="pl-smi">slog</span>);
	}</pre></div>
<ul>
<li>[public void OnRecv]関数を探して、関数の最後に以下の行を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-c"><span class="pl-c">//</span> 受信データ表示</span>
		<span class="pl-smi">slog</span> <span class="pl-k">=</span> <span class="pl-smi">WWW</span>.<span class="pl-en">UnEscapeURL</span> (<span class="pl-smi">st</span>);</pre></div>
<ul>
<li>上書き保存をしたら、[File]&gt;[Build &amp; Run]を選んでリビルドする</li>
<li>index.htmlを再読み込みをして、ログインしてみよう。成功すると、送信データがGUIで表示される</li>
<li>必要がなくなったら、OnGUI関数をコメントアウトする</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#%E5%8F%97%E4%BF%A1%E5%87%A6%E7%90%86" id="user-content-受信処理"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>受信処理</h1>
<p>最後に受信処理を実装する。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#cmilkcocoa%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88-1" id="user-content-cmilkcocoaスクリプト-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CMilkcocoaスクリプト</h2>
<p>CMilkcocoaの受信時の処理に、名前が見つからなかった時の追加処理を加える。</p>
<ul>
<li>CMilkcocoaスクリプトをエディタで開く</li>
<li>通信する敵用のプレハブを入れておく以下の変数を定義する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">//</span> 敵用のプレハブ</span>
	<span class="pl-k">public</span> <span class="pl-en">GameObject</span> <span class="pl-smi">prefEnemyComm</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;</pre></div>
<ul>
<li>「public void OnRecv」関数内のif文を見つけたら一度削除して、以下に変更する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-k">if</span> (<span class="pl-smi">go</span> <span class="pl-k">==</span> <span class="pl-c1">null</span>) {
			<span class="pl-c"><span class="pl-c">//</span> 見つからないので、敵として新しく追加する</span>
			<span class="pl-smi">go</span> <span class="pl-k">=</span> (<span class="pl-en">GameObject</span>)<span class="pl-en">Instantiate</span> (<span class="pl-smi">prefEnemyComm</span>);
			<span class="pl-smi">goPlayers</span>.<span class="pl-en">Add</span> (<span class="pl-smi">go</span>);
		}
		<span class="pl-c"><span class="pl-c">//</span> 見つかれば受信関数を呼び出す</span>
		<span class="pl-smi">go</span>.<span class="pl-en">SendMessage</span> (<span class="pl-s"><span class="pl-pds">"</span>OnRecv<span class="pl-pds">"</span></span>, <span class="pl-smi">srecv</span>);</pre></div>
<ul>
<li>プレイヤーの名前かどうかを確認する関数と、速度を０にする関数を以下のように追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* 指定の名前がプレイヤーかどうかを調べる(2015/2/20 19時修正)<span class="pl-c">*/</span></span>
	<span class="pl-k">public</span> <span class="pl-k">bool</span> <span class="pl-en">isPlayerName</span>(<span class="pl-k">string</span> <span class="pl-smi">name</span>) {
		<span class="pl-k">if</span> (<span class="pl-smi">myPlayer</span> <span class="pl-k">==</span> <span class="pl-c1">null</span>) {
			<span class="pl-k">return</span> <span class="pl-c1">false</span>;
		}
		<span class="pl-k">return</span> <span class="pl-smi">name</span> <span class="pl-k">==</span> <span class="pl-smi">myPlayer</span>.<span class="pl-en">GetComponent</span>&lt;<span class="pl-en">CPlayer</span>&gt; ().<span class="pl-smi">sName</span>;
	}

	<span class="pl-c"><span class="pl-c">/*</span>* プレイヤーの速度を0にする<span class="pl-c">*/</span></span>
	<span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">SetXZZero</span>() {
		<span class="pl-smi">myPlayer</span>.<span class="pl-en">SendMessage</span> (<span class="pl-s"><span class="pl-pds">"</span>xzZero<span class="pl-pds">"</span></span>);
	}</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#cplayerbase%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E6%A9%9F%E8%83%BD%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B" id="user-content-cplayerbaseスクリプトに機能を追加する"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CPlayerBaseスクリプトに機能を追加する</h2>
<ul>
<li>[CPlayerBase]スクリプトをエディタで開く</li>
<li>以下の関数を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* x-z速度を0にする<span class="pl-c">*/</span></span>
	<span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">xzZero</span>() {
		<span class="pl-en">Vector3</span> <span class="pl-smi">vel</span> <span class="pl-k">=</span> <span class="pl-smi">Vector3</span>.<span class="pl-smi">zero</span>;
		<span class="pl-smi">vel</span>.<span class="pl-smi">y</span> <span class="pl-k">=</span> <span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">y</span>;
		<span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span> <span class="pl-k">=</span> <span class="pl-smi">vel</span>;
	}</pre></div>
<ul>
<li>分かる人は、コードをシンプルにするためにOnCollisionEnter()内の処理のうち、敵の相手を0にする処理を、上記の関数に置き換えてみよう。col.gameObject.SendMessage("xzZero")を呼べばよい</li>
<li>当たり判定において、跳ね飛ばす判定はプレイヤーのみに限定する</li>
<li>[bool checkGround]関数を探して、以下のように行の最初に「protected」を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-k">protected</span> <span class="pl-k">bool</span> <span class="pl-en">checkGround</span>(<span class="pl-en">Collision</span> <span class="pl-smi">col</span>) {</pre></div>
<ul>
<li>通信時は、体当たり判定はプレイヤーしか行わない。[void OnCollisionEnter]関数内の最初にある以下行を探す</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-smi">isGrounded</span> <span class="pl-k">|=</span> <span class="pl-en">checkGround</span>(<span class="pl-smi">col</span>);</pre></div>
<ul>
<li>見つけたコードの下の行に、以下のコードを追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-c"><span class="pl-c">//</span> 通信ありの時は、体当たり判定はプレイヤーでしか行わない</span>
		<span class="pl-k">if</span> ((<span class="pl-smi">commObject</span> <span class="pl-k">!=</span> <span class="pl-c1">null</span>) <span class="pl-k">&amp;&amp;</span> (<span class="pl-k">!</span>(<span class="pl-k">this</span> <span class="pl-k">is</span> <span class="pl-en">CPlayer</span>))) {
			<span class="pl-k">return</span>;
		}</pre></div>
<ul>
<li>上書き保存する</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#%E9%80%9A%E4%BF%A1%E5%B0%82%E7%94%A8%E3%81%AE%E3%83%97%E3%83%AC%E3%83%8F%E3%83%96%E3%82%92%E4%BD%9C%E6%88%90" id="user-content-通信専用のプレハブを作成"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>通信専用のプレハブを作成</h2>
<ul>
<li>新規にC#スクリプトを作成して、CEnemyCommの名前にする</li>
<li>[Hierarchy]ビューの[Enemy]を１つ選び、名前を「EnemyComm」に変更する</li>
<li>変更した[EnemyComm]オブジェクトを[Project]ビューにドラッグ＆ドロップしてプレハブにする</li>
<li>[EnemyComm]オブジェクトの[CEnemy]スクリプトを削除する</li>
<li>[CEnemyComm]スクリプトを追加する</li>
<li>上記が終わったら、[Hierachy]ビューから敵を全て削除する</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#cenemycomm%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88" id="user-content-cenemycommスクリプト"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CEnemyCommスクリプト</h2>
<p>CEnemyCommスクリプトに、送られてくるデータを処理するコードを追加する。</p>
<ul>
<li>[CEnemyComm]スクリプトをエディタで開く</li>
<li>以下の通りにする。全てコピー＆ペーストで置き換えてよい</li>
</ul>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">using</span> <span class="pl-en">UnityEngine</span>;
<span class="pl-k">using</span> <span class="pl-en">System</span>.<span class="pl-en">Collections</span>;

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">CEnemyComm</span> : <span class="pl-en">CPlayerBase</span> {
	<span class="pl-c"><span class="pl-c">//</span> Use this for initialization</span>
	<span class="pl-k">void</span> <span class="pl-en">Start</span> () {
		<span class="pl-en">DoStart</span> ();
	}
	
	<span class="pl-c"><span class="pl-c">//</span> Update is called once per frame</span>
	<span class="pl-k">void</span> <span class="pl-en">Update</span> () {
		<span class="pl-en">UpdateMove</span> (<span class="pl-smi">fx</span>, <span class="pl-smi">fy</span>, <span class="pl-smi">isJump</span>);
		<span class="pl-smi">isJump</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;
	}

	<span class="pl-c"><span class="pl-c">/*</span>* 入力<span class="pl-c">*/</span></span>
	<span class="pl-k">private</span> <span class="pl-k">float</span> <span class="pl-smi">fx</span> <span class="pl-k">=</span> <span class="pl-c1">0f</span>;
	<span class="pl-k">private</span> <span class="pl-k">float</span> <span class="pl-smi">fy</span> <span class="pl-k">=</span> <span class="pl-c1">0f</span>;
	<span class="pl-k">private</span> <span class="pl-k">bool</span> <span class="pl-smi">isJump</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;

	<span class="pl-c"><span class="pl-c">/*</span>* データ受信<span class="pl-c">*/</span></span>
	<span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">OnRecv</span>(<span class="pl-k">string</span> [] <span class="pl-smi">st</span>) {
		<span class="pl-c"><span class="pl-c">//</span> 名前を設定</span>
		<span class="pl-smi">sName</span> <span class="pl-k">=</span> <span class="pl-smi">WWW</span>.<span class="pl-en">UnEscapeURL</span> (<span class="pl-smi">st</span> [<span class="pl-c1">0</span>]);
		<span class="pl-c"><span class="pl-c">//</span> スコアを設定</span>
		<span class="pl-smi">iParam</span> <span class="pl-k">=</span> <span class="pl-smi">int</span>.<span class="pl-en">Parse</span> (<span class="pl-smi">st</span> [<span class="pl-c1">1</span>]);
		<span class="pl-c"><span class="pl-c">//</span> 座標設定</span>
		<span class="pl-smi">transform</span>.<span class="pl-smi">position</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Vector3</span> (
			<span class="pl-smi">float</span>.<span class="pl-en">Parse</span> (<span class="pl-smi">st</span> [<span class="pl-c1">2</span>]),
			<span class="pl-smi">float</span>.<span class="pl-en">Parse</span> (<span class="pl-smi">st</span> [<span class="pl-c1">3</span>]),
			<span class="pl-smi">float</span>.<span class="pl-en">Parse</span> (<span class="pl-smi">st</span> [<span class="pl-c1">4</span>]));
		<span class="pl-c"><span class="pl-c">//</span> 速度設定</span>
		<span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Vector3</span> (
			<span class="pl-smi">float</span>.<span class="pl-en">Parse</span> (<span class="pl-smi">st</span> [<span class="pl-c1">5</span>]),
			<span class="pl-smi">float</span>.<span class="pl-en">Parse</span> (<span class="pl-smi">st</span> [<span class="pl-c1">6</span>]),
			<span class="pl-smi">float</span>.<span class="pl-en">Parse</span> (<span class="pl-smi">st</span> [<span class="pl-c1">7</span>]));
		<span class="pl-c"><span class="pl-c">//</span> 入力</span>
		<span class="pl-smi">fx</span> <span class="pl-k">=</span> <span class="pl-smi">float</span>.<span class="pl-en">Parse</span>(<span class="pl-smi">st</span>[<span class="pl-c1">8</span>]);
		<span class="pl-smi">fy</span> <span class="pl-k">=</span> <span class="pl-smi">float</span>.<span class="pl-en">Parse</span>(<span class="pl-smi">st</span>[<span class="pl-c1">9</span>]);
		<span class="pl-smi">isJump</span> <span class="pl-k">=</span> <span class="pl-smi">st</span> [<span class="pl-c1">10</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>;
		<span class="pl-c"><span class="pl-c">//</span> 状態</span>
		<span class="pl-smi">tag</span> <span class="pl-k">=</span> <span class="pl-smi">st</span> [<span class="pl-c1">11</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>Enemy<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Damage<span class="pl-pds">"</span></span>;
		<span class="pl-c"><span class="pl-c">//</span> ぶつかった相手がプレイヤーかを確認</span>
		<span class="pl-k">for</span> (<span class="pl-k">int</span> <span class="pl-smi">i</span><span class="pl-k">=</span><span class="pl-c1">12</span> ; <span class="pl-smi">i</span><span class="pl-k">&lt;</span><span class="pl-smi">st</span>.<span class="pl-smi">Length</span> ; <span class="pl-smi">i</span><span class="pl-k">++</span>) {
			<span class="pl-k">if</span> (<span class="pl-smi">commObject</span>.<span class="pl-en">GetComponent</span>&lt;<span class="pl-en">CMilkcocoa</span>&gt;().<span class="pl-en">isPlayerName</span>(<span class="pl-smi">WWW</span>.<span class="pl-en">UnEscapeURL</span>(<span class="pl-smi">st</span>[<span class="pl-smi">i</span>])))
			{
				<span class="pl-c"><span class="pl-c">//</span> プレイヤーが見つかったので、プレイヤーの速度をクリアする</span>
				<span class="pl-smi">commObject</span>.<span class="pl-en">SendMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>SetXZZero<span class="pl-pds">"</span></span>);
				<span class="pl-k">return</span>;
			}
		}
	}
}</pre></div>
<ul>
<li>Unityに戻って、[Hierarchy]ビューから[Comm]オブジェクトを選択</li>
<li>[EnemyComm]プレハブを[Inspector]ビューの[Pref Enemy Comm]にドラッグ＆ドロップする</li>
</ul>
<p>以上でひとまず完成。[Build &amp; Run]をしてリビルドしたら、index.htmlを再読み込みしてログインしよう。</p>
<ul>
<li>インターネットに接続されたPCが2台あれば、もう一台にwebフォルダをコピーして、そちらでもindex.htmlを開いてログインしよう。連動して動くはずである</li>
<li>PCが1台しかない場合は、複数のタブでindex.htmlを開いて、名前を入力ログインする。Unity Web Playerは同時に1つしか動かないため、タブを切り替えながら動きを確認してみよう</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#%E4%B8%80%E5%AE%9A%E4%BB%A5%E4%B8%8A%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%8F%97%E4%BF%A1%E3%81%8C%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E7%9B%B8%E6%89%8B%E3%81%AF%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B" id="user-content-一定以上データの受信がなかった相手は削除する"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>一定以上、データの受信がなかった相手は削除する</h1>
<ul>
<li>CEnemyCommスクリプトをエディタで開く</li>
<li>キャラクタを削除するのに利用するタイマーの時間を定義する</li>
</ul>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">/*</span>* データを受信してから、この秒数経過して次の受信がなかったら接続が切れたものとして消す<span class="pl-c">*/</span></span>
<span class="pl-k">public</span> <span class="pl-k">float</span> <span class="pl-smi">DESTROY_TIME</span> <span class="pl-k">=</span> <span class="pl-c1">5f</span>;</pre></div>
<ul>
<li>自分自身を削除する関数を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">/*</span>* 自分を削除<span class="pl-c">*/</span></span>
	<span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">DestroyMe</span>() {
		<span class="pl-en">Destroy</span> (<span class="pl-smi">gameObject</span>);
	}</pre></div>
<ul>
<li>[public void OnRecv]関数を探して、最初に以下のタイマー処理を追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-c"><span class="pl-c">//</span> 削除タイマーのキャンセルと再設定</span>
		<span class="pl-en">CancelInvoke</span> ();
		<span class="pl-en">Invoke</span> (<span class="pl-s"><span class="pl-pds">"</span>DestroyMe<span class="pl-pds">"</span></span>,<span class="pl-smi">DESTROY_TIME</span>);</pre></div>
<h1>
<a aria-hidden="true" class="anchor" href="#%E4%BB%8A%E5%BE%8C%E3%81%AE%E3%81%82%E3%82%8C%E3%81%93%E3%82%8C" id="user-content-今後のあれこれ"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>今後のあれこれ</h1>
<ul>
<li>テスト用に、敵のAIを持ちつつ、自分の座標を送信するプレハブ＆スクリプトを用意して、別PCで動作させる</li>
<li>Skyboxで背景をきれいに</li>
<li>カメラを迫力あるものに</li>
<li>ぶつかったらパーティクルを散らす</li>
<li>スコアを検討する</li>
<li>名前やスコアを綺麗に表示</li>
<li>障害物を配置</li>
<li>地面を急にしてみたり</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#unity%E7%B4%94%E6%AD%A3%E3%81%AE%E3%83%9E%E3%83%AB%E3%83%81%E3%83%97%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF" id="user-content-unity純正のマルチプレイヤーネットワーク"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unity純正のマルチプレイヤーネットワーク</h1>
<p>Unity自身もマルチプレイヤーネットワークの仕組みを持っている。説明は以下のあたりに。Milkcocoaを利用することによるメリットとデメリットについて考察してみよう。</p>
<ul>
<li><a href="http://docs-jp.unity3d.com/Documentation/Manual/NetworkedMultiplayer.html" rel="nofollow">Unity公式ドキュメント</a></li>
<li>
<a href="http://docs-jp.unity3d.com/Documentation/Components/net-StateSynchronization.html" rel="nofollow">Unity公式ドキュメント-状態同期の詳細</a> Transform,Animation,Rigidbodyを同期できる(らしい)</li>
</ul>
<p><a href="https://github.com/tanakaedu/dat14_fall/wiki/1%E5%B9%B417%E5%9B%9E(1)-Milkcocoa%E3%81%A7%E9%80%9A%E4%BF%A1#%E7%9B%AE%E6%AC%A1">ページトップへ</a></p>

        </div>

    </div>]