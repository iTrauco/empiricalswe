[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#%E6%96%B9%E9%87%9D" id="user-content-方針"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>方針</h1>
<ul>
<li>相撲のような押しだすゲーム</li>
<li>舞台を作成して、そこから落ちるとアウト</li>
<li>ゲームに状態はなく、常にゲーム中で参加できる。相手を直接やっつけた回数をスコアとし、負けたら0に戻る(ハイスコアは残しておく)</li>
<li>3Dでジャンプあり</li>
<li>移動は加速で行う(AddForce)</li>
<li>舞台は、ブロックを並べて配置。配置はCSVを利用</li>
<li>通常のブロック</li>
<li>滑るブロック</li>
<li>弾むブロック</li>
<li>死亡ブロック</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#%E3%83%97%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9" id="user-content-プレイヤーの作り方"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>プレイヤーの作り方</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#rigidbody%E3%81%8Bcharactercontroller%E3%81%8B" id="user-content-rigidbodyかcharactercontrollerか"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Rigidbodyか？CharacterControllerか？</h2>
<p>Colliderを利用するには、上記のいずれかが必要。</p>
<h3>
<a aria-hidden="true" class="anchor" href="#charactercontroller" id="user-content-charactercontroller"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>CharacterController</h3>
<ul>
<li>斜面のある地面の上を移動するキャラクターに最適</li>
<li>地面に立っているかがわかる(isGrounded)</li>
<li>重力を扱うには自分で処理する必要がある(?)。SimpleMove()は自動的に制御してくれる</li>
<li>加速度を使った移動も自分でやる</li>
<li>移動はMove()かSimpleMove()</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#rigidbody" id="user-content-rigidbody"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Rigidbody</h3>
<ul>
<li>上記以外のキャラクターで利用</li>
<li>重力が使える</li>
<li>加速度で制御できる</li>
<li>地面に立っているかは自分で判定</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E3%81%BE%E3%81%A8%E3%82%81" id="user-content-まとめ"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>まとめ</h3>
<p>地面に立っているようなキャラクターの場合はCharacterControllerの方がよい。地面判定や、斜面を自動的に登ってくれる。</p>
<p>今回は地面に立っているキャラだが、お互いがぶつかったときの処理をRigidbodyに任せたい。</p>
<p>以上から、Rigidbodyでやってみる。以下、課題。</p>
<ul>
<li>地面判定は自力でやる。(OnCollisionEnterで、相手のTagでチェック)</li>
<li>加速度での移動をうまくコントロール(AddForceの調整、最高速度の調整)</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#%E3%83%97%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B" id="user-content-プレイヤーを作成する"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>プレイヤーを作成する</h1>
<p>Unityの新しいProjectを作成して開発をする。
できたプレハブをエクスポートして、milkcocoa-unityに読み込ませてもよい。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E9%96%8B%E7%99%BA%E7%94%A8%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90" id="user-content-開発用のプロジェクトを作成"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>開発用のプロジェクトを作成</h2>
<ol>
<li>Unityを起動</li>
<li>[File]&gt;[New Project]で、[Browse...]ボタンを押して、[ドキュメント]&gt;[Unity Projects]フォルダを開く</li>
<li>[新しいフォルダー]を押して新しいフォルダーを作成して、[sumouplayer]などに名前を変更して[フォルダーの選択]を押す</li>
<li>[File]&gt;[Save Scene]で、「sumou」などでシーンを保存</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#%E8%88%9E%E5%8F%B0%E3%82%92%E4%BD%9C%E6%88%90" id="user-content-舞台を作成"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>舞台を作成</h2>
<ol>
<li>[Hierarchy]ビューの[Create]を押して、[Cube]を作成して、名前を[block]に変更</li>
<li>[block]をクリックして、[Inspector]で以下を設定</li>
<li>[Tag]&gt;[Add Tags...]を押して、[Tags]のElement0に「Ground」を入力</li>
<li>[block]をクリックして、[Tag]&gt;[Ground]を選択</li>
<li>[Transform]&gt;[Scale]のXとZを10にする</li>
<li>[Game]&gt;[Free Aspect]を[16:9]に変更</li>
<li>[Main Camera]を選択して、[Position][Y]を「5.5」、[Z]を「-7」。[Rotation]の[X]を45に設定</li>
<li>[Hierarcy]ビューの[Create]&gt;[Directional Light]を追加</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#%E3%83%97%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90" id="user-content-プレイヤーの作成"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>プレイヤーの作成</h2>
<ol>
<li>[Hierarchy]ビューの[Create]&gt;[Cube]を選択して、名前を「Player」に変更</li>
<li>[Player]の[Tag]を[Player]に変更</li>
<li>[Project]ビューの[Create]&gt;[Material]を選択して、名前を「matPlayer」に変更。適当な色を設定して、Playerにドラッグ＆ドロップ</li>
<li>[Player]を選択して、[Inspector]の[Transform][Position][Y]を1にする</li>
<li>[Player]を選択して、[Inspector]の[Add Component]&gt;[Physics]&gt;[Rigidbody]を追加</li>
</ol>
<p>以上で、入れ物の作成は完了。モデルを適用する場合は、モデルデータをPlayerオブジェクトの子供にして、Playerオブジェクトの[Mesh Renderer]を無効にすれば、動作はそのままで表示するモデルを変更することができる。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E6%93%8D%E4%BD%9C%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A8physicmaterial" id="user-content-操作スクリプトとphysicmaterial"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>操作スクリプトとPhysicMaterial</h2>
<p>移動は、矢印キーの方向にx-z軸で直接動く。</p>
<ol>
<li>[Project]ビュー&gt;[Create]&gt;[C# Script]で新しいスクリプトを作成して、「CPlayer」に名前を変更</li>
<li>作成した[CPlayer]を、[Player]オブジェクトにドラッグ＆ドロップして割り当てる</li>
<li>作成したCPlayer.csをダブルクリックして、エディタで開く</li>
</ol>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">using</span> <span class="pl-en">UnityEngine</span>;
<span class="pl-k">using</span> <span class="pl-en">System</span>.<span class="pl-en">Collections</span>;

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">CPlayer</span> : <span class="pl-en">MonoBehaviour</span> {

	<span class="pl-c"><span class="pl-c">//</span> Use this for initialization</span>
	<span class="pl-k">void</span> <span class="pl-en">Start</span> () {
	
	}
	
	<span class="pl-c"><span class="pl-c">//</span> Update is called once per frame</span>
	<span class="pl-k">void</span> <span class="pl-en">Update</span> () {
		<span class="pl-c"><span class="pl-c">//</span> 移動方向を確認</span>
		<span class="pl-en">Vector3</span> <span class="pl-smi">move</span> <span class="pl-k">=</span> <span class="pl-smi">Vector3</span>.<span class="pl-smi">zero</span>;
		<span class="pl-smi">move</span>.<span class="pl-smi">x</span> <span class="pl-k">=</span> <span class="pl-smi">Input</span>.<span class="pl-en">GetAxisRaw</span>(<span class="pl-s"><span class="pl-pds">"</span>Horizontal<span class="pl-pds">"</span></span>);
		<span class="pl-smi">move</span>.<span class="pl-smi">z</span> <span class="pl-k">=</span> <span class="pl-smi">Input</span>.<span class="pl-en">GetAxisRaw</span>(<span class="pl-s"><span class="pl-pds">"</span>Vertical<span class="pl-pds">"</span></span>);

		<span class="pl-c"><span class="pl-c">//</span> 移動キーが押されたかの判定(magnitudeはベクトルの長さ)</span>
		<span class="pl-k">if</span> (<span class="pl-smi">move</span>.<span class="pl-smi">magnitude</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0.5f</span>) {
			<span class="pl-c"><span class="pl-c">//</span> 向きを設定</span>
			<span class="pl-smi">transform</span>.<span class="pl-smi">rotation</span> <span class="pl-k">=</span> <span class="pl-smi">Quaternion</span>.<span class="pl-en">LookRotation</span>(<span class="pl-smi">move</span>);

			<span class="pl-c"><span class="pl-c">//</span> 加速</span>
			<span class="pl-smi">rigidbody</span>.<span class="pl-en">AddForce</span>(<span class="pl-smi">move</span><span class="pl-k">*</span><span class="pl-c1">10.0f</span>);
		}
	}
}</pre></div>
<h1>
<a aria-hidden="true" class="anchor" href="#unity%E3%81%A1%E3%82%83%E3%82%93%E3%82%92%E8%A9%A6%E3%81%97%E3%81%AB%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B" id="user-content-unityちゃんを試しに実装してみる"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unityちゃんを試しに実装してみる</h1>
<ol>
<li>
<a href="http://unity-chan.com/contents/guideline/" rel="nofollow">Unity chan! 公式サイトのガイドライン</a>に接続して、ライセンスを確認後、ページ下の「ユニティちゃんライセンス」にチェックして「データをダウンロードする」を押す</li>
<li>3Dの通常か、SDのユニティちゃんをダウンロード</li>
<li>ダウンロードしたunitypackageファイルを、Unityの[Project]ビューにドラッグ＆ドロップして、すべてインポートする</li>
<li>[Project]ビューの[UnityChan]&gt;[Prefabs]&gt;[Directional light for UnityChan]を、[Hierarchy]ビューにドラッグ＆ドロップ</li>
<li>[Project]ビューの[UnityChan]&gt;[SD_unity chan]&gt;[Prefabs]&gt;[SD_unitychan_generic]を、[Hierarchy]ビューにドラッグ＆ドロップ</li>
<li>[Hierarchy]ビューにドロップしたユニティちゃんをPlayerの子供にする</li>
<li>[Player]オブジェクトの[Mesh Renderer]を無効にする</li>
<li>ユニティちゃんのX,Z座標を0、Y座標を-0.5にする</li>
<li>[Directional light]があると、ユニティちゃんの影が見えなくなるので、[Directional Light]は削除</li>
<li>影をきれいにするには、[Directional light for UnityChan]を選択して、[Inspector]の[Light]の[Resolution]を[High Resolution]などに変更する</li>
</ol>
<h1>
<a aria-hidden="true" class="anchor" href="#%E3%83%A6%E3%83%8B%E3%83%86%E3%82%A3%E3%81%A1%E3%82%83%E3%82%93%E3%81%AE%E3%82%A2%E3%83%8B%E3%83%A1%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B" id="user-content-ユニティちゃんのアニメを制御する"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>ユニティちゃんのアニメを制御する</h1>
<p>現在は組み込みのアクションと表情になっているので、自前で制御することを目指す。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#%E5%90%84%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E5%BD%B9%E5%89%B2" id="user-content-各スクリプトの役割"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>各スクリプトの役割</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#idle-changer" id="user-content-idle-changer"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Idle Changer</h3>
<p>矢印キーに応じて、アニメを切り替える</p>
<h3>
<a aria-hidden="true" class="anchor" href="#spring-manager" id="user-content-spring-manager"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Spring Manager</h3>
<p>髪の毛などに物理挙動を与える</p>
<h3>
<a aria-hidden="true" class="anchor" href="#random-wind" id="user-content-random-wind"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Random Wind</h3>
<ul>
<li>ランダムに風を吹かせる</li>
<li>風を吹かせるチェックの描画</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#auto-blinkfor-sd" id="user-content-auto-blinkfor-sd"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Auto Blinkfor SD</h3>
<ul>
<li>自動まばたき</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#face-update" id="user-content-face-update"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Face Update</h3>
<ul>
<li>表情の制御。</li>
<li>表情のインターフェースの描画。</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#%E3%83%A2%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%87%E3%83%BC%E3%82%BF" id="user-content-モーションデータ"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>モーションデータ</h2>
<ul>
<li>SD_unitychan_motion_Genric で制御</li>
<li>アニメーションデータ本体は、[Project]&gt;[UnityChan]&gt;[SD_unitychan]&gt;[Animations]&gt;[SD_unitychan_motion_Generic]のモデル内</li>
<li>アニメーションの切り替えのAnimatorは、上記のパスのAnimatorアイコン</li>
<li>最初のアニメは、Animator.Play(アニメ名)で切り替え</li>
<li>それ以外の切り替えは、なるべくAnimatorにフラグを設定</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%92%E8%87%AA%E4%BD%9C" id="user-content-アニメーターを自作"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>アニメーターを自作</h2>
<ol>
<li>[Project]&gt;[Create]&gt;[Animator Controller]で、新しいアニメーターを作成して、任意の名前をつける</li>
<li>作成したアニメーターをダブルクリックして、[Animator]ビューで表示</li>
<li>[Animator]ビューで[Layers]の[+]を押してLayerを追加したら、Nameを「face」にする</li>
<li>[SD_unitychan_motion_Generic]アニメーターを開いて、[Standing(loop)][Walking(loop)][Running(loop)]をコピーして、新しく作成したアニメーターに貼り付ける</li>
<li>[Parameters]の[+]を押して、[Float]を選び、「vel」という名前にする</li>
<li>[Parameters]の[+]を押して、[Trigger]を選び、「jump」という名前にする</li>
<li>[Standing(loop)]で右クリック&gt;[Make Transition]を選んで、[Walking(loop)]に接続</li>
<li>作成したTransitionをクリックして選んで、[Conditions]を[vel]に変更して、[Greater]、パラメータは仮に「1」にして様子を見る</li>
<li>[Walking(loop)]を右クリック&gt;[Make Transition]を選んで、[Standing(loop)]に接続</li>
<li>[Walking]&gt;[Standing]のTransitionを選択して、[Conditions]を[vel]に変更して、[Less]、パラメータは仮に「1」にして様子を見る</li>
</ol>
<p>以上ができたら、ひとまず様子を見る。</p>
<ol>
<li>[Project]に作成した新しいアニメーターを、ユニティちゃんの[Animator]&gt;[Controller]にドラッグ＆ドロップ</li>
<li>[Idle Changer(Script)]の左のチェックを外して無効にする</li>
<li>[Project]&gt;[Create]&gt;[C# Script]で新しいスクリプトを作成して、「SumouAnim」などの名前にする</li>
<li>[SumouAnim]を[Hierarchy]ビューの[SD_unitychan_generic]オブジェクトにドラッグ＆ドロップ</li>
<li>[SumouAnim]をダブルクリックしてエディタで開く</li>
<li>「IdleChanger」(元)を参考にして作成</li>
<li>元の12行目の[RequireComponent・・・]の行をコピーして、同じような場所に貼り付ける</li>
<li>元の19行目の[private Animator anim;]をコピーして、同じような場所に貼り付ける</li>
<li>元の33行目の[anim = Get・・・]の行を、同じような場所に貼り付ける</li>
</ol>
<div class="highlight highlight-source-cs"><pre><span class="pl-k">using</span> <span class="pl-en">UnityEngine</span>;
<span class="pl-k">using</span> <span class="pl-en">System</span>.<span class="pl-en">Collections</span>;

<span class="pl-c"><span class="pl-c">//</span> Require these components when using this script</span>
[<span class="pl-en">RequireComponent</span>(<span class="pl-k">typeof</span>(<span class="pl-en">Animator</span>))]

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">SumouAnim</span> : <span class="pl-en">MonoBehaviour</span> {
	<span class="pl-k">private</span> <span class="pl-en">Animator</span> <span class="pl-smi">anim</span>;						<span class="pl-c"><span class="pl-c">//</span> Animatorへの参照</span>

	<span class="pl-c"><span class="pl-c">//</span> Use this for initialization</span>
	<span class="pl-k">void</span> <span class="pl-en">Start</span> () {
		<span class="pl-smi">anim</span> <span class="pl-k">=</span> <span class="pl-en">GetComponent</span>&lt;<span class="pl-en">Animator</span>&gt; ();
	}
	
	<span class="pl-c"><span class="pl-c">//</span> Update is called once per frame</span>
	<span class="pl-k">void</span> <span class="pl-en">Update</span> () {
		<span class="pl-smi">anim</span>.<span class="pl-en">SetFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>vel<span class="pl-pds">"</span></span>,<span class="pl-smi">transform</span>.<span class="pl-smi">parent</span>.<span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">magnitude</span>);
	}
}</pre></div>
<ul>
<li>同様にして、走るアニメもMake Transitionでつなげてみよう。パラメータは、Walkが0.1、Runが1程度がよさそう</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#face%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AF%E6%AC%A1%E5%9B%9E" id="user-content-faceのエラーは次回"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Faceのエラーは次回</h1>

        </div>

    </div>]