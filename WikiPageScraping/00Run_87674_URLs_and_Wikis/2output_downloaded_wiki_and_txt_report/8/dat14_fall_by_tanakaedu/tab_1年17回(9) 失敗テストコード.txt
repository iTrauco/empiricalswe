[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#%E8%A7%A3%E6%B1%BA%E7%AD%96" id="user-content-解決策"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>解決策</h2>
<ul>
<li>原因が不明なので、まずは同症状を発生させるテスト環境を構築する</li>
<li>デバッグ用のシーンを追加して、デバッグ用の敵を10人おいて、1台のPCで動作させる。もう一方のPCで通常のプログラムを動かす</li>
<li>デバッグ用の敵は以下の通り</li>
<li>新しいEnemyDebugオブジェクトを作成</li>
<li>CPlayerBaseを継承したCEnemyDebugを作成</li>
<li>動作はCEnemyに任せる</li>
<li>動作後、CPlayerの送信を行う</li>
<li>10人最初からおいて、適当にsNameに名前を設定</li>
<li>OnRecv()で、CEnemyDebugでは、自分が吹っ飛ばしたチェックを行う。基本的にはCPlayerと同等の処理</li>
<li>デバッグするプレイヤー側は、CEnemyCommとして処理</li>
<li>プレイヤーはない</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%94%A8%E3%82%B7%E3%83%BC%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90" id="user-content-デバッグ用シーンの作成"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>デバッグ用シーンの作成</h3>
<ul>
<li>[File]&gt;[Save Scene]をしておく</li>
<li>[File]&gt;[New Scene]で新しいシーンを作成</li>
<li>[File]&gt;[Save Scene]をして、「DebugScene」という名前にする</li>
<li>[sumou]シーンに移動して、以下のものをプレハブ化する</li>
<li>block</li>
<li>Miss</li>
<li>Comm</li>
<li>ParticleEmitter</li>
<li>[File]&gt;[Save Scene]で保存</li>
<li>[DebugScene]シーンに切り替える</li>
<li>先ほどプレハブ化した[block][Miss][Comm][ParticleEmitter]を[Hierarchy]ビューにドラッグ＆ドロップして登録。座標は0,0,0にする</li>
<li>さらに、[Directional light for UnityChan]プレハブをドラッグ＆ドロップする</li>
<li>[Main Camera]の姿勢を適度に操作して、フィールドを見やすくする</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E9%80%81%E4%BF%A1%E9%96%A2%E6%95%B0%E3%82%92%E5%88%87%E3%82%8A%E9%9B%A2%E3%81%99" id="user-content-送信関数を切り離す"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>送信関数を切り離す</h3>
<p>CPlayerとCEnemyDebugで同じ送信関数を利用するために、CPlayerの送信処理を関数にまとめて、CPlayerBaseに移動する。</p>
<ul>
<li>[CPlayer]スクリプトと[CPlayerBase]スクリプトをエディタで開く</li>
<li>[CPlayer]スクリプトの[private bool isRecved]変数の定義を、[CPlayerBase]に移動した上で、[private]を[protected]に変更する</li>
<li>[CPlayer]スクリプトの[void Update]関数内の以下の部分を切り取る</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-c"><span class="pl-c">//</span> 通信オブジェクトが見つかり、かつ、受信済みの時に送信</span>
		<span class="pl-k">if</span> ((<span class="pl-smi">commObject</span> <span class="pl-k">!=</span> <span class="pl-c1">null</span>) <span class="pl-k">&amp;&amp;</span> (<span class="pl-smi">isRecved</span>)) {
			<span class="pl-c"><span class="pl-c">//</span> 受信フラグを消す</span>
			<span class="pl-smi">isRecved</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;
			<span class="pl-c"><span class="pl-c">//</span> データを作成して送信</span>
			<span class="pl-k">string</span> <span class="pl-smi">st</span> <span class="pl-k">=</span> <span class="pl-smi">WWW</span>.<span class="pl-en">EscapeURL</span>(<span class="pl-smi">sName</span>)
				<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">iParam</span>
					<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">x</span>
					<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">y</span>
					<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">z</span>
					<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">x</span>
					<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">y</span>
					<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">z</span>
					<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span><span class="pl-smi">y</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span>(<span class="pl-smi">isJump</span> <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>)
					<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span><span class="pl-k">+</span>(<span class="pl-smi">tag</span><span class="pl-k">==</span><span class="pl-s"><span class="pl-pds">"</span>DAMAGE<span class="pl-pds">"</span></span> <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>)
					<span class="pl-k">+</span><span class="pl-smi">sHitList</span>;
			<span class="pl-smi">commObject</span>.<span class="pl-en">SendMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>Send<span class="pl-pds">"</span></span>,<span class="pl-smi">st</span>);
			<span class="pl-smi">sHitList</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;
		}</pre></div>
<ul>
<li>切り取ったコードを、[CPlayerBase]に貼り付けて、関数の装飾をして以下のようにする</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-c"><span class="pl-c">//</span> 通信オブジェクトが見つかり、かつ、受信済みの時に送信</span>
	<span class="pl-k">protected</span> <span class="pl-k">void</span> <span class="pl-en">send</span>(<span class="pl-k">float</span> <span class="pl-smi">x</span>,<span class="pl-k">float</span> <span class="pl-smi">y</span>,<span class="pl-k">bool</span> <span class="pl-smi">isJump</span>) {
		<span class="pl-k">if</span> ((<span class="pl-smi">commObject</span> <span class="pl-k">!=</span> <span class="pl-c1">null</span>) <span class="pl-k">&amp;&amp;</span> (<span class="pl-smi">isRecved</span>)) {
			<span class="pl-c"><span class="pl-c">//</span> 受信フラグを消す</span>
			<span class="pl-smi">isRecved</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;
			<span class="pl-c"><span class="pl-c">//</span> データを作成して送信</span>
			<span class="pl-k">string</span> <span class="pl-smi">st</span> <span class="pl-k">=</span> <span class="pl-smi">WWW</span>.<span class="pl-en">EscapeURL</span> (<span class="pl-smi">sName</span>)
				<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">iParam</span>
				<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">x</span>
				<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">y</span>
				<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">z</span>
				<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">x</span>
				<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">y</span>
				<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">rigidbody</span>.<span class="pl-smi">velocity</span>.<span class="pl-smi">z</span>
				<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">x</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">y</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> (<span class="pl-smi">isJump</span> <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>)
				<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">+</span> (<span class="pl-smi">tag</span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>DAMAGE<span class="pl-pds">"</span></span> <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>)
				<span class="pl-k">+</span> <span class="pl-smi">sHitList</span>;
			<span class="pl-smi">commObject</span>.<span class="pl-en">SendMessage</span> (<span class="pl-s"><span class="pl-pds">"</span>Send<span class="pl-pds">"</span></span>, <span class="pl-smi">st</span>);
			<span class="pl-smi">sHitList</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;
		}
	}</pre></div>
<ul>
<li>[CPlayer]をエディタで開く</li>
<li>[void Update]関数内で、先ほど通信のコードを切り取った場所に、以下のコードを追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>		<span class="pl-en">send</span> (<span class="pl-smi">x</span>, <span class="pl-smi">y</span>, <span class="pl-smi">isJump</span>);</pre></div>
<ul>
<li>上書き保存する</li>
<li>Unityに戻り、[File]&gt;[Save Scene]でシーンを保存する</li>
<li>[sumou]シーンに切り替えて、[File]&gt;[Build &amp; Run]してリビルド</li>
<li>問題なく動作することを確認する</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%94%A8%E3%81%AE%E6%95%B5%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B" id="user-content-デバッグ用の敵を作成する"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>デバッグ用の敵を作成する</h3>
<ul>
<li>[DebugScene]に切り替える</li>
<li>[Enemy]プレハブを[Hierarchy]ビューにドラッグ＆ドロップする</li>
<li>名前を「EnemyDebug」に変更する</li>
<li>[EnemyDebug]を[Project]ビューにドラッグ＆ドロップしてプレハブ化する</li>
<li>[Project]ビューでC#スクリプトを作成して、「CEnemyDebug」という名前にする</li>
<li>[CEnemyDebug]スクリプトを、[EnemyDebug]にドラッグ＆ドロップする</li>
<li>[EnemyDebug]プレハブから、[CEnemy]スクリプトを削除する</li>
<li>[CEnemyDebug]スクリプトをエディタで開く</li>
<li>[CEnemy]スクリプトをエディタで開いて、中身を全て選択して、[CEnemyDebug]に貼り付ける</li>
<li>[CEnemyDebug]のクラス名を「CEnemyDebug」に変更する</li>
<li>[CPlayer]スクリプトをエディタで開いて、[public void OnRecv]関数をコピーして、[CEnemyDebug]スクリプトに追加する</li>
<li>[void Update]関数内で、以下を修正する</li>
<li>targetsの検索を、"Player"から"Enemy"に変更する</li>
<li>foreachブロックの最後に、以下のコードを追加する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>			<span class="pl-c"><span class="pl-c">//</span> 送信</span>
			<span class="pl-en">send</span> (<span class="pl-smi">mv</span>.<span class="pl-smi">x</span>,<span class="pl-smi">mv</span>.<span class="pl-smi">y</span>,<span class="pl-smi">tg</span>.<span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">y</span> <span class="pl-k">&gt;</span> <span class="pl-smi">transform</span>.<span class="pl-smi">position</span>.<span class="pl-smi">y</span><span class="pl-k">+</span><span class="pl-c1">1f</span>);</pre></div>
<ul>
<li>上書き保存する</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E3%83%9F%E3%82%B9%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%95%E3%81%9B%E3%82%8B" id="user-content-ミスに対応させる"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>ミスに対応させる</h3>
<ul>
<li>[CMiss]スクリプトをエディタで開く</li>
<li>[void OnTriggerEnter]関数を以下のように修正する</li>
</ul>
<div class="highlight highlight-source-cs"><pre>	<span class="pl-k">void</span> <span class="pl-en">OnTriggerEnter</span>(<span class="pl-en">Collider</span> <span class="pl-smi">col</span>) 
	{
		<span class="pl-k">if</span> (	(<span class="pl-smi">col</span>.<span class="pl-en">GetComponent</span>&lt;<span class="pl-en">CPlayer</span>&gt;() <span class="pl-k">!=</span> <span class="pl-c1">null</span>) 
		    <span class="pl-k">||</span>	(<span class="pl-smi">col</span>.<span class="pl-en">GetComponent</span>&lt;<span class="pl-en">CEnemyDebug</span>&gt;() <span class="pl-k">!=</span> <span class="pl-c1">null</span>))
		{
			<span class="pl-smi">col</span>.<span class="pl-en">SendMessage</span>(<span class="pl-s"><span class="pl-pds">"</span>Respawn<span class="pl-pds">"</span></span>);
		}
	}</pre></div>
<ul>
<li>上書き保存する</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#%E3%83%86%E3%82%B9%E3%83%88%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B" id="user-content-テスト環境を構築する"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>テスト環境を構築する</h3>
<ul>
<li>Unityに戻る</li>
<li>[EnemyDebug]プレハブを選択して、[Tag]を[Player]に変更する</li>
<li>[WALK_ADD]を「7」程度にして、歩く速度を遅くしておく</li>
<li>[EnemyDebug]プレハブを10個ほど、フィールドに配置する</li>
<li>置いた[EnemyDebug]オブジェクトの[Sname]パラメータに、teki0、teki1、teki2…などのように設定する。全て別の名前になるようにする</li>
<li>[File]&gt;[Save Scene]で保存</li>
<li>[File]&gt;[Build Settings]を選択</li>
<li>[Add Current]ボタンを押して、[DebugScene]を追加する</li>
<li>[DebugScene]の方を上に配置する</li>
<li>[Build]ボタンを押す</li>
<li>新しいフォルダを作成して[debug]などの名前にして、[フォルダーの選択]を押す</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#milkcocoa%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86" id="user-content-milkcocoaの設定を行う"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Milkcocoaの設定を行う</h3>
<ul>
<li>普通にビルドした[index.html]と[main.js]を、[debug]フォルダにコピーする</li>
<li>[debug.unity3d]のファイル名を、[debug]から、通常版と同じファイル名に変更する</li>
<li>
</li>
</ul>
<p>以上で、デバッグ環境の出来上がり。debugフォルダ内のdebug.htmlをダブルクリックして起動して、他のPCで通常版を動かすことで、デバッグできるようになる。</p>
<ul>
<li>敵AIを持った</li>
</ul>
<p>現在、受信データをJavaScriptからUnityに送ると、その場で反映処理を行っているが、これだと受信処理が間に合わなくなる可能性がある。そこで、受信時は受け取ったデータを記録するのみとして、Unityへの反映はCEnemyCommのUpdate()内に変更する。</p>

        </div>

    </div>]