[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#targets" id="user-content-targets"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Targets</h2>
<table>
<thead>
<tr>
<th>PHP</th>
<th>Database</th>
<th>Operating System</th>
<th>Character Encoding</th>
</tr>
</thead>
<tbody>
<tr>
<td>5.6, 7.x</td>
<td>Sqlite, Maria DB</td>
<td>Win, Mac, *nix</td>
<td>ASCII, UTF8</td>
</tr>
</tbody>
</table>
<h2>
<a aria-hidden="true" class="anchor" href="#tooling" id="user-content-tooling"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tooling</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#phpunit" id="user-content-phpunit"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>PHPUnit</h3>
<p><strong>Version:</strong> <code>^4.8.35 || ^5.4.3 || ^6.0</code></p>
<p>Note on PHP and PHPUnit version compatibility:</p>
<ul>
<li>PHPUnit version 6.x and higher only support PHP 7.x and higher.</li>
<li>PHPUnit 6 refactored class names to PSR4, we provide backwards compatibility for tests written in PHPUnit 5.</li>
<li>Please write new tests to be compatible with PHPUnit 6 and higher when developing on PHP 7 and higher.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#travis-ci-" id="user-content-travis-ci-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Travis CI <a href="https://travis-ci.org/ronindesign/ts3phpframework" rel="nofollow"><img alt="Build Status" data-canonical-src="https://travis-ci.org/ronindesign/ts3phpframework.svg?branch=testing" src="https://camo.githubusercontent.com/c720a1aa0416487bf9e7f9f8422c41f593ccd897/68747470733a2f2f7472617669732d63692e6f72672f726f6e696e64657369676e2f7473337068706672616d65776f726b2e7376673f6272616e63683d74657374696e67"/></a>
</h3>
<p><strong>Overview:</strong> <a href="https://travis-ci.org/ronindesign/ts3phpframework" rel="nofollow">https://travis-ci.org/ronindesign/ts3phpframework</a></p>
<h3>
<a aria-hidden="true" class="anchor" href="#coveralls-" id="user-content-coveralls-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Coveralls <a href="https://coveralls.io/github/ronindesign/ts3phpframework?branch=testing" rel="nofollow"><img alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/ronindesign/ts3phpframework/badge.svg?branch=testing" src="https://camo.githubusercontent.com/3f5ef7e0adfa9e3cf8b10cdb4fea14f439626872/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f726f6e696e64657369676e2f7473337068706672616d65776f726b2f62616467652e7376673f6272616e63683d74657374696e67"/></a>
</h3>
<p><strong>Version:</strong> <code>^1.1 || ^2.0</code></p>
<p><strong>Overview:</strong> <a href="https://coveralls.io/github/ronindesign/ts3phpframework" rel="nofollow">https://coveralls.io/github/ronindesign/ts3phpframework</a></p>
<h3>
<a aria-hidden="true" class="anchor" href="#code-climate--" id="user-content-code-climate--"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Code Climate <a href="https://codeclimate.com/github/ronindesign/ts3phpframework/maintainability" rel="nofollow"><img alt="Maintainability" data-canonical-src="https://api.codeclimate.com/v1/badges/2d622e0d178f85f5c363/maintainability" src="https://camo.githubusercontent.com/aac1171b2791cc9ae2f12f4625984607f571d251/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f32643632326530643137386638356635633336332f6d61696e7461696e6162696c697479"/></a> <a href="https://codeclimate.com/github/ronindesign/ts3phpframework/test_coverage" rel="nofollow"><img alt="Test Coverage" data-canonical-src="https://api.codeclimate.com/v1/badges/2d622e0d178f85f5c363/test_coverage" src="https://camo.githubusercontent.com/9920906b7d874c759cee76f63de70ea7b71ba39f/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f32643632326530643137386638356635633336332f746573745f636f766572616765"/></a>
</h3>
<p><strong>Overview:</strong> <a href="https://codeclimate.com/github/ronindesign/ts3phpframework" rel="nofollow">https://codeclimate.com/github/ronindesign/ts3phpframework</a></p>
<h3>
<a aria-hidden="true" class="anchor" href="#php-coding-standards-fixer" id="user-content-php-coding-standards-fixer"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>PHP Coding Standards Fixer</h3>
<p><strong>Version:</strong> <code>^2.0</code></p>
<p><strong>Overview:</strong> <a href="http://cs.sensiolabs.org/" rel="nofollow">http://cs.sensiolabs.org/</a></p>
<h3>
<a aria-hidden="true" class="anchor" href="#ts3audiobot" id="user-content-ts3audiobot"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>TS3AudioBot</h3>
<p><em>Used when testing commands that require a target client</em></p>
<p><strong>Version:</strong> <code>^8.0</code></p>
<p><strong>Overview:</strong> <a href="https://github.com/Splamy/TS3AudioBot">https://github.com/Splamy/TS3AudioBot</a></p>
<p><strong>Download (direct):</strong> <a href="https://splamy.de/api/nightly/ts3ab/master/download" rel="nofollow">https://splamy.de/api/nightly/ts3ab/master/download</a></p>
<p>Example <code>wget -O TS3AudioBot.zip https://splamy.de/api/nightly/ts3ab/master/download &amp;&amp; unzip TS3AudioBot.zip</code></p>
<p><strong>Dependencies:</strong> Mono <code>^5.10</code> | libopus | ffmpeg</p>
<p>Example: <code>sudo apt-get install libopus-dev ffmpeg</code></p>
<p><em>Mono install takes a few <a href="http://www.mono-project.com/download/stable/#download-lin" rel="nofollow">extra steps</a></em></p>
<p>Running client: <code>cd TS3AudioBot/ &amp;&amp; mono TS3AudioBot.exe</code></p>
<h2>
<a aria-hidden="true" class="anchor" href="#pull-request-requirement" id="user-content-pull-request-requirement"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Pull Request Requirement</h2>
<p>Any pull request that adds functional code must be accompanied by related (unit) test(s).</p>
<p>While unit tests are required, additional levels of testing, e.g. integration or acceptance, are greatly appreciated, but not required.</p>
<p>We also recommend (but not require) you check your contribution against PSR for coding standards.
You can easily check PSR-2 compliance with PHP CS Fixer already installed by composer:</p>
<p><code>php -n -d memory_limit=768M vendor/bin/php-cs-fixer fix --config=.php_cs --verbose --dry-run</code></p>
<p>If you want to include code diff (warning: may output lots of text), you can use <code>--diff</code> flag:</p>
<p><code>php -n -d memory_limit=768M vendor/bin/php-cs-fixer fix --config=.php_cs --verbose --diff --dry-run</code></p>
<h2>
<a aria-hidden="true" class="anchor" href="#testing-types" id="user-content-testing-types"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Testing Types</h2>
<p><strong>Unit</strong></p>
<p>Tests that <a href="https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well" rel="nofollow">check one thing, and check it well</a> by being precise, unassuming, and leaving no room for error or ambiguity. Typically these tests are checking logic and corner cases, e.g. boundary conditions, to make sure nothing breaks when refactoring or adding to the framework.</p>
<p>These tests are usually performed on class methods, prioritizing those which modify, manipulate, or format data from one state to another, e.g. <em>Helper</em> class methods.</p>
<p><strong>Integration</strong></p>
<p>Integration tests target inter-class logic, ensuring that classes work together as expected, as well as other components of the system. These tests also target interactions with the TeamSpeak 3 server, as it takes the place of an interface in traditional integration testing.</p>
<p>Interface testing may include checking for default values, responses, or other initial state or state manipulation, including modifying, adding, and removing content from the TeamSpeak 3 server. In these tests, it's critical to perform only one action, then test the resulting state. Otherwise, side-effects can cascade, costing more time for a contributor to troubleshoot what happened.</p>
<p><strong>Functional</strong></p>
<p>Functional tests check the expected or required state and behavior of the working environment. While these tests may be few, they are important in checking for dependencies that the framework and TeamSpeak 3 server expect. These tests will catch missing requirements or environments with incompatible state, e.g. checking if language or system modules exist and are correct version.</p>
<p><strong>System</strong></p>
<p>System tests check for inconsistencies between environments. Tests may include anything from different operating system or kernel, architecture, or word size to filesystem case sensitivity, default line endings, or character encoding.</p>
<p><strong>Stress</strong></p>
<p>Stress tests check for invalid, erroneous, or unexpected data when the system is under unfavorable conditions. Tests include checking for race conditions, (async) message order, blocking, dropped or missed data, and ungraceful timeouts. To clarify, this is not performance testing.</p>
<p><strong>Acceptance</strong></p>
<p>Acceptance or operational tests are performed from the end-user's perspective and check responses or effects of the framework given an input or action. These tests may be performed from both a developer and non-developer user context. In some cases, e.g. the html viewer, the end-user is not the developer using the framework, but rather the user viewing a final product, e.g. in a web browser, and this context must be tested as well.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#mock--database" id="user-content-mock--database"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Mock / Database</h2>
<p>When possible, mock objects are used to imitate different states of a TeamSpeak 3 server. However, in some cases it's easier to use existing data directly from the TeamSpeak 3 server. We want to test the actual, real state of TeamSpeak 3 when it's deployed, since it may change over time. We want to reduce the risk of making an inaccurate assumption of the initial data state when TeamSpeak 3 is installed.</p>
<p>In cases where we use the database, the test suite assumes existing data in one of the following states:</p>
<ul>
<li>None - No database (sqlite file missing, specified Maria DB unavailable). This is unusual.</li>
<li>Default - Data strictly matches what TeamSpeak 3 adds when installed.</li>
<li>Active - Data exists and is not in the <code>Default</code> state. Assume user is currently using this database.</li>
</ul>
<p>It’s important to distinguish between persistent and non-persistent database content in the test suite. When phpunit is invoked, the test suite wipes the test database clean and performs a clean installation. This data – such as the default content – is persistent through the tests and is considered the <code>Default</code> state of the database.</p>
<p>Database modifications made during test, on the other hand, are not persistent. Before each test, the suite opens a MySQL transaction (START TRANSACTION) with autocommit disabled, and at the end of each test the transaction is rolled back (ROLLBACK). This means that database operations performed from within a test, such as the creation of test fixtures, are discarded after each test. For more information on transactions, see the official MySQL documentation, and especially the section on statements that trigger commits.</p>

        </div>

    </div>]