[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>This page provides an overview of the example programs in <code>simplelearn/examples</code>. For detailed help and descriptions of command-line arguments, just run each program with the <code>-h</code> flag.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#linear_regressionpy" id="user-content-linear_regressionpy"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>linear_regression.py</h2>
<p>Fits a 3D plane to a cloud of noisy data.</p>
<p>Demonstrates the following classes:</p>
<ul>
<li>
<code>AffineTransform</code> as the linear regressor.</li>
<li>
<code>L2Loss</code> as the error function.</li>
<li>
<code>Sgd</code> for the training loop.</li>
<li>
<code>SgdParameterUpdater</code> for updating the linear regressor weights and biases.</li>
<li>
<code>Monitor</code> callback for updating the display after each training batch.</li>
<li>
<code>EpochCallback</code> for keeping track of the validation error and ending training when it stagnates.</li>
<li>
<code>Dataset</code>s to store the train and test data points.</li>
</ul>
<p><img alt="" src="https://github.com/SuperElectric/simplelearn/raw/master/simplelearn/examples/linear_regression_screenshot.png"/></p>
<h2>
<a aria-hidden="true" class="anchor" href="#mnist_convpy" id="user-content-mnist_convpy"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>mnist_conv.py</h2>
<p>Trains a convolutional network on the MNIST handwritten digit dataset.</p>
<p>Demonstrates the same training classes as <code>linear_regresssion.py</code>, plus:</p>
<ul>
<li>
<code>Conv2D</code>, <code>Pool2D</code>, <code>ReLU</code>, <code>Dropout</code>, and <code>AffineTransform</code> nodes to build the convnet.</li>
<li>
<code>limit_param_norms()</code> to cap the parameter updates.</li>
<li>
<code>PicklesOnEpoch</code> to save the model after each training epoch.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#mnist_fully_connectedpy" id="user-content-mnist_fully_connectedpy"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>mnist_fully_connected.py</h2>
<p>Trains a fully-connected network on the MNIST dataset.</p>
<p>Demonstrates the same classes as <code>mnist_conv.py</code> except without the convolutional nodes.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#mnist_visualizerpy" id="user-content-mnist_visualizerpy"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>mnist_visualizer.py</h2>
<p>Optimizes a trained MNIST classifier's output with respect to the input pixels.</p>
<p>Step through the MNIST digits by hitting 'space'. For each input image, the program optimizes the pixels to morph them into the network's idea of what a X digit looks like, for x = 0 to 9.</p>
<p><img alt="" src="https://github.com/SuperElectric/simplelearn/raw/master/simplelearn/examples/mnist_visualizer_screenshot.png"/></p>
<h2>
<a aria-hidden="true" class="anchor" href="#norb_slideshowpy" id="user-content-norb_slideshowpy"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>norb_slideshow.py</h2>
<p>A simple demo of iterating through a dataset.</p>
<p>For a real tool for interactively browsing the NORB dataset by label, use <code>simplelearn.scripts.browse_norb.py</code> instead.</p>
<p>Demonstrates:</p>
<ul>
<li>load_norb()</li>
<li><code>DatasetIterator</code></li>
</ul>
<p><img alt="" src="https://github.com/SuperElectric/simplelearn/raw/master/simplelearn/examples/norb_slideshow.png"/></p>
<h2>
<a aria-hidden="true" class="anchor" href="#sgdpy" id="user-content-sgdpy"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>sgd.py</h2>
<p>Visualizes the path of a point in an energy well, under different values for learning rate and momentum.</p>
<p><img alt="" src="https://github.com/SuperElectric/simplelearn/raw/master/simplelearn/examples/sgd_screenshot.png"/></p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p>Copyright (c) 2015 Matthew Koichi Grimes</p>

          </div>
        </div>
    </div>]