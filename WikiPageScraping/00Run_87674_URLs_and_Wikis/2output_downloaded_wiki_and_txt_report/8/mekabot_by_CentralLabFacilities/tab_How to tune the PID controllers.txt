[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#m3-joint-tuning-tool" id="user-content-m3-joint-tuning-tool"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>M3 Joint Tuning Tool</h1>
<p>Tuning the PID controllers is a very easy process using the joint tuning tool. It will help you set gains and send commands to the robot so you can see the modifications in realtime.</p>
<blockquote>
<p>Note: it works by modifying the Param protobuf attached to each component to the realtime server.</p>
</blockquote>
<p>Launch the GUI:</p>
<pre><code>m3dev_joint_tuning.py
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#tuning-pid-controllers-general-information" id="user-content-tuning-pid-controllers-general-information"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tuning PID controllers: general information</h2>
<p>Check out <a href="http://m.eet.com/media/1112634/f-wescot.pdf" rel="nofollow">PID without a PHD</a>.</p>
<p>Basically what we need on the robot is fast responsiveness and no overshoot, otherwise it will bump into objects to gasps for example. As velocities are quite noisy, the 'D' parameter of a PID should <strong>not</strong> be set very high. As a rule of thumb, I start by setting 'I' and 'D' to zero, tuning 'P' until it shakes, lower it a bit, then start playing with the 'D' term for a nice behavior (like a slow arrival). Eventually, the 'I' term is set to cancel static error.</p>
<blockquote>
<p>Note: In most cases, the 'D' term is 0 or very low.</p>
</blockquote>
<p><strong>Warning : The robot might shake if the PID gains are set too high. This can cause hardware issues, so keep the red button in hand at all time when tuning the PIDs.</strong></p>
<h2>
<a aria-hidden="true" class="anchor" href="#tuning-torque-control-pid" id="user-content-tuning-torque-control-pid"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tuning Torque Control PID</h2>
<p>Torque is the lowest level from which the other modes derives, so if torque mode works perfectly, then the other modes (theta, thetadot) will work even better.</p>
<p>Set the actuator mode to <strong>torque</strong> (no GC), set a torque cmd (like 1600 mNm), and see how is reacts.</p>
<p>Then the parameters are in the <strong>ctrl_simple</strong> component attached to each actuator, under <strong>pid_torque</strong>. Just set a value and press Enter to send it to the robot. It's as easy as that.</p>
<p>When you're done, you can press <em><strong>save</strong></em> to save the config file.</p>
<blockquote>
<p>Note: Arm motors can be quite precise and fast (no overshoot and fast responsiveness), so unless PID torque torque is perfect, don't save it.</p>
</blockquote>
<blockquote>
<p>Note: Thanks to overlays, you copy all the <strong>real_robot</strong> content in a different location and overlay the config files so the original configuration of the robot remains unchanged.</p>
</blockquote>
<h2>
<a aria-hidden="true" class="anchor" href="#tuning-position-control-pid" id="user-content-tuning-position-control-pid"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tuning Position Control PID</h2>
<p>Same as above, put the actuator in <strong>theta</strong> mode, then tune the pid in <strong>ctrl_simple</strong>, <strong>pid_theta</strong>.</p>
<p><strong>Warning</strong>: if you improve the torque mode, then the theta mode will probably become <strong>unstable</strong>, because the previous gains are now <strong>too high</strong> for the robot. Usually you'll have to <strong>lower</strong> them (and that's a nice feature in the end because low gains means more compliance !).</p>
<blockquote>
<p>Note: If you tune it well, you can achieve a <strong>~0.1 degrees accuracy</strong>.</p>
</blockquote>
<h2>
<a aria-hidden="true" class="anchor" href="#tuning-velocity-control-pid" id="user-content-tuning-velocity-control-pid"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tuning Velocity Control PID</h2>
<p>PID parameters for the velocity controller are directly in the <strong>joint</strong> component of the actuator.</p>
<p>The names of the parameters are:</p>
<pre><code>kqdot_d: 0.0
kqdot_i: 0.0
kqdot_i_limit: 1000.0
kqdot_i_range: 1500.0
kqdot_p: -100.0
</code></pre>
<blockquote>
<p>Note: as of October 2014, <strong>only right_arm has been calibrated for velocity control</strong></p>
</blockquote>
<blockquote>
<p>Note to dev: these parameters can be switched to the **ctrl_simple component by added a command mode in ctrl_simple.cpp and updating the command mode in joint.cpp</p>
</blockquote>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <blockquote>
<p>Author: <a href="mailto:plueckin@techfak.uni-bielefeld.de">plueckin@techfak.uni-bielefeld.de</a></p>
</blockquote>

          </div>
        </div>
    </div>]