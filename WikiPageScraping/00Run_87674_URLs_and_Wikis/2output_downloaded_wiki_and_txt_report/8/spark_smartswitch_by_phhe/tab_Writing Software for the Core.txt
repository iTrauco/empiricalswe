[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>When using the Spark Core software package, you have access to the following libraries:</p>
<ul>
<li>
<em><a href="http://arduino.cc/en/Reference/HomePage" rel="nofollow">Arduino</a> / <a href="http://wiring.org.co/reference/" rel="nofollow">Wiring</a> (partially implemented).</em> Wiring is the "programming language" that Arduino uses, and is commonly described as the Arduino programming language because of this. We have ported over much of Wiring to our micro-controller (the STM32). See below for which functions have been ported, vs. which ones have not yet been ported but will be by the time we deliver the Core in September.</li>
<li>
<em><a href="http://sourceware.org/newlib/" rel="nofollow">Newlib</a>.</em> C library for embedded systems.  This provides, for example, the standard functions for dealing with strings and math.</li>
<li>
<em>ST Standard Peripheral Library.</em> ST, the manufacturers of the STM32, have a library called the ST Standard Peripheral Library that lets users write roughly the same code regardless of which ST microcontroller they are using. Experienced embedded systems designers may be most comfortable using these libraries. For the daring, you can write low-level code by writing 1s &amp; 0s directly to the STM32 registers. Please see the <a href="http://www.st.com/web/en/resource/technical/document/reference_manual/CD00171190.pdf" rel="nofollow">STM32F10x Reference Manual</a> for more information.</li>
<li>
<em>Messaging functions for Spark Cloud API.</em> Besides the basic Arduino/Wiring code, we've created our own functions for sending messages around on the internet. These functions are documented below.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#arduinowiring-functions" id="user-content-arduinowiring-functions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Arduino/Wiring functions</h3>
<p>Functions currently implemented, with links to the Arduino docs:</p>
<ul>
<li><a href="http://arduino.cc/en/Reference/PinMode" rel="nofollow">pinMode()</a></li>
<li><a href="http://arduino.cc/en/Reference/DigitalWrite" rel="nofollow">digitalWrite()</a></li>
<li><a href="http://arduino.cc/en/Reference/DigitalRead" rel="nofollow">digitalRead()</a></li>
<li><a href="http://arduino.cc/en/Reference/AnalogWrite" rel="nofollow">analogWrite()</a></li>
<li><a href="http://arduino.cc/en/Reference/AnalogRead" rel="nofollow">analogRead()</a></li>
<li><a href="http://arduino.cc/en/Serial/Write" rel="nofollow">Serial.write()</a></li>
<li><a href="http://arduino.cc/en/Serial/Read" rel="nofollow">Serial.read()</a></li>
<li><a href="http://arduino.cc/en/Serial/Print" rel="nofollow">Serial.print()</a></li>
<li><a href="http://arduino.cc/en/Serial/Println" rel="nofollow">Serial.println()</a></li>
</ul>
<p>Functions not yet implemented:</p>
<ul>
<li>SPI</li>
<li>I2C</li>
<li>Additional Serial functions</li>
<li>Keyboard</li>
</ul>
<p>There are two Serial ports on the Core: one over USB and one over the TX/RX pins on the Core. To communicate over USB, use Serial, i.e., <code>Serial.print()</code>; to communicate over the TX/RX pins, use Serial1, i.e., <code>Serial1.print()</code>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#spark-cloud-api-functions" id="user-content-spark-cloud-api-functions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Spark Cloud API functions</h3>
<p>We have created two additional functions for sending messages through the Spark Cloud: one for handling messages received by the Spark Core (<code>handleMessage()</code>) and one for sending messages up to the Spark Cloud (<code>sendMessage()</code>). We plan on creating other functions for common use cases (such as calling functions on the Core remotely, or reading variables off of the Core), but for now, this basic messaging protocol is a simple method to handle most of the things you'll want to do.</p>
<ul>
<li>handleMessage()</li>
<li>sendMessage()</li>
</ul>
<p>TODO: Provide clear documentation for how each function should be used, its limitations (i.e. number of characters in a message), and example code.</p>

        </div>

    </div>]