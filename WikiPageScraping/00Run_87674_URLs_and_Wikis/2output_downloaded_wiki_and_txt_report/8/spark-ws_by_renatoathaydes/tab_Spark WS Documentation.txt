[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#getting-started" id="user-content-getting-started"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting started</h2>
<p>Add a dependency to Spark-WS:</p>
<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">dependency</span>&gt;
    &lt;<span class="pl-ent">group</span>&gt;com.athaydes.spark-ws&lt;/<span class="pl-ent">group</span>&gt;
    &lt;<span class="pl-ent">artifact</span>&gt;spark-ws&lt;/<span class="pl-ent">artifact</span>&gt;
    &lt;<span class="pl-ent">version</span>&gt;0.1&lt;/<span class="pl-ent">version</span>&gt;
&lt;/<span class="pl-ent">dependency</span>&gt;</pre></div>
<p>Start coding:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">import static</span> <span class="pl-smi">com.athaydes.sparkws.SparkWS.wsEndpoint</span>;

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">HelloSparkWS</span> {
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">main</span>(<span class="pl-k">String</span>[] <span class="pl-v">args</span>) {
        wsEndpoint( <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, ( session, message ) <span class="pl-k">-</span><span class="pl-k">&gt;</span>
            session<span class="pl-k">.</span>getBasicRemote()<span class="pl-k">.</span>sendText( <span class="pl-s"><span class="pl-pds">"</span>Hello <span class="pl-pds">"</span></span> <span class="pl-k">+</span> message ) );
    }
}</pre></div>
<p>Run it using <a href="http://www.websocket.org/echo.html" rel="nofollow">this web page</a>.
Set <code>Location</code> to <code>ws://localhost:8025/hello</code>.</p>
<p>With Spark-WS, it's just as easy to use websockets as using REST with <a href="http://sparkjava.com" rel="nofollow">SparkJava</a>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#stopping-the-server" id="user-content-stopping-the-server"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Stopping the server</h2>
<p>Call <code>stopServer()</code> to stop the server and clear all endpoints and configuration.</p>
<p>The server may be started again after being stopped by simply creating new endpoints.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#creating-endpoints" id="user-content-creating-endpoints"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creating endpoints</h2>
<p>There are several different methods to create an endpoint:</p>
<ol>
<li>provide an <code>onMessage</code> handler.</li>
</ol>
<div class="highlight highlight-source-java"><pre>wsEndpoint( <span class="pl-s"><span class="pl-pds">"</span>path<span class="pl-pds">"</span></span>, ( session, message ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle message received <span class="pl-c">*/</span></span> } );</pre></div>
<ol>
<li>provide both  <code>onOpen</code> and <code>onMessage</code> handlers.</li>
</ol>
<div class="highlight highlight-source-java"><pre>wsEndpoint( <span class="pl-s"><span class="pl-pds">"</span>path<span class="pl-pds">"</span></span>,
    ( session, config ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle connection opened <span class="pl-c">*/</span></span> },
    ( session, message ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle message received <span class="pl-c">*/</span></span> } );</pre></div>
<ol>
<li>provide <code>onOpen</code>, <code>onMessage</code> and <code>onError</code> handlers.</li>
</ol>
<div class="highlight highlight-source-java"><pre>wsEndpoint( <span class="pl-s"><span class="pl-pds">"</span>path<span class="pl-pds">"</span></span>,
    ( session, config ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle connection opened <span class="pl-c">*/</span></span> },
    ( session, message ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle message received <span class="pl-c">*/</span></span> },
    ( session, error ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle error <span class="pl-c">*/</span></span> } );</pre></div>
<ol>
<li>provide <code>onOpen</code>, <code>onMessage</code>, <code>onError</code> and <code>onClose</code> handlers.</li>
</ol>
<div class="highlight highlight-source-java"><pre>wsEndpoint( <span class="pl-s"><span class="pl-pds">"</span>path<span class="pl-pds">"</span></span>,
    ( session, config ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle connection opened <span class="pl-c">*/</span></span> },
    ( session, message ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle message received <span class="pl-c">*/</span></span> },
    ( session, error ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle error <span class="pl-c">*/</span></span> },
    ( session, closeReason ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle close connection <span class="pl-c">*/</span></span> } );</pre></div>
<ol>
<li>provide an <code>onMessage</code> handler and an implementation of <code>javax.websocket.Endpoint</code>.</li>
</ol>
<div class="highlight highlight-source-java"><pre>wsEndpoint( <span class="pl-s"><span class="pl-pds">"</span>path<span class="pl-pds">"</span></span>,
        ( session, message ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> { <span class="pl-c"><span class="pl-c">/*</span> handle message received <span class="pl-c">*/</span></span> },
        <span class="pl-k">new</span> <span class="pl-smi">Endpoint</span>() {
            <span class="pl-k">@Override</span>
            <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onOpen</span>( <span class="pl-smi">Session</span> <span class="pl-v">session</span>, <span class="pl-smi">EndpointConfig</span> <span class="pl-v">config</span> ) {
                <span class="pl-c"><span class="pl-c">//</span> handle connection opened</span>
            }

            <span class="pl-k">@Override</span>
            <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onClose</span>( <span class="pl-smi">Session</span> <span class="pl-v">session</span>, <span class="pl-smi">CloseReason</span> <span class="pl-v">closeReason</span> ) {
                <span class="pl-c"><span class="pl-c">//</span> optionally handle connection closed</span>
            }

            <span class="pl-k">@Override</span>
            <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onError</span>( <span class="pl-smi">Session</span> <span class="pl-v">session</span>, <span class="pl-smi">Throwable</span> <span class="pl-v">error</span> ) {
                <span class="pl-c"><span class="pl-c">//</span> optionally handle error</span>
            }
        } );</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#broadcasting" id="user-content-broadcasting"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Broadcasting</h2>
<p>When using websockets, it is often useful to broadcast a message to all clients connected to the same endpoint. To achieve this efficiently, Spark-WS provides a <code>broadcast</code> method:</p>
<div class="highlight highlight-source-java"><pre>wsEndpoint( <span class="pl-s"><span class="pl-pds">"</span>chat<span class="pl-pds">"</span></span>,
    ( session, message ) <span class="pl-k">-</span><span class="pl-k">&gt;</span> broadcast( session, message ) );</pre></div>
<p>Or, equivalently (but cooler):</p>
<div class="highlight highlight-source-java"><pre>wsEndpoint( <span class="pl-s"><span class="pl-pds">"</span>chat<span class="pl-pds">"</span></span>, <span class="pl-smi">SparkWS</span><span class="pl-k">::</span>broadcast );</pre></div>

        </div>

    </div>]