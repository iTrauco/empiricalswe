[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#preprocessing" id="user-content-preprocessing"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Preprocessing</h2>
<p>Before getting started, we have to compute the sample-to-sample genetic covariance matrix, assign the markers to windows and estimate the trait-to-trait covariance matrices on the null model.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#computing-the-covariance-matrix" id="user-content-computing-the-covariance-matrix"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Computing the Covariance Matrix</h3>
<p>The covariance matrix can be pre-computed as follows:</p>
<pre><code> ./mtSet_preprocess --compute_covariance --plink_path plink_path  --bfile bfile  --cfile cfile
</code></pre>
<p>where</p>
<ul>
<li>
<em>plink_path</em> (default: plink) is a pointer to the <a href="https://www.cog-genomics.org/plink2" rel="nofollow">plink software</a> (Version 1.9 or greater must be installed). If not set, a python covariance reader is employed. We strongly recommend using the plink reader for large datasets.</li>
<li>
<em>bfile</em> is the base name of of the binary bed file (<em>bfile</em>.bed,<em>bfile</em>.bim,<em>bfile</em>.fam are required).</li>
<li>
<em>cfile</em> is the base name of the output file. The relatedness matrix will be written to <em>cfile</em>.cov while the identifiers of the individuals are written to the file <em>cfile</em>.cov.id. The eigenvalue decomposition of the matrix is saved in the files <em>cfile</em>.cov.eval (eigenvalues) and <em>cfile</em>.cov.evec (eigenvectors). If <em>cfile</em> is not specified, the files will be exported to the current directory with the following filenames <em>bfile</em>.cov, <em>bfile</em>.cov.id, <em>bfile</em>.cov.eval, <em>bfile</em>.cov.evec.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#precomputing-the-principal-components" id="user-content-precomputing-the-principal-components"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Precomputing the Principal Components</h3>
<p>The principal components can be pre-computed as follows:</p>
<pre><code> ./mtSet_preprocess --compute_PCs k --plink_path plink_path --ffile ffile  --bfile bfile
</code></pre>
<p>where</p>
<ul>
<li>
<em>k</em> is the number of top principal components that are saved</li>
<li>
<em>plink_path</em> (default: plink) is a pointer to the <a href="https://www.cog-genomics.org/plink2" rel="nofollow">plink software</a> (Version 1.9 or greater must be installed). If not set, a python genotype reader is employed. We strongly recommend using the plink reader for large datasets.</li>
<li>
<em>ffile</em> is the name of the fixed effects file, to which the principal components are written to.</li>
<li>
<em>bfile</em> is the base name of of the binary bed file (<em>bfile</em>.bed,<em>bfile</em>.bim,<em>bfile</em>.fam are required).</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#fitting-the-null-model" id="user-content-fitting-the-null-model"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Fitting the null model</h3>
<p>To efficiently apply mtSet, it is neccessary to compute the null model beforehand. This can be done with the following command:</p>
<pre><code> ./mtSet_preprocess --fit_null --bfile bfile --cfile cfile --nfile nfile --pfile pfile --ffile ffile --trait_idx trait_idx
</code></pre>
<p>where</p>
<ul>
<li>
<em>bfile</em> is the base name of of the binary bed file (<em>bfile</em>.bed,<em>bfile</em>.bim,<em>bfile</em>.fam are required).</li>
<li>
<em>cfile</em> is the base name of the covariance file and its eigen decomposition (<em>cfile</em>.cov, <em>cfile</em>.cov.eval and <em>cfile</em>.cov.evec). If <em>cfile</em> is not set, the relatedness component is omitted from the model.</li>
<li>
<em>nfile</em> is the base name of the output file. The estimated parameters are saved in <em>nfile</em>.p0, the negative log likelihood ratio in <em>nfile</em>.nll0, the trait-to-trait genetic covariance matrix in <em>nfile</em>.cg0 and the trait-to-trait residual covariance matrix in <em>nfile</em>.cn0.</li>
<li>
<em>pfile</em> is the base name of the phenotype file.</li>
<li>
<em>ffile</em> is the name of the file containing the covariates. Each covariate is saved in one column</li>
<li>
<em>trait_idx</em> can be used to specify a subset of the phenotypes. If more than one phenotype is selected, the phenotypes have to be seperated by commas. For instance --<em>trait_idx 3,4</em> selects the phenotypes saved in the forth and fifth column (indexing starts with zero).</li>
</ul>
<p>Notice that phenotypes are standardized prior to model fitting.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#precomputing-the-windows" id="user-content-precomputing-the-windows"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Precomputing the windows</h3>
<p>For applying our set test, the markers have to be assigned to windows. We provide a method that splits the genome in windows of fixed sizes:</p>
<pre><code>./mtSet_preprocess --precompute_windows --bfile bfile --wfile wfile --window_size window_size --plot_windows 
</code></pre>
<p>where</p>
<ul>
<li>
<em>bfile</em> is the base name of of the binary bed file (<em>bfile</em>.bim is required).</li>
<li>
<em>window_size</em> is the size of the window (in basepairs). The default value is 30kb.</li>
<li>
<em>wfile</em> is the base name of the output file. If not specified, the file is saved as <em>bfile</em>.window_size.wnd in the current folder. Each window is stored in one line having the following format: index, chromosome, start position, stop position, index of startposition and number of SNPs.</li>
<li>
<em>plot_windows</em>  if the flag is set, a histogram over the number of markers within a window is generated and saved as <em>wfile</em>.pdf.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#merging-the-preprocessing-steps" id="user-content-merging-the-preprocessing-steps"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Merging the preprocessing steps</h3>
<p>Here, we provided the commands to execute the three preprocessing operations individually. However, it is also possible to combine all steps in a single command:</p>
<pre><code>./mtSet_preprocess --compute_covariance --fit_null --precompute_windows ...
</code></pre>

        </div>

    </div>]