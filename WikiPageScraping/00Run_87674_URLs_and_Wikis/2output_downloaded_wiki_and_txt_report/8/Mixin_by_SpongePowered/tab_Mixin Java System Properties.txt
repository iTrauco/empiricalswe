[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The following table summaries the <code>Java System Properties</code> supported by Mixin to enable the various debugging and auditing features. Set any property to <code>true</code> to enable the option:</p>
<table width="100%">
  <thead>
    <tr>
      <th>System Property</th>
<th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td valign="top"><code>mixin.debug</code></td>
      <td valign="top">Enables <b>all</b> mixin debug options</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.export</code></td>
      <td valign="top">
        The <code>export</code> debug option causes the mixin processor to emit post-mixin bytecode to disk for all mixin targets. The bytecode data are output to a typical package/class structure under the <code>.mixin.out</code> directory under your run directory.
        <p>Having the fernflower jar on your runtime classpath will also cause these class files to be decompiled.</p>
      </td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.export.filter</code></td>
      <td valign="top">Export filter, if omitted allows all transformed classes to be exported. If specified, acts as a filter for class names to export and only matching classes will be exported. This is useful when using Fernflower as exporting can be otherwise very slow. The following wildcards are allowed:
      <dl>
        <dt>*</dt>
<dd>Matches one or more characters except dot (.)</dd>
        <dt>**</dt>
<dd>Matches any number of characters</dd>
        <dt>?</dt>
<dd>Matches exactly one character</dd>
      </dl>
</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.export.decompile</code></td>
      <td valign="top">Set to false for fernflower to be disabled even if it is found on the classpath.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.export.decompile.async</code></td>
      <td valign="top">Run fernflower in a separate thread. In general this will allow export to impact startup time much less (decompiling normally adds about 20% to load times) with the trade-off that crashes may lead to undecompiled exports.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.verify</code></td>
      <td valign="top">The <code>verify</code> option runs ASM's <code>CheckClassAdapter</code> on the post-mixin bytecode in order to check that mixin transformations have been applied correctly. This option is only intended for use when working on the Mixin library itself and it is not recommended to enable it during general debugging of mixins themselves.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.verbose</code></td>
      <td valign="top">The <code>verbose</code> option promotes all <code>DEBUG</code>-level logging messages generated by the mixin processor to <code>INFO</code> level so they are emitted to the console at runtime. This is a useful option to enabled when developing with mixins as it allows more interactive monitoring of the mixin application process.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.countInjections</code></td>
      <td valign="top">Elevates failed injections to an error condition; see <a href="http://jenkins.liteloader.com/job/Mixin/javadoc/org/spongepowered/asm/mixin/injection/Inject.html#expect--" rel="nofollow"><code>Inject.expect</code></a> for details.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.strict</code></td>
      <td valign="top">Enables strict checks.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.strict.unique</code></td>
      <td valign="top">If false (default), <a href="http://jenkins.liteloader.com/job/Mixin/javadoc/org/spongepowered/asm/mixin/Unique.html" rel="nofollow">Unique</a> public methods merely raise a warning when encountered and are not merged into the target. If true, an exception is thrown instead.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.strict.targets</code></td>
      <td valign="top">Enable strict checking for mixin targets.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.debug.profiler</code></td>
      <td valign="top">Enable the performance profiler for all mixin operations (normally it is only enabled during mixin prepare operations).</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.dumpTargetOnFailure</code></td>
      <td valign="top">Sometimes a mixin will fail with a cryptic message such as a shadow target not being present in the target or other unexpected error which indicates the target class is not in the state expected by a particular mixin. Sometimes this may be because another transformer is mutating the bytecode in the way that the mixin transformer cannot anticipate, or other unexpected changes to the target class have happened. Enabling this option causes <code>InvalidMixinException</code> and other runtime mixin failures to dump the <i>incoming</i> (un-mixed-in) class bytecode to disk. This allows the target class bytecode to then be inspected with <code>javap</code> or a Java Disassembler to determine the cause of the mismatch.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.checks</code></td>
      <td valign="top">Enables <b>all</b> mixin check operations</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.checks.interfaces</code></td>
      <td valign="top">
        <p>Enables <i>Interface Implementation Audit Mode</i>. With this mode enabled, the mixin processor will output an audit report for every mixin applied which provides a summary of which interface methods are declared by class methods but <i>are not implemented by the class or any superclasses</i>, in essence which methods will cause an <code>AbstractMethodError</code> to be thrown were they to be invoked.</p>
        <p>The report is generated to <code>standard error (STDERR)</code> output and is also written to flatfiles in the <code>.mixin.out</code> directory under your run directory.</p>
      </td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.checks.interfaces.strict</code></td>
      <td valign="top">If interface check is enabled, "strict mode" (default) applies the implementation check even to abstract target classes. Setting this option to <code>false</code> causes abstract targets to be skipped when generating the implementation report.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.ignoreConstraints</code></td>
      <td valign="top">Disables <em>constraint checking</em>, demotes constraint violations from fatal errors to only output a warning. Useful in development or for in-the-wild testing of out-of-band targets.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.hotSwap</code></td>
      <td valign="top">Enables the hot-swap agent.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.env</code></td>
      <td valign="top">Parent for environment settings.  Not actually a setting; always false.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.env.obf</code></td>
      <td valign="top">Force refmap obf type when required.  Always false.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.env.disableRefMap</code></td>
      <td valign="top">Disable refmap when required.
    </td>
</tr>
    <tr>
      <td valign="top"><code>mixin.env.remapRefMap</code></td>
      <td valign="top">Rather than disabling the refMap, you may wish to remap existing refMaps at runtime. This can be achieved by setting this property and supplying values for <code>mixin.env.refMapRemappingFile</code> and <code>mixin.env.refMapRemappingEnv</code>. Though those properties can be ignored if starting via <code>GradleStart</code> (this property is also automatically enabled if loading via GradleStart).</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.env.refMapRemappingFile</code></td>
      <td valign="top">If <tt>mixin.env.remapRefMap</tt> is enabled, this setting can be used to override the name of the SRG file to read mappings from. The mappings must have a source type of <code>searge</code> and a target type matching the current development environment. If the source type is not <code>searge</code> then the <code>mixin.env.refMapRemappingEnv</code> should be set to the correct source environment type.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.env.refMapRemappingEnv</code></td>
      <td valign="top">When using <code>mixin.env.refMapRemappingFile</code>, this setting overrides the default source environment (searge). However note that the specified environment type must exist in the orignal refmap.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.env.ignoreRequired</code></td>
      <td valign="top">Globally ignore the "required" attribute of all configurations.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.env.compatLevel</code></td>
      <td valign="top">Default compatibility level to operate at.</td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.env.shiftByViolation</code></td>
      <td valign="top">Behaviour when the maximum defined <a href="http://jenkins.liteloader.com/job/Mixin/javadoc/org/spongepowered/asm/mixin/injection/At.html#by--" rel="nofollow">At.by</a> value is exceeded in a mixin. Currently the behaviour is to <code>warn</code>. In later versions of Mixin this may be promoted to <tt>error</tt>.
        <p>Available values for this option are:</p>
        <dl>
          <dt>ignore</dt>
          <dd>Pre-0.7 behaviour, no action is taken when a violation is encountered</dd>
          <dt>warn</dt>
          <dd>Current behaviour, a <tt>WARN</tt>-level message is raised for violations</dd>
          <dt>error</dt>
          <dd>Violations throw an exception</dd>
        </dl>
      </td>
    </tr>
    <tr>
      <td valign="top"><code>mixin.initialiserInjectionMode</code></td>
      <td valign="top">Behaviour for initialiser injections, current supported options are "<code>default</code>" and "<code>safe</code>".</td>
    </tr>
  </tbody>
</table>

        </div>

    </div>]