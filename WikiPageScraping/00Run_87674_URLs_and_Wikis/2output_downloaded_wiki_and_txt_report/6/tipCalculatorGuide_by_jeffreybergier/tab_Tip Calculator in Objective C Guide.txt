[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#technical-specification" id="user-content-technical-specification"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Technical specification</h2>
<ul>
<li>Xcode: 6.0 or higher</li>
<li>Mac OS: Mavericks or Yosemite (fully updated)</li>
<li>Language: Objective-C</li>
<li>Approximate Time: 1 to 2 hours.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#goals" id="user-content-goals"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Goals</h2>
<ul>
<li>Create a new project in Xcode</li>
<li>Run the App in the iOS Simulator</li>
<li>Design an interface in Interface Builder</li>
<li>Use IBOutlets and IBActions to implement dynamic behavior</li>
<li>Learn how to update the view in code</li>
<li>Learn how to do basic math in order to calculate the Tip.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#finished-tip-calculator-ui" id="user-content-finished-tip-calculator-ui"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Finished Tip Calculator UI</h2>
<ul>
<li>
<p>Repo: <a href="https://github.com/jeffreybergier/tipCalculatorGuide/tree/master/Tipster">https://github.com/jeffreybergier/tipCalculatorGuide/tree/master/Tipster</a></p>
<p><img alt="Tip Calculator UI" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/36%20-%20final%20product.png"/></p>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#download-xcode-from-app-store" id="user-content-download-xcode-from-app-store"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Download Xcode from App Store</h2>
<ul>
<li>Open the App Store, search for Xcode</li>
<li>Click Install.
<ul>
<li>Note the install could take several hours.</li>
</ul>
</li>
<li>Once installed, click Open to open Xcode.
<img alt="Xcode in the App Store" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/01%20-%20app%20store.png"/>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#creating-a-new-project" id="user-content-creating-a-new-project"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creating a new project</h2>
<ol>
<li>
<p>After Xcode opens you should see the Welcome to Xcode screen. If not, select <strong>File</strong> &gt; <strong>New</strong> &gt; <strong>Project</strong> and select the Single project.</p>
<p><img alt="Welcome to Xcode Screen" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/02%20-%20new%20project%20screen.png"/></p>
</li>
<li>
<p>Be sure you choose the <strong>Single View Application</strong> from the <strong>iOS Application</strong> section of the New Project window</p>
<p><img alt="Choose Project Type" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/03%20-%20new%20project%20type.png"/></p>
</li>
<li>
<p>Give the project a name and fill in your name as the Organization Name. Make sure that <strong>Objective-C</strong> is chosen as your language. <strong>Note</strong> that if you do not see a Swift/Objective-C chooser on this window, your Xcode is likely out of date. You should quit and check the App Store for updates.</p>
<p><img alt="Name the Project" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/04%20-%20name%20app.png"/></p>
</li>
<li>
<p>Save the project anywhere on your computer. Downloads or Desktop is probably the best place for now.</p>
<p><img alt="Save the Project" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/05%20-%20save%20project.png"/></p>
</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#milestone-1---overview-of-xcode" id="user-content-milestone-1---overview-of-xcode"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Milestone 1 - Overview of Xcode</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#targets-editor" id="user-content-targets-editor"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Targets Editor</h3>
<ul>
<li>When Xcode shows your new project it should drop you right into the Targets Editor. This is the screen you use to configure various aspects of your application. There is a lot here but for now we won’t have to touch any of it.
<img alt="Xcode Target Settings" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/06%20-%20target%20settings.png"/>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#primary-xcode-interface" id="user-content-primary-xcode-interface"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Primary Xcode Interface</h3>
<ul>
<li>
<p>Primary sections of Xcode. Take a moment to read through this diagram and see all the different sections of Xcode. The most important ones are:</p>
<ul>
<li>Start / Stop / iOS Device Chooser</li>
<li>File Navigator</li>
<li>Code Editor</li>
<li>Hide / Show Panels buttons at the top right</li>
</ul>
<p><img alt="Basic Xcode Sections" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/07%20-%20basic%20xcode.png"/></p>
</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#interface-builder" id="user-content-interface-builder"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Interface Builder</h3>
<ul>
<li>Interface builder is used to visually construct the UI of your application. Its very advanced, but for this project we will only be using its most basic features. The most important aspects of this interface are highlighted below
<img alt="Interface Builder" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/08%20-%20interface%20builder.png"/>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#getting-started" id="user-content-getting-started"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting Started</h2>
<ol>
<li>
<p>Delete the two ViewController files that were automatically created by Xcode.</p>
<ul>
<li>Why are we doing this? Apple creates a Subclass of UIViewController for you and its called “ViewController.”</li>
<li>Unfortunately, this is a terrible name for a Class. Class names should be descriptive.</li>
<li>Its easier to delete this and create a new one than it is to rename it.
<img alt="Delete ViewController" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/09%20-%20delete%20files.png"/>
</li>
</ul>
</li>
<li>
<p>Clear the <strong>Main Interface</strong> in the <strong>Targets Editor</strong></p>
<ul>
<li>Apple likes to make things simple. They allow you to visually select the Interface that is automatically loaded when your app launches.</li>
<li>We are going to ignore this and load the interface manually.</li>
<li>Its mostly a learning exercise now. But later, it will be important to know how to do this manually.
<img alt="Clear Main Interface" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/10%20-%20clear%20main%20interface.png"/>
</li>
</ul>
</li>
<li>
<p>Create new Subclass of UIViewController</p>
<ul>
<li>Make sure the AppDelegate.m file is selected in the <strong>File Navigator</strong>
<ul>
<li>This is important as new files are added below the selected file, and thats right where we want it.</li>
</ul>
</li>
<li>Click the Plus at the bottom left of the screen and <strong>New File</strong> from the menu.
<img alt="Create new File" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/11%20-%20new%20file.png"/>
</li>
<li>Choose Cocoa Touch class underneath the iOS Source Heading.
<img alt="Choose Cocoa Touch Class" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/12%20-%20New%20File%20type.png"/>
</li>
</ul>
</li>
<li>
<p>Name New File</p>
<ol>
<li>The name should be descriptive of what the view controller does. At a minimum, “MainViewController.” Here, lets go with <strong>TipViewController</strong>
<ul>
<li>Note the capitalization of the letters. In Objective-C classes are named with every word in the name being capitalized.</li>
</ul>
</li>
<li>The new class should be a subclass of <strong>UIViewController</strong>
<ul>
<li>UIViewController is the core of iOS programming. Most iOS apps are just a collection of View Controllers with transitions between them.</li>
</ul>
</li>
<li>Uncheck Create XIB File (if it was checked by default)
<ul>
<li>XIB files are Interface Builder files. However, we are going to use the Storyboard already created by Xcode, so we don’t need a new XIB file.</li>
</ul>
</li>
<li>Objective-C is the language. Why is Xcode asking you this? Swift and Objective-C can live happily ever after in the same project. So you can mix and match the two as you please.
<ul>
<li>Note that Swift and Objective-C live happily ever after, but only to the Class level. You can’t mix and match the two within the same class.</li>
</ul>
</li>
<li>Click Next
<img alt="New File Name" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/13%20-%20file%20name.png"/>
</li>
</ol>
</li>
<li>
<p>Save the File</p>
<ul>
<li>Save the file wherever Xcode recommends.</li>
<li>Note that File System and the files shown in the File Navigator do not need to match.
<ul>
<li>Think of the file navigator more like the iTunes playlist side bar. The order of files, folders and other features in there do not reflect where the music is on the disk itself.
<img alt="Save the File" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/14%20-%20save%20file.png"/>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Prepare the Storyboard</p>
<ul>
<li>Xcode created this storyboard for us.</li>
<li>Storyboards allow multiple ViewControllers to live in the same visual file. They also allow for easy Segues between ViewControllers to be created.</li>
<li>There is one ViewController in this Storyboard already. We need to tell it which subclass of UIViewController to use. We want it to use our subclass, TipViewController.</li>
</ul>
<ol>
<li>Click on Main.storyboard in the File Navigator.</li>
<li>Select <strong>Tip View Controller</strong> in the Document Outline.</li>
<li>Select the <strong>Identity Inspector</strong> icon.</li>
<li>Change Class to <strong>TipViewController</strong>
<img alt="Prepare the Storyboard" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/15%20-%20storyboards%20config.png"/>
</li>
</ol>
</li>
<li>
<p>Change the Background Color</p>
<ul>
<li>We want to change the background color of the View in the View Controller so that we know when we got this Storyboard to load successfully.</li>
</ul>
<ol>
<li>Click on Main.storyboard in the File Navigator.</li>
<li>Select the <strong>View</strong> in the Document Outline.</li>
<li>Select the <strong>Attributes Inspector</strong> icon.</li>
<li>Choose a background color. Just make sure its not black or white. We want to be able to see the color in the iOS Simulator later.
<img alt="Change Background Color" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/16%20-%20change%20color.png"/>
</li>
</ol>
</li>
<li>
<p>Configure the AppDelegate
0. Overview
* The AppDelegate manages the most basic activities of the application. It is notified when the app opens, when it is backgrounded by the user, when it is foregrounded, when the device is low on memory, etc.
* This is the place where we will load the storyboard and display it on the screen.</p>
<ol>
<li>Open AppDelegate.m and type in the code shown in the screenshot. We’ll also go through what each line does.</li>
<li>In summary the code loads the storyboard into memory. Then it asks the storyboard for our TipViewController. Then we instruct the main Window on the iOS device to display that TipViewController instance.
<img alt="appdelegate configuration" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/17%20-%20configure%20app%20delegate.png"/>
</li>
<li><strong>First code block</strong></li>
</ol>
<div class="highlight highlight-source-objc"><pre>self.window = [[UIWindow <span class="pl-c1">alloc</span>] <span class="pl-c1">initWithFrame:</span>[[UIScreen <span class="pl-c1">mainScreen</span>] <span class="pl-c1">bounds</span>]];</pre></div>
<ul>
<li>This allocates an instance of UIWindow into memory. It sets the Window size to the size of the screen of the iOS device. It then configures the self.window pointer to point to this the point in memory where this instance lives.
<ul>
<li>self.window is a property declared in the header file of AppDelegate. You can see it in AppDelegate.h</li>
<li>In Objective-C objects are identified by pointers. Pointers are variables that hold the address in memory where the object resides. Pointers are identified by a * near the variable name.</li>
</ul>
</li>
</ul>
<ol start="4">
<li><strong>Second Code Block</strong></li>
</ol>
<div class="highlight highlight-source-objc"><pre>UIStoryboard * storyboard = [UIStoryboard <span class="pl-c1">storyboardWithName:</span><span class="pl-s"><span class="pl-pds">@"</span>Main<span class="pl-pds">"</span></span> <span class="pl-c1">bundle:</span> <span class="pl-c1">nil</span>];
TipViewController * tipViewController = [storyboard <span class="pl-c1">instantiateInitialViewController</span>]; </pre></div>
<ul>
<li>These two lines load the Storyboard into memory and then load the view controller from the storyboard.</li>
<li>In Objective C new variables are declared with their type first then the name of the variable.
<ul>
<li>If the variable is intended to be a pointer (required for object types) then an * goes in-between the variable name and the type.</li>
<li>The * is part of the type <strong>NOT</strong> the variable name. The asterisk can go anywhere in-between the type and the variable name.</li>
<li>Variable names (as opposed to class names) always start with a lower case letter and every word in the name has a capital letter.</li>
<li>Variable names in objective C are typically long and very descriptive. You’ll see more of this later.</li>
</ul>
</li>
<li>In objective C, messages are sent to objects with the square bracket syntax. In the second line here we are telling the object that is pointed to by the “storyboard” variable to “instantiate its initial view controller” which is our colored view controller in the storyboard.</li>
</ul>
<ol start="5">
<li><strong>Third Code Block</strong></li>
</ol>
<div class="highlight highlight-source-objc"><pre>self.window.backgroundColor = [UIColor <span class="pl-c1">whiteColor</span>];
self.window.rootViewController = tipViewController;</pre></div>
<ul>
<li>This sets the background color of the Window (not the view controller to white). [UIColor whiteColor] is a shortcut to get white.</li>
<li>Next we set the windows rootViewController. This is where the Window keeps its main view controller pointer.
<ul>
<li>Remember that we are just giving the address in memory to the pointer of the Window. We are not making a second instance of the TipViewController.</li>
</ul>
</li>
</ul>
<ol start="6">
<li><strong>Last Line</strong></li>
</ol>
<div class="highlight highlight-source-objc"><pre>    [<span class="pl-c1">self</span>.window <span class="pl-c1">makeKeyAndVisible</span>];</pre></div>
<ul>
<li>This line sends a message to the window to “makeKeyAndVisible” which makes the window visible on the iOS screen.</li>
</ul>
</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#milestone-2" id="user-content-milestone-2"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Milestone 2</h2>
<ol>
<li>Run the Application!
<ul>
<li>Choose a simulator. Probably best to go with iPhone 4S because the screen is smallest</li>
<li>Click run and wait a minute. You should see the simulator open and eventually a colored screen appear.
<img alt="Run the Application" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/18%20-%20run%20the%20app.png"/>
</li>
</ul>
</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#construct-the-view" id="user-content-construct-the-view"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Construct the View</h2>
<ol>
<li>Turn of Size Classes
<ol>
<li>Select Main.storyboard in the File Navigator</li>
<li>Select the File Inspector at the top right.</li>
<li>Uncheck <strong>Use Size Classes</strong>
</li>
<li>Confirm by clicking <strong>Disable Size Classes</strong> in the sheet that appears.
<ul>
<li>Size classes are used in combination with Autolayout to do really advanced layouts in Interface Builder.</li>
<li>For now, this will just get in the way so we are going to disable it.
<img alt="Disable Size Classes" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/19%20-%20turn%20off%20size%20classes.png"/>
</li>
<li>Once size classes are disabled, you should see a more iPhone shaped view controller in the storyboard
<img alt="Size Classes Disabled" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/20%20-%20size%20classes%20off.png"/>
</li>
</ul>
</li>
</ol>
</li>
<li>Add the UI Elements to the View
<ul>
<li>Use the search box to find the elements needed and drag and drop them into the view.
<ul>
<li>
<strong>UILabel</strong> is used for “Bill Amount”, “Tip Amount, “Total Amount”, “$10”, and “$100”</li>
<li>
<strong>UITextField</strong> is the white rounded rectangle with “$100” in it</li>
<li>
<strong>UIButton</strong> is used for the “Calculate Tip” button</li>
<li>
<strong>UISegmentedControl</strong> is the blue bar with the words “First” and “Second” in it.</li>
</ul>
</li>
<li>Use the attribute inspector to adjust the fonts, colors as desired.</li>
<li>Try to line up the elements as best as possible.</li>
<li>Keep all the elements near the top of the view so they are not blocked by the keyboard when it appears.
<img alt="Populate the View" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/21%20-%20layout.png"/>
</li>
</ul>
</li>
<li>Run the App to verify the keyboard works
<ol>
<li>Click Start to run the application</li>
<li>Click in the text field to make sure the keyboard appears</li>
<li>If the keyboard does not appear. Go to Hardware &gt; Keyboard and make sure <strong>Connect Hardware Keyboard</strong> is unchecked.
<img alt="Keyboard" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/22%20-%20run%20the%20app.png"/>
</li>
</ol>
</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#connect-the-view-to-the-code" id="user-content-connect-the-view-to-the-code"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Connect the View to the Code</h2>
<ol>
<li>
<p>Connect IBOutlets</p>
<ul>
<li>IBOutlets allow the code to send messages to the UI Elements. Outlets are used to get and set the text in labels, change colors of buttons, etc.</li>
</ul>
<ol>
<li>Select the Assistant Editor from the top right</li>
</ol>
<ul>
<li>You should now see the colored view on the left of the screen and code of the TipViewController on the right side of the screen.</li>
<li>You may need to hide some of the left or right panels with the buttons at the top right of Xcode in order to see both views at the same time.</li>
</ul>
<ol start="2">
<li>Hold down the control key on your keyboard and click and drag from the UITextField to the Interface section of the Code. See the screenshot below.
<img alt="Control Drag" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/23%20-%20control%20drag.png"/>
</li>
<li>When you let go you will be presented with popup box to name the Outlet.</li>
</ol>
<ul>
<li>See the screenshot below to make sure all the fields in this popup are correct.
<img alt="Outlet popup" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/24%20-%20name%20outlet.png"/>
</li>
</ul>
<ol start="4">
<li>Now connect the rest of the outlets.</li>
</ol>
<ul>
<li>tipAmountTextLabel connects to the UILabel that says $10</li>
<li>totalAmountTextLabel connect to the UILabel that says $100</li>
<li>tipPercentageSegmentControl connects to the Segment Control with the words First and Second.</li>
<li>See the circle on the left of the IBOutlets? If you hover over those, the elements they represent in the Storyboard will highlight blue.
<img alt="Connect Remaining Outlets" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/25%20-%20all%20outlets.png"/>
</li>
</ul>
</li>
<li>
<p>Connect the IBAction
* IBActions allow the UI Elements to send messages to the code. These are used to find out when a user taps a button or modifies the screen in some way.</p>
<ol>
<li>Control drag from the Button to the @Implementation part of the code.</li>
</ol>
<ul>
<li>Actions reside in the Implementation of the code where as Outlets reside in the Interface of the code.
<img alt="Control Drag Action" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/26%20-%20control%20drag%20action.png"/>
</li>
</ul>
<ol start="2">
<li>Name the method that the Action Calls
<ol>
<li>Name should be <strong>didTapCalculateButton</strong>
<ul>
<li>note that method names use the same capitalization style as variable names. Also, the method name should describe what happens when it gets called.</li>
</ul>
</li>
<li>Change the Sender Type to UIButton</li>
<li>Event should be <strong>touchUpInside</strong>
<ul>
<li>touch up inside is equivalent to onClick in other languages.</li>
<li>In typically verbose Objective C style, it actually describes itself. It is called when the user touches down, and then keeps their finger inside the bounds of the button and then touches up.</li>
</ul>
</li>
<li>Click connect
<img alt="connect the action" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/27%20-%20name%20action.png"/>
</li>
</ol>
</li>
<li>Add NSLog Statement to IBAction Method
<ol>
<li>NSLog is how you write to the debug console in Objective C</li>
<li>Write the line below into the IBAction Method you just created.</li>
</ol>
<ul>
<li>NSLog(@“did tap calculate button”);
<img alt="nslog" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/28%20-%20nslog%20action.png"/>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#milestone-3---see-log-output-when-button-is-tapped" id="user-content-milestone-3---see-log-output-when-button-is-tapped"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Milestone 3 - See log output when button is tapped</h2>
<ol>
<li>Run the Application.
<ul>
<li>When you click on the button you should see log output in Xcode</li>
<li>Congratulations! you finished hooking your UI up to your code
<img alt="See Log output" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/29%20-%20run%20the%20app.png"/>
</li>
</ul>
</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#configure-view-did-load" id="user-content-configure-view-did-load"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Configure View Did Load</h2>
<ol>
<li>
<p>Create an NSArray that will store our tip percentages.</p>
<ul>
<li>The Array will be a @property on the view controller.</li>
<li>Properties are available to any method in the class and they handle memory management for you.</li>
<li>View Did Load is part of the “Life Cycle” of the view controller. Its, generally, where you configure anything in the view that was not configured in Interface Builder.</li>
<li>After the screenshot, we’ll run through what the code does.
<img alt="Add Array Property" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/30%20-%20array.png"/>
</li>
</ul>
<div class="highlight highlight-source-objc"><pre></pre></div>
</li>
</ol>
<p>@property (strong, nonatomic) NSArray * tipPercentagesArray;
```</p>
<pre><code>* **Property** specifies this is a property for Objective C to automatically memory manage for you.
* **Strong** means the instance of the View Controller is holding onto this piece of memory in a required way. The other option is Weak. But for now, everything will be Strong.
* **Nonatomic** tells objective C that this property is not thread safe. It can only be accessed by a single thread at the time. Again, this is generally the case.
* **NSArray** is the type. NSArray is Objective-C’s Array type.

```objc
self.tipPercentagesArray = @[@0.15, @0.20, @0.25];
```

* **Self** is the keyword for referencing properties on the class.
* **@[]** is a shortcut for creating an array. Each object in the array is comma separated.
* **@0.15** is a shortcut for making an NSNumber object with that number stored in the object. NSNumber is Objective-C’s number handling class.
</code></pre>
<ol start="2">
<li>
<p>Configure the UISegmentedControl</p>
<ul>
<li>We have to remove all the segments that were placed in the SegmentedControl by Interface Builder and replace them with segments created with numbers in the array we just created.</li>
<li>After the screenshot, we’ll walk through the code.
<img alt="configure segment control" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/31%20-%20configure%20segment%20controller.png"/>
</li>
</ul>
<div class="highlight highlight-source-objc"><pre></pre></div>
</li>
</ol>
<p>while(self.tipPercentageSegmentControl.numberOfSegments &gt; 0) {
[self.tipPercentageSegmentControl removeSegmentAtIndex:0 animated:NO];
}
```</p>
<pre><code>* This is a While loops that runs as long as the segmented control has at least 1 segment. Since the segmented control in Interface builder has 2 segments, this loop will run twice and then move on.
* Each time it runs, it removes the segment at index 0 in the segmented control.

```objc
</code></pre>
<p>for (int i = 0; i &lt; self.tipPercentagesArray.count; i++) {
NSNumber * numberInArray = self.tipPercentagesArray[i];
NSString * numberString = [NSString stringWithFormat:@"%.0f%%", numberInArray.doubleValue * 100];
[self.tipPercentageSegmentControl insertSegmentWithTitle:numberString atIndex:i animated:NO];
}
```</p>
<pre><code>* This for loop is run the same number of times as there are objects in the NSArray. You could add a 4th number to the array and the code would continue to work
* First we pull out the NSNumber in the Array at index i. In this case we know its an NSNumber object. But if you wanted to be safe, you would check to make sure the object is an NSNumber before treating it as one. Since we know its an NSNumber, we don’t do the checking.
* NSString stringWithFormat is how you created strings that take variables and are formatted as you wish.
* **@"%.0f%%"** - What the heck does this do? Strings are created with @“” so that explains a little bit. Floats and Doubles are put into the string with %f. But we specify 0 decimals by using %.0f. Then the the way to create a percent sign in the string is to use %%. Lastly, we use a comma and tell which Float/Double we want to put into the string.
* The number in the array is 0.15 and so to get the Segment to look the way we want, we need to multiply it by 100 and add the percentage sign so its “15%”
* Lastly, we insert a new segment into the segmented control with the formatted string we just made.

```objc
</code></pre>
<p>[self.tipPercentageSegmentControl setSelectedSegmentIndex:0];
self.billAmountTextField.text = @“”;
```</p>
<pre><code>* Finally, we tell the segmented control that one of the 3 segments should be selected. So we setSelected the segment at index 0
* We also clear our the text in the billAmountTextField so the user won’t have to delete the $100 in the text field before typing in their bill amount.
</code></pre>
<ol start="3">
<li>Run the App
<ul>
<li>Make sure the segment control now has 3 segments and they each say 15%, 20%, 25%.</li>
<li>Once that works, continue on to do the math for the tip calculator</li>
</ul>
</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#do-the-math" id="user-content-do-the-math"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Do the Math</h2>
<ol>
<li>
<p>Create a new method</p>
<ul>
<li>This method is going to get the bill amount and get the percentage number selected in the segmented control and then calculate the tip amount and the total amount and then update the display.</li>
<li>The code will be explained after the screenshot
<img alt="do the math" src="https://github.com/jeffreybergier/tipCalculatorGuide/raw/master/outputscreenshots/32%20-%20do%20the%20math.png"/>
</li>
</ul>
<div class="highlight highlight-source-objc"><pre></pre></div>
</li>
</ol>
<p>-(void)calculateTipAndUpdateLabels { }
```</p>
<pre><code>* This is how a method is declared in Objective C
	* The – signifies that this is an instance method (as opposed to + for a class method)
	* (void) is what is returned by this method. In this case, its nothing. But it could be (NSString *) or (NSArray *) or any other type.
	* calculateTipAndUpdateLabels is the name of the method. This method takes no inputs, but methods can have as many input variables as needed.

```objc
</code></pre>
<p>-(void)calculateTipAndUpdateLabels {
//get the NSNumber out of the array
NSNumber * tipPercentageNumber = self.tipPercentagesArray<a class="internal absent" href="/jeffreybergier/tipCalculatorGuide/wiki/self.tipPercentageSegmentControl-selectedSegmentIndex">self.tipPercentageSegmentControl selectedSegmentIndex</a>;</p>
<pre><code>//configure variables to do math
double billAmount = self.billAmountTextField.text.doubleValue;
double tipPercentage = tipPercentageNumber.doubleValue;

//do the math
double tipAmount = billAmount * tipPercentage;
double totalAmount = tipAmount + billAmount;

//update the labels in the view
self.tipAmountTextLabel.text = [NSString stringWithFormat:@"$%.2f", tipAmount];
self.totalAmountTextLabel.text = [NSString stringWithFormat:@"$%.2f", totalAmount];
</code></pre>
<p>}
```</p>
<pre><code>* First we get the NSNumber we need out of the array. The way we do that is by asking the segmented control which segment is currently selected. Since we know that the numbers in the array match the segments in the control, the selected segment index is also the correct index in the array.
* Then we get doubles (similar to a floating point number) from the Bill Amount Text field by getting the DoubleValue of the NSString. Calling that asks the NSString to try to convert the string text into a number.
* We also get a double of the tip percentage out of the NSNumber. Remember that NSNumber is an object type. You can’t easily do math directly on it. You first need to ask it for its double type so that you can easily do math with it.
* Then we do the math and create two new variables for it. tipAmount and totalAmount
* Lastly we update tipAmountTextLabel and totalAmountTextLabel with NSString stringWithFormat.

```objc
</code></pre>
<ul>
<li>(IBAction)didTapCalculateButton:(UIButton *)sender {
NSLog(@"did tap calculate button");
[self calculateTipAndUpdateLabels];
}
<pre><code> * In the didTapCalculateButton method (remember its called when the user taps the button), we need to call our new method we just created.
 * We do that with the [self methodName] syntax

</code></pre>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#milestone-4---it-works" id="user-content-milestone-4---it-works"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Milestone 4 - It works!</h2>
<ul>
<li>
<p>Congratulations. The app should run and work. Take a look at the screenshots below.</p>
</li>
<li>
<p>Make sure you can type a number into the text field, change the segment control and click the button to calculate different tips.</p>
</li>
<li>
<p>Make sure all the labels update when you calculate different tips.</p>
<p><img alt="run the app" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/33%20-%20run%20the%20app.png"/></p>
<p><img alt="calculate a tip" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/34%20-%20type%20number.png"/></p>
<p><img alt="change the segment" src="https://raw.githubusercontent.com/jeffreybergier/tipCalculatorGuide/master/outputscreenshots/35%20-%20change%20segment.png"/></p>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#next-steps" id="user-content-next-steps"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Next Steps</h2>
<ul>
<li>Right now the app is pretty rough. It doesn’t really work like any iOS app you would expect. So try a couple of things on your own to see if you can make it more iOS-ey
<ul>
<li>Change the keyboard type to “Decimal Pad.” Hint: You do this in interface builder</li>
<li>Update the display every time a number is put into the text box, instead of with the big button.</li>
<li>Make it so if you tap anywhere outside the textField, the keyboard is dismissed.</li>
</ul>
</li>
<li>Good luck and thanks for going through this tutorial!</li>
</ul>

        </div>

    </div>]