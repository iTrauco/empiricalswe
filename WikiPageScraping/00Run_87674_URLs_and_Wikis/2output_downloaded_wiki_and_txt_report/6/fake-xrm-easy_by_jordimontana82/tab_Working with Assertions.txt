[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Unit tests can be broken down into three sections:</p>
<ul>
<li>Arrange - Initialize objects and set the value of the data that is used by the method under test.</li>
<li>Act - Invoke the method under test with.</li>
<li>Assert - Verify that the action of the method under test behaves as expected.</li>
</ul>
<p><em>NB The syntax used to demonstrate here is the MSTest assertion syntax. This may be slightly different if you are using NUnit or another unit testing framework, but the basic principles still hold true.</em></p>
<h3>
<a aria-hidden="true" class="anchor" href="#example-1---basic-assertions" id="user-content-example-1---basic-assertions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Example 1 - Basic Assertions</h3>
<p><strong>Assert that something is true</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span> Assert that the Target Entity contains a particular attribute</span>
<span class="pl-smi">Assert</span>.<span class="pl-en">IsTrue</span>(<span class="pl-k">this</span>.<span class="pl-smi">Target</span>.<span class="pl-en">Contains</span>(<span class="pl-s"><span class="pl-pds">"</span>bsp_postcode<span class="pl-pds">"</span></span>));</pre></div>
<p><strong>Assert that two values are equal</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span> Assert that the value of an attribute in the target is as expected</span>
<span class="pl-smi">Assert</span>.<span class="pl-en">AreEqual</span>(<span class="pl-k">this</span>.<span class="pl-smi">Target</span>[<span class="pl-s"><span class="pl-pds">"</span>bsp_postcode<span class="pl-pds">"</span></span>], <span class="pl-smi">expectedPostcode</span>);</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#example-21---asserting-that-the-new-state-has-some-properties" id="user-content-example-21---asserting-that-the-new-state-has-some-properties"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Example 2.1 - Asserting that the new state has some properties</h3>
<p>The Arrange / Act / Assert is based on the state based paradigm. Most of the cases it will be enough to just query the context at the end of the test execution to assert that the expected output is the desired output.</p>
<p><strong>Assert that a particular entity record is created or with some attributes</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span>Assert that at at least one Account record should exist</span>
<span class="pl-smi">Assert</span>.<span class="pl-en">Equal</span>(<span class="pl-c1">1</span>, <span class="pl-smi">fakeContext</span>.<span class="pl-en">CreateQuery</span>&lt;<span class="pl-en">Account</span>&gt;().<span class="pl-en">Count</span>());
<span class="pl-c"><span class="pl-c">//</span>Assert that at least one account exists with name "Microsoft"</span>
<span class="pl-smi">Assert</span>.<span class="pl-en">Equal</span>(<span class="pl-s"><span class="pl-pds">"</span>Microsoft<span class="pl-pds">"</span></span>, <span class="pl-smi">fakeContext</span>.<span class="pl-en">CreateQuery</span>&lt;<span class="pl-en">Account</span>&gt;().<span class="pl-en">FirstOrDefault</span>().<span class="pl-smi">Name</span>);

<span class="pl-c"><span class="pl-c">//</span>Or a more compact version if you want to assert both things:</span>
<span class="pl-k">var</span> <span class="pl-smi">accounts</span> <span class="pl-k">=</span> <span class="pl-smi">fakeContext</span>.<span class="pl-en">CreateQuery</span>&lt;<span class="pl-en">Account</span>&gt;().<span class="pl-en">ToList</span>();
<span class="pl-smi">Assert</span>.<span class="pl-en">Equal</span>(<span class="pl-c1">1</span>, <span class="pl-smi">accounts</span>.<span class="pl-smi">Count</span>);
<span class="pl-smi">Assert</span>.<span class="pl-en">Equal</span>(<span class="pl-s"><span class="pl-pds">"</span>Microsoft<span class="pl-pds">"</span></span>, <span class="pl-smi">accounts</span>[<span class="pl-c1">0</span>].<span class="pl-smi">Name</span>);</pre></div>
<p>By doing that, and given that FakeXrmEasy automatically mocks queries and most methods, you can essentially do data driven unit tests in a really easy way, which is a testing model which really matches CRM development model, as in CRM pretty much is around entities (plugins, workflows, codeactivities, ... even Business Processes are saved as entities! :)).</p>
<p>One of the most valuable things FakeXrmEasy brings to the table is the possibility of unit testing queries, with all their associated joins, condition expressions, orders, etc, plus the ability to have also crm messages implemented which alter the state of the database, and so FakeXrmEasy emulates such behaviors with the In-Memory database.</p>
<p>For a comparison please check : <a href="https://dynamicsvalue.com/blog/fake-xrm-easy-versus-other-frameworks" rel="nofollow">https://dynamicsvalue.com/blog/fake-xrm-easy-versus-other-frameworks</a></p>
<p>However, there will be cases that given the complexity of the system under test, you'll need to go deeper, to, for example, check how exactly methods were called.</p>
<p>Let's say you have a method to Update an entity record, but you want to make sure it is called only once and only if the value is gonna change, to avoid filling up the audit history, for example. In those cases, you can still take advantage of FakeItEasy directly. Please refer to the examples below:</p>
<h3>
<a aria-hidden="true" class="anchor" href="#example-22---asserting-that-certain-things-have-happened" id="user-content-example-22---asserting-that-certain-things-have-happened"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Example 2.2 - Asserting that certain things have happened</h3>
<p>This is where the value of a mocking framework like fakeItEasy really comes through. Mocked objects register all method calls made during a Unit Test and we can then use this to assert that certain calls have been made, or not made. We can specify how many times they should have occurred, and with which parameter values.</p>
<p><strong>Assert that a particular method was called</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span>// Update should have been called, just once, no matter which entity was updated</span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-k">this</span>.<span class="pl-smi">Service</span>.<span class="pl-en">Update</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">Entity</span>&gt;.<span class="pl-smi">_</span>)).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">Exactly</span>.<span class="pl-smi">Once</span>);</pre></div>
<p><strong>Assert that a particular method was not called</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span>// Update should not have been called on any entity</span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-k">this</span>.<span class="pl-smi">Service</span>.<span class="pl-en">Update</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">Entity</span>&gt;.<span class="pl-smi">_</span>)).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">Exactly</span>.<span class="pl-smi">Never</span>);</pre></div>
<p><strong>Assert that a particular method (with more than one parameter) was not called</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span>// Retrieve should not have been called</span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-k">this</span>.<span class="pl-smi">Service</span>.<span class="pl-en">Retrieve</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">String</span>&gt;.<span class="pl-smi">_</span>, <span class="pl-smi">A</span>&lt;<span class="pl-en">Guid</span>&gt;.<span class="pl-smi">_</span>, <span class="pl-smi">A</span>&lt;<span class="pl-en">ColumnSet</span>&gt;.<span class="pl-smi">_</span>)).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">Never</span>);</pre></div>
<p><strong>Assert that a particular method was called with a certain parameter</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span>// Update should have been called, just once, on an entity called "bsp_college" </span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-k">this</span>.<span class="pl-smi">Service</span>.<span class="pl-en">Update</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">Entity</span>&gt;.<span class="pl-smi">That</span>.<span class="pl-en">Matches</span>(<span class="pl-smi">q</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">q</span>.<span class="pl-smi">LogicalName</span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>bsp_college<span class="pl-pds">"</span></span>))).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">Exactly</span>.<span class="pl-smi">Once</span>);</pre></div>
<p><strong>Assert that a particular method was called with a parameter that matches certain criteria</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span>// Update should have been called, just once, and the entity should contain an attribute called "bsp_comments"</span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-k">this</span>.<span class="pl-smi">Service</span>.<span class="pl-en">Update</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">Entity</span>&gt;.<span class="pl-smi">That</span>.<span class="pl-en">Matches</span>(<span class="pl-smi">a</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">a</span>.<span class="pl-en">Contains</span>(<span class="pl-s"><span class="pl-pds">"</span>bsp_comments<span class="pl-pds">"</span></span>)))).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">Exactly</span>.<span class="pl-smi">Once</span>);</pre></div>
<p><strong>Assert that a particular method was called with a parameter that matches certain criteria</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span>// Update should have been called, just once, and the entity should contain an attribute called "name" with a value the same as the "expectedName" variable</span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-smi">service</span>.<span class="pl-en">Create</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">Entity</span>&gt;.<span class="pl-smi">That</span>.<span class="pl-en">Matches</span>(<span class="pl-smi">a</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">a</span>[<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>].<span class="pl-en">ToString</span>() <span class="pl-k">==</span> <span class="pl-smi">expectedName</span>))).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">Exactly</span>.<span class="pl-smi">Once</span>);</pre></div>
<p><strong>Assert that a particular method was called with multiple parameters</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span> Associate method has been called once, for the relationship "teamroles_association", no matter what other parameters were used</span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-k">this</span>.<span class="pl-smi">Service</span>.<span class="pl-en">Associate</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">String</span>&gt;.<span class="pl-smi">_</span>, <span class="pl-smi">A</span>&lt;<span class="pl-en">Guid</span>&gt;.<span class="pl-smi">_</span>, <span class="pl-smi">A</span>&lt;<span class="pl-en">Relationship</span>&gt;.<span class="pl-smi">That</span>.<span class="pl-en">Matches</span>(<span class="pl-smi">q</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">q</span>.<span class="pl-smi">SchemaName</span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>teamroles_association<span class="pl-pds">"</span></span>), <span class="pl-smi">A</span>&lt;<span class="pl-en">EntityReferenceCollection</span>&gt;.<span class="pl-smi">_</span>)).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">Exactly</span>.<span class="pl-smi">Once</span>);</pre></div>
<p><strong>Assert that a particular method was called a certain number of times</strong></p>
<div class="highlight highlight-source-cs"><pre><span class="pl-c"><span class="pl-c">//</span> Create method must have been called twice</span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-smi">service</span>.<span class="pl-en">Create</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">Entity</span>&gt;.<span class="pl-smi">_</span>)).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">Exactly</span>.<span class="pl-smi">Twice</span>);

<span class="pl-c"><span class="pl-c">//</span> Create method must have been called at least twice</span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-smi">service</span>.<span class="pl-en">Create</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">Entity</span>&gt;.<span class="pl-smi">_</span>)).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">AtLeast</span>.<span class="pl-smi">Twice</span>);

<span class="pl-c"><span class="pl-c">//</span> Create method must have been called exactly 10 times</span>
<span class="pl-smi">A</span>.<span class="pl-en">CallTo</span>(() <span class="pl-k">=&gt;</span> <span class="pl-smi">service</span>.<span class="pl-en">Create</span>(<span class="pl-smi">A</span>&lt;<span class="pl-en">Entity</span>&gt;.<span class="pl-smi">_</span>)).<span class="pl-en">MustHaveHappened</span>(<span class="pl-smi">Repeated</span>.<span class="pl-smi">Exactly</span>.<span class="pl-en">Times</span>(<span class="pl-c1">10</span>));</pre></div>

        </div>

    </div>]