[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The initial prototype is split into three parts:</p>
<ul>
<li>A <strong>message storage</strong> that can store messages with a specified capacity and a message picker.
<ul>
<li>A <strong>message</strong> is the same as received by the TCP server, but with a “Usage Count” property to keep track of how often the message is shown on screen.</li>
<li>The <strong>capacity</strong> is the maximum number of messages that can be stored. If the number of messages exceeds the capacity, the oldest messages are removed first. If the capacity is 0, an unlimited number of messages will be stored. Note: although unlikely, please be aware that you may reach the limit of your computer system and the program will crash. That is why the standard capacity is 100.</li>
<li>A <strong>message picker</strong> is an algorithm that gets a reference to the storage, does it’s own processing and then returns a reference to a message in that storage. This can be a linear message picker, starting at the beginning of the message storage and picking the first one that has the lowest usage count, for example.</li>
</ul>
</li>
<li>A <strong>TCP server</strong> which will receive TCP connection requests and receive input from external clients using the <a href="https://github.com/Hefting/SocialViewer/wiki/Project-Definitions#communication-protocol">communication protocol</a>. When the input is received, it will be parsed by a message parser. Then it will store the parsed messages in the message storage. The TCP server runs asynchronous besides the user interface, so both can do their work independently and focus on their own task to ensure responsive programs.
<ul>
<li>The <strong>message parser</strong> is an algorithm that receives plain text and parses it into messages that can be stored in the message storage for later use.</li>
</ul>
</li>
<li>A <strong>screen</strong> that handles everything on the computer display. It asks the message storage for a new message (which is picked by the message picker inside the message store) and handles everything on the screen using the <a href="https://github.com/Hefting/SocialViewer/wiki/User-interface-design">user interface design</a>. For sketches of the prototype interface, <a href="https://github.com/Hefting/SocialViewer/wiki/Building-initial-prototype#prototype-sketches">see below</a>.
<ul>
<li>It is responsible for showing the tagline, the clock and the messages.</li>
</ul>
</li>
</ul>
<p><em>Below a UML diagram for the prototype building:</em>
<a href="https://raw.githubusercontent.com/Hefting/SocialViewer/master/Design/UML/Program-v4.png" rel="nofollow"><img alt="Initial prototype UML" src="https://raw.githubusercontent.com/Hefting/SocialViewer/master/Design/UML/Program-v4.png"/></a></p>
<hr/>
<h2>
<a aria-hidden="true" class="anchor" href="#technical-building" id="user-content-technical-building"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Technical building</h2>
<p>The prototype should be implemented in a cross platform way. That is why the following decisions are made:</p>
<ul>
<li>The prototype is programmed using the programming language C++
<ul>
<li>C++ is a very powerful language and is very fast in executing programs</li>
<li>C++ comes with the standard library (C++11), which adds a lot of functionality like an optimized array for saving the messages or reading the text file for the tagline. It is also able to let both the user interface and the TCP Server run asynchronous.</li>
</ul>
</li>
<li>For rendering the User Interface the Simple DirectMedia Layer library is used
<ul>
<li>For reading images, the SDL_image sub-library is used</li>
<li>SDL is a very powerful library that has a lot of convenience code to render graphics on screen very fast.</li>
</ul>
</li>
<li>For handling TCP connections, the SDL sub-library SDL_net is used</li>
<li>The communication between server and clients is done using the JSON format. For reading and writing JSON, the C++ library RapidJSON is used.
<ul>
<li>After searching for different JSON libraries for C++, it seemed that RapidJSON is the most advanced library in the field. It can both read and write JSON, has support for different content encodings and is very fast in processing JSON.</li>
</ul>
</li>
</ul>
<hr/>
<h2>
<a aria-hidden="true" class="anchor" href="#prototype-sketches" id="user-content-prototype-sketches"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Prototype sketches</h2>
<p><em>1. A sketch of the user interface, as built with the user interface design:</em>
<a href="https://raw.githubusercontent.com/Hefting/SocialViewer/master/Design/Interface/Interface1.png" rel="nofollow"><img alt="Sketch 1" src="https://raw.githubusercontent.com/Hefting/SocialViewer/master/Design/Interface/Interface1.png"/></a></p>
<p><em>2. A sketch of two possible graphics that can be used in the orange diamond field, also built with the user interface design:</em>
<a href="https://raw.githubusercontent.com/Hefting/SocialViewer/master/Design/Interface/Interface2.png" rel="nofollow"><img alt="Sketch 2" src="https://raw.githubusercontent.com/Hefting/SocialViewer/master/Design/Interface/Interface2.png"/></a></p>

        </div>

    </div>]