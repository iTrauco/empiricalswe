[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p><em><strong>For a UML diagram of the design, click <a href="https://github.com/Hefting/SocialViewer/wiki/User-interface-design#uml-diagram">here</a>. For a textual description, please read on.</strong></em></p>
<p>The user interface design is designed to be basic while still allowing for complex interfaces: all widgets are quite simple to use, so with a few of those widgets an interface can be made very quickly. However, if someone would put a widget inside another widget and that widget inside yet another widget, quite complex user interfaces can be made. This idea is inspired by the <a href="https://developer.android.com/guide/topics/ui/overview.html#Layout" rel="nofollow">Android user interface</a>, which I found very useful when I was programming apps for the Android operating system.</p>
<hr/>
<h2>
<a aria-hidden="true" class="anchor" href="#from-a-high-level" id="user-content-from-a-high-level"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>From a high level</h2>
<ul>
<li>
<strong>Canvas</strong> is an object that fills the whole screen and can contain only one layout
<ul>
<li>it can be seen as the root of all widgets</li>
</ul>
</li>
<li>
<strong>Widget</strong> is an abstract object that is used for managing an area of the canvas and/or rendering a graphic that will be shown on the canvas*
<ul>
<li>
<strong>Layout</strong> is an abstract widget that is responsible for arrange widgets inside an area on the canvas
<ul>
<li>it contains and positions widgets within the area it controls</li>
<li>it is responsible for the background color of the area it controls</li>
</ul>
</li>
<li>
<strong>Element</strong> is an abstract widget that is responsible for providing a graphic
<ul>
<li>It renders a graphic based on a source (text, image, etc.) and passes the graphic to the layout</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><em>* Note: in the technical implementation there are two types of rendering. Rendering a layout is actually asking the layout to render itself. Rendering an element is asking the element for a rendered graphic. That’s why a layout needs to know the type of widget, so it knows how to handle the widget.</em></p>
<hr/>
<h2>
<a aria-hidden="true" class="anchor" href="#from-a-lower-level" id="user-content-from-a-lower-level"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>From a lower level</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#layouts" id="user-content-layouts"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Layouts</h3>
<p>Every layout has:</p>
<ul>
<li>a background color, which defaults to black. This is useful if the widget(s) that the layout contains do not fill the entire area.</li>
<li>padding, which defaults to 0 pixels on all four sides. This can be used to add some space between each side of the layout and the content, which is a stylistic aid that can be found in many applications.</li>
<li>a position, which defaults to (0,0). This is used for positioning the area on the canvas. This is combined with the size to describe an area on the canvas that the layout controls.</li>
<li>a size, which defaults to 0px on both axes. This is used for sizing the area on the canvas. This is combined with the position to describe an area on the canvas that the layout controls.</li>
</ul>
<p><em>Currently implemented layouts:</em></p>
<ul>
<li>
<strong>Grid Layout</strong> is  a layout that contains rows, which in turn contain cells. Any number of rows, each with any number of cells, make up a grid. This can produce a flexible but structured layout. <em>Note: it does nothing more than this, so when cells do not contain anything, it will be rendered, but invisible on screen.</em>
</li>
<li>
<strong>Float Layout</strong> is a layout in which other widgets can be positioned freely. Every widget is stored inside a wrapper object, which also stores a position and a depth. The widgets will be rendered on the canvas from lowest to highest depth on the saved position. This can produce a very flexible layout.</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#elements" id="user-content-elements"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Elements</h3>
<p>Every element has:</p>
<ul>
<li>a maximum size of the rendered element, which defaults to width = 0px and height = 0px. The way this size is used is determined by the implementing element itself.</li>
<li>a rendered graphic in memory, which can be used to store an already rendered graphic, preventing the element from re-rendering the graphic every frame. It is accompanied by an "Element Needs Update" switch, which is used to check whether the element should be re-rendered.</li>
</ul>
<p><em>Currently implemented elements:</em></p>
<ul>
<li>
<strong>Image Element</strong> is an element that renders a graphic from an image file, which a layout can then render to the canvas.
<ul>
<li>If the size of the image exceeds the bounds set by the element’s maximum size, the image is shrunken to fit the maximum size. This is done by constraining the image dimensions to make sure the image is not stretched out of proportions.</li>
</ul>
</li>
<li>
<strong>Text Element</strong> is an element that uses a font object to render text as a graphic. A font wrapper handles the font file and delivers a font object. The Text Element then uses this font object to render a graphic from plain text, which a layout can render to the canvas.
<ul>
<li>Text can also be split into multiple lines. If the text does not fit on one line within the specified maximum width, it will continue onto the next line until all text has been rendered. Splitting text into multiple lines is done using word wrapping.</li>
<li>If it does not fit within the specified maximum size, the text will be clipped.
<ul>
<li>If the text <strong>is</strong> split into multiple lines, it will be clipped using the specified maximum height from the bottom up. This means that the text will start at the top left side and will be clipped below the bottom side.</li>
<li>If the text <strong>is not</strong> split into multiple lines, it will be clipped using both the specified width and the specified height from the bottom up and from the right side left. This means that the text will start at the top left side and will be clipped below the bottom side and past the right side.</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr/>
<h2>
<a aria-hidden="true" class="anchor" href="#uml-diagram" id="user-content-uml-diagram"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>UML Diagram</h2>
<p><a href="https://raw.githubusercontent.com/Hefting/SocialViewer/master/Design/UML/UI-v7.png" rel="nofollow"><img alt="UML for user interface design" src="https://raw.githubusercontent.com/Hefting/SocialViewer/master/Design/UML/UI-v7.png"/></a></p>

        </div>

    </div>]