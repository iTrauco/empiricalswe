[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The simplest way to initialize CoreStore is to add a default store to the default stack:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">do</span> {
    <span class="pl-k">try</span> CoreStore.<span class="pl-c1">addSQLiteStoreAndWait</span>()
}
<span class="pl-k">catch</span> {
    <span class="pl-c"><span class="pl-c">//</span> ...</span>
<span class="pl-c"></span>}</pre></div>
<p>This one-liner does the following:</p>
<ul>
<li>Triggers the lazy-initialization of <code>CoreStore.defaultStack</code> with a default <code>DataStack</code>
</li>
<li>Sets up the stack's <code>NSPersistentStoreCoordinator</code>, the root saving <code>NSManagedObjectContext</code>, and the read-only main <code>NSManagedObjectContext</code>
</li>
<li>Adds an automigrating SQLite store in the <em>"Application Support"</em> directory with the file name <em>"[App bundle name].sqlite"</em>
</li>
<li>Creates and returns the <code>NSPersistentStore</code> instance on success, or an <code>NSError</code> on failure</li>
</ul>
<p>For most cases, this configuration is usable as it is. But for more hardcore settings, refer to this extensive example:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> dataStack <span class="pl-k">=</span> <span class="pl-c1">DataStack</span>(<span class="pl-c1">modelName</span>: <span class="pl-s"><span class="pl-pds">"</span>MyModel<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">//</span> loads from the "MyModel.xcdatamodeld" file</span>
<span class="pl-c"></span>
<span class="pl-k">do</span> {
    <span class="pl-c"><span class="pl-c">//</span> creates an in-memory store with entities from the "Config1" configuration in the .xcdatamodeld file</span>
<span class="pl-c"></span>    <span class="pl-k">let</span> persistentStore <span class="pl-k">=</span> <span class="pl-k">try</span> dataStack.<span class="pl-c1">addInMemoryStore</span>(<span class="pl-c1">configuration</span>: <span class="pl-s"><span class="pl-pds">"</span>Config1<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">//</span> persistentStore is an NSPersistentStore instance</span>
<span class="pl-c"></span>    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Successfully created an in-memory store: <span class="pl-pse">\(</span><span class="pl-s1">persistentStore</span><span class="pl-pse"><span class="pl-s1">)</span></span><span class="pl-pds">"</span></span>
}
<span class="pl-k">catch</span> <span class="pl-k">let</span> error <span class="pl-k">as</span> NSError {
    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Failed creating an in-memory store with error: <span class="pl-pse">\(</span><span class="pl-s1">error.<span class="pl-c1">description</span></span><span class="pl-pse"><span class="pl-s1">)</span></span><span class="pl-pds">"</span></span>
}

<span class="pl-k">do</span> {
    <span class="pl-k">try</span> dataStack.<span class="pl-c1">addSQLiteStoreAndWait</span>(
        <span class="pl-c1">fileURL</span>: sqliteFileURL, <span class="pl-c"><span class="pl-c">//</span> set the target file URL for the sqlite file</span>
<span class="pl-c"></span>        <span class="pl-c1">configuration</span>: <span class="pl-s"><span class="pl-pds">"</span>Config2<span class="pl-pds">"</span></span>, <span class="pl-c"><span class="pl-c">//</span> use entities from the "Config2" configuration in the .xcdatamodeld file</span>
<span class="pl-c"></span>        <span class="pl-c1">automigrating</span>: <span class="pl-c1">true</span>, <span class="pl-c"><span class="pl-c">//</span> automatically run lightweight migrations or entity policy migrations when needed</span>
<span class="pl-c"></span>        <span class="pl-c1">resetStoreOnMigrationFailure</span>: <span class="pl-c1">true</span>)
    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Successfully created an sqlite store: <span class="pl-pse">\(</span><span class="pl-s1">persistentStore</span><span class="pl-pse"><span class="pl-s1">)</span></span><span class="pl-pds">"</span></span>
}
<span class="pl-k">catch</span> <span class="pl-k">let</span> error <span class="pl-k">as</span> NSError {
    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Failed creating an sqlite store with error: <span class="pl-pse">\(</span><span class="pl-s1">error.<span class="pl-c1">description</span></span><span class="pl-pse"><span class="pl-s1">)</span></span><span class="pl-pds">"</span></span>
}

CoreStore.<span class="pl-smi">defaultStack</span> <span class="pl-k">=</span> dataStack <span class="pl-c"><span class="pl-c">//</span> pass the dataStack to CoreStore for easier access later on</span></pre></div>
<p>(If you have never heard of "Configurations", you'll find them in your <em>.xcdatamodeld</em> file)
<img alt="xcode configurations screenshot" height="212" src="https://cloud.githubusercontent.com/assets/3029684/8333192/e52cfaac-1acc-11e5-9902-08724f9f1324.png"/></p>
<p>In our sample above, note that you don't need to do the <code>CoreStore.defaultStack = dataStack</code> line. You can just as well hold a reference to the <code>DataStack</code> like below and call all its instance methods directly:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">class</span> <span class="pl-en">MyViewController</span>: <span class="pl-e">UIViewController </span>{
    <span class="pl-k">let</span> dataStack <span class="pl-k">=</span> <span class="pl-c1">DataStack</span>(<span class="pl-c1">modelName</span>: <span class="pl-s"><span class="pl-pds">"</span>MyModel<span class="pl-pds">"</span></span>)
    <span class="pl-k">override</span> <span class="pl-k">func</span> <span class="pl-en">viewDidLoad</span>() {
        <span class="pl-c1">super</span>.<span class="pl-c1">viewDidLoad</span>()
        <span class="pl-k">do</span> {
            <span class="pl-k">try</span> <span class="pl-c1">self</span>.<span class="pl-smi">dataStack</span>.<span class="pl-c1">addSQLiteStoreAndWait</span>()
        }
        <span class="pl-k">catch</span> { <span class="pl-c"><span class="pl-c">//</span> ...</span>
<span class="pl-c"></span>        }
    }
    <span class="pl-k">func</span> <span class="pl-en">methodToBeCalledLaterOn</span>() {
        <span class="pl-k">let</span> objects <span class="pl-k">=</span> <span class="pl-c1">self</span>.<span class="pl-smi">dataStack</span>.<span class="pl-c1">fetchAll</span>(<span class="pl-c1">From</span>(MyEntity))
        <span class="pl-c1">print</span>(objects)
    }
}</pre></div>
<p>The difference is when you set the stack as the <code>CoreStore.defaultStack</code>, you can call the stack's methods directly from <code>CoreStore</code> itself:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">class</span> <span class="pl-en">MyViewController</span>: <span class="pl-e">UIViewController </span>{
    <span class="pl-k">override</span> <span class="pl-k">func</span> <span class="pl-en">viewDidLoad</span>() {
        <span class="pl-c1">super</span>.<span class="pl-c1">viewDidLoad</span>()
        <span class="pl-k">do</span> {
            <span class="pl-k">try</span> CoreStore.<span class="pl-c1">addSQLiteStoreAndWait</span>()
        }
        <span class="pl-k">catch</span> { <span class="pl-c"><span class="pl-c">//</span> ...</span>
<span class="pl-c"></span>        }
    }
    <span class="pl-k">func</span> <span class="pl-en">methodToBeCalledLaterOn</span>() {
        <span class="pl-k">let</span> objects <span class="pl-k">=</span> CoreStore.<span class="pl-c1">fetchAll</span>(<span class="pl-c1">From</span>(MyEntity))
        <span class="pl-c1">print</span>(objects)
    }
}</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#contents" id="user-content-contents"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Contents</h2>
<ul>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/TL%3BDR-%28a.k.a.-sample-codes%29">TL;DR (a.k.a. sample codes)</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Architecture">Architecture</a></li>
<li>CoreStore Tutorials
<ul>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Setting-up">Setting up</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Migrations">Migrations</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Saving-and-processing-transactions">Saving and processing transactions</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Fetching-and-querying">Fetching and querying</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Logging-and-error-handling">Logging and error handling</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Observing-changes-and-notifications">Observing changes and notifications</a></li>
</ul>
</li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Installation">Installation</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Changesets">Changesets</a></li>
</ul>

        </div>

    </div>]