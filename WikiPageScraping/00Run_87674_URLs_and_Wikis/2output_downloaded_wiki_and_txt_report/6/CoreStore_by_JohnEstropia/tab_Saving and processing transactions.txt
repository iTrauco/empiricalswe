[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>To ensure deterministic state for objects in the read-only <code>NSManagedObjectContext</code>, CoreStore does not expose API's for updating and saving directly from the main context (or any other context for that matter.) Instead, you spawn <em>transactions</em> from <code>DataStack</code> instances:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> dataStack <span class="pl-k">=</span> <span class="pl-c1">self</span>.<span class="pl-smi">dataStack</span>
dataStack.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    <span class="pl-c"><span class="pl-c">//</span> make changes</span>
<span class="pl-c"></span>    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<p>or for the default stack, directly from <code>CoreStore</code>:</p>
<div class="highlight highlight-source-swift"><pre>CoreStore.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    <span class="pl-c"><span class="pl-c">//</span> make changes</span>
<span class="pl-c"></span>    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<p>The <code>commit()</code> method saves the changes to the persistent store. If <code>commit()</code> is not called when the transaction block completes, all changes within the transaction is discarded.</p>
<p>The examples above use <code>beginAsynchronous(...)</code>, but there are actually 3 types of transactions at your disposal: <em>asynchronous</em>, <em>synchronous</em>, and <em>detached</em>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#transaction-types" id="user-content-transaction-types"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Transaction types</h3>
<h4>
<a aria-hidden="true" class="anchor" href="#asynchronous-transactions" id="user-content-asynchronous-transactions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Asynchronous transactions</h4>
<p>are spawned from <code>beginAsynchronous(...)</code>. This method returns immediately and executes its closure from a background serial queue:</p>
<div class="highlight highlight-source-swift"><pre>CoreStore.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    <span class="pl-c"><span class="pl-c">//</span> make changes</span>
<span class="pl-c"></span>    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<p>Transactions created from <code>beginAsynchronous(...)</code> are instances of <code>AsynchronousDataTransaction</code>.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#synchronous-transactions" id="user-content-synchronous-transactions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Synchronous transactions</h4>
<p>are created from <code>beginSynchronous(...)</code>. While the syntax is similar to its asynchronous counterpart, <code>beginSynchronous(...)</code> waits for its transaction block to complete before returning:</p>
<div class="highlight highlight-source-swift"><pre>CoreStore.<span class="pl-smi">beginSynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    <span class="pl-c"><span class="pl-c">//</span> make changes</span>
<span class="pl-c"></span>    transaction.<span class="pl-c1">commit</span>()
} </pre></div>
<p><code>transaction</code> above is a <code>SynchronousDataTransaction</code> instance.</p>
<p>Since <code>beginSynchronous(...)</code> technically blocks two queues (the caller's queue and the transaction's background queue), it is considered less safe as it's more prone to deadlock. Take special care that the closure does not block on any other external queues.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#detached-transactions" id="user-content-detached-transactions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Detached transactions</h4>
<p>are special in that they do not enclose updates within a closure:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> transaction <span class="pl-k">=</span> CoreStore.<span class="pl-c1">beginDetached</span>()
<span class="pl-c"><span class="pl-c">//</span> make changes</span>
<span class="pl-c"></span><span class="pl-c1">downloadJSONWithCompletion</span>({ (json) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>

    <span class="pl-c"><span class="pl-c">//</span> make other changes</span>
<span class="pl-c"></span>    transaction.<span class="pl-c1">commit</span>()
})
<span class="pl-c1">downloadAnotherJSONWithCompletion</span>({ (json) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>

    <span class="pl-c"><span class="pl-c">//</span> make some other changes</span>
<span class="pl-c"></span>    transaction.<span class="pl-c1">commit</span>()
})</pre></div>
<p>This allows for non-contiguous updates. Do note that this flexibility comes with a price: you are now responsible for managing concurrency for the transaction. As uncle Ben said, "with great power comes great race conditions."</p>
<p>As the above example also shows, only detached transactions are allowed to call <code>commit()</code> multiple times; doing so with synchronous and asynchronous transactions will trigger an assert.</p>
<p>You've seen how to create transactions, but we have yet to see how to make <em>creates</em>, <em>updates</em>, and <em>deletes</em>. The 3 types of transactions above are all subclasses of <code>BaseDataTransaction</code>, which implements the methods shown below.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#creating-objects" id="user-content-creating-objects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creating objects</h3>
<p>The <code>create(...)</code> method accepts an <code>Into</code> clause which specifies the entity for the object you want to create:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> person <span class="pl-k">=</span> transaction.<span class="pl-c1">create</span>(<span class="pl-c1">Into</span>(MyPersonEntity))</pre></div>
<p>While the syntax is straightforward, CoreStore does not just naively insert a new object. This single line does the following:</p>
<ul>
<li>Checks that the entity type exists in any of the transaction's parent persistent store</li>
<li>If the entity belongs to only one persistent store, a new object is inserted into that store and returned from <code>create(...)</code>
</li>
<li>If the entity does not belong to any store, an assert will be triggered. <strong>This is a programmer error and should never occur in production code.</strong>
</li>
<li>If the entity belongs to multiple stores, an assert will be triggered. <strong>This is also a programmer error and should never occur in production code.</strong> Normally, with Core Data you can insert an object in this state but saving the <code>NSManagedObjectContext</code> will always fail. CoreStore checks this for you at creation time when it makes sense (not during save).</li>
</ul>
<p>If the entity exists in multiple configurations, you need to provide the configuration name for the destination persistent store:</p>
<pre><code>let person = transaction.create(Into&lt;MyPersonEntity&gt;("Config1"))
</code></pre>
<p>or if the persistent store is the auto-generated "Default" configuration, specify <code>nil</code>:</p>
<pre><code>let person = transaction.create(Into&lt;MyPersonEntity&gt;(nil))
</code></pre>
<p>Note that if you do explicitly specify the configuration name, CoreStore will only try to insert the created object to that particular store and will fail if that store is not found; it will not fall back to any other configuration that the entity belongs to.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#updating-objects" id="user-content-updating-objects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Updating objects</h3>
<p>After creating an object from the transaction, you can simply update its properties as normal:</p>
<div class="highlight highlight-source-swift"><pre>CoreStore.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    <span class="pl-k">let</span> person <span class="pl-k">=</span> transaction.<span class="pl-c1">create</span>(<span class="pl-c1">Into</span>(MyPersonEntity))
    person.<span class="pl-smi">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>John Smith<span class="pl-pds">"</span></span>
    person.<span class="pl-smi">age</span> <span class="pl-k">=</span> <span class="pl-c1">30</span>
    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<p>To update an existing object, fetch the object's instance from the transaction:</p>
<div class="highlight highlight-source-swift"><pre>CoreStore.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    <span class="pl-k">let</span> person <span class="pl-k">=</span> transaction.<span class="pl-c1">fetchOne</span>(
        <span class="pl-c1">From</span>(MyPersonEntity),
        <span class="pl-c1">Where</span>(<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>, <span class="pl-c1">isEqualTo</span>: <span class="pl-s"><span class="pl-pds">"</span>Jane Smith<span class="pl-pds">"</span></span>)
    )
    person.<span class="pl-smi">age</span> <span class="pl-k">=</span> person.<span class="pl-smi">age</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>
    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<p><em>(For more about fetching, see <a href="#fetching-and-querying">Fetching and querying</a>)</em></p>
<p><strong>Do not update an instance that was not created/fetched from the transaction.</strong> If you have a reference to the object already, use the transaction's <code>edit(...)</code> method to get an editable proxy instance for that object:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> jane<span class="pl-k">:</span> MyPersonEntity <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">//</span> ...</span>
<span class="pl-c"></span>
CoreStore.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    <span class="pl-c"><span class="pl-c">//</span> WRONG: jane.age = jane.age + 1</span>
<span class="pl-c"></span>    <span class="pl-c"><span class="pl-c">//</span> RIGHT:</span>
<span class="pl-c"></span>    <span class="pl-k">let</span> jane <span class="pl-k">=</span> transaction.<span class="pl-c1">edit</span>(jane) <span class="pl-c"><span class="pl-c">//</span> using the same variable name protects us from misusing the non-transaction instance</span>
<span class="pl-c"></span>    jane.<span class="pl-smi">age</span> <span class="pl-k">=</span> jane.<span class="pl-smi">age</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>
    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<p>This is also true when updating an object's relationships. Make sure that the object assigned to the relationship is also created/fetched from the transaction:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> jane<span class="pl-k">:</span> MyPersonEntity <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">//</span> ...</span>
<span class="pl-c"></span><span class="pl-k">let</span> john<span class="pl-k">:</span> MyPersonEntity <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">//</span> ...</span>
<span class="pl-c"></span>
CoreStore.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    <span class="pl-c"><span class="pl-c">//</span> WRONG: jane.friends = [john]</span>
<span class="pl-c"></span>    <span class="pl-c"><span class="pl-c">//</span> RIGHT:</span>
<span class="pl-c"></span>    <span class="pl-k">let</span> jane <span class="pl-k">=</span> transaction.<span class="pl-c1">edit</span>(jane)
    <span class="pl-k">let</span> john <span class="pl-k">=</span> transaction.<span class="pl-c1">edit</span>(john)
    jane.<span class="pl-smi">friends</span> <span class="pl-k">=</span> [john]
    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#deleting-objects" id="user-content-deleting-objects"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Deleting objects</h3>
<p>Deleting an object is simpler because you can tell a transaction to delete an object directly without fetching an editable proxy (CoreStore does that for you):</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> john<span class="pl-k">:</span> MyPersonEntity <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">//</span> ...</span>
<span class="pl-c"></span>
CoreStore.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    transaction.<span class="pl-c1">delete</span>(john)
    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<p>or several objects at once:</p>
<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> john<span class="pl-k">:</span> MyPersonEntity <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">//</span> ...</span>
<span class="pl-c"></span><span class="pl-k">let</span> jane<span class="pl-k">:</span> MyPersonEntity <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">//</span> ...</span>
<span class="pl-c"></span>
CoreStore.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    transaction.<span class="pl-c1">delete</span>(john, jane)
    <span class="pl-c"><span class="pl-c">//</span> transaction.delete([john, jane]) is also allowed</span>
<span class="pl-c"></span>    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<p>If you do not have references yet to the objects to be deleted, transactions have a <code>deleteAll(...)</code> method you can pass a query to:</p>
<div class="highlight highlight-source-swift"><pre>CoreStore.<span class="pl-smi">beginAsynchronous</span> { (transaction) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span> <span class="pl-k">in</span>
    transaction.<span class="pl-c1">deleteAll</span>(
        <span class="pl-c1">From</span>(MyPersonEntity)
        <span class="pl-c1">Where</span>(<span class="pl-s"><span class="pl-pds">"</span>age &gt; 30<span class="pl-pds">"</span></span>)
    )
    transaction.<span class="pl-c1">commit</span>()
}</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#contents" id="user-content-contents"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Contents</h2>
<ul>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/TL%3BDR-%28a.k.a.-sample-codes%29">TL;DR (a.k.a. sample codes)</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Architecture">Architecture</a></li>
<li>CoreStore Tutorials
<ul>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Setting-up">Setting up</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Migrations">Migrations</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Saving-and-processing-transactions">Saving and processing transactions</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Fetching-and-querying">Fetching and querying</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Logging-and-error-handling">Logging and error handling</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Observing-changes-and-notifications">Observing changes and notifications</a></li>
</ul>
</li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Installation">Installation</a></li>
<li><a class="internal present" href="/JohnEstropia/CoreStore/wiki/Changesets">Changesets</a></li>
</ul>

        </div>

    </div>]