[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#the-abstractpropertyloader-class" id="user-content-the-abstractpropertyloader-class"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>The <code>AbstractPropertyLoader</code> class</h2>
<p>This class is the core of RoboProperties.  <code>AbstractPropertyLoader</code> is not tied to any specific configuration file format.  Consequently, it uses the idea of "paths" to load properties.  A path is a set of strings that describe how to find the property in the configuration file.
<code>AbstractPropertyLoader</code> has the following methods to load properties.</p>
<ul>
<li><code>Integer getInt(String... path)</code></li>
<li>Loads the specified path as an <code>Integer</code>.  If the path is not found, the returned value is <code>null</code>.</li>
<li><code>Double getDouble(String... path)</code></li>
<li>Loads the specified path as a <code>Double</code>.  If the path is not found, the returned value is <code>null</code>.</li>
<li><code>String getString(String... path)</code></li>
<li>Loads the specified path as a <code>String</code>.  If the path is not found, the returned value is <code>null</code>.</li>
<li><code>&lt;T extends Enum&lt;T&gt;&gt; T getEnum(Class&lt;T&gt; enumType, String... path)</code></li>
<li>Loads the specified path as a member of the enumeration specified in <code>enumType</code>.  If the path is not found, the returned value is <code>null</code>.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#the-propertyloader-class" id="user-content-the-propertyloader-class"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>The <code>PropertyLoader</code> class</h2>
<p>RoboProperties currently comes with one supported property loader, <code>PropertyLoader</code>.  <code>PropertyLoader</code> uses a <code>java.util.Properties</code> object to hold the properties.  Any property files loaded by this class has to use the Java Properties syntax.  The following is an example of a Java Properties file that <code>PropertyLoader</code> can load:</p>
<pre><code>maxSpeed = 1
minSpeed =-.5
relayFireDirection=Forward
nameOfRobot= Firsty
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#paths-for-java-properties-files" id="user-content-paths-for-java-properties-files"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Paths for Java Properties files</h2>
<p><code>PropertyLoader</code> converts a given path into a <code>.</code> delimitated list.</p>
<p>For example: "driveSystem" "leftFrontWheel" is converted to "driveSystem.leftFrontWheel"</p>
<p>Given the following properties file:</p>
<pre><code>launcher.loadSpeed = 1
launcher.fireButton.name = Throw all the things!
</code></pre>
<p>You can retrieve these properties with the following code:</p>
<pre><code>AbstractPropertyLoader loader = new PropertyLoader("path/to/example/file.properties");
loader.getInt("launcher", "loadSpeed");
loader.getString("launcher", "fireButton", "name");
</code></pre>

        </div>

    </div>]