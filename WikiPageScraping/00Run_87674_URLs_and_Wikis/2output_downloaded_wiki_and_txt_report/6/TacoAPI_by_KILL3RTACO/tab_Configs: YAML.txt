[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>//TODO: come up with a nifty name</p>
<p>TacoAPI includes a YAML interface that can be used to create your own configuration files. It was created because, while it is nice, the Bukkit YamlConfiguration interface posed some issues.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#what-issues" id="user-content-what-issues"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>What Issues?</h1>
<p>Well, in truth there aren't really any, unless you look at it from a bigger scale:</p>
<ul>
<li>The classes found in <code>org.bukkit.configuration</code> can only be used in a Bukkit plugin. It's a good interface, and there should be something similar for  use outside of Bukkit plugins.</li>
<li>You cannot save the configuration with comments (you can add a header, but that's about it)</li>
<li>There isn't support for Map Sequences (well, kinda. You have to get the list and do the casting yourself, which takes time). If you don't know what a sequence (list) of maps (nodes) looks like, here is an example: (it translates to <code>List&lt;Map&lt;String, Object&gt;&gt;</code> in Java)</li>
</ul>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">people</span>: 
  - <span class="pl-ent">first</span>: <span class="pl-s">Burnie</span>
    <span class="pl-ent">last</span>: <span class="pl-s">Burns</span>
    <span class="pl-ent">children</span>:
    - <span class="pl-s">JD</span>
    - <span class="pl-s">Teddy</span>
  - <span class="pl-ent">first</span>: <span class="pl-s">Matt</span>
    <span class="pl-ent">last</span>: <span class="pl-s">Hollum</span></pre></div>
<p>These kinds of sequences are called Collections.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#dependencies" id="user-content-dependencies"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Dependencies</h1>
<p>Like most packages in TacoAPI, it is meant to be standalone (in the sense that no other part of the API is used). All that is required is SnakeYAML. It is up to you to add it to the classpath in whatever way you wish (for Bukkit plugins, it is already done for you)</p>
<h1>
<a aria-hidden="true" class="anchor" href="#features" id="user-content-features"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Features</h1>
<ul>
<li>Abstraction layer over SnakeYAML</li>
<li>Support for comments attached to nodes (comments can have multiple lines)</li>
<li>Support for YAML Collections</li>
<li>Extremely lenient casting and parsing of values</li>
<li>Ability to load and render YAML data</li>
<li>Support for <a href="YAML-Schema-Validation">schema validation</a> simliar to
<a href="http://www.kuwata-lab.com/kwalify/ruby/users-guide.01.html#schema" rel="nofollow">Kwalify</a>
</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#yaml-documents" id="user-content-yaml-documents"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>YAML Documents</h1>
<p>A YAML document is a document with YAML syntax. It is represented by the class <code>YamlDocument</code>.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#deviation-from-snakeyaml" id="user-content-deviation-from-snakeyaml"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Deviation from SnakeYAML</h2>
<p><code>YamlDocument</code>s are the same as <code>Map</code>s, essentially. Therefore, values <strong>must</strong> be attached to nodes. This document, for example, would be properly parsed by SnakeYAML but wouldn't be valid for a <code>YamlDocument</code>:</p>
<div class="highlight highlight-source-yaml"><pre>- <span class="pl-s">chocolate chip</span>
- <span class="pl-s">peanut butter</span>
- <span class="pl-s">oatmeal</span></pre></div>
<p>A workaround for this is to simple attach the list to a node:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">cookie_types</span>:
  - <span class="pl-s">chocolate chip</span>
  - <span class="pl-s">peanut butter</span>
  - <span class="pl-s">oatmeal</span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#loading-a-yamldocument" id="user-content-loading-a-yamldocument"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Loading a YamlDocument</h2>
<p>Loading a document is simple, just create a new instance of <code>YamlDocument</code>:</p>
<ul>
<li>
<code>YamlDocument()</code> - An empty document</li>
<li>
<code>YamlDocument(File)</code> - Load a document from a file. (If the file does not exist, no information will be loaded, but it can still be saved to that location)</li>
<li>
<code>YamlDocument(InputStream)</code> - Load from an <code>InputStream</code>, Useful for remote files</li>
<li>
<code>YamlDocument(String)</code> - Load from raw YAML source</li>
<li>
<code>YamlDocument(Map&lt;String, Object&gt;)</code> - Load raw values into the document</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#yaml-document-options" id="user-content-yaml-document-options"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>YAML Document Options</h3>
<p>There are a few options you can set for a document, each of which defines a certain behavior:</p>
<table>
<thead>
<tr>
<th>Variable</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>saveDefaults</code></td>
<td>Whether the document should save defaults from <code>get*(String path, ... def)</code> methods</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>saveOnSet</code></td>
<td>Whether the document should be saved every time a value is set</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>trueSynonyms</code></td>
<td>Strings that are synonyms for true. If the value of a node is a String a matches any of the synonyms, the <code>getBoolean</code> or <code>asBoolean()</code> method will return true</td>
<td><code>{}</code></td>
</tr>
</tbody>
</table>
<p>You can edit these options with either of the two following methods:</p>
<p>Method 1:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">YamlDocument</span> doc <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">YamlDocument</span>();
doc<span class="pl-k">.</span>options()<span class="pl-k">.</span>saveDefaults <span class="pl-k">=</span> <span class="pl-c1">false</span>;</pre></div>
<p>Method 2:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">YamlDocument</span> doc <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">YamlDocument</span>();
<span class="pl-smi">YamlDocumentOptions</span> options <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">YamlDocumentOptions</span>();
options<span class="pl-k">.</span>saveDefaults <span class="pl-k">=</span> <span class="pl-c1">false</span>;
doc<span class="pl-k">.</span>setOptions(options);</pre></div>
<h1>
<a aria-hidden="true" class="anchor" href="#yaml-nodes" id="user-content-yaml-nodes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>YAML Nodes</h1>
<p>A <strong>node</strong> in YAML, in lamen terms, is the "thing before the colon". For example in the document:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">think</span>:
  <span class="pl-ent">with</span>: <span class="pl-s">portals</span>
  <span class="pl-ent">geek</span>: <span class="pl-s">Overlords</span></pre></div>
<p>There are three (<code>3</code>) nodes, the root node, <code>think</code>, and its two child nodes <code>with</code> and <code>geek</code>.</p>
<p>Nodes can have a variety of different values. On such value that sets this system apart from others is the support for Collections (I'm not saying other system don't, just that it can take a while to do all the required casting). A collection is a list of maps, the equivalent to <code>List&lt;Map&lt;String, Object&gt;&gt;</code> in Java.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#node-paths" id="user-content-node-paths"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Node Paths</h2>
<p>Every node has a name; in the example above, those names were <code>think</code>, <code>with</code>, and <code>geek</code>. The path of a node can be determined with the following pseudo-code:</p>
<pre lang="plain"><code>if(root)
    return name;
else
    return parent.getPath() + "." + name;
</code></pre>
<p>Where every node name is separated by a period (<code>.</code>). Therefore, in the example above, the path to <code>geek</code> would be <code>think.geek</code>. In Collections, the syntax is similar to the names of <code>.class</code> files when there are nested classes (i.e. <code>MyClass$1.class</code> or <code>MyClass$MyNestedClass.class</code>). Take this collection for example:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">rooster_teeth</span>:
  <span class="pl-ent">divisions</span>:
  - <span class="pl-ent">name</span>: <span class="pl-s">RT Podcast</span>
    <span class="pl-ent">cast</span>:
    - <span class="pl-ent">name</span>: <span class="pl-s">Gus Sorola</span>
      <span class="pl-ent">roles</span>:
      - <span class="pl-s">Ad Reader</span>
      - <span class="pl-s">Producer</span>
   - <span class="pl-ent">name</span>: <span class="pl-s">Burnie Burns</span>
   - <span class="pl-ent">name</span>: <span class="pl-s">Gavin Free</span>
     <span class="pl-ent">roles</span>:
     - <span class="pl-s">Local British Person</span>
  - <span class="pl-ent">name</span>: <span class="pl-s">Achievement Hunter</span>
    <span class="pl-ent">cast</span>:
    - <span class="pl-ent">name</span>: <span class="pl-s">Geoff Ramsey</span>
      <span class="pl-ent">roles</span>:
      - <span class="pl-s">Gent</span>
      - <span class="pl-s">Boss</span>
    - <span class="pl-ent">name</span>: <span class="pl-s">Ray Narvaez Jr</span>
      <span class="pl-ent">roles</span>:
      - <span class="pl-s">Lad</span>
      - <span class="pl-s">Local Best-Person-At-Video-Games</span>
<span class="pl-c"><span class="pl-c">#</span> etc, etc</span></pre></div>
<p>Because collections aren't just lists, we need some way to determine the location of the nodes within the collection. This done by using a <code>$</code> to determine the index in the list. For instance, the value at <code>rooster_teeth.divisions$0.name</code> is <code>RT Podcast</code>.</p>
<p><strong>Note</strong>: <em>You cannot get the value of node within a collection using the <code>$</code> selector via getNode(). You should also refrain from naming a node to have a dollar sign to prevent confusion</em></p>
<h1>
<a aria-hidden="true" class="anchor" href="#yamlcollections" id="user-content-yamlcollections"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>YamlCollections</h1>
<p>A <code>YamlCollection</code> is essentially a <code>List&lt;Map&lt;String, Object&gt;&gt;</code>. However, to make collections more manageable, they have been simplified into two classes: <code>YamlCollection</code> and <code>YamlCollectionEntry</code>. A <code>YamlCollection</code>, if you haven't already guessed, is a list of <code>YamlCollectionEntry</code>s.</p>
<p>Java:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">YamlDocument</span> myDocument <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">YamlDocument</span>();
<span class="pl-smi">YamlCollection</span> myCollection <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">YamlCollection</span>();
myDocument<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>gels<span class="pl-pds">"</span></span>, myCollection);

<span class="pl-smi">YamlCollectionEntry</span> blueGel <span class="pl-k">=</span> myCollection<span class="pl-k">.</span>newEntry();
blueGel<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>);
blueGel<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>property<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>moreJump<span class="pl-pds">"</span></span>);

<span class="pl-smi">YamlCollectionEntry</span> orangeGel <span class="pl-k">=</span> myCollection<span class="pl-k">.</span>newEntry();
orangeGel<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>);
orangeGel<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>property<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>moreSpeed<span class="pl-pds">"</span></span>);

<span class="pl-smi">YamlCollectionEntry</span> whiteGel <span class="pl-k">=</span> myCollection<span class="pl-k">.</span>newEntry();
whiteGel<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>white<span class="pl-pds">"</span></span>);
whiteGel<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>property<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>morePortalSpace<span class="pl-pds">"</span></span>);</pre></div>
<p>When saved, this is the resulting document:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">gels</span>:
  - <span class="pl-ent">color</span>: <span class="pl-s">blue</span>
    <span class="pl-ent">property</span>: <span class="pl-s">moreJump</span>
  - <span class="pl-ent">color</span>: <span class="pl-s">orange</span>
    <span class="pl-ent">property</span>: <span class="pl-s">moreSpeed</span>
  - <span class="pl-ent">color</span>: <span class="pl-s">white</span>
    <span class="pl-ent">property</span>: <span class="pl-s">morePortalSpace</span></pre></div>
<h1>
<a aria-hidden="true" class="anchor" href="#extreme-leniency" id="user-content-extreme-leniency"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Extreme Leniency</h1>
<p>Extreme Leniency is the term I use to describe the behavior of a <code>YamlDocument</code> converting object to the appropriate value. For instance, because <code>int</code>s can be converted to <code>double</code>s and vice-versa, there is no <code>isInt()</code> or <code>isDouble()</code> method. Rather, there is <code>isNumber()</code>. It also possible for numbers to be converted from a hexadecimal string. If the document sees that a string follows the <a href="http://en.wikipedia.org/wiki/Regular_expression" rel="nofollow">RegEx</a> <code>0x[0-9a-fA-F]+</code> (the same pattern used in Java), then the string can be converted to an integer. For example, if the value of a node is the string <code>0xFF</code>, then it can be converted to the int <code>255</code>.</p>
<p>There's also no <code>isString()</code> or <code>isBoolean()</code> methods. This is because these methods would always return true, therefore it is redundant to include them. All values are technically Strings, and all values can be converted to a boolean. The latter may seem odd, so I'll explain. Booleans are essentially a string, a string that doesn't equal <code>"true"</code> is false. Because all values are strings, all values can then be converted to a boolean. The <code>trueSynonyms</code> variable in <code>YamlDocumentOptions</code> can be used to set synonyms for true, if the string value of a node equals (ignoring case) <code>"true"</code> or any value in the <code>trueSynonyms</code> array, then the result is <code>true</code>:</p>
<p>Java:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">YamlDocument</span> myDocument <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">YamlDocument</span>();
myDocument<span class="pl-k">.</span>options()<span class="pl-k">.</span>trueSynonyms <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">String</span>[]{<span class="pl-s"><span class="pl-pds">"</span>yes<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>allow<span class="pl-pds">"</span></span>}

myDocument<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>test1<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)
myDocument<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>test2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>YES<span class="pl-pds">"</span></span>);
myDocument<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>test3<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>allow<span class="pl-pds">"</span></span>);
myDocument<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>test4<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>always<span class="pl-pds">"</span></span>);

<span class="pl-smi">System</span><span class="pl-k">.</span>out<span class="pl-k">.</span>println(myDocument<span class="pl-k">.</span>getBoolean(<span class="pl-s"><span class="pl-pds">"</span>test1<span class="pl-pds">"</span></span>));
<span class="pl-smi">System</span><span class="pl-k">.</span>out<span class="pl-k">.</span>println(myDocument<span class="pl-k">.</span>getBoolean(<span class="pl-s"><span class="pl-pds">"</span>test2<span class="pl-pds">"</span></span>));
<span class="pl-smi">System</span><span class="pl-k">.</span>out<span class="pl-k">.</span>println(myDocument<span class="pl-k">.</span>getBoolean(<span class="pl-s"><span class="pl-pds">"</span>test3<span class="pl-pds">"</span></span>));
<span class="pl-smi">System</span><span class="pl-k">.</span>out<span class="pl-k">.</span>println(myDocument<span class="pl-k">.</span>getBoolean(<span class="pl-s"><span class="pl-pds">"</span>test4<span class="pl-pds">"</span></span>));</pre></div>
<p>Output:</p>
<pre lang="plain"><code>true
true
true
false
</code></pre>
<h1>
<a aria-hidden="true" class="anchor" href="#for-bukkit" id="user-content-for-bukkit"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>For Bukkit</h1>
<p>TacoAPI for Bukkit includes a class called <code>BukkitYamlDocument</code>, which has a few extra methods to get <code>Location</code>s, <code>Color</code>s, and simple <code>ItemStack</code>s. (A simple ItemStack is an ItemStack with no ItemMeta set).</p>
<h2>
<a aria-hidden="true" class="anchor" href="#extreme-leniency-1" id="user-content-extreme-leniency-1"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Extreme Leniency</h2>
<p><em>Extreme Leniency</em> goes even further with a <code>BukkitYamlDocument</code>. Objects can be saved in a compact or expanded format. The compact format saves the object in a singular string, while the expanded format uses nodes to save specific values.</p>
<p>Java:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">YamlDocument</span> document <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">YamlDocument</span>();

document<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>itemstack.compact<span class="pl-pds">"</span></span>, <span class="pl-k">new</span> <span class="pl-smi">ItemStack</span>(<span class="pl-smi">Material</span><span class="pl-c1"><span class="pl-k">.</span>STONE</span>, <span class="pl-c1">1</span>), <span class="pl-smi">SaveType</span><span class="pl-c1"><span class="pl-k">.</span>COMPACT</span>);
document<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>itemstack.expanded<span class="pl-pds">"</span></span>, <span class="pl-k">new</span> <span class="pl-smi">ItemStack</span>(<span class="pl-smi">Material</span><span class="pl-c1"><span class="pl-k">.</span>STONE</span>, <span class="pl-c1">1</span>), <span class="pl-smi">SaveType</span><span class="pl-c1"><span class="pl-k">.</span>EXPANDED</span>);
document<span class="pl-k">.</span>setComment(<span class="pl-s"><span class="pl-pds">"</span>itemstack<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ItemStack - Stone<span class="pl-pds">"</span></span>);

document<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>color.compact<span class="pl-pds">"</span></span>, <span class="pl-smi">Color</span><span class="pl-c1"><span class="pl-k">.</span>WHITE</span>, <span class="pl-smi">SaveType</span><span class="pl-c1"><span class="pl-k">.</span>COMPACT</span>);
document<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>color.expanded<span class="pl-pds">"</span></span>, <span class="pl-smi">Color</span><span class="pl-c1"><span class="pl-k">.</span>WHITE</span>, <span class="pl-smi">SaveType</span><span class="pl-c1"><span class="pl-k">.</span>EXPANDED</span>);
document<span class="pl-k">.</span>setComment(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Color - White<span class="pl-pds">"</span></span>);

document<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>location.compact<span class="pl-pds">"</span></span>, <span class="pl-k">new</span> <span class="pl-smi">Location</span>(<span class="pl-c1">null</span>, <span class="pl-c1">33</span>, <span class="pl-c1">0</span>, <span class="pl-c1">6</span>, (<span class="pl-k">float</span>) <span class="pl-c1">0</span>, (<span class="pl-k">float</span>) <span class="pl-c1">90</span>), <span class="pl-smi">SaveType</span><span class="pl-c1"><span class="pl-k">.</span>COMPACT</span>);
document<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>location.expanded<span class="pl-pds">"</span></span>, <span class="pl-k">new</span> <span class="pl-smi">Location</span>(<span class="pl-c1">null</span>, <span class="pl-c1">33</span>, <span class="pl-c1">0</span>, <span class="pl-c1">6</span>, (<span class="pl-k">float</span>) <span class="pl-c1">0</span>, (<span class="pl-k">float</span>) <span class="pl-c1">90</span>), <span class="pl-smi">SaveType</span><span class="pl-c1"><span class="pl-k">.</span>EXPANDED</span>);
document<span class="pl-k">.</span>set(<span class="pl-s"><span class="pl-pds">"</span>location<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Location - 33, 0, 6, yaw: 0, pitch: 90<span class="pl-pds">"</span></span>);</pre></div>
<p>When the document is saved, it will look this:</p>
<p>YAML:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-c"><span class="pl-c">#</span> ItemStack - Stone</span>
<span class="pl-s">itemstack</span>
  <span class="pl-ent">compact</span>: <span class="pl-s">1:0 1</span>
  <span class="pl-ent">expanded</span>:
    <span class="pl-ent">id</span>: <span class="pl-c1">1</span>
    <span class="pl-ent">damage</span>: <span class="pl-c1">0</span>
    <span class="pl-ent">amount</span>: <span class="pl-c1">1</span>

<span class="pl-c"><span class="pl-c">#</span> Color - White</span>
<span class="pl-s">color</span>
  <span class="pl-ent">compact</span>: <span class="pl-c1">0xFFFFFF</span>
  <span class="pl-ent">expanded</span>:
    <span class="pl-ent">r</span>: <span class="pl-c1">255</span>
    <span class="pl-ent">g</span>: <span class="pl-c1">255</span>
    <span class="pl-ent">b</span>: <span class="pl-c1">255</span>

<span class="pl-c"><span class="pl-c">#</span>Location - 33, 0, 6, yaw: 0, pitch: 90</span>
<span class="pl-s">location</span>
  <span class="pl-ent">compact</span>: <span class="pl-s">33 0 6 0 90</span>
  <span class="pl-ent">expanded</span>:
    <span class="pl-ent">x</span>: <span class="pl-c1">33</span>
    <span class="pl-ent">y</span>: <span class="pl-c1">0</span>
    <span class="pl-ent">z</span>: <span class="pl-c1">6</span>
    <span class="pl-ent">yaw</span>: <span class="pl-c1">0</span>
    <span class="pl-ent">pitch</span>: <span class="pl-c1">90</span></pre></div>
<p>Colors can only be retrieved if they are an <code>int</code>, but they can also be retrieved if the value of the node is a string following the format <code>{RED} {GREEN} {BLUE}</code> with each parameter being an integer.</p>

        </div>

    </div>]