[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>TacoAPI includes a database system for easy MySQL Querying.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#learning-sql" id="user-content-learning-sql"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Learning SQL</h2>
<p>If you have no idea what SQL is, it is recommended you learn, as it can be really helpful in a plugin or application. <a href="W3Schools">http://www.w3schools.com/sql/</a> has some tutorials, as well as a nice <em>try it yourself</em> feature.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#connecting-to-a-database" id="user-content-connecting-to-a-database"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Connecting to a Database</h2>
<p>If you are using the TacoAPI Bukkit plugin, you don't need to worry about this step. The necessary variables are found within the plugin's config. The <code>Database</code> object can be accessed via:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">TacoAPI</span><span class="pl-k">.</span>getDB();</pre></div>
<p>If you are not using the Bukkit plugin, you can still use the classes found in the <code>com.kill3rtaco.api.database</code> package by creating a new instance of <code>Database</code> and storing somewhere within your program:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">Database</span> db <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">Database</span>(host, port, dbName, username, password);</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#writing-to-the-databaserunning-queries" id="user-content-writing-to-the-databaserunning-queries"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Writing to the Database/Running Queries</h2>
<p>For queries using <code>UPDATE</code> and the like, running a query is as simple as:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-c"><span class="pl-c">//</span>db is an instance of Database</span>
db<span class="pl-k">.</span>write(sql);</pre></div>
<p>Where <code>sql</code> is a <code>String</code> with the query you want to run.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#reading-from-the-database" id="user-content-reading-from-the-database"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Reading from the Database</h2>
<p>Reading is similiar to writing, but a <code>QueryResults</code> object is returned:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-c"><span class="pl-c">//</span>db is an instance of Database</span>
<span class="pl-smi">QueryResults</span> query <span class="pl-k">=</span> db<span class="pl-k">.</span>read(sql, params);</pre></div>
<p>Where <code>sql</code> is the query and <code>params</code> are the parameters. <code>params</code> is optional, but is required for advanced queries such as:</p>
<div class="highlight highlight-source-sql"><pre><span class="pl-k">SELECT</span> <span class="pl-s"><span class="pl-pds">`</span>name<span class="pl-pds">`</span></span> <span class="pl-k">FROM</span> <span class="pl-s"><span class="pl-pds">`</span>players<span class="pl-pds">`</span></span> <span class="pl-k">WHERE</span> <span class="pl-s"><span class="pl-pds">`</span>name<span class="pl-pds">`</span></span><span class="pl-k">=</span>?</pre></div>
<p>In this case, you would use <code>read()</code> as:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">String</span> sql <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>SELECT `name` FROM `players` WHERE `name`=?<span class="pl-pds">"</span></span>;
<span class="pl-smi">QueryResults</span> query <span class="pl-k">=</span> db<span class="pl-k">.</span>read(sql, <span class="pl-s"><span class="pl-pds">"</span>trevor<span class="pl-pds">"</span></span>);</pre></div>
<p>This is the same as running</p>
<div class="highlight highlight-source-sql"><pre><span class="pl-k">SELECT</span> <span class="pl-s"><span class="pl-pds">`</span>name<span class="pl-pds">`</span></span> <span class="pl-k">FROM</span> <span class="pl-s"><span class="pl-pds">`</span>players<span class="pl-pds">`</span></span> <span class="pl-k">WHERE</span> <span class="pl-s"><span class="pl-pds">`</span>name<span class="pl-pds">`</span></span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>trevor<span class="pl-pds">'</span></span></pre></div>
<p>But is safer to use, due to [http://en.wikipedia.org/wiki/SQL_injection](SQL Injection).</p>
<h3>
<a aria-hidden="true" class="anchor" href="#getting-data-from-the-queryresults-object" id="user-content-getting-data-from-the-queryresults-object"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Getting Data from the QueryResults Object</h3>
<p>There are two ways to get (or rather, loop through) data from a query results object: a normal <code>for</code> loop, and an advanced <code>for</code> loop.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#normal-for-loop" id="user-content-normal-for-loop"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Normal for Loop</h4>
<p>The database system in TacoAPI was (originally) designed to resemble that of DeityAPI. The system became more object-oriented later, but this method still works.</p>
<p>Suppose we have the following data in our MySQL database, in a table called <code>players</code>:</p>
<table>
<thead>
<tr>
<th align="left">name</th>
<th align="right">times_kicked</th>
<th align="right">times_muted</th>
<th align="center">banned</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">TrevorTheTRex</td>
<td align="right">0</td>
<td align="right">343</td>
<td align="center">false</td>
</tr>
<tr>
<td align="left">KILL3RTACO</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="center">false</td>
</tr>
<tr>
<td align="left">ImNotTakeo</td>
<td align="right">7</td>
<td align="right">77</td>
<td align="center">true</td>
</tr>
</tbody>
</table>
<p>And we run our query in Java:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">String</span> sql <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>SELECT * FROM `players`<span class="pl-pds">"</span></span>
<span class="pl-smi">QueryResults</span> query <span class="pl-k">=</span> db<span class="pl-k">.</span>read(sql);</pre></div>
<p>The results returned would be the same data seen in the above table (because we didn't add a <code>WHERE</code> clause). We can loop through this data via a <code>for</code> loop:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">for</span>(<span class="pl-k">int</span> i<span class="pl-k">=</span><span class="pl-c1">0</span>; i<span class="pl-k">&lt;</span>query<span class="pl-k">.</span>rowCount(); i<span class="pl-k">++</span>){
    <span class="pl-smi">String</span> name <span class="pl-k">=</span> query<span class="pl-k">.</span>getString(i, <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>);
    <span class="pl-k">int</span> timesKicked <span class="pl-k">=</span> query<span class="pl-k">.</span>getInteger(i, <span class="pl-s"><span class="pl-pds">"</span>times_kicked<span class="pl-pds">"</span></span>);
    <span class="pl-k">int</span> timesMuted <span class="pl-k">=</span> query<span class="pl-k">.</span>getInteger(i, <span class="pl-s"><span class="pl-pds">"</span>times_muted<span class="pl-pds">"</span></span>);
    <span class="pl-k">boolean</span> isBanned <span class="pl-k">=</span> query<span class="pl-k">.</span>getInteger(i, <span class="pl-s"><span class="pl-pds">"</span>banned<span class="pl-pds">"</span></span>);
}</pre></div>
<p>All <code>get*()</code> methods in the <code>QueryResults</code> class take an <code>int</code> and a <code>String</code>. The first parameter is the index of the row, starting at 0. The second parameter is the name of the column.</p>
<h4>
<a aria-hidden="true" class="anchor" href="#advanced-for-loop" id="user-content-advanced-for-loop"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Advanced for Loop</h4>
<p>Regard the table above. We're using the same table in this example. The code to run the query is same as above to. However, we are using an advanced for loop this time, using the <code>QueryResultsRow</code> class:</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">for</span>(<span class="pl-smi">QueryResultsRow</span> row <span class="pl-k">:</span> query){
    <span class="pl-smi">String</span> name <span class="pl-k">=</span> row<span class="pl-k">.</span>getString(<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>);
    <span class="pl-k">int</span> timesKicked <span class="pl-k">=</span> row<span class="pl-k">.</span>getInteger(<span class="pl-s"><span class="pl-pds">"</span>times_kicked<span class="pl-pds">"</span></span>);
    <span class="pl-k">int</span> timesMuted <span class="pl-k">=</span> row<span class="pl-k">.</span>getInteger(<span class="pl-s"><span class="pl-pds">"</span>times_muted<span class="pl-pds">"</span></span>);
    <span class="pl-k">boolean</span> isBanned <span class="pl-k">=</span> row<span class="pl-k">.</span>getInteger(<span class="pl-s"><span class="pl-pds">"</span>banned<span class="pl-pds">"</span></span>);
}</pre></div>
<p>The methods are similar to those in the <code>QueryResults</code> class, but you do not need to supply an index parameter.</p>

        </div>

    </div>]