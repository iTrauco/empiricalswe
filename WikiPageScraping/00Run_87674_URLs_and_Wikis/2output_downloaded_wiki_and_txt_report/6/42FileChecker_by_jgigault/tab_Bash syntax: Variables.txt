[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The syntax of the variables in Bash programming language is flexible. Unlike many other programming languages, <strong>variables are untyped</strong>. That means that if you do not explicitly declare its type, the content of a variable shall be arbitrarily a numeric value or a character string depending on which way you use it in.</p>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#1-declaration" id="user-content-1-declaration"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part1"></a>1. Declaration</h4>
<p>Declare a variable by simply typing its name immediatly followed by the operator <code>=</code>:</p>
<div class="highlight highlight-source-shell"><pre>MY_VAR=</pre></div>
<p>Fill its content by happening a value immediatly after the operator:</p>
<div class="highlight highlight-source-shell"><pre>MY_VAR=42
MY_VAR=<span class="pl-s"><span class="pl-pds">"</span>42<span class="pl-pds">"</span></span>
MY_VAR=<span class="pl-s"><span class="pl-pds">"</span>Forty two<span class="pl-pds">"</span></span>
MY_VAR=<span class="pl-s"><span class="pl-pds">'</span>Forty two<span class="pl-pds">'</span></span></pre></div>
<p>These commands are similars. They assign a sequence of characters to the variable.
For greater clarity, we commonly do not use quotes or double-quotes when we want the variable to contain a numeric value, as in the first case.</p>
<p>Beware about spaces when declaring variables!
The following commands will result in error:</p>
<div class="highlight highlight-source-shell"><pre>MY_VAR = Something          <span class="pl-c"><span class="pl-c">#</span> No spaces around the operator</span>
MY_VAR=Something <span class="pl-k">else</span>       <span class="pl-c"><span class="pl-c">#</span> Enclose character strings by quotes or double quotes</span>
MY_VAR=<span class="pl-s"><span class="pl-pds">"</span>Quotes are <span class="pl-pds">"</span></span>life<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> Protect double quotes by adding a backslash like \"</span></pre></div>
<p>If you want a variable to be typed, use the builtin command <strong>declare</strong> and its options:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">declare</span> -i MY_VAR           <span class="pl-c"><span class="pl-c">#</span> Integer</span>
<span class="pl-k">declare</span> -r MY_VAR           <span class="pl-c"><span class="pl-c">#</span> Read-only</span>
<span class="pl-k">declare</span> -i -r MY_VAR        <span class="pl-c"><span class="pl-c">#</span> Read-only integer</span>
<span class="pl-k">declare</span> -a MY_VAR           <span class="pl-c"><span class="pl-c">#</span> Array</span>
<span class="pl-k">declare</span> -f MY_VAR           <span class="pl-c"><span class="pl-c">#</span> Function</span></pre></div>
<p>Now we have declared a variable named MY_VAR and filled its content. This variable is only available in the environment of the current script. That means that when the script is terminated, its assigned value is destroyed. In order to export a variable outside of the environment of the script, we can use the following option <code>declare -x MY_VAR</code>.</p>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#2-substitution" id="user-content-2-substitution"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part2"></a>2. Substitution</h4>
<p>To manipulate an assigned value of a variable, use the special character <code>$</code> followed by the variable name:</p>
<div class="highlight highlight-source-shell"><pre>MY_VAR=<span class="pl-s"><span class="pl-pds">"</span>42FileChecker<span class="pl-pds">"</span></span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>The name of the script is <span class="pl-smi">$MY_VAR</span><span class="pl-pds">"</span></span></pre></div>
<p>These commands display the value of the variable on stdout. We call it a <strong>substitution</strong> (or expansion) because Bash replaces the sequence $MY_VAR by the pointed value "42FileChecker" before executing the command line.</p>
<p>Depending on the context, it is sometimes necessary to use a less ambiguous syntax as you can see in the following example:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>script_name_<span class="pl-smi">$MY_VAR_rocks</span><span class="pl-pds">"</span></span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>script_name_<span class="pl-smi">${MY_VAR}</span>_rocks<span class="pl-pds">"</span></span></pre></div>
<p>Second line with braces <strong>{</strong> and <strong>}</strong> is safer because it differenciates the variable MY_VAR and a possible other existing variable named MY_VAR_rocks.</p>
<p>You can use a set of <strong>special symbols</strong> to make some special substitutions:</p>
<div class="highlight highlight-source-shell"><pre>MY_VAR=<span class="pl-s"><span class="pl-pds">"</span>42FileChecker<span class="pl-pds">"</span></span>
MY_SECOND_VAR=<span class="pl-s"><span class="pl-pds">"</span>MY_VAR<span class="pl-pds">"</span></span>

<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">${<span class="pl-k">#</span>MY_VAR}</span><span class="pl-pds">"</span></span>        <span class="pl-c"><span class="pl-c">#</span> string length</span>
                         <span class="pl-c"><span class="pl-c">#</span> --&gt; returns 13</span>

<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">${MY_VAR<span class="pl-k">:</span>2<span class="pl-k">:</span>4}</span><span class="pl-pds">"</span></span>     <span class="pl-c"><span class="pl-c">#</span> offset and length, keep 4 chars starting at 2</span>
                         <span class="pl-c"><span class="pl-c">#</span> --&gt; returns "File"</span>

<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">${<span class="pl-k">!</span>MY_SECOND_VAR}</span><span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> substitute by referenced name</span>
                         <span class="pl-c"><span class="pl-c">#</span> --&gt; interpreted as ${MY_VAR}</span>
                         <span class="pl-c"><span class="pl-c">#</span> --&gt; returns "42FileChecker"</span>

<span class="pl-k">declare</span> -a MY_ARRAY=(val1 val2 val3)

<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">${MY_ARRAY[@]}</span><span class="pl-pds">"</span></span>    <span class="pl-c"><span class="pl-c">#</span> values of the array </span>
                         <span class="pl-c"><span class="pl-c">#</span> --&gt; returns "val1 val2 val3"</span>

<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">${<span class="pl-k">!</span>MY_ARRAY[@]}</span><span class="pl-pds">"</span></span>   <span class="pl-c"><span class="pl-c">#</span> indexes of the array </span>
                         <span class="pl-c"><span class="pl-c">#</span> --&gt; returns "0 1 2"</span></pre></div>
<p>42FileChecker often use the substitution by referenced name, especially with array typed variables:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">declare</span> -a MY_ARRAY=(val1 val2 val3)    
MY_VAR=<span class="pl-s"><span class="pl-pds">"</span>MY_ARRAY[1]<span class="pl-pds">"</span></span>

<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">${<span class="pl-k">!</span>MY_VAR}</span><span class="pl-pds">"</span></span>        <span class="pl-c"><span class="pl-c">#</span> displays "val2"</span></pre></div>
<p>MY_ARRAY is an array filled with 3 elements. MY_VAR stores a reference to the second element of the array MY_ARRAY. Finally, the symbol <strong>!</strong> indicates that we want to display a substitution of the reference $MY_VAR that is equivalent to $MY_ARRAY[1].</p>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#3-positional-and-special-parameters" id="user-content-3-positional-and-special-parameters"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part3"></a>3. Positional and special parameters</h4>
<p>A shell script or a shell function shall be invoked with a list of arguments. We call it the <strong>positional parameters</strong> which are similar to the pointer to strings 'argv' in a C program. A positional parameter is like a variable whose name is a number other than 0. Calling your script with the command <code>./my_script "arg1" "arg2"</code> will declare two positional parameters <code>1</code> and <code>2</code> with the assigned value "arg1" and "arg2":</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span><span class="pl-pds">"</span></span>    <span class="pl-c"><span class="pl-c">#</span> displays the first argument --&gt; "arg1"</span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$2</span><span class="pl-pds">"</span></span>    <span class="pl-c"><span class="pl-c">#</span> displays the second argument --&gt; "arg2"</span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">${14}</span><span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> add braces if the number contains more than one digit</span></pre></div>
<p>You can shift positional parameters with the command <code>shift</code>, as well the following command lines are similar to the preceding:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span><span class="pl-pds">"</span></span>    <span class="pl-c"><span class="pl-c">#</span> displays the first argument</span>
<span class="pl-c1">shift</span> 1
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span><span class="pl-pds">"</span></span>    <span class="pl-c"><span class="pl-c">#</span> displays the second argument</span>
<span class="pl-c1">shift</span> 12
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span><span class="pl-pds">"</span></span>    <span class="pl-c"><span class="pl-c">#</span> displays the 14th argument</span></pre></div>
<p>A list of <strong>special paramaters</strong> as <code>@</code>, <code>*</code> and <code>#</code> can help you managing the positional parameters. The paramater <code>#</code> contains the count number of arguments and the paramaters <code>@</code> and <code>*</code> expand the entire list of arguments, with a little difference as you can see in the following sequence:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>You called me with <span class="pl-smi">$#</span> argument(s) wich are displayed bellow:<span class="pl-pds">"</span></span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$*</span><span class="pl-pds">"</span></span>

<span class="pl-k">declare</span> -a ARRAY1=(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$@</span><span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> expands the arguments in separated fields</span>
<span class="pl-k">declare</span> -a ARRAY2=(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$*</span><span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> expands the arguments in a single field</span>

<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>ARRAY1 now contained <span class="pl-smi">$#</span> fields<span class="pl-pds">"</span></span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>ARRAY2 now contained 1 single field<span class="pl-pds">"</span></span></pre></div>
<p>The special parameter <code>!</code> is often used in 42FileChecker, it contains the decimal process ID of the most recent background command executed by the script itself:</p>
<div class="highlight highlight-source-shell"><pre>./ft_ls -Rl / <span class="pl-k">&amp;</span>   <span class="pl-c"><span class="pl-c">#</span> this command is sent to background with the symbol '&amp;'</span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>PID of the last background command: <span class="pl-smi">$!</span><span class="pl-pds">"</span></span></pre></div>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="https://github.com/jgigault/42FileChecker/wiki/"><strong>Back to summary</strong></a> - <a href="#"><strong>Back to top</strong></a></p>

          </div>
        </div>
    </div>]