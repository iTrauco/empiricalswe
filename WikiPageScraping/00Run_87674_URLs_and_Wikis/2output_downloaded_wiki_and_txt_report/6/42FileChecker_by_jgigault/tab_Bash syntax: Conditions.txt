[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Sometimes you want a command to be executed or not...</p>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#1-conditional-expressions" id="user-content-1-conditional-expressions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part1"></a>1. Conditional expressions</h4>
<p>A conditional expression si similar to an Yes-no question in the real life, it has to return a boolean value (true or false). In bash programming language the value of true is <code>0</code> (that means <code>success</code>) and false is a non-zero value.</p>
<p>You can use, as a conditional expression, every commands that return an <strong>exit status</strong> that can be interpreted as a boolean.</p>
<p>For example: In C programming language, the exit status is the value returned by the function <code>main()</code>. If we omit the standard and error outputs of a C program, like the project <code>ft_ls</code> made at 42 school, we can use its exit status as a conditionnal expression because it should return <code>0</code> when its execution is successful, and a non-zero value when an error occurs.</p>
<div class="highlight highlight-source-shell"><pre>./ft_ls -Rl / <span class="pl-k">&amp;</span><span class="pl-k">&gt;</span>/dev/null   <span class="pl-c"><span class="pl-c">#</span> '&amp;/dev/null' suppress outputs (standard and error)</span>
                            <span class="pl-c"><span class="pl-c">#</span> returns 0 if success -&gt; true</span>
                            <span class="pl-c"><span class="pl-c">#</span> returns non-zero     -&gt; false</span></pre></div>
<p>In bash scripts, the builtin command <code>test</code> is commonly used in conditional expressions. It enables you
to make comparison expressions and file tests:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">test</span> -f <span class="pl-s"><span class="pl-pds">"</span>filename<span class="pl-pds">"</span></span>          <span class="pl-c"><span class="pl-c">#</span> true if the file exists</span>
<span class="pl-c1">test</span> -d <span class="pl-s"><span class="pl-pds">"</span>dirname<span class="pl-pds">"</span></span>           <span class="pl-c"><span class="pl-c">#</span> true if the directory exists</span>
<span class="pl-c1">test</span> -n <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$MY_VAR</span><span class="pl-pds">"</span></span>           <span class="pl-c"><span class="pl-c">#</span> true if the value of MY_VAR is not null</span>
<span class="pl-c1">test</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$MY_VAR</span><span class="pl-pds">"</span></span> == <span class="pl-s"><span class="pl-pds">"</span>Yes<span class="pl-pds">"</span></span>     <span class="pl-c"><span class="pl-c">#</span> true if the value of MY_VAR is equal to "Yes"</span>
<span class="pl-c1">test</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$MY_VAR</span><span class="pl-pds">"</span></span> -eq 1        <span class="pl-c"><span class="pl-c">#</span> true if the arithmetic value of MY_VAR is equal to 1</span>
<span class="pl-c1">test</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$EXAM_RATE</span><span class="pl-pds">"</span></span> -ge 75    <span class="pl-c"><span class="pl-c">#</span> true if the arithmetic value of EXAM_RATE is greater than or equal to 75</span></pre></div>
<p>Use the alias <code>[</code> of the builtin command <code>test</code> for a simpler code (Newer versions of Bash require the closing tag <code>]</code>). These are the equivalents of the preceding commands:</p>
<div class="highlight highlight-source-shell"><pre>[ <span class="pl-k">-f</span> <span class="pl-s"><span class="pl-pds">"</span>filename<span class="pl-pds">"</span></span> ]
[ <span class="pl-k">-d</span> <span class="pl-s"><span class="pl-pds">"</span>dirname<span class="pl-pds">"</span></span> ]
[ <span class="pl-k">-n</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$MY_VAR</span><span class="pl-pds">"</span></span> ]
[ <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$MY_VAR</span><span class="pl-pds">"</span></span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Yes<span class="pl-pds">"</span></span> ]
[ <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$MY_VAR</span><span class="pl-pds">"</span></span> <span class="pl-k">-eq</span> 1 ]
[ <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$EXAM_RATE</span><span class="pl-pds">"</span></span> <span class="pl-k">-ge</span> 75 ]</pre></div>
<p>Arithmetic comparisons can also be performed with a more familiar syntax (as in C language) thanks to the builtin command <code>let</code> or its equivalent <code>((...))</code> construct. These following commands are similar:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">test</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$EXAM_RATE</span><span class="pl-pds">"</span></span> -ge 75
[ <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$EXAM_RATE</span><span class="pl-pds">"</span></span> <span class="pl-k">-ge</span> 75 ]
<span class="pl-c1">let</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$EXAM_RATE</span> &gt;= 75<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">((</span> "<span class="pl-smi">$EXAM_RATE</span>" <span class="pl-k">&gt;=</span> <span class="pl-c1">75</span> <span class="pl-pds">))</span></span></pre></div>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#2-if-then-else" id="user-content-2-if-then-else"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part2"></a>2. If-then-else</h4>
<p>The <code>if-then-else</code> construct requires a conditional expression. If the result of the expression is true, the commands that follow the <code>then</code> are executed. Otherwise the script execution continues in the optional <code>else</code> block or, if it does not exist, continues after the keyword <code>fi</code> which ends the <code>if-then-else</code> construct:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">if</span> <span class="pl-s"><span class="pl-pds">((</span> "<span class="pl-smi">$MY_EXAM_GRADE</span>" <span class="pl-k">&gt;=</span> <span class="pl-c1">75</span> <span class="pl-pds">))</span></span>
<span class="pl-k">then</span>
    <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>I validated my exam<span class="pl-pds">"</span></span>
<span class="pl-k">else</span>
    <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>I did not validate my exam<span class="pl-pds">"</span></span>
<span class="pl-k">fi</span></pre></div>
<p>You can also use the keyword <code>elif</code> followed by a conditional expression when a single conditional expression does not handle all the possibilities you want:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">if</span> <span class="pl-s"><span class="pl-pds">((</span> "<span class="pl-smi">$MY_EXAM_GRADE</span>" <span class="pl-k">&lt;</span> <span class="pl-c1">75</span> <span class="pl-pds">))</span></span>
<span class="pl-k">then</span>
    <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>I did not validate my exam<span class="pl-pds">"</span></span>
<span class="pl-k">elif</span> <span class="pl-s"><span class="pl-pds">((</span> "<span class="pl-smi">$MY_EXAM_GRADE</span>" <span class="pl-k">&lt;=</span> <span class="pl-c1">100</span> <span class="pl-pds">))</span></span>
    <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>I validated my exam<span class="pl-pds">"</span></span>
<span class="pl-k">else</span>
    <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>I validated my exam with additional bonus<span class="pl-pds">"</span></span>
<span class="pl-k">fi</span></pre></div>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#3-case-in" id="user-content-3-case-in"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part3"></a>3. Case-in</h4>
<p>Rather than creating a long sequence of <code>if</code> and <code>elif</code> when you want a single value to be compared with several patterns, use the <code>case-in</code> statement whose closing tag is <code>esac</code>:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$PROJECT_NAME</span><span class="pl-pds">"</span></span> <span class="pl-k">in</span>
    <span class="pl-s"><span class="pl-pds">"</span>libft<span class="pl-pds">"</span></span>)     <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>This is the libft project<span class="pl-pds">"</span></span>         ;;
    <span class="pl-s"><span class="pl-pds">"</span>ft_ls<span class="pl-pds">"</span></span>)     <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>This is the ft_ls project<span class="pl-pds">"</span></span>         ;;
    <span class="pl-s"><span class="pl-pds">"</span>ft_printf<span class="pl-pds">"</span></span>) <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>This is the ft_printf project<span class="pl-pds">"</span></span>     ;;
    <span class="pl-k">*</span>)           <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>This is not a 42 school's project<span class="pl-pds">"</span></span> ;;
<span class="pl-k">esac</span></pre></div>
<p>The value surrounded by the keywords <code>case</code> and <code>in</code> is compared with each pattern. If a pattern matches, the commands following the keyword <code>)</code> are executed until <code>;;</code> is encountered, then the program execution continues after the keyword <code>esac</code>. The symbol <code>*</code> is a wildcard that matches with all sequence of characters, even an empty string, allowing you to set a default statement when any pattern does match.</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="https://github.com/jgigault/42FileChecker/wiki/"><strong>Back to summary</strong></a> - <a href="#"><strong>Back to top</strong></a></p>

          </div>
        </div>
    </div>]