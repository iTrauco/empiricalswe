[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Functions enable you to structure your code, to increase readability and to avoid repetition of lines of code.</p>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#1-syntax-of-a-function" id="user-content-1-syntax-of-a-function"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part1"></a>1. Syntax of a function</h4>
<p>Declare a function by using the keyword <code>function</code> followed by its name:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">function</span> <span class="pl-en">name_of_function</span>
{
    <span class="pl-c"><span class="pl-c">#</span> Lines of code here</span>
}

name_of_function   <span class="pl-c"><span class="pl-c">#</span> Call the function</span></pre></div>
<p>To simply call the function, put its name at the beginning of a command line. It will cause the code between the two embraces <code>{ ... }</code> to be executed.</p>
<p>As a C program, functions may return a numeric value called <strong>exit status</strong> by using the keyword <code>return</code>. When <code>return</code> is encountered, the execution of the function is stopped and the immediate value after <code>return</code> is returned:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">function</span> <span class="pl-en">return_one</span>
{
    <span class="pl-c"><span class="pl-c">#</span> Lines of code executed</span>
    <span class="pl-k">return</span> 1
    <span class="pl-c"><span class="pl-c">#</span> Lines of code NEVER executed</span>
}

return_one         <span class="pl-c"><span class="pl-c">#</span> Call the function</span>
<span class="pl-c1">echo</span> <span class="pl-smi">$?</span>            <span class="pl-c"><span class="pl-c">#</span> Print the exit status of the last command</span></pre></div>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#2-local-and-global-variables" id="user-content-2-local-and-global-variables"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part2"></a>2. Local and global variables</h4>
<p>When you declare a variable, wherever in a script and even in a function, its reference is globally accessible. To specify a variable to be local only, use the keyword <code>local</code>:</p>
<div class="highlight highlight-source-shell"><pre>GLOBAL_VAR=<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>
<span class="pl-k">function</span> <span class="pl-en">display_global_and_local</span>
{
    <span class="pl-k">local</span> LOCAL_VAR=<span class="pl-s"><span class="pl-pds">"</span>World<span class="pl-pds">"</span></span>
    <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">${GLOBAL_VAR}</span> <span class="pl-smi">${LOCAL_VAR}</span><span class="pl-pds">"</span></span>
}

display_global_and_local            <span class="pl-c"><span class="pl-c">#</span> Print "Hello World"</span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">${GLOBAL_VAR}</span> <span class="pl-smi">${LOCAL_VAR}</span><span class="pl-pds">"</span></span>   <span class="pl-c"><span class="pl-c">#</span> Print "Hello "</span></pre></div>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#3-arguments-of-a-function" id="user-content-3-arguments-of-a-function"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part3"></a>3. Arguments of a function</h4>
<p>The arguments of a function are not explicitly declared. As you read it in the chapter "Bash syntax: Variables", the arguments of a script or a function are called <strong>positional parameters</strong>. They are listed and named like this: <code>$1</code>, <code>$2</code>, <code>$3</code>...</p>
<p>Passing a list of arguments to a function <code>display_text</code> will cause the positional parameters to be declared:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">function</span> <span class="pl-en">display_text</span>
{
    <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span><span class="pl-pds">"</span></span>
}

display_text <span class="pl-s"><span class="pl-pds">"</span>This is the first argument<span class="pl-pds">"</span></span></pre></div>
<p><code>$0</code> is not a positional parameter, it always contains the name of the script that is currently executed.</p>
<hr/>
<h4>
<a aria-hidden="true" class="anchor" href="#4-passing-an-array-as-argument" id="user-content-4-passing-an-array-as-argument"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-part4"></a>4. Passing an array as argument</h4>
<p>Arguments can only be text like in C programming and the array <code>**argv</code>. The tip consists in passing only the name of the array as an argument, declaring a local one and filling it by using a substitution by referenced name.</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">function</span> <span class="pl-en">display_array</span>
{
    OLD_IFS=<span class="pl-smi">$IFS</span>
    IFS=<span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>
    <span class="pl-k">local</span> ref=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span>[*]<span class="pl-pds">"</span></span>
    <span class="pl-k">local</span> -a MY_LOCAL_ARRAY=(<span class="pl-smi">${<span class="pl-k">!</span>ref}</span>)     <span class="pl-c"><span class="pl-c">#</span> Expand the array with the reference</span>
    IFS=<span class="pl-smi">$OLD_IFS</span>

    <span class="pl-c1">echo</span> <span class="pl-smi">$MY_LOCAL_ARRAY</span>[0]
    <span class="pl-c1">echo</span> <span class="pl-smi">$MY_LOCAL_ARRAY</span>[1]
    <span class="pl-c1">echo</span> <span class="pl-smi">$MY_LOCAL_ARRAY</span>[2]
}

<span class="pl-k">declare</span> -a MY_ARRAY=(<span class="pl-s"><span class="pl-pds">"</span>First item<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Second item<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Third item<span class="pl-pds">"</span></span>)
display_array MY_ARRAY                    <span class="pl-c"><span class="pl-c">#</span> Call the function with the name of the array</span></pre></div>
<p>Firstly, declare a temporary variable <code>ref</code> that will contain the name of the array to expand. Assigning the value <code>$1</code> will cause the variable <code>ref</code> to contain the first argument:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">local</span> ref=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span><span class="pl-pds">"</span></span>
<span class="pl-c1">echo</span> <span class="pl-smi">${ref}</span>            <span class="pl-c"><span class="pl-c">#</span> Print "MY_ARRAY"</span></pre></div>
<p>Then, add the symbol <code>!</code> to tell the Shell that we want to print the values of the array rather than its name:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">local</span> ref=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span><span class="pl-pds">"</span></span>
<span class="pl-c1">echo</span> <span class="pl-smi">${ref}</span>            <span class="pl-c"><span class="pl-c">#</span> Print "MY_ARRAY"</span>
<span class="pl-c1">echo</span> <span class="pl-smi">${<span class="pl-k">!</span>ref}</span>           <span class="pl-c"><span class="pl-c">#</span> Print the first value of MY_ARRAY: "First item"</span></pre></div>
<p>As you can see, <code>$(!ref)</code> becomes an equivalent to <code>$(MY_ARRAY)</code>, that is also equivalent to <code>$(MY_ARRAY[0])</code> (The first value of the array). Adding the symbols <code>[*]</code> tells the Shell that we are looking for all the values of the array:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">local</span> ref=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span>[*]<span class="pl-pds">"</span></span>
<span class="pl-c1">echo</span> <span class="pl-smi">${ref}</span>            <span class="pl-c"><span class="pl-c">#</span> Print "MY_ARRAY[*]"</span>
<span class="pl-c1">echo</span> <span class="pl-smi">${<span class="pl-k">!</span>ref}</span>           <span class="pl-c"><span class="pl-c">#</span> Print all the values of MY_ARRAY: "First item Second item Third item"</span></pre></div>
<p>Now we can assign the values in a local array for a simplier use:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">local</span> ref=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span>[*]<span class="pl-pds">"</span></span>
<span class="pl-k">local</span> -a MY_LOCAL_ARRAY=(<span class="pl-smi">${<span class="pl-k">!</span>ref}</span>)  <span class="pl-c"><span class="pl-c">#</span> Declare an array and fill it with the values</span>

<span class="pl-c1">echo</span> <span class="pl-smi">$MY_LOCAL_ARRAY</span>[0]            <span class="pl-c"><span class="pl-c">#</span> Print the 1st value: "First" </span>
<span class="pl-c1">echo</span> <span class="pl-smi">$MY_LOCAL_ARRAY</span>[1]            <span class="pl-c"><span class="pl-c">#</span> Print the 2nd value: "item"</span>
<span class="pl-c1">echo</span> <span class="pl-smi">$MY_LOCAL_ARRAY</span>[2]            <span class="pl-c"><span class="pl-c">#</span> Print the 3rd value: "Second"</span></pre></div>
<p>Damn! We got a new array <code>MY_LOCAL_ARRAY</code> that contains 6 items instead of 3! The Shell expanded the array <code>MY_ARRAY</code> word by word each in a row.</p>
<p>To resolve the problem, we need to understand how the symbols <code>[*]</code> are interpreted: The Shell is looking for the first character contained in the global variable <code>IFS</code> (Internal Field Separator) and does split the content of the array with it, without taking care about the structure of the array. Default value of <code>IFS</code> is <code>&lt;space&gt;&lt;tabulation&gt;&lt;newline&gt;</code> so that the array is expanded like this:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">local</span> -a MY_LOCAL_ARRAY=(<span class="pl-s"><span class="pl-pds">"</span>First<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>item<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Second<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>item<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Third<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>item<span class="pl-pds">"</span></span>)</pre></div>
<p>Remove the value of <code>IFS</code> before expanding the array to save its structure, as following:</p>
<div class="highlight highlight-source-shell"><pre>OLD_IFS=<span class="pl-smi">$IFS</span>                       <span class="pl-c"><span class="pl-c">#</span> Save the current value of IFS</span>
IFS=<span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>                             <span class="pl-c"><span class="pl-c">#</span> Remove the value of IFS</span>
<span class="pl-k">local</span> ref=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$1</span>[*]<span class="pl-pds">"</span></span>
<span class="pl-k">local</span> -a MY_LOCAL_ARRAY=(<span class="pl-smi">${<span class="pl-k">!</span>ref}</span>)
IFS=<span class="pl-smi">$OLD_IFS</span>                       <span class="pl-c"><span class="pl-c">#</span> Restore the old value of IFS</span>

<span class="pl-c1">echo</span> <span class="pl-smi">$MY_LOCAL_ARRAY</span>[0]            <span class="pl-c"><span class="pl-c">#</span> Print the 1st value: "First item" </span>
<span class="pl-c1">echo</span> <span class="pl-smi">$MY_LOCAL_ARRAY</span>[1]            <span class="pl-c"><span class="pl-c">#</span> Print the 2nd value: "Second item"</span>
<span class="pl-c1">echo</span> <span class="pl-smi">$MY_LOCAL_ARRAY</span>[2]            <span class="pl-c"><span class="pl-c">#</span> Print the 3rd value: "Thirs item"</span></pre></div>
<p><code>MY_LOCAL_ARRAY</code> now contains the same values as MY_ARRAY :-)</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="https://github.com/jgigault/42FileChecker/wiki/"><strong>Back to summary</strong></a> - <a href="#"><strong>Back to top</strong></a></p>

          </div>
        </div>
    </div>]