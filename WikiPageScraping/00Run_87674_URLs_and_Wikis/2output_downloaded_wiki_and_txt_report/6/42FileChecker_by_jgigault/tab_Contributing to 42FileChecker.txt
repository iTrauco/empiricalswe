[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>If you want to fix or to improve the 42FileChecker, follow the guide lines bellow, or if you want your own unit testing framework to be integrated in the 42FileChecker, just let me know :-)</p>
<p>The 42FC team is actually expanding. If you want to join us or contribute, contact us !</p>
<h5>
<a aria-hidden="true" class="anchor" href="#1-fork-and-clone" id="user-content-1-fork-and-clone"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>1. Fork and clone</h5>
<p>Fork the repository with your account by clicking on the button <strong>Fork</strong> in the top-right corner of the page. Then, clone your freshly forked repository to your machine:</p>
<div class="highlight highlight-source-shell"><pre>git clone https://github.com/YOUR-USERNAME/42FileChecker  <span class="pl-c"><span class="pl-c">#</span>https</span>
<span class="pl-c"><span class="pl-c">#</span>or</span>
git clone git@github.com:YOUR-USERNAME/42FileChecker      <span class="pl-c"><span class="pl-c">#</span>ssl</span></pre></div>
<h5>
<a aria-hidden="true" class="anchor" href="#2-create-a-branch" id="user-content-2-create-a-branch"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>2. Create a branch</h5>
<p>Create a new branch from master (e.g. named <code>bugfix--segfault-libft</code>) to avoid the script to try updating itself:</p>
<div class="highlight highlight-source-shell"><pre>git checkout -b bugfix--segfault-libft</pre></div>
<h5>
<a aria-hidden="true" class="anchor" href="#3-commit-and-push" id="user-content-3-commit-and-push"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>3. Commit and push</h5>
<p>Update code, make a review code, commit changes and push them:</p>
<div class="highlight highlight-source-shell"><pre>git add -N <span class="pl-c1">.</span>     <span class="pl-c"><span class="pl-c">#</span>make sure new files are taken into account during your review</span>
git add -p       <span class="pl-c"><span class="pl-c">#</span>review code, type (y)es or (n)o to keep changes for committing</span>
git commit -v    <span class="pl-c"><span class="pl-c">#</span>commit with a title (first line) and more info on new lines</span>
git push origin HEAD:bugfix--segfault-libft</pre></div>
<h5>
<a aria-hidden="true" class="anchor" href="#4-make-a-pull-request" id="user-content-4-make-a-pull-request"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>4. Make a Pull Request</h5>
<p>Go to your repository on Github and click on the green button <strong>New pull request</strong>. Let the default <strong>base fork: jgigault/42FileChecker</strong> and <strong>base branch: bugfix--segfault-libft</strong>, and compare to your freshly pushed branch. Once base and HEAD are both selected, you can preview your changes bellow. Click on the green button <strong>Create pull request</strong>.</p>
<p>A Pull Request allows us to discuss about your changes and to improve them together. You can still commit and push new changes, that will appear in the same Pull Request. You also can <a href="https://help.github.com/articles/adding-collaborators-to-a-personal-repository/">add me as contributor</a> to your repository to allow me push to your branch.</p>
<h5>
<a aria-hidden="true" class="anchor" href="#5-pull-and-rebase-the-pull-request" id="user-content-5-pull-and-rebase-the-pull-request"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>5. Pull and rebase the Pull Request</h5>
<p>Once changes are terminated and approved by me, make sure your branch is up to date. Add the original remote repository (choose a name for it, e.g.: <strong>jgigault</strong>):</p>
<div class="highlight highlight-source-shell"><pre>git remote add jgigault https://github.com/jgigault/42FileChecker.git</pre></div>
<p>Then, get the latest changes from jgigault/42FileChecker (fetch) and merge the <strong>master</strong> branch with your local branch:</p>
<div class="highlight highlight-source-shell"><pre>git fetch jgigault
git merge jgigault/master</pre></div>
<p>Once your repository is synced with the original, <strong>rebase</strong> all your commits together (see the tip bellow <a href="https://github.com/jgigault/42FileChecker/wiki/Contributing-to-42FileChecker#tip1">Rebasing a Pull Request</a>) and push to your repository (you must <strong>force</strong> push if you rebased):</p>
<div class="highlight highlight-source-shell"><pre>git push -f origin master</pre></div>
<p>Finally, let me merge with the orginal master branch :-)</p>
<hr/>
<h3>
<a aria-hidden="true" class="anchor" href="#tips" id="user-content-tips"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Tips</h3>
<h5>
<a aria-hidden="true" class="anchor" href="#rebasing-a-pull-request" id="user-content-rebasing-a-pull-request"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a><a name="user-content-tip1"></a>Rebasing a Pull Request</h5>
<p>Rebasing consists in rewriting and/or grouping a number of commits, to make them clean or more explicit. Suppose you have these 5 latest dirty commits in a branch called <code>patch-1</code>:</p>
<div class="highlight highlight-source-shell"><pre>git log --oneline

94b2ae8 finally ok
60fdff5 small changes
fd5b463 fix f<span class="pl-k">***</span>ing segfault
6fe7487 use ft_memmove instead of ft_putchar
636da7b first commit
...</pre></div>
<p>We want to group them in a single one commit, and to rename it properly with <code>bug fix: segfault on libft</code>. First, run <code>git rebase</code> in interactive mode and specify the number of commits you want to rebase (here is 5):</p>
<div class="highlight highlight-source-shell"><pre>git rebase -i HEAD~5</pre></div>
<p><code>HEAD~5</code> means the last 5 commits from HEAD (the most recent). It opens the editor that is configured for git (vim by default), and displays a list of instructions, one per commit message:</p>
<pre><code>pick 636da7b first commit
pick 6fe7487 use ft_memmove instead of ft_putchar
pick fd5b463 fix f***ing segfault
pick 60fdff5 small changes
pick 94b2ae8 finally ok
</code></pre>
<p>The commits are sorted from oldest to newest. The first word of each line is a git command (<code>pick</code> by default). There are 6 available commands that are described just below in the same screen. Suppose you know what each commit means and that you don't care about what message they contain, the simplest way to group them in a single one and to rename it properly, is to use the command <code>reword</code> for the first commit (allowing you to change the message) and <code>fixup</code> for all others (keeping changes trough the first commit but removing the messages), like below:</p>
<pre><code>reword 636da7b first commit
fixup 6fe7487 use ft_memmove instead of ft_putchar
fixup fd5b463 fix f***ing segfault
fixup 60fdff5 small changes
fixup 94b2ae8 finally ok
</code></pre>
<p>Now, save and quit the editor, a new editor screen is opened with the first commit message:</p>
<pre><code>first commit
</code></pre>
<p>Edit the message properly (the first line is the title of the commit, you can add more info by adding new lines), e.g.:</p>
<pre><code>bug fix: segfault on libft

that commit fixes a bad behavior in libft resulting in a segfault
</code></pre>
<p>Again, save and quit the editor. When everything is OK, you get a success message:</p>
<pre><code>Successfully rebased and updated refs/heads/patch-1.
</code></pre>
<p>Finally, you must use <strong>force</strong> push to push to your remote branch because you rewrote the History (note the use of the capital). By default, git will refuse your changes because the local branch does not correspond any more with the remote one. Just run:</p>
<div class="highlight highlight-source-shell"><pre>git push -f HEAD:patch-1</pre></div>
<p>(Note: Sometimes you would have to resolve conflicts, like when using the command <code>git pull --rebase</code>... a case that will be part of a full other tip)</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="https://github.com/jgigault/42FileChecker/wiki/"><strong>Back to summary</strong></a> - <a href="#"><strong>Back to top</strong></a></p>

          </div>
        </div>
    </div>]