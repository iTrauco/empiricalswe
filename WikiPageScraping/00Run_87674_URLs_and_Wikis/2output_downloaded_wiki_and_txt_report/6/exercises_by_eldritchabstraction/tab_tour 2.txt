[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h3>
<a aria-hidden="true" class="anchor" href="#cpp-tour" id="user-content-cpp-tour"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>cpp tour</h3>
<p><a href="https://isocpp.org/images/uploads/2-Tour-Basics.pdf" rel="nofollow">Chapter 2</a></p>
<ul>
<li>
<code>constexpr</code> (cpp11) basically a function that will resolve to const at compile time. <a href="https://stackoverflow.com/questions/4748083/when-should-you-use-constexpr-capability-in-c11" rel="nofollow">stack overflow</a>
</li>
<li>range for loop (cpp11):</li>
</ul>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">int</span> v[] = {<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>];
<span class="pl-k">for</span> (<span class="pl-k">auto</span> x in v)
    std::cout &lt;&lt; x &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>;

<span class="pl-k">for</span> (<span class="pl-k">auto</span> x in {<span class="pl-c1">10</span>,<span class="pl-c1">12</span>,<span class="pl-c1">14</span>})
    std::cout &lt;&lt; x &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>;</pre></div>
<p>We can also use references, that way, v doesn't get copied into x.</p>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">for</span> (<span class="pl-k">auto</span> &amp;x in {<span class="pl-c1">9</span>,<span class="pl-c1">8</span>,<span class="pl-c1">5</span>})
    std::cout &lt;&lt; ++x &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>;</pre></div>
<ul>
<li>
<code>nullptr</code> (cpp11): a replacement for null pointer checks against 0 or NULL. All pointer types share <code>nullptr</code>
</li>
<li>
<code>nullptr_t</code> (cpp11): it can be it's own type, using it as a parameter means you must pass in an empty pointer</li>
<li>
<code>enumerations</code> (cpp11): a replacement for c enums <a href="http://www.cprogramming.com/c++11/c++11-nullptr-strongly-typed-enum-class.html" rel="nofollow">cprogramming post</a>
<ul>
<li>cons of c enum:
<ul>
<li>they were just ints so anything could be compared to anything (traffic colours compared to cars)</li>
<li>couldn't reuse names</li>
</ul>
</li>
<li>pros of cpp enum class:
<ul>
<li>you can forward declare enum class, useful for laying out code however you wish</li>
<li>you can use which ever size you wish</li>
</ul>
<div class="highlight highlight-source-c++"><pre><span class="pl-c"><span class="pl-c">//</span> we only have three colors, so no need for ints!</span>
<span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">Colors</span> : <span class="pl-k">char</span> { RED = <span class="pl-c1">1</span>, GREEN = <span class="pl-c1">2</span>, BLUE = <span class="pl-c1">3</span> };
<span class="pl-c"><span class="pl-c">//</span> superior control of size for compatibility across platforms</span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span>
<span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">Colors</span> : std::<span class="pl-c1">int8_t</span> { RED = <span class="pl-c1">1</span>, GREEN = <span class="pl-c1">2</span>, BLUE = <span class="pl-c1">3</span> }; </pre></div>
</li>
</ul>
</li>
<li>namespaces: some declarations belong together and their names shouldn't clash with other names (for instance, you could reuse the name "main" for your own user defined type:</li>
</ul>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">namespace</span> <span class="pl-en">blep</span> {
<span class="pl-k">class</span> <span class="pl-en">complex</span> { };
complex <span class="pl-en">sqrt</span>(complex);
<span class="pl-k">int</span> <span class="pl-en">main</span>(); <span class="pl-c"><span class="pl-c">//</span> whoaa</span>
}

<span class="pl-k">int</span> <span class="pl-en">blep::main</span>()
{
    <span class="pl-c1">printf</span>(<span class="pl-s"><span class="pl-pds">"</span>blep<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>);
}

<span class="pl-k">int</span> <span class="pl-en">main</span> (<span class="pl-k">void</span>)
{
    <span class="pl-k">return</span> <span class="pl-c1">blep::main</span>();
}</pre></div>
<p>You can qualify the namespace name with <code>::</code> or you can use the keyword <code>using</code></p>
<ul>
<li>static asserts: an assert that fires at compile time</li>
</ul>

        </div>

    </div>]