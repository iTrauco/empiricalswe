[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The following coding guidelines must be followed for any contributions to uSkyBlock.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#syntax" id="user-content-syntax"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Syntax</h2>
<ul>
<li>Whitespace: Always use spaces, not tabs (tab-stops/indentation may wary from IDE to IDE, spaces wont)</li>
<li>Scopes: Always use curly-braces in <code>if-then-else</code> or similar constructs.</li>
<li>Curly-braces: Belong to the line of the keyword, not on a separate line. We want lines to carry meaning, a curly carries no meaning on it's own.</li>
<li>Naming: Use the Java-naming-conventions, not the C# ones, meaning
<ul>
<li>CAPITALS: Denote <strong>constants</strong> (<code>static final</code> or <code>enum</code>).</li>
<li>UpperCamelCase: Denote <strong>classes</strong> (never variables)</li>
<li>lowerCamelCase: Denote <strong>variables</strong>, <strong>fields</strong> or <strong>methods</strong>. All IDEs can distinguish between the three, and methods will always have paranthesis at the end.</li>
</ul>
</li>
<li>Don't use * imports - it makes merging much harder</li>
</ul>
<h3>
<a aria-hidden="true" class="anchor" href="#examples" id="user-content-examples"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Examples</h3>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">MyClass</span> {
  <span class="pl-smi">String</span> myField;

  <span class="pl-k">public</span> <span class="pl-en">MyClass</span>() {
  }

  <span class="pl-k">public</span> <span class="pl-en">myMethodWithCamelCase</span>(<span class="pl-smi">String</span> <span class="pl-v">myArg</span>) {
    <span class="pl-k">boolean</span> myVariable <span class="pl-k">=</span> <span class="pl-c1">true</span>;
    <span class="pl-k">if</span> (myVariable) {
      doSomething();
    } <span class="pl-k">else</span> {
      doSomethingElse();
      myVariable <span class="pl-k">=</span> <span class="pl-c1">false</span>;    <span class="pl-c"><span class="pl-c">//</span> Any decent IDE will color this assignment different</span>
      myField <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Something<span class="pl-pds">"</span></span>; <span class="pl-c"><span class="pl-c">//</span> From this one, so no need for this.myField or _myField or m_myField.</span>
    }
  }
}</pre></div>

        </div>

    </div>]