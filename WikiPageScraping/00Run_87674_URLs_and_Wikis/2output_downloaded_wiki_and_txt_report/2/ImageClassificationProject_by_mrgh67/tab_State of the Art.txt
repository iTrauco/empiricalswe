[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>Even a cursory inspection of published literature concerning object recognition suggests that it is a non-trivial, aka "difficult" problem. Whilst human beings find it trivially easy to inspect pictures and recognize familiar objects within them it is not a straightforward process to replicate this in a machine learning system.</p>
<p>The current best classification rates for the CIFAR 10 dataset can be found at the links below:</p>
<ul>
<li>
<p><a href="https://code.google.com/p/cuda-convnet/" rel="nofollow">https://code.google.com/p/cuda-convnet/</a></p>
</li>
<li>
<p><a href="http://rodrigob.github.io/are_we_there_yet/build/classification_datasets_results.html#43494641522d3130" rel="nofollow">http://rodrigob.github.io/are_we_there_yet/build/classification_datasets_results.html#43494641522d3130</a></p>
</li>
</ul>
<p>A classification rate of approximately 82% is achievable, without what is referred to as "data augmentation". Data augmentation means expansion of the dataset by using random translation (by 1 or 2 pixels), flipping (reflections) and rotations of the images</p>
<p>With data augmentation the classification rate improves to approximately 90%.</p>
<p>The best techniques utilized for classification usually included neural networks, especially what are referred to as Deep Convolutional Networks.</p>
<p>For the problem at hand to be tractable most solutions appear to be hand written in a low level language than can be optimized using GPU hardware.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#limitations-of-the-this-project" id="user-content-limitations-of-the-this-project"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Limitations of the this Project</h2>
<p>I achieved a classification rate of only 54%. Although not comparable with the high classification rates above there were a number of constraints that made it necessary to accept a lower rate to ensure completion of the project in a timely manner.</p>
<p>Given the time constraints and other parameters of this project I was unable to utilize neural network paradigms as I had originally hoped. I found the Python neural network libraries either extremely slow (taking days to run a few epochs!) or impossible to compile into an environment that required other necessary libraries. The opencv library, for example, requires a downgrade of the current numpy library to an older version. I looked at 2 libraries in particular Pybrain and Theano.</p>

        </div>

    </div>]