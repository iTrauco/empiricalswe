[<div class="wiki-body gollum-org-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#how-to-install" id="user-content-how-to-install"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to Install</h1>
<p>If you have Git installed we recommend that you clone our repository with:</p>
<pre>git clone https://github.com/noahterickson/digitaldash
</pre>
<p>If you prefer not to use Git you can download the repository as a <a href="https://github.com/noahterickson/DigitalDash/archive/master.zip">.zip here</a>.</p>
<p>Once you have a copy of the repository navigate to the “software/DIGITAL_DASH” directory. Open up “DIGITAL_DASH.ino” in the Arduino IDE and upload it to an Arduino Due or any ATSAM3X with the Arduino bootloader.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#software-directory-contents" id="user-content-software-directory-contents"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Software Directory Contents</h1>
<p>There are several sub-directories in the main software directory, each with a specific purpose.</p>
<ul>
  <li>Demo_sender_2 - This directory is for the development groups demonstration unit for the Capstone poster session. The file “demo_sender_2.ino” is intended to be uploaded on an Arduino Due and takes analog inputs and transmits those onto a CAN bus.</li>
  <li>DIGITAL_DASH - This directory is home to the main software that is intended for upload onto the custom PCB. In this directory there are a few .cpp, .h and one .ino file. Open the “DIGITAL_DASH.ino” with the Arduino IDE and the C++ files should also open up in the Arduino IDE.</li>
  <li>Digital_Dash_GUI - This directory is for the screen software. The “updated_dash.4dGenie” file can be opened in the 4D Systems ViSi-Genie IDE and uploaded to the screen. The folder of images can be uploaded to a microSD card and put on the screen.</li>
  <li>Examples - This directory has reference software for the development team.</li>
  <li>Libraries - This directory houses the due_can library which can also be found at <a href="https://github.com/collin80/due_can">Due CAN</a>
</li>
</ul>
<h1>
<a aria-hidden="true" class="anchor" href="#changing-can-messages" id="user-content-changing-can-messages"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Changing CAN messages</h1>
<p>The software that was developed for our Capstone project included CAN capability for two systems, the Viking Motorsports battery management system (BMS) and the motor controller (RMS). In order to change functionality to fit a new system, such as a different motor device, either CAN0.cpp and CAN0.h or CAN1.cpp and CAN1.h must be modifided to suit the new system. CAN message IDs, interrupt handling functions, and CAN watches must be setup for the new CAN messages. The CAN message IDs should appear in a provided datasheet.</p>
<p>As this varies between devices, we cannot provide exact information on how to go about this. We recommend that you use the “due_can” library in the repository and our own code as a reference.</p>
<h1>
<a aria-hidden="true" class="anchor" href="#how-it-works" id="user-content-how-it-works"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How It Works</h1>
<p>The software was written in the Arduino IDE. Most of the code is written in C and given a .cpp extension to please the Arduino IDE.</p>
<p>The software uses the due_can library from collin80 on <a href="https://github.com/collin80/due_can">Github</a>. The due_can library allows us to receive CAN messages from the RMS and the BMS CAN lines on an interrupt basis. When a CAN message is received, the library calls the correct interrupt handler function for the CAN network that received the message. The interrupt handler function then passes off the message to its respective function that will interpret the data.</p>
<p>Once the data has been interpreted, our software sends the data off to the 4D systems screen. To accomplish this, we used the <a href="https://github.com/4dsystems/ViSi-Genie-Arduino-Library">4D systems Arudino library</a>. To update the screen, we use the 4D systems library functions in the main loop of the program. This allows us to update the screen whenever a CAN interrupt is not occurring. Doing so ensures that the screen will update in a timely fashion after receiving new data.</p>

        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="https://github.com/noahterickson/digitaldash/wiki/home">Home</a> | <a href="https://github.com/noahterickson/digitaldash/wiki/objective-and-motivation">About</a> | <a href="https://github.com/noahterickson/digitaldash/wiki/about-the-team">Team</a>       2015 Portland State University ECE</p>

          </div>
        </div>
    </div>]