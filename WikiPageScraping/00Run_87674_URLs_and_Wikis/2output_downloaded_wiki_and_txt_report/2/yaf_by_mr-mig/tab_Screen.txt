[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#what-is-screen" id="user-content-what-is-screen"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>What is 'screen'?</h2>
<p>Screen is a high-level building block for your page.<br/>
It represents a <strong>single page</strong> in your SPA application, related to some URL.</p>
<p>Screen is basically everything you see on your screen.</p>
<p>It is made of a template (with composites) and a callback, bounded to some URL.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#how-to-reason-about-it" id="user-content-how-to-reason-about-it"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to reason about it?</h2>
<p>You should use screen to define a single addressable page of your application.</p>
<p>This is one of the "entry points" of your application.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#usage" id="user-content-usage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Usage</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#definition" id="user-content-definition"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Definition</h3>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">yaf</span>.<span class="pl-en">screen</span>({
  <span class="pl-c"><span class="pl-c">//</span> String.</span>
  <span class="pl-c"><span class="pl-c">//</span> Screen name. Should be camelCase.</span>
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>myScreen<span class="pl-pds">'</span></span>, 

  <span class="pl-c"><span class="pl-c">//</span> String. </span>
  <span class="pl-c"><span class="pl-c">//</span>The content of the associated style tag</span>
  styles<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./styles.css<span class="pl-pds">'</span></span>),

  <span class="pl-c"><span class="pl-c">//</span> String. </span>
  <span class="pl-c"><span class="pl-c">//</span> The content of the associated template</span>
  template<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./template.html<span class="pl-pds">'</span></span>), 

  <span class="pl-c"><span class="pl-c">//</span> Map (String : Module|String).</span>
  <span class="pl-c"><span class="pl-c">//</span> The map of Alias Names and module objects to be used with element's associated logic</span>
  inject<span class="pl-k">:</span> {
     <span class="pl-c"><span class="pl-c">//</span> AMD/CommonJS format, will inject module.exports as ComponentAliasName</span>
     <span class="pl-c"><span class="pl-c">//</span> It's the same as var ComponentAliasName = require('../some-other-component');</span>
    <span class="pl-s"><span class="pl-pds">'</span>ComponentAliasName<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>../some-other-component<span class="pl-pds">'</span></span>),

    <span class="pl-c"><span class="pl-c">//</span> Angular format, will inject MySuperDirective using angular's DI</span>
    <span class="pl-c"><span class="pl-c">//</span> Also, it will add the injected angular-module to dependencies </span>
    <span class="pl-s"><span class="pl-pds">'</span>MySuperDirective<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>my-super-module<span class="pl-pds">'</span></span>,

    <span class="pl-c"><span class="pl-c">//</span> Mixed Angular-CJS/AMD format</span>
    <span class="pl-s"><span class="pl-pds">'</span>MyCjsDirective<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>../path/to/angular-module<span class="pl-pds">'</span></span>).<span class="pl-c1">name</span>
  },
  
  <span class="pl-c"><span class="pl-c">//</span> Array[String]</span>
  <span class="pl-c"><span class="pl-c">//</span> The list of channel names. The channels will be created automatically.</span>
  channels<span class="pl-k">:</span> [ <span class="pl-s"><span class="pl-pds">'</span>someChannel<span class="pl-pds">'</span></span> ],

  <span class="pl-c"><span class="pl-c">//</span> Function.</span>
  <span class="pl-c"><span class="pl-c">//</span> Will be called when screen is shown after route path is resolved and changed.</span>
  <span class="pl-en">ready</span><span class="pl-k">:</span> <span class="pl-k">function</span>(){
    <span class="pl-c"><span class="pl-c">//</span> the map of values, available in template. Defaults to {}</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">templateScope</span>;

    <span class="pl-c"><span class="pl-c">//</span> the map of injected components </span>
    <span class="pl-c1">this</span>.<span class="pl-smi">injector</span>;

    <span class="pl-c"><span class="pl-c">//</span> the injected component reference</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">injector</span>.<span class="pl-smi">ComponentAliasName</span>;

  }
});
</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#simplest-form" id="user-content-simplest-form"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Simplest form</h3>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">yaf</span>.<span class="pl-en">screen</span>({
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>login<span class="pl-pds">'</span></span>,
  route<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>/login<span class="pl-pds">'</span></span>,
  styles<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./styles.css<span class="pl-pds">'</span></span>),
  template<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./template.html<span class="pl-pds">'</span></span>)
});</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#conventions" id="user-content-conventions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Conventions</h2>
<ul>
<li>Screen MUST bind itself to some URL (controlled by framework).</li>
<li>Screen MUST register all channels used on this page (controlled by framework. Warning will be issued for misused channels).</li>
<li>Screen CAN have global <code>channel</code> definitions.</li>
<li>Screen CAN have <code>link</code> definitions to control composites' relations.</li>
</ul>

        </div>

    </div>]