[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#what-is-element" id="user-content-what-is-element"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>What is 'element'?</h2>
<p>Element is a low-level building block for web components.</p>
<p>It is represented by a custom tag in the markup with <code>state</code> and <code>channel</code> attributes:</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">my-element</span> <span class="pl-e">state</span>=<span class="pl-s"><span class="pl-pds">"</span>elState<span class="pl-pds">"</span></span> <span class="pl-e">channel</span>=<span class="pl-s"><span class="pl-pds">"</span>reactionChannel<span class="pl-pds">"</span></span>&gt;&lt;/<span class="pl-ent">my-element</span>&gt;</pre></div>
<p>Element is an interactive piece of the screen with fully incapsulated behaviour.</p>
<p>Consists of associated logic, template and styles.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#how-to-reason-about-it" id="user-content-how-to-reason-about-it"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>How to reason about it?</h2>
<p>The usecases are somthing like:</p>
<ul>
<li>search box</li>
<li>tab</li>
<li>user avatar</li>
<li>user details form</li>
<li>...</li>
</ul>
<p>The main idea is that <strong>element NEVER interacts with other elements DIRECTLY. It only changes it's state</strong> as a reaction to outer "forces".</p>
<h2>
<a aria-hidden="true" class="anchor" href="#usage" id="user-content-usage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Usage</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#definition" id="user-content-definition"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Definition</h3>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">yaf</span>.<span class="pl-en">element</span>({
  <span class="pl-c"><span class="pl-c">//</span> String.</span>
  <span class="pl-c"><span class="pl-c">//</span> Element's tag name. Should be camelCase. The tag name in template will be 'my-element'</span>
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>myElement<span class="pl-pds">'</span></span>, 

  <span class="pl-c"><span class="pl-c">//</span> String. </span>
  <span class="pl-c"><span class="pl-c">//</span>The content of the associated style tag</span>
  styles<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./styles.css<span class="pl-pds">'</span></span>),

  <span class="pl-c"><span class="pl-c">//</span> String. </span>
  <span class="pl-c"><span class="pl-c">//</span> The content of the associated template</span>
  template<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./template.html<span class="pl-pds">'</span></span>), 

  <span class="pl-c"><span class="pl-c">//</span> Map (String : Module|String).</span>
  <span class="pl-c"><span class="pl-c">//</span> The map of Alias Names and module objects to be used with element's associated logic</span>
  inject<span class="pl-k">:</span> {
     <span class="pl-c"><span class="pl-c">//</span> AMD/CommonJS format, will inject module.exports as ComponentAliasName</span>
     <span class="pl-c"><span class="pl-c">//</span> It's the same as var ComponentAliasName = require('../some-other-component');</span>
    <span class="pl-s"><span class="pl-pds">'</span>ComponentAliasName<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>../some-other-component<span class="pl-pds">'</span></span>),

    <span class="pl-c"><span class="pl-c">//</span> Angular format, will inject MySuperDirective using angular's DI</span>
    <span class="pl-c"><span class="pl-c">//</span> Also, it will add the injected angular-module to dependencies </span>
    <span class="pl-s"><span class="pl-pds">'</span>MySuperDirective<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>my-super-module<span class="pl-pds">'</span></span>,

    <span class="pl-c"><span class="pl-c">//</span> Mixed Angular-CJS/AMD format</span>
    <span class="pl-s"><span class="pl-pds">'</span>MyCjsDirective<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>../path/to/angular-module<span class="pl-pds">'</span></span>).<span class="pl-c1">name</span>
  },

  <span class="pl-c"><span class="pl-c">//</span> Map (String : NonFunction)</span>
  <span class="pl-c"><span class="pl-c">//</span> The default state of the element. Will be {} if not defined.</span>
  <span class="pl-c"><span class="pl-c">//</span> Will be created automatically if not linked in the template using 'state' attribute.</span>
  state <span class="pl-k">:</span> {
    <span class="pl-c"><span class="pl-c">//</span> Can be referenced inside the template using 'state.someValue'</span>
    someValue<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>xxx<span class="pl-pds">'</span></span>
  },
  
  <span class="pl-c"><span class="pl-c">//</span> Object (String : NonFunction)</span>
  <span class="pl-c"><span class="pl-c">//</span> The default values for the element options configuration. Will be {} if not defined.</span>
  <span class="pl-c"><span class="pl-c">//</span> Each field is mapped to HTML attribute.</span>
  options <span class="pl-k">:</span> {
     <span class="pl-c"><span class="pl-c">//</span> Can be overridden by DOM-element attribute 'maxlength'</span>
     maxlength <span class="pl-k">:</span> <span class="pl-c1">50</span>
  },

  <span class="pl-c"><span class="pl-c">//</span> Function.</span>
  <span class="pl-c"><span class="pl-c">//</span> The associated element's logic. Will be called when element is attached to DOM and linked with it's state.</span>
  <span class="pl-en">ready</span><span class="pl-k">:</span> <span class="pl-k">function</span>(){
     
    <span class="pl-c"><span class="pl-c">//</span> associated DOM-element</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">element</span>;

    <span class="pl-c"><span class="pl-c">//</span> current linked state map</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">state</span>;

    <span class="pl-c"><span class="pl-c">//</span> current parsed options map</span>
    <span class="pl-c1">this</span>.<span class="pl-c1">options</span>;

    <span class="pl-c"><span class="pl-c">//</span> the map of values, available in template. Defaults to {}</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">templateScope</span>;

    <span class="pl-c"><span class="pl-c">//</span> the map of injected components </span>
    <span class="pl-c1">this</span>.<span class="pl-smi">injector</span>;

    <span class="pl-c"><span class="pl-c">//</span> the injected component reference</span>
    <span class="pl-c1">this</span>.<span class="pl-smi">injector</span>.<span class="pl-smi">ComponentAliasName</span>;

  }
});
</pre></div>
<h3>
<a aria-hidden="true" class="anchor" href="#simplest-form" id="user-content-simplest-form"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Simplest form</h3>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">yaf</span>.<span class="pl-en">element</span>({
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>myElement<span class="pl-pds">'</span></span>,
  styles<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./styles.css<span class="pl-pds">'</span></span>),
  template<span class="pl-k">:</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./template.html<span class="pl-pds">'</span></span>)
});</pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#usage-conventions" id="user-content-usage-conventions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Usage Conventions</h2>
<ul>
<li>Element MUST bind it's state to some namespace through HTML <code>state</code> attribute. (controlled by user)</li>
</ul>
<div class="highlight highlight-text-html-basic"><pre><span class="pl-c"><span class="pl-c">&lt;!--</span> incorrect <span class="pl-c">--&gt;</span></span>
&lt;<span class="pl-ent">my-element</span>&gt;&lt;/<span class="pl-ent">my-element</span>&gt;</pre></div>
<ul>
<li>Element MUST change only it's <code>state</code>. (controlled by user)</li>
<li>Element CAN react on channel signals. (controlled by framework)</li>
<li>Element CAN omit channel binding through HTML <code>channel</code> attribute.</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#framework-implementation-requirements" id="user-content-framework-implementation-requirements"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Framework Implementation Requirements</h2>
<ul>
<li>Element MUST create a className on the associated DOM-element using it's name (controlled by framework):</li>
</ul>
<pre><code>'myElement' -&gt; '.my-element'
</code></pre>
<ul>
<li>Element MUST manage it's styles and template attachment and detachment. (controlled by framework)</li>
<li>Element MUST create the associated DOM-element. (controlled by framework)</li>
<li>Element SHOULD provide the API with <em>scope attributes</em>.</li>
<li>Element MUST have some default <code>state</code>. (controlled by framework, fallback to a default empty object state)</li>
<li>Element MUST have some default <code>state</code>. (controlled by framework, fallback to a default empty object state)</li>
<li>Element CAN react on channel signals. (controlled by framework)</li>
<li>Element CAN omit channel binding through HTML <code>channel</code> attribute.</li>
</ul>

        </div>

    </div>]