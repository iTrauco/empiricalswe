[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>对于业务逻辑，lark.js 支持MVC分层的方式来编写。这个方式有如下约定:</p>
<ul>
<li>按业务内容分层 从上到下的 controller/action , views , page models, data models, dao models等层次</li>
<li>app中只能相邻层调用，不允许跨层调用</li>
<li>hook功能支持：支持hook功能，在跨层调用前后，发送相应事件，添加自定义逻辑。</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#controlleraction" id="user-content-controlleraction"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>controller/action</h2>
<p>controller/action 实现路由功能。自需把路由相关逻辑按规定放controllers目录下即可。具体可以参考<a href="https://github.com/larkjs/lark/wiki/%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86">路由处理</a></p>
<h2>
<a aria-hidden="true" class="anchor" href="#view" id="user-content-view"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>view</h2>
<p>view 层是集成模板功能。目前采用的是 <a href="https://github.com/tj/ejs">ejs</a> 模板系统。你只需按规则把模板放 views 目录下即可。</p>
<h2>
<a aria-hidden="true" class="anchor" href="#models" id="user-content-models"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>models</h2>
<p>models 主要处理产品业务逻辑。model 层又分3层: pageService, dataService, dao， 功能如下:</p>
<pre><code>- pageService 负责页面数据逻辑, 被controller,action调用，调用dataService
- dataService 负责业务数据逻辑，被pageService调用，调用dao
- dao 负责数据库相关业务逻辑
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#pageservice" id="user-content-pageservice"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>pageService</h3>
<p>pageService 样例:</p>
<pre><code>var pageService = require('lark/mvc').pageService
var demo = pageService.create('demo')
demo.render = function(){
    var res = ''
    co(function *(){
    var categroy = yield this.dataService.demo.getArticles(this.params.id)
    var articles = yield this.dataService.demo.getArticles(categroy)
    var data = {
        'categroy': categroy,
        'articles': articles
    }
    res = yield this.render('demo.html', data)
    })
    return res
})
module.exports = demo
</code></pre>
<p>action 层调</p>
<pre><code>this.pageService.demo.render() [ok]
this.dataService.demo.getArticles() [no]
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#dataservice" id="user-content-dataservice"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>dataService</h3>
<p>dataService 样例:</p>
<pre><code>var dataService = require('lark/mvc').dataService
var demo = dataService.create('demo')
demo.getData = * function(){
    // get data by dao
    articles = {}
    co (function *(){
        var articles = yeild this.dao.demo.get(this.request.id);
        if articles
    })
    return articles
}

module.exports = demo
</code></pre>
<h3>
<a aria-hidden="true" class="anchor" href="#dao" id="user-content-dao"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>dao</h3>
<p>dao 样例:</p>
<pre><code>var dao = require('lark/mvc').dao
var demo = dao.create('dao')
demo.getData = * function(){
    db = redis.conn()
    data = db.get('test-key')
    return data
}
module.exports = demo
</code></pre>
<p>层之间hook样例：</p>
<pre><code>pageSerice.on('beferDataService', function(params){
    validate(params)
})
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9D%97" id="user-content-通用模块"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>通用模块</h2>
<p>lark 推荐对于一些处理与产品业务逻辑无关的，有完整独立功能的通用模块(比如连接mysql数据库，zookeeper 配置服务等)放在 node_modules 里面，作为node_modules类型的通用模块来处理（而不是放lib里面）。然后可以在package配置 git 地址的方式来入代码库和进行后续升级。(npm 中配置 git 地址作为module更新依据可以看这里 <a href="https://docs.npmjs.com/files/package.json#git-urls-as-dependencies" rel="nofollow">https://docs.npmjs.com/files/package.json#git-urls-as-dependencies</a>) . 示例package.json如下:</p>
<pre><code>{
 "dependencies": {
     "lark": "^1.0.0",
     "bns": "git+http://user@internal.larkjs.org/project/bns.git#3588459", //private module
}
</code></pre>

        </div>

    </div>]