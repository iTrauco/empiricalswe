[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <div>
<div>Table of Contents</div>
<ul>
<li>
<a href="#blob-support">BLOB support</a>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li>
<a href="#implementing-blob-support-an-example">Implementing BLOB support: an example</a>
<ul>
<li><a href="#logic-layer">Logic Layer</a></li>
<li><a href="#service-layer">Service Layer</a></li>
</ul>
</li>
<li><a href="#further-reading">Further Reading</a></li>
</ul>
</li>
</ul>
</div>
<h1 id="user-content-blob-support">
<a aria-hidden="true" class="anchor" href="#blob-support" id="user-content-blob-support"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>BLOB support</h1>
<div>
<h2 id="user-content-introduction">
<a aria-hidden="true" class="anchor" href="#introduction" id="user-content-introduction"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Introduction</h2>
<div>
<div>
<p>BLOB stands for <strong>B</strong>inary <strong>L</strong>arge <strong>Ob</strong>ject. A BLOB may be an image, an office document, ZIP archive or any other multimedia object. OASP4j supports BLOB via its BinaryObject data type. The OASP Maven archetype generates the following Java files for dealing with BLOBs:</p>
</div>
<table>
<colgroup>
<col/>
<col/>
</colgroup>
<tbody>
<tr>
<td><p><code>general.common.api.BinaryObject</code></p></td>
<td><p>Interface for a BinaryObject</p></td>
</tr>
<tr>
<td><p><code>general.dataaccess.api.BinaryObjectEntity</code></p></td>
<td><p>Instance of BinaryObject entity, contains the actual BLOB</p></td>
</tr>
<tr>
<td><p><code>general.dataaccess.api.dao.BinaryObjectDao.java</code></p></td>
<td><p>DAO for BinaryObject entity</p></td>
</tr>
<tr>
<td><p><code>general.dataaccess.base.dao.BinaryObjectDaoImpl</code></p></td>
<td><p>Implemenentation of the BinaryObjectDao</p></td>
</tr>
<tr>
<td><p><code>general.logic.api.to.BinaryObjectEto</code></p></td>
<td><p>ETO for BinaryObject</p></td>
</tr>
<tr>
<td><p><code>general.logic.base.UcManageBinaryObject</code></p></td>
<td><p>Use case for managing BinaryObject. This use case contains methods for finding, getting, deleting and saving a BLOB.</p></td>
</tr>
<tr>
<td><p><code>general.logic.impl.UCManageBinaryObjectImpl</code></p></td>
<td><p>Implemenentation of the UcManageBinaryObject</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h2 id="user-content-implementing-blob-support-an-example">
<a aria-hidden="true" class="anchor" href="#implementing-blob-support-an-example" id="user-content-implementing-blob-support-an-example"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Implementing BLOB support: an example</h2>
<div>
<div>
<p>In the sample application the business component Offermanagement uses BLOBs for product pictures.
Feel free to use the following approach as starting point for BLOB support in your application.</p>
</div>
<div>
<h3 id="user-content-logic-layer">
<a aria-hidden="true" class="anchor" href="#logic-layer" id="user-content-logic-layer"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Logic Layer</h3>
<div>
<p>Use the methods declared in <code>general.logic.base.UcManageBinaryObject</code> in the implementation of your business component.
Letâ€™s take a look at an example from the sample application.</p>
</div>
<div>
<p>The method</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">OffermanagementImpl</span><span class="pl-k">.</span>updateProductPicture(<span class="pl-smi">Long</span> productId, <span class="pl-smi">Blob</span> blob, <span class="pl-smi">BinaryObjectEto</span> binaryObjectEto)</pre></div>
</div>
</div>
<div>
<p>saves a new picture for a given product.</p>
</div>
<div>
<p>This is done by calling an appropriate method, declared in the BinaryObject use case.</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Override</span>
<span class="pl-k">@RolesAllowed</span>(<span class="pl-smi">PermissionConstants</span><span class="pl-c1"><span class="pl-k">.</span>SAVE_PRODUCT_PICTURE</span>)
<span class="pl-k">public</span> <span class="pl-k">void</span> updateProductPicture(<span class="pl-smi">Long</span> productId, <span class="pl-smi">Blob</span> blob, <span class="pl-smi">BinaryObjectEto</span> binaryObjectEto) {

    <span class="pl-c1">...</span>
      binaryObjectEto <span class="pl-k">=</span> getUcManageBinaryObject()<span class="pl-k">.</span>saveBinaryObject(blob, binaryObjectEto);
    <span class="pl-c1">...</span>
 }</pre></div>
</div>
</div>
</div>
<div>
<h3 id="user-content-service-layer">
<a aria-hidden="true" class="anchor" href="#service-layer" id="user-content-service-layer"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Service Layer</h3>
<div>
<p>Following the OASP conventions, you must implement a REST service for each business component. There you define, how BLOBs are uploaded/downloaded. According to that, the REST service for the business component Offermanagement is implemented in a class named OffermanagementRestServiceImpl.</p>
</div>
<div>
<p>The coding examples below are taken from the afore mentioned class.</p>
</div>
<div>
<p>The sample application uses the content-type "multipart/mixed" to transfer pictures plus additional header data.</p>
</div>
<div>
<p><strong>Upload</strong></p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Consumes</span>(<span class="pl-s"><span class="pl-pds">"</span>multipart/mixed<span class="pl-pds">"</span></span>)
<span class="pl-k">@POST</span>
<span class="pl-k">@Path</span>(<span class="pl-s"><span class="pl-pds">"</span>/product/{id}/picture<span class="pl-pds">"</span></span>)
  <span class="pl-k">public</span> <span class="pl-k">void</span> updateProductPicture(<span class="pl-k">@PathParam</span>(<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>) <span class="pl-k">long</span> productId,
      <span class="pl-k">@Multipart</span>(<span class="pl-c1">value</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>binaryObjectEto<span class="pl-pds">"</span></span>, <span class="pl-c1">type</span> <span class="pl-k">=</span> <span class="pl-smi">MediaType</span><span class="pl-c1"><span class="pl-k">.</span>APPLICATION_JSON</span>) <span class="pl-smi">BinaryObjectEto</span> binaryObjectEto,
      <span class="pl-k">@Multipart</span>(<span class="pl-c1">value</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>blob<span class="pl-pds">"</span></span>, <span class="pl-c1">type</span> <span class="pl-k">=</span> <span class="pl-smi">MediaType</span><span class="pl-c1"><span class="pl-k">.</span>APPLICATION_OCTET_STREAM</span>) <span class="pl-smi">InputStream</span> picture)
      throws <span class="pl-smi">SerialException</span>, <span class="pl-smi">SQLException</span>, <span class="pl-smi">IOException</span> {

    <span class="pl-smi">Blob</span> blob <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">SerialBlob</span>(<span class="pl-smi">IOUtils</span><span class="pl-k">.</span>readBytesFromStream(picture));
    <span class="pl-c1">this</span><span class="pl-k">.</span>offerManagement<span class="pl-k">.</span>updateProductPicture(productId, blob, binaryObjectEto);

}</pre></div>
</div>
</div>
<div>
<p>A new Blob object is being created by reading the data (<code>IOUtils.readBytesFromStream(picture)</code>).</p>
</div>
<div>
<p><strong>Download</strong></p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Produces</span>(<span class="pl-s"><span class="pl-pds">"</span>multipart/mixed<span class="pl-pds">"</span></span>)
<span class="pl-k">@GET</span>
<span class="pl-k">@Path</span>(<span class="pl-s"><span class="pl-pds">"</span>/product/{id}/picture<span class="pl-pds">"</span></span>)
<span class="pl-k">public</span> <span class="pl-smi">MultipartBody</span> getProductPicture(<span class="pl-k">@PathParam</span>(<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>) <span class="pl-k">long</span> productId) throws <span class="pl-smi">SQLException</span>, <span class="pl-smi">IOException</span> {

    <span class="pl-smi">Blob</span> blob <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span>offerManagement<span class="pl-k">.</span>findProductPictureBlob(productId);
    <span class="pl-k">byte</span>[] data <span class="pl-k">=</span> <span class="pl-smi">IOUtils</span><span class="pl-k">.</span>readBytesFromStream(blob<span class="pl-k">.</span>getBinaryStream());

    <span class="pl-k">List&lt;<span class="pl-smi">Attachment</span>&gt;</span> atts <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-k">LinkedList&lt;&gt;</span>();
    atts<span class="pl-k">.</span>add(<span class="pl-k">new</span> <span class="pl-smi">Attachment</span>(<span class="pl-s"><span class="pl-pds">"</span>binaryObjectEto<span class="pl-pds">"</span></span>, <span class="pl-smi">MediaType</span><span class="pl-c1"><span class="pl-k">.</span>APPLICATION_JSON</span>, <span class="pl-c1">this</span><span class="pl-k">.</span>offerManagement
        .findProductPicture(productId)));
    atts<span class="pl-k">.</span>add(<span class="pl-k">new</span> <span class="pl-smi">Attachment</span>(<span class="pl-s"><span class="pl-pds">"</span>blob<span class="pl-pds">"</span></span>, <span class="pl-smi">MediaType</span><span class="pl-c1"><span class="pl-k">.</span>APPLICATION_OCTET_STREAM</span>, <span class="pl-k">new</span> <span class="pl-smi">ByteArrayInputStream</span>(data)));
    <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-smi">MultipartBody</span>(atts, <span class="pl-c1">true</span>);
}</pre></div>
</div>
</div>
<div>
<p>As you may have noticed, the data is loaded into the heap before it is added as an Attachement to the MultiPart body.</p>
</div>
<table>
<colgroup>
<col/>
<col/>
</colgroup>
<tbody>
<tr>
<td><p><strong>Caution!</strong></p></td>
<td><p>Using a byte array will cause problems, when dealing with large BLOBs.</p></td>
</tr>
</tbody>
</table>
<div>
<p><strong>Why is the sample application using a byte array then?</strong></p>
</div>
<div>
<p>As of now, there is no universal solid way of streaming a BLOB directly from a database to the client without reading the BLOBâ€™s content to memory, when streaming over a RESTful service based on JDBC and JAX RS.
Following this approach means:  whenever a file is uploaded or downloaded as BLOB it is loaded completely to memory before it is written to the database.</p>
</div>
</div>
</div>
</div>
<div>
<h2 id="user-content-further-reading">
<a aria-hidden="true" class="anchor" href="#further-reading" id="user-content-further-reading"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Further Reading</h2>
<div>
<div>
<ul>
<li>
<p><a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html" rel="nofollow">The multipart content type</a></p>
</li>
<li>
<p><a href="http://cxf.apache.org/docs/jax-rs-multiparts.html" rel="nofollow">JAX-RS : Support for Multiparts</a></p>
</li>
<li>
<p><a href="https://github.com/oasp-forge/oasp4j-wiki/wiki/guide-logic-layer#component-implementation">Component Implementation</a></p>
</li>
<li>
<p><a href="https://github.com/oasp/oasp4j/wiki/guide-dataaccess-layer#blob">BLOBs and the Data Access Layer</a></p>
</li>
<li>
<p><a href="https://www.owasp.org/index.php/Unrestricted_File_Upload" rel="nofollow">Security Vulnerability Unrestricted File Upload</a></p>
</li>
</ul>
</div>
</div>
</div>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow"><img alt="Creative Commons License Agreement" data-canonical-src="http://i.creativecommons.org/l/by-nd/4.0/88x31.png" src="https://camo.githubusercontent.com/171d004f9ccb9199e35ac8ec3d99ede916037a9f/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d6e642f342e302f38387833312e706e67"/></a><br/><span>This documentation</span> is licensed under the <a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow">Creative Commons License (Attribution-NoDerivatives 4.0 International)</a>.</p>

          </div>
        </div>
    </div>]