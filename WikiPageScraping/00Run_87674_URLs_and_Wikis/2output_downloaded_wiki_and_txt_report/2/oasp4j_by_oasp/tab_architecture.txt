[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <div>
<div>Table of Contents</div>
<ul>
<li>
<a href="#architecture">Architecture</a>
<ul>
<li><a href="#key-principles">Key Principles</a></li>
<li><a href="#architecture-principles">Architecture Principles</a></li>
<li>
<a href="#application-architecture">Application Architecture</a>
<ul>
<li><a href="#business-architecture">Business Architecture</a></li>
<li><a href="#technical-architecture">Technical Architecture</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<h1 id="user-content-architecture">
<a aria-hidden="true" class="anchor" href="#architecture" id="user-content-architecture"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Architecture</h1>
<div>
<p>There are many different views on what is summarized by the term <em>architecture</em>. First we introduce the <a href="#key-principles">key principles</a> and <a href="#architecture-principles">architecture principles</a> of the OASP. Then we go into details of the the <a href="#application-architecture">architecture of an application</a>.</p>
</div>
<div>
<h2 id="user-content-key-principles">
<a aria-hidden="true" class="anchor" href="#key-principles" id="user-content-key-principles"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Key Principles</h2>
<div>
<div>
<p>For the OASP we follow these fundamental key principles for all decisions about architecture, design, or choosing standards, libraries, and frameworks:</p>
</div>
<div>
<ul>
<li>
<p><strong>KISS</strong><br/>
Keep it small and simple</p>
</li>
<li>
<p><strong>Open</strong><br/>
Commitment to open standards and solutions (no required dependencies to commercial or vendor-specific standards or solutions)</p>
</li>
<li>
<p><strong>Patterns</strong><br/>
We concentrate on providing patterns, best-practices and examples rather than writing framework code.</p>
</li>
<li>
<p><strong>Solid</strong><br/>
We pick solutions that are established and have proved to be solid and robust in real-live (business) projects.</p>
</li>
</ul>
</div>
</div>
</div>
<div>
<h2 id="user-content-architecture-principles">
<a aria-hidden="true" class="anchor" href="#architecture-principles" id="user-content-architecture-principles"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Architecture Principles</h2>
<div>
<div>
<p>Additionally we define the following principles that our architecture is based on:</p>
</div>
<div>
<ul>
<li>
<p><strong>Component Oriented Design</strong><br/>
We follow a strictly component oriented design to address the following sub-principles:</p>
<div>
<ul>
<li>
<p><a href="http://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow">Separation of Concerns</a></p>
</li>
<li>
<p><a href="http://en.wikipedia.org/wiki/Reusability" rel="nofollow">Reusability</a> and avoiding <a href="http://en.wikipedia.org/wiki/Redundant_code" rel="nofollow">redundant code</a></p>
</li>
<li>
<p><a href="http://en.wikipedia.org/wiki/Information_hiding" rel="nofollow">Information Hiding</a> via component API and its exchangeable implementation treated as secret.</p>
</li>
<li>
<p><em>Design by Contract</em> for self-contained, descriptive, and stable component APIs.</p>
</li>
<li>
<p><a href="#technical-architecture">Layering</a> as well as separation of business logic from technical code for better maintenance.</p>
</li>
<li>
<p><em>Data Sovereignty</em> (and <em>high cohesion with low coupling</em>) says that a component is responsible for its data and changes to this data shall only happen via the component. Otherwise maintenance problems will arise to ensure that data remains consistent. Therefore interfaces of a component that may be used by other components are designed <em>call-by-value</em> and not <em>call-by-reference</em>.</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>Homogeneity</strong><br/>
Solve similar problems in similar ways and establish a uniform <a href="coding-conventions">code-style</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div>
<h2 id="user-content-application-architecture">
<a aria-hidden="true" class="anchor" href="#application-architecture" id="user-content-application-architecture"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Application Architecture</h2>
<div>
<div>
<p>For the architecture of an application we distinguish the following views:</p>
</div>
<div>
<ul>
<li>
<p>The <a href="#business-architecture">Business Architecture</a> describes an application from the business perspective. It divides the application into business components and with full abstraction of technical aspects.</p>
</li>
<li>
<p>The <a href="#technical-architecture">Technical Architecture</a> describes an application from the technical implementation perspective. It divides the application into technical layers and defines which technical products and frameworks are used to support these layers.</p>
</li>
<li>
<p>The Infrastructure Architecture describes an application from the operational infrastructure perspective. It defines the nodes used to run the application including clustering, load-balancing and networking. This view is not explored further in this guide.</p>
</li>
</ul>
</div>
<div>
<h3 id="user-content-business-architecture">
<a aria-hidden="true" class="anchor" href="#business-architecture" id="user-content-business-architecture"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Business Architecture</h3>
<div>
<p>The <em>business architecture</em> divides the application into <em>business components</em>. A business component has a well-defined responsibility that it encapsulates. All aspects related to that responsibility have to be implemented within that business component. Further the business architecture defines the dependencies between the business components. These dependencies need to be free of cycles. A business component exports his functionality via well-defined interfaces as a self-contained API. A business component may use another business component via its API and compliant with the dependencies defined by the business architecture.</p>
</div>
<div>
<p>As the business domain and logic of an application can be totally different, the OASP can not define a standardized business architecture. Depending on the business domain it has to be defined from scratch or from a domain reference architecture template. For very small systems it may be suitable to define just a single business component containing all the code.</p>
</div>
</div>
<div>
<h3 id="user-content-technical-architecture">
<a aria-hidden="true" class="anchor" href="#technical-architecture" id="user-content-technical-architecture"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Technical Architecture</h3>
<div>
<p>The <em>technical architecture</em> divides the application into technical <em>layers</em> based on the <a href="http://en.wikipedia.org/wiki/Multilayered_architecture" rel="nofollow">multilayered architecture</a>. A layer is a unit of code with the same category such as service or presentation logic. A layer is therefore often supported by a technical framework. Each business component can therefore be split into <em>component parts</em> for each layer. However, a business component may not have component parts for every layer (e.g. only a presentation part that utilized logic from other components).</p>
</div>
<div>
<p>An overview of the technical reference architecture of the OASP is given by <a href="#img-t-architecture">figure "Technical Reference Architecture"</a>.
It defines the following layers visualized as horizontal boxes:</p>
</div>
<div>
<ul>
<li>
<p><a href="guide-client-layer">client layer</a> for the front-end (GUI).</p>
</li>
<li>
<p><a href="guide-service-layer">service layer</a> for the services used to expose functionality of the
back-end to the client or other consumers.</p>
</li>
<li>
<p><a href="guide-batch-layer">batch layer</a> for exposing functionality in batch-processes (e.g. mass imports).</p>
</li>
<li>
<p><a href="guide-logic-layer">logic layer</a> for the business logic.</p>
</li>
<li>
<p><a href="guide-dataaccess-layer">data-access layer</a> for the data access (esp. persistence).</p>
</li>
</ul>
</div>
<div>
<p>Also you can see the (business) components as vertical boxes (e.g. <em>A</em> and <em>X</em>) and how they are composed out of component parts each one assigned to one of the technical layers.</p>
</div>
<div>
<p>Further, there are technical components for cross-cutting aspects grouped by the gray box on the left. Here is a complete list:</p>
</div>
<div>
<ul>
<li>
<p><a href="guide-security">Security</a></p>
</li>
<li>
<p><a href="guide-logging">Logging</a></p>
</li>
<li>
<p><a href="guide-monitoring">Monitoring</a></p>
</li>
<li>
<p><a href="guide-transactions">Transaction-Handling</a></p>
</li>
<li>
<p><a href="guide-exceptions">Exception-Handling</a></p>
</li>
<li>
<p><a href="guide-i18n">Internationalization</a></p>
</li>
<li>
<p><a href="guide-dependency-injection">Dependency-Injection</a></p>
</li>
</ul>
</div>
<div>
<div>
<img alt="Technical architecture" src="images/t-architecture.png" width="450"/>
</div>
<div>Figure 1. Technical Reference Architecture</div>
</div>
<div>
<p>We reflect this architecture in our code as described in our <a href="coding-conventions#packages">coding conventions</a> allowing a traceability of business components, use-cases, layers, etc. into the code and giving
developers a sound orientation within the project.</p>
</div>
<div>
<p>Further, the architecture diagram shows the allowed dependencies illustrated by the dark green connectors.
Within a business component a component part can call the next component part on the layer directly below via a dependency on its API (vertical connectors).
While this is natural and obvious it is generally forbidden to have dependencies upwards the layers
or to skip a layer by a direct dependency on a component part two or more layers below.
The general dependencies allowed between business components are defined by the <a href="#business-architecture">business architecture</a>.
In our reference architecture diagram we assume that the business component <code>X</code> is allowed to depend
on component <code>A</code>. Therefore a use-case within the logic component part of <code>X</code> is allowed to call a
use-case from <code>A</code> via a dependency on the component API. The same applies for dialogs on the client layer.
This is illustrated by the horizontal connectors. Please note that <a href="guide-dataaccess-layer#entity">persistence entities</a> are part of the API of the data-access component part so only the logic component part of the same
business component may depend on them.</p>
</div>
<div>
<p>The technical architecture has to address non-functional requirements:</p>
</div>
<div>
<ul>
<li>
<p><strong>scalability</strong><br/>
is established by keeping state in the client and making the server state-less (except for login session). Via load-balancers new server nodes can be added to improve performance (horizontal scaling).</p>
</li>
<li>
<p><strong>availability</strong> and <strong>reliability</strong><br/>
are addressed by clustering with redundant nodes avoiding any single-point-of failure. If one node fails the system is still available. Further the software has to be robust so there are no dead-locks or other bad effects that can make the system unavailable or not reliable.</p>
</li>
<li>
<p><strong>security</strong><br/>
is archived in the OASP by the right templates and best-practices that avoid vulnerabilities. See <a href="guide-security">security guidelines</a> for further details.</p>
</li>
<li>
<p><strong>performance</strong><br/>
is obtained by choosing the right products and proper configurations. While the actual implementation of the application matters for performance a proper design is important as it is the key to allow performance-optimizations (see e.g. <a href="guide-caching">caching</a>).</p>
</li>
</ul>
</div>
<div>
<h4 id="user-content-technology-stack">
<a aria-hidden="true" class="anchor" href="#technology-stack" id="user-content-technology-stack"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Technology Stack</h4>
<div>
<p>The technology stack of the OASP is illustrated by the following table.</p>
</div>
<table>
<caption>Table 1. Technology Stack of OASP</caption>
<colgroup>
<col/>
<col/>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th><strong>Topic</strong></th>
<th><strong>Detail</strong></th>
<th><strong>Standard</strong></th>
<th><strong>Suggested implementation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><p>runtime</p></td>
<td><p>language &amp; VM</p></td>
<td><p>Java</p></td>
<td><p>Oracle JDK</p></td>
</tr>
<tr>
<td><p>runtime</p></td>
<td><p>servlet-container</p></td>
<td><p>JEE</p></td>
<td><p><a href="http://tomcat.apache.org/" rel="nofollow">tomcat</a></p></td>
</tr>
<tr>
<td><p><a href="guide-dependency-injection">component management</a></p></td>
<td><p>dependency injection</p></td>
<td><p><a href="https://jcp.org/en/jsr/detail?id=330" rel="nofollow">JSR330</a> &amp; <a href="https://jcp.org/en/jsr/detail?id=250" rel="nofollow">JSR250</a></p></td>
<td><p><a href="http://spring.io/" rel="nofollow">spring</a></p></td>
</tr>
<tr>
<td><p><a href="guide-configuration">configuration</a></p></td>
<td><p>framework</p></td>
<td><p>-</p></td>
<td><p><a href="http://projects.spring.io/spring-boot/" rel="nofollow">spring-boot</a></p></td>
</tr>
<tr>
<td><p><a href="guide-dataaccess-layer">persistence</a></p></td>
<td><p>OR-mapper</p></td>
<td><p><a href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html" rel="nofollow">JPA</a></p></td>
<td><p><a href="http://hibernate.org/orm/" rel="nofollow">hibernate</a></p></td>
</tr>
<tr>
<td><p><a href="guide-batch-layer">batch</a></p></td>
<td><p>framework</p></td>
<td><p><a href="https://jcp.org/en/jsr/detail?id=352" rel="nofollow">JSR352</a></p></td>
<td><p><a href="http://projects.spring.io/spring-batch/" rel="nofollow">spring-batch</a></p></td>
</tr>
<tr>
<td><p><a href="guide-service-layer">service</a></p></td>
<td><p><a href="guide-service-layer#soap">SOAP services</a></p></td>
<td><p><a href="https://jcp.org/en/jsr/detail?id=224" rel="nofollow">JAX-WS</a></p></td>
<td><p><a href="http://cxf.apache.org/" rel="nofollow">CXF</a></p></td>
</tr>
<tr>
<td><p><a href="guide-service-layer">service</a></p></td>
<td><p><a href="guide-service-layer#rest">REST services</a></p></td>
<td><p><a href="https://jax-rs-spec.java.net/" rel="nofollow">JAX-RS</a></p></td>
<td><p><a href="http://cxf.apache.org/" rel="nofollow">CXF</a></p></td>
</tr>
<tr>
<td><p><a href="guide-logging">logging</a></p></td>
<td><p>framework</p></td>
<td><p><a href="http://www.slf4j.org/" rel="nofollow">slf4j</a></p></td>
<td><p><a href="http://logback.qos.ch/" rel="nofollow">logback</a></p></td>
</tr>
<tr>
<td><p><a href="guide-validation">validation</a></p></td>
<td><p>framework</p></td>
<td><p><a href="http://beanvalidation.org/" rel="nofollow">beanvalidation/JSR303</a></p></td>
<td><p><a href="http://hibernate.org/validator/" rel="nofollow">hibernate-validator</a></p></td>
</tr>
<tr>
<td><p><a href="guide-security">security</a></p></td>
<td><p>Authentication &amp; Authorization</p></td>
<td><p><a href="http://www.oracle.com/technetwork/java/javase/jaas/index.html" rel="nofollow">JAAS</a></p></td>
<td><p><a href="http://projects.spring.io/spring-security/" rel="nofollow">spring-security</a></p></td>
</tr>
<tr>
<td><p><a href="guide-monitoring">monitoring</a></p></td>
<td><p>framework</p></td>
<td><p><a href="http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html" rel="nofollow">JMX</a></p></td>
<td><p><a href="http://spring.io/" rel="nofollow">spring</a></p></td>
</tr>
<tr>
<td><p><a href="guide-monitoring">monitoring</a></p></td>
<td><p>HTTP Bridge</p></td>
<td><p>HTTP &amp; JSON</p></td>
<td><p><a href="http://www.jolokia.org" rel="nofollow">jolokia</a></p></td>
</tr>
<tr>
<td><p><a href="guide-aop">AOP</a></p></td>
<td><p>framework</p></td>
<td><p><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Proxy.html" rel="nofollow">dynamic proxies</a></p></td>
<td><p><a href="http://docs.spring.io/autorepo/docs/spring/3.0.6.RELEASE/spring-framework-reference/html/aop.html" rel="nofollow">spring AOP</a></p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow"><img alt="Creative Commons License Agreement" data-canonical-src="http://i.creativecommons.org/l/by-nd/4.0/88x31.png" src="https://camo.githubusercontent.com/171d004f9ccb9199e35ac8ec3d99ede916037a9f/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d6e642f342e302f38387833312e706e67"/></a><br/><span>This documentation</span> is licensed under the <a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow">Creative Commons License (Attribution-NoDerivatives 4.0 International)</a>.</p>

          </div>
        </div>
    </div>]