[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <div>
<div>Table of Contents</div>
<ul>
<li>
<a href="#decision-sheet-for-choosing-a-service-framework">Decision Sheet for Choosing a Service Framework</a>
<ul>
<li><a href="#rest-services">REST Services</a></li>
<li><a href="#webservices">WebServices</a></li>
</ul>
</li>
</ul>
</div>

<h1 id="user-content-decision-sheet-for-choosing-a-service-framework">
<a aria-hidden="true" class="anchor" href="#decision-sheet-for-choosing-a-service-framework" id="user-content-decision-sheet-for-choosing-a-service-framework"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Decision Sheet for Choosing a Service Framework</h1>
<div>
<p>We need to choose which framework(s) we are using to build services. For the OASP we focus on a standard API if available. However, we also want to recommend an implementation to use. While projects would still be able to choose whatever they want, we want to suggest the best, most robust and established solution. This way projects do not have to worry about the decision and can rely on a production ready framework without getting into trouble. Also besides the standard the configuration of the implementation framework differs and we want to give instructions how to do this in the documentation and by our sample application. This is why in the end the implementation also matters. If a project has a customer demand to use something else then the project has to take care of this. We will always suggest and "support" ONE solution.</p>
</div>
<div>
<h2 id="user-content-rest-services">
<a aria-hidden="true" class="anchor" href="#rest-services" id="user-content-rest-services"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>REST Services</h2>
<div>
<div>
<p>For REST services we rely on the JAX-RS standard (and NOT on spring-mvc with its proprietary annotations).
As JAX-RS implementation had Jersey (Reference-Implementation) and Apache CXF on the short-list. As it turned out, Jersey is build for HK2 and the spring integration is rather a quickfix. So we ran into bugs when we used it with spring. There are various issues open in the jersey tracker related to this. E.g. <a href="https://java.net/jira/browse/JERSEY-2112" rel="nofollow">https://java.net/jira/browse/JERSEY-2112</a>
For Apache CXF the spring container was first choice but container abstraction has been properly introduced by design so it can be used in JEE application servers. Everything works smooth in our sample application and we collected feedback from various projects doing JAX-RS based on CXF either with XML or JSON with success in production.</p>
</div>
<div>
<p>Therefore we decided for Apache CXF here.</p>
</div>
</div>
</div>
<div>
<h2 id="user-content-webservices">
<a aria-hidden="true" class="anchor" href="#webservices" id="user-content-webservices"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>WebServices</h2>
<div>
<div>
<p>For WebServices we rely on the JAX-WS standard. On our short list we have <a href="https://metro.java.net" rel="nofollow">Metro2</a> and <a href="http://cxf.apache.org" rel="nofollow">Apache CXF</a>. Here a collection of facts and considerations:</p>
</div>
<table>
<caption>Table 1. Decision for JAX-WS implementation</caption>
<colgroup>
<col/>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th></th>
<th><strong>Metro2</strong></th>
<th><strong>Apache CXF</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><p><strong>Pro</strong></p></td>
<td><p>- reference implementation<br/>
- proven in many projects<br/>
- standard in RF</p></td>
<td><p>- supports both JAX-WS and JAX-RS therefore consistent configuration, single integration into servlet-container and spring<br/>
- proven in a lot of projects<br/>
- already chosen by OASP for JAX-RS (so we already have a JAX-WS implementation on board).</p></td>
</tr>
<tr>
<td><p><strong>Contra</strong></p></td>
<td><p>- We expect trouble if use the planned URL path scheme &lt;app&gt;/services/(rest|ws)/... as CXF and Metro2 would both occupy services/*<br/>
- ugly endorsed trouble and small spring-integration issues with WSDL/XSD link resolution (input from Martin Girschik)</p></td>
<td><p>- IMHO currently used in less projects than metro2 so less existing experience<br/></p></td>
</tr>
</tbody>
</table>
<div>
<p>See also
<a href="http://predic8.de/axis2-cxf-jax-ws-vergleich.htm" rel="nofollow">http://predic8.de/axis2-cxf-jax-ws-vergleich.htm</a>
We also had an evaluation at CSD research on CXF vs. Axis2. vs. Metro that suggested CXF.</p>
</div>
<div>
<p>BTW: Axis(2) is definitely out of discussion for OASP.</p>
</div>
</div>
</div>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow"><img alt="Creative Commons License Agreement" data-canonical-src="http://i.creativecommons.org/l/by-nd/4.0/88x31.png" src="https://camo.githubusercontent.com/171d004f9ccb9199e35ac8ec3d99ede916037a9f/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d6e642f342e302f38387833312e706e67"/></a><br/><span>This documentation</span> is licensed under the <a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow">Creative Commons License (Attribution-NoDerivatives 4.0 International)</a>.</p>

          </div>
        </div>
    </div>]