[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <div>
<div>Table of Contents</div>
<ul>
<li>
<a href="#coding-conventions">Coding Conventions</a>
<ul>
<li><a href="#naming">Naming</a></li>
<li><a href="#packages">Packages</a></li>
<li>
<a href="#code-tasks">Code Tasks</a>
<ul>
<li><a href="#todo">TODO</a></li>
<li><a href="#fixme">FIXME</a></li>
<li><a href="#review">REVIEW</a></li>
</ul>
</li>
<li><a href="#code-documentation">Code-Documentation</a></li>
<li>
<a href="#code-style">Code-Style</a>
<ul>
<li><a href="#blobs">BLOBs</a></li>
<li><a href="#closing-resources">Closing Resources</a></li>
<li><a href="#lambdas-and-streams">Lambdas and Streams</a></li>
<li><a href="#optionals">Optionals</a></li>
<li><a href="#encoding">Encoding</a></li>
<li><a href="#prefer-general-api">Prefer general API</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<h1 id="user-content-coding-conventions">
<a aria-hidden="true" class="anchor" href="#coding-conventions" id="user-content-coding-conventions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Coding Conventions</h1>
<div>
<p>The code should follow general conventions for Java (see <a href="http://www.oracle.com/technetwork/java/namingconventions-139351.html" rel="nofollow">Oracle Naming Conventions</a>, <a href="https://google.github.io/styleguide/javaguide.html" rel="nofollow">Google Java Style</a>, etc.).We consider this as common sense and provide configurations for <a href="http://www.sonarqube.org/" rel="nofollow">SonarQube</a> and related tools such as <a href="http://checkstyle.sourceforge.net/" rel="nofollow">Checkstyle</a> instead of repeating this here.</p>
</div>
<div>
<h2 id="user-content-naming">
<a aria-hidden="true" class="anchor" href="#naming" id="user-content-naming"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Naming</h2>
<div>
<div>
<p>Besides general Java naming conventions, we follow the additional rules listed here explicitly:</p>
</div>
<div>
<ul>
<li>
<p>Always use short but speaking names (for types, methods, fields, parameters, variables, constants, etc.).</p>
</li>
<li>
<p>Avoid having duplicate type names. The name of a class, interface, enum or annoation should be unique within your project unless this is intentionally desired in a special and reasonable situation.</p>
</li>
<li>
<p>Avoid artificial naming constructs such as prefixes (<code>I*</code>) or suffixes (<code>*IF</code>) for interfaces.</p>
</li>
<li>
<p>Use CamlCase even for abbreviations (<code>XmlUtil</code> instead of <code>XMLUtil</code>)</p>
</li>
<li>
<p>Names of Generics should be easy to understand. Where suitable follow the common rule <code>E=Element</code>, <code>T=Type</code>, <code>K=Key</code> but feel free to use longer names for more specific cases such as <code>ID</code>, <code>DTO</code> or <code>ENTITY</code>. The capitalized naming helps to distinguish a generic type from a regular class.</p>
</li>
</ul>
</div>
</div>
</div>
<div>
<h2 id="user-content-packages">
<a aria-hidden="true" class="anchor" href="#packages" id="user-content-packages"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Packages</h2>
<div>
<div>
<p>Java Packages are the most important element to structure your code. We use a strict packaging convention to map technical layers and business components (slices) to the code (See <a href="architecture#technical-architecture">technical architecture</a> for further details). By using the same names in documentation and code we create a strong link that gives orientation and makes it easy to find from business requirements, specifications or story tickets into the code and back. Further we can use tools such as <a href="http://www.sonarqube.org/" rel="nofollow">SonarQube</a> and <a href="http://www.hello2morrow.com/products/sonargraph" rel="nofollow">SonarGraph</a> to verify architectural rules.</p>
</div>
<div>
<p>For an OASP based application we use the following Java-Package schema:</p>
</div>
<div>
<div>
<pre><code>&lt;rootpackage&gt;.&lt;application&gt;.&lt;component&gt;.&lt;layer&gt;.&lt;scope&gt;[.&lt;detail&gt;]*</code></pre>
</div>
</div>
<div>
<p>E.g. in our example application we find the DAO interfaces for the <code>salesmanagement</code> component in the package <code>io.oasp.gastronomy.restaurant.salesmanagement.dataaccess.api.dao</code></p>
</div>
<table>
<caption>Table 1. Segments of package schema</caption>
<colgroup>
<col/>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th><strong>Segment</strong></th>
<th><strong>Description</strong></th>
<th><strong>Example</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><p>&lt;rootpackage&gt;</p></td>
<td><p>Is the basic Java Package name-space of the organization or IT project owning the code following common Java Package conventions. Consists of multiple segments corresponding to the Internet domain of the organization.</p></td>
<td><p><code>io.oasp.gastronomy</code></p></td>
</tr>
<tr>
<td><p>&lt;application&gt;</p></td>
<td><p>The name of the application build in this project.</p></td>
<td><p><code>restaurant</code></p></td>
</tr>
<tr>
<td><p>&lt;component&gt;</p></td>
<td><p>The (business) component the code belongs to. It is defined by the business architecture and uses terms from the business domain. Use the implicit component <code>general</code> for code not belonging to a specific component (foundation code).</p></td>
<td><p><code>salesmanagement</code></p></td>
</tr>
<tr>
<td><p>&lt;layer&gt;</p></td>
<td><p>The name of the technical layer (See <a href="architecture">technical architecture</a>) which is one of the predefined layers (<code>dataaccess</code>, <code>logic</code>, <code>service</code>, <code>batch</code>, <code>gui</code>, <code>client</code>) or <code>common</code> for code not assigned to a technical layer (datatypes, cross-cutting concerns).</p></td>
<td><p><code>dataaccess</code></p></td>
</tr>
<tr>
<td><p>&lt;scope&gt;</p></td>
<td><p>The scope which is one of <code>api</code> (official API to be used by other layers or components),<code>base</code> (basic code to be reused by other implementations) and <code>impl</code> (implementation that should never be imported from outside)</p></td>
<td><p><code>api</code></p></td>
</tr>
<tr>
<td><p>&lt;detail&gt;</p></td>
<td><p>Here you are free to further divide your code into sub-components and other concerns according to the size of your component part.</p></td>
<td><p><code>dao</code></p></td>
</tr>
</tbody>
</table>
<div>
<p>Please note that for library modules where we use <code>io.oasp.module</code> as <code>&lt;basepackage&gt;</code> and the name of the module as <code>&lt;component&gt;</code>. E.g. the API of our <code>beanmapping</code> module can be found in the package <code>io.oasp.module.beanmapping.common.api</code>.</p>
</div>
</div>
</div>
<div>
<h2 id="user-content-code-tasks">
<a aria-hidden="true" class="anchor" href="#code-tasks" id="user-content-code-tasks"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Code Tasks</h2>
<div>
<div>
<p>Code spots that need some rework can be marked with the following tasks tags. These are already properly pre-configured in your development environment for auto completion and to view tasks you are responsible for. It is important to keep the number of code tasks low. Therefore every member of the team should be responsible for the overall code quality. So if you change a piece of code and hit a code task that you can resolve in a reliable way do this as part of your change and remove the according tag.</p>
</div>
<div>
<h3 id="user-content-todo">
<a aria-hidden="true" class="anchor" href="#todo" id="user-content-todo"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>TODO</h3>
<div>
<p>Used to mark a piece of code that is not yet complete (typically because it can not be completed due to a dependency on something that is not ready).</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre> <span class="pl-c"><span class="pl-c">//</span> TODO &lt;author&gt; &lt;description&gt;</span></pre></div>
</div>
</div>
<div>
<p>A TODO tag is added by the author of the code who is also responsible for completing this task.</p>
</div>
</div>
<div>
<h3 id="user-content-fixme">
<a aria-hidden="true" class="anchor" href="#fixme" id="user-content-fixme"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>FIXME</h3>
<div>
<div>
<div class="highlight highlight-source-java"><pre> <span class="pl-c"><span class="pl-c">//</span> FIXME &lt;author&gt; &lt;description&gt;</span></pre></div>
</div>
</div>
<div>
<p>A FIXME tag is added by the author of the code or someone who found a bug he can not fix right now. The &lt;author&gt; who added the FIXME is also responsible for completing this task. This is very similar to a TODO but with a higher priority. FIXME tags indicate problems that should be resolved before a release is completed while TODO tags might have to stay for a longer time.</p>
</div>
</div>
<div>
<h3 id="user-content-review">
<a aria-hidden="true" class="anchor" href="#review" id="user-content-review"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>REVIEW</h3>
<div>
<div>
<div class="highlight highlight-source-java"><pre> <span class="pl-c"><span class="pl-c">//</span> REVIEW &lt;responsible&gt; (&lt;reviewer&gt;) &lt;description&gt;</span></pre></div>
</div>
</div>
<div>
<p>A REVIEW tag is added by a reviewer during a code review. Here the original author of the code is responsible to resolve the REVIEW tag and the reviewer is assigning this task to him. This is important for feedback and learning and has to be aligned with a review "process" where people talk to each other and get into discussion. In smaller or local teams a peer-review is preferable but this does not scale for large or even distributed teams.</p>
</div>
</div>
</div>
</div>
<div>
<h2 id="user-content-code-documentation">
<a aria-hidden="true" class="anchor" href="#code-documentation" id="user-content-code-documentation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Code-Documentation</h2>
<div>
<div>
<p>As a general goal the code should be easy to read and understand. Besides clear naming the documentation is important. We follow these rules:</p>
</div>
<div>
<ul>
<li>
<p>APIs (especially component interfaces) are properly documented with JavaDoc.</p>
</li>
<li>
<p>JavaDoc shall provide actual value - we do not write JavaDoc to satisfy tools such as checkstyle but to express information not already available in the signature.</p>
</li>
<li>
<p>We make use of <code>{@link}</code> tags in JavaDoc to make it more expressive.</p>
</li>
<li>
<p>JavaDoc of APIs describes how to use the type or method and not how the implementation internally works.</p>
</li>
<li>
<p>To document implementation details, we use code comments (e.g. <code>// we have to flush explicitly to ensure version is up-to-date</code>). This is only needed for complex logic.</p>
</li>
</ul>
</div>
</div>
</div>
<div>
<h2 id="user-content-code-style">
<a aria-hidden="true" class="anchor" href="#code-style" id="user-content-code-style"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Code-Style</h2>
<div>
<div>
<p>This section gives you best practices to write better code and avoid pitfalls and mistakes.</p>
</div>
<div>
<h3 id="user-content-blobs">
<a aria-hidden="true" class="anchor" href="#blobs" id="user-content-blobs"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>BLOBs</h3>
<div>
<p>Avoid using <code>byte[]</code> for BLOBs as this will load them entirely into your memory. This will cause performance issues or out of memory errors. Instead use streams when dealing with BLOBs. For further details see <a href="guide-blob-support">BLOB support</a>.</p>
</div>
</div>
<div>
<h3 id="user-content-closing-resources">
<a aria-hidden="true" class="anchor" href="#closing-resources" id="user-content-closing-resources"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Closing Resources</h3>
<div>
<p>Resources such as streams (<code>InputStream</code>, <code>OutputStream</code>, <code>Reader</code>, <code>Writer</code>) or transactions need to be handled properly. Therefore it is important to follow these rules:</p>
</div>
<div>
<ul>
<li>
<p>Each resource has to be closed properly, otherwise you will get out of file handles, TX sessions, memory leaks or the like</p>
</li>
<li>
<p>Where possible avoid to deal with such resources manually. That is why we are recommending <code>@Transactional</code> for transactions in OASP (see <a href="guide-transactions">Transaction Handling</a>).</p>
</li>
<li>
<p>In case you have to deal with resources manually (e.g. binary streams) ensure to close them properly. See the example below for details.</p>
</li>
</ul>
</div>
<div>
<p>Closing streams and other such resources is error prone. Have a look at the following example:</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">try</span> {
  <span class="pl-smi">InputStream</span> in <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">FileInputStream</span>(file);
  readData(in);
  in<span class="pl-k">.</span>close();
} <span class="pl-k">catch</span> (<span class="pl-smi">IOException</span> e) {
  <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">RuntimeIoException</span>(e, <span class="pl-smi">IoMode</span><span class="pl-c1"><span class="pl-k">.</span>READ</span>);
}</pre></div>
</div>
</div>
<div>
<p>The code above is wrong as in case of an <code>IOException</code> the <code>InputStream</code> is not properly closed. In a server application such mistakes can cause severe errors that typically will only occur in production. As such resources implement the <code>AutoCloseable</code> interface you can use the <code>try-with-resource</code> syntax to write correct code. The following code shows a correct version of the example:</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">try</span> (<span class="pl-smi">InputStream</span> in <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">FileInputStream</span>(file)) {
  readData(in);
} <span class="pl-k">catch</span> (<span class="pl-smi">IOException</span> e) {
  <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">RuntimeIoException</span>(e, <span class="pl-smi">IoMode</span><span class="pl-c1"><span class="pl-k">.</span>READ</span>);
}</pre></div>
</div>
</div>
</div>
<div>
<h3 id="user-content-lambdas-and-streams">
<a aria-hidden="true" class="anchor" href="#lambdas-and-streams" id="user-content-lambdas-and-streams"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Lambdas and Streams</h3>
<div>
<p>With Java8 you have cool new feautres like lambdas and monads like (<code>Stream</code>, <code>CompletableFuture</code>, <code>Optional</code>, etc.).
However, these new features can also be misused or lead to code that is hard to read or debug. To avoid pain, we give you the following best practices:</p>
</div>
<div>
<ol>
<li>
<p>Learn how to use the new features properly before using. Often developers are keen on using cool new features. When you do your first experiments in your project code you will cause deep pain and might be ashamed afterwards. Please study the features properly. Even Java8 experts still write for loops to iterate over collections, so only use these features where it really makes sense.</p>
</li>
<li>
<p>Streams shall only be used in fluent API calls as a Stream can not be forked or reused.</p>
</li>
<li>
<p>Each stream has to have exactly one terminal operation.</p>
</li>
<li>
<p>Do not write multiple statements into lambda code:</p>
<div>
<div>
<div class="highlight highlight-source-java"><pre>collection<span class="pl-k">.</span>stream()<span class="pl-k">.</span>map(x <span class="pl-k">-</span><span class="pl-k">&gt;</span> {
<span class="pl-smi">Foo</span> foo <span class="pl-k">=</span> doSomething(x);
<span class="pl-c1">...</span>
<span class="pl-k">return</span> foo;
})<span class="pl-k">.</span>collect(<span class="pl-smi">Collectors</span><span class="pl-k">.</span>toList());</pre></div>
</div>
</div>
<div>
<p>This style makes the code hard to read and debug. Never do that! Instead extract the lambda body to a private method with a meaningful name:</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre>collection<span class="pl-k">.</span>stream()<span class="pl-k">.</span>map(<span class="pl-c1">this</span><span class="pl-k">::</span>convertToFoo)<span class="pl-k">.</span>collect(<span class="pl-smi">Collectors</span><span class="pl-k">.</span>toList());</pre></div>
</div>
</div>
</li>
<li>
<p>Do not use <code>parallelStream()</code> in general code (that will run on server side) unless you know exactly what you are doing and what is going on under the hood. Some developers might think that using parallel streams is a good idea as it will make the code faster. However, if you want to do performance optimizations talk to your technical lead (architect). Many features such as security and transactions will rely on contextual information that is associated with the current thread. Hence, using parallel streams will most probably cause serious bugs. Only use them for standalone (CLI) applications or for code that is just processing large amounts of data.</p>
</li>
<li>
<p>Do not perform operations on a sub-stream inside a lambda:</p>
<div>
<div>
<div class="highlight highlight-source-java"><pre>set<span class="pl-k">.</span>stream()<span class="pl-k">.</span>flatMap(x <span class="pl-k">-</span><span class="pl-k">&gt;</span> x<span class="pl-k">.</span>getChildren()<span class="pl-k">.</span>stream()<span class="pl-k">.</span>filter(<span class="pl-c1">this</span><span class="pl-k">::</span>isSpecial))<span class="pl-k">.</span>collect(<span class="pl-smi">Collectors</span><span class="pl-k">.</span>toList()); <span class="pl-c"><span class="pl-c">//</span> bad</span>
set<span class="pl-k">.</span>stream()<span class="pl-k">.</span>flatMap(x <span class="pl-k">-</span><span class="pl-k">&gt;</span> x<span class="pl-k">.</span>getChildren()<span class="pl-k">.</span>stream())<span class="pl-k">.</span>filter(<span class="pl-c1">this</span><span class="pl-k">::</span>isSpecial)<span class="pl-k">.</span>collect(<span class="pl-smi">Collectors</span><span class="pl-k">.</span>toList()); <span class="pl-c"><span class="pl-c">//</span> fine</span></pre></div>
</div>
</div>
</li>
<li>
<p>Only use <code>collect</code> at the end of the stream:</p>
<div>
<div>
<div class="highlight highlight-source-java"><pre>set<span class="pl-k">.</span>stream()<span class="pl-k">.</span>collect(<span class="pl-smi">Collectors</span><span class="pl-k">.</span>toList())<span class="pl-k">.</span>forEach(<span class="pl-c1">...</span>) <span class="pl-c"><span class="pl-c">//</span> bad</span>
set<span class="pl-k">.</span>stream()<span class="pl-k">.</span>peek(<span class="pl-c1">...</span>)<span class="pl-k">.</span>collect(<span class="pl-smi">Collectors</span><span class="pl-k">.</span>toList()) <span class="pl-c"><span class="pl-c">//</span> fine</span></pre></div>
</div>
</div>
</li>
<li>
<p>Lambda parameters with Types inference</p>
<div>
<div>
<div class="highlight highlight-source-java"><pre>(a,b,c)  <span class="pl-k">-</span><span class="pl-k">&gt;</span> a<span class="pl-k">.</span>toString() <span class="pl-k">+</span> <span class="pl-smi">Float</span><span class="pl-k">.</span>toString(b) <span class="pl-k">+</span> <span class="pl-smi">Arrays</span><span class="pl-k">.</span>toString(c)  <span class="pl-c"><span class="pl-c">//</span> fine</span>
(<span class="pl-smi">String</span> a, <span class="pl-smi">Float</span> b, <span class="pl-k">Byte</span>[] c) <span class="pl-k">-</span><span class="pl-k">&gt;</span> a<span class="pl-k">.</span>toString() <span class="pl-k">+</span> <span class="pl-smi">Float</span><span class="pl-k">.</span>toString(b) <span class="pl-k">+</span> <span class="pl-smi">Arrays</span><span class="pl-k">.</span>toString(c)  <span class="pl-c"><span class="pl-c">//</span>bad</span>

<span class="pl-smi">Collections</span><span class="pl-k">.</span>sort(personList, (p1, p2) <span class="pl-k">-</span><span class="pl-k">&gt;</span> p1<span class="pl-k">.</span>getSurName()<span class="pl-k">.</span>compareTo(p2<span class="pl-k">.</span>getSurName()));  <span class="pl-c"><span class="pl-c">//</span>fine</span>
<span class="pl-smi">Collections</span><span class="pl-k">.</span>sort(personList, (<span class="pl-smi">Person</span> p1, <span class="pl-smi">Person</span> p2) <span class="pl-k">-</span><span class="pl-k">&gt;</span> p1<span class="pl-k">.</span>getSurName()<span class="pl-k">.</span>compareTo(p2<span class="pl-k">.</span>getSurName()));  <span class="pl-c"><span class="pl-c">//</span>bad</span></pre></div>
</div>
</div>
</li>
<li>
<p>Avoid Return Braces and Statement</p>
<div>
<div>
<div class="highlight highlight-source-java"><pre> (a) <span class="pl-k">-</span><span class="pl-k">&gt;</span>  a<span class="pl-k">.</span>toString();   <span class="pl-c"><span class="pl-c">//</span> fine</span>
 (a) <span class="pl-k">-</span><span class="pl-k">&gt;</span>  { <span class="pl-k">return</span> a<span class="pl-k">.</span>toString(); } <span class="pl-c"><span class="pl-c">//</span>bad</span></pre></div>
</div>
</div>
</li>
<li>
<p>Avoid Parentheses with Single Parameter</p>
<div>
<div>
<div class="highlight highlight-source-java"><pre> a <span class="pl-k">-</span><span class="pl-k">&gt;</span> a<span class="pl-k">.</span>toString();  <span class="pl-c"><span class="pl-c">//</span> fine</span>
(a) <span class="pl-k">-</span><span class="pl-k">&gt;</span> a<span class="pl-k">.</span>toString(); <span class="pl-c"><span class="pl-c">//</span>bad</span></pre></div>
</div>
</div>
</li>
<li>
<p>Avoid if/else inside foreach method. Use Filter method &amp; comprehension</p>
<div>
<div>
<div class="highlight highlight-source-cs"><pre><span class="pl-smi">Bad</span>
<span class="pl-k">static</span> <span class="pl-k">public</span> <span class="pl-en">Iterator</span>&lt;<span class="pl-en">String</span>&gt; <span class="pl-en">TwitterHandles</span>(<span class="pl-en">Iterator</span>&lt;<span class="pl-en">Author</span>&gt; <span class="pl-smi">authors</span>, <span class="pl-k">string</span> <span class="pl-smi">company</span>) {
    <span class="pl-smi">final</span> <span class="pl-en">List</span> <span class="pl-smi">result</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">ArrayList</span>&lt;<span class="pl-en">String</span>&gt; ();
    <span class="pl-k">foreach</span> (<span class="pl-smi">Author</span> <span class="pl-smi">a</span> : <span class="pl-smi">authors</span>) {
      <span class="pl-k">if</span> (<span class="pl-smi">a</span>.<span class="pl-smi">Company</span>.<span class="pl-en">equlas</span>(<span class="pl-smi">company</span>)) {
        <span class="pl-en">String</span> <span class="pl-smi">handle</span> <span class="pl-k">=</span> <span class="pl-smi">a</span>.<span class="pl-smi">TwitterHandle</span>;
        <span class="pl-k">if</span> (<span class="pl-smi">handle</span> <span class="pl-k">!=</span> <span class="pl-c1">null</span>)
          <span class="pl-smi">result</span>.<span class="pl-en">Add</span>(<span class="pl-smi">handle</span>);
      }
    }
    <span class="pl-k">return</span> <span class="pl-smi">result</span>;
  }</pre></div>
</div>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">Fine</span>
<span class="pl-k">public</span> <span class="pl-k">List&lt;<span class="pl-smi">String</span>&gt;</span> twitterHandles(<span class="pl-k">List&lt;<span class="pl-smi">Author</span>&gt;</span> authors, <span class="pl-smi">String</span> company) {
    <span class="pl-k">return</span> authors<span class="pl-k">.</span>stream()
            .filter(a <span class="pl-k">-</span><span class="pl-k">&gt;</span> <span class="pl-c1">null</span> <span class="pl-k">!=</span> a <span class="pl-k">&amp;&amp;</span> a<span class="pl-k">.</span>getCompany()<span class="pl-k">.</span>equals(company))
            .map(a <span class="pl-k">-</span><span class="pl-k">&gt;</span> a<span class="pl-k">.</span>getTwitterHandle())
            .collect(toList());
  }</pre></div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div>
<h3 id="user-content-optionals">
<a aria-hidden="true" class="anchor" href="#optionals" id="user-content-optionals"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Optionals</h3>
<div>
<p>With <code>Optional</code> you can wrap values to avoid a <code>NullPointerException</code> (NPE). However, it is not a good code-style to use <code>Optional</code> for every parameter or result to express that it may be null. For such case use <code>@Nullable</code> or even better instead annotate <code>@NotNull</code> where <code>null</code> is not acceptable.</p>
</div>
<div>
<p>However, <code>Optional</code> can be used to prevent NPEs in fluent calls (due to the lack of the elvis operator):</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">Long</span> id;
id <span class="pl-k">=</span> fooCto<span class="pl-k">.</span>getBar()<span class="pl-k">.</span>getBar()<span class="pl-k">.</span>getId(); <span class="pl-c"><span class="pl-c">//</span> may cause NPE</span>
id <span class="pl-k">=</span> <span class="pl-smi">Optional</span><span class="pl-k">.</span>ofNullable(fooCto)<span class="pl-k">.</span>map(<span class="pl-smi">FooCto</span><span class="pl-k">::</span>getBar)<span class="pl-k">.</span>map(<span class="pl-smi">BarCto</span><span class="pl-k">::</span>getBar)<span class="pl-k">.</span>map(<span class="pl-smi">BarEto</span><span class="pl-k">::</span>getId)<span class="pl-k">.</span>orElse(<span class="pl-c1">null</span>); <span class="pl-c"><span class="pl-c">//</span> null-safe</span></pre></div>
</div>
</div>
</div>
<div>
<h3 id="user-content-encoding">
<a aria-hidden="true" class="anchor" href="#encoding" id="user-content-encoding"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Encoding</h3>
<div>
<p>Encoding (esp. Unicode with combining characters and surrogates) is a complex topic. Please study this topic if you have to deal with encodings and processing of special characters. For the basics follow these recommendations:</p>
</div>
<div>
<ul>
<li>
<p>When you have explicitly decide for an encoding always prefer Unicode (UTF-8 or better). This especially impacts your databases and has to be defined upfront as it typically can not be changed (easily) afterwards.</p>
</li>
<li>
<p>Do not cast from <code>byte</code> to <code>char</code> (Unicode characters can be composed of multiple bytes, such cast may only work for ASCII characters)</p>
</li>
<li>
<p>Never convert the case of a String using the default locale (esp. when writing generic code like in OASP or DevonFW). E.g. if you do <code>"HI".toLowerCase()</code> and your system locale is Turkish, then the output will be "hı" instead of "hi" what can lead to wrong assumptions and serious problems. If you want to do a "universal" case conversion always use explicitly an according western locale (e.g. <code>toLowerCase(Locale.US)</code>). Consider using a library (<a href="https://github.com/m-m-m/util/blob/master/core/src/main/java/net/sf/mmm/util/lang/api/BasicHelper.java">https://github.com/m-m-m/util/blob/master/core/src/main/java/net/sf/mmm/util/lang/api/BasicHelper.java</a>) or create your own little static utility for that in your project.</p>
</li>
<li>
<p>Write your code independent form the default encoding (system property <code>file.encoding</code>) - this will most likely differ in JUnit from production environment</p>
<div>
<ul>
<li>
<p>Always provide an encoding when you create a <code>String</code> from <code>byte[]</code>: <code>new String(bytes, encoding)</code></p>
</li>
<li>
<p>Always provide an encoding when you create a <code>Reader</code> or <code>Writer</code> : <code>new InputStreamReader(inStream, encoding)</code></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div>
<h3 id="user-content-prefer-general-api">
<a aria-hidden="true" class="anchor" href="#prefer-general-api" id="user-content-prefer-general-api"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Prefer general API</h3>
<div>
<p>Avoid unnecessary strong bindings:</p>
</div>
<div>
<ul>
<li>
<p>Do not bind your code to implementations such as <code>Vector</code> or <code>ArrayList</code> instead of <code>List</code></p>
</li>
<li>
<p>In APIs for input (=parameters) always consider to make little assumptions:</p>
<div>
<ul>
<li>
<p>prefer <code>Collection</code> over <code>List</code> or <code>Set</code> where the difference does not matter (e.g. only use <code>Set</code> when you require uniqueness or highly efficient <code>contains</code>)</p>
</li>
<li>
<p>consider prefering <code>Collection&lt;? extends Foo&gt;</code> over <code>Collection&lt;Foo&gt;</code> when <code>Foo</code> is an interface or super-class</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow"><img alt="Creative Commons License Agreement" data-canonical-src="http://i.creativecommons.org/l/by-nd/4.0/88x31.png" src="https://camo.githubusercontent.com/171d004f9ccb9199e35ac8ec3d99ede916037a9f/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d6e642f342e302f38387833312e706e67"/></a><br/><span>This documentation</span> is licensed under the <a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow">Creative Commons License (Attribution-NoDerivatives 4.0 International)</a>.</p>

          </div>
        </div>
    </div>]