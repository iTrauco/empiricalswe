[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <div>
<div>Table of Contents</div>
<ul>
<li>
<a href="#validation">Validation</a>
<ul>
<li>
<a href="#stateless-validation">Stateless Validation</a>
<ul>
<li><a href="#example">Example</a></li>
<li><a href="#gui-integration">GUI-Integration</a></li>
<li><a href="#cross-field-validation">Cross-Field Validation</a></li>
</ul>
</li>
<li><a href="#stateful-validation">Stateful Validation</a></li>
</ul>
</li>
</ul>
</div>
<h1 id="user-content-validation">
<a aria-hidden="true" class="anchor" href="#validation" id="user-content-validation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Validation</h1>
<div>
<p>Validation is about checking syntax and semantics of input data. Invalid data is rejected by the application.
Therefore validation is required in multiple places of an application. E.g. the <a href="guide-client-layer">GUI</a> will do validation for usability reasons to assist the user, early feedback and to prevent unnecessary server requests.
On the server-side validation has to be done for consistency and <a href="guide-security">security</a>.</p>
</div>
<div>
<p>In general we distinguish these forms of validation:</p>
</div>
<div>
<ul>
<li>
<p><em>stateless validation</em> will produce the same result for given input at any time (for the same code/release).</p>
</li>
<li>
<p><em>stateful validation</em> is dependent on other states and can consider the same input data as valid in once case and as invalid in another.</p>
</li>
</ul>
</div>
<div>
<h2 id="user-content-stateless-validation">
<a aria-hidden="true" class="anchor" href="#stateless-validation" id="user-content-stateless-validation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Stateless Validation</h2>
<div>
<div>
<p>For regular, stateless validation we use the JSR303 standard that is also called bean validation (BV).
Details can be found in the <a href="http://beanvalidation.org/1.1/spec/" rel="nofollow">specification</a>.
As implementation we recommend <a href="http://hibernate.org/validator/" rel="nofollow">hibernate-validator</a>.</p>
</div>
<div>
<h3 id="user-content-example">
<a aria-hidden="true" class="anchor" href="#example" id="user-content-example"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Example</h3>
<div>
<p>A description of how to enable BV can be found in the relevant <a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/#validation-beanvalidation" rel="nofollow">Spring documentation</a>. For a quick summary follow these steps:</p>
</div>
<div>
<ul>
<li>
<p>Make sure that hibernate-validator is located in the classpath by adding a dependency to the pom.xml.</p>
</li>
</ul>
</div>
<div>
<div>
<pre>    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
    &lt;/dependency&gt;</pre>
</div>
</div>
<div>
<ul>
<li>
<p>Define Spring beans:</p>
</li>
</ul>
</div>
<div>
<div>
<pre> &lt;bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/&gt;
 &lt;bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor"/&gt;</pre>
</div>
</div>
<div>
<ul>
<li>
<p>Add the @Validated annotation to the implementation (spring bean) to be validated.
For methods to validate go to their declaration and add constraint annotations to the method parameters.</p>
<div>
<ul>
<li>
<p>@Valid annotation to the arguments to validate (if that class itself is annotated with constraints to check).</p>
</li>
<li>
<p>@NotNull for required arguments.</p>
</li>
<li>
<p>Other constraints (e.g. @Size) for generic arguments (e.g. of type String or Integer). However, consider to create <a href="guide-datatype">custom datatypes</a> and avoid adding too much validation logic (especially redundant in multiple places).</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div>
<div><strong>OffermanagementRestServiceImpl.java</strong></div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Validated</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">OffermanagementRestServiceImpl</span> <span class="pl-k">implements</span> <span class="pl-e">RestService</span> {
  <span class="pl-c1">...</span>
  <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">createOffer</span>(<span class="pl-k">@Valid</span> <span class="pl-smi">OfferEto</span> <span class="pl-v">offer</span>) {
  <span class="pl-c1">...</span></pre></div>
</div>
</div>
<div>
<ul>
<li>
<p>Finally add appropriate validation constraint annotations to the fields of the ETO class.</p>
</li>
</ul>
</div>
<div>
<div><strong>OfferEto.java</strong></div>
<div>
<div class="highlight highlight-source-java"><pre>  <span class="pl-k">@NotNegativeMoney</span>
  <span class="pl-k">private</span> <span class="pl-smi">Money</span> currentPrice;</pre></div>
</div>
</div>
<div>
<p>A list with all bean validation constraint annotations available for hibernate-validator can be found <a href="http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#table-spec-constraints" rel="nofollow">here</a>. In addition it is possible to configure custom constraints. Therefor it is neccessary to implement a annotation and a corresponding validator. A description can also be found in the <a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/#validation-beanvalidation-spring-constraints" rel="nofollow">Spring documentation</a> or with more details in the <a href="http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html/validator-customconstraints.html" rel="nofollow">hibernate documentation</a>.</p>
</div>
</div>
<div>
<h3 id="user-content-gui-integration">
<a aria-hidden="true" class="anchor" href="#gui-integration" id="user-content-gui-integration"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>GUI-Integration</h3>
<div>
<p>TODO</p>
</div>
</div>
<div>
<h3 id="user-content-cross-field-validation">
<a aria-hidden="true" class="anchor" href="#cross-field-validation" id="user-content-cross-field-validation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Cross-Field Validation</h3>
<div>
<p>BV has poor support for this. Best practice is to create and use beans for ranges, etc. that solve this. A bean for a range could look like so:</p>
</div>
<div>
<div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">Range</span>&lt;V <span class="pl-k">extends</span> <span class="pl-e">Comparable&lt;<span class="pl-smi">V</span>&gt;</span>&gt; {

  <span class="pl-k">private</span> <span class="pl-smi">V</span> min;
  <span class="pl-k">private</span> <span class="pl-smi">V</span> max;

  <span class="pl-k">public</span> <span class="pl-en">Range</span>(<span class="pl-smi">V</span> <span class="pl-v">min</span>, <span class="pl-smi">V</span> <span class="pl-v">max</span>) {

    <span class="pl-c1">super</span>();
    <span class="pl-k">if</span> ((min <span class="pl-k">!=</span> <span class="pl-c1">null</span>) <span class="pl-k">&amp;&amp;</span> (max <span class="pl-k">!=</span> <span class="pl-c1">null</span>)) {
      <span class="pl-k">int</span> delta <span class="pl-k">=</span> min<span class="pl-k">.</span>compareTo(max);
      <span class="pl-k">if</span> (delta <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {
        <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">ValueOutOfRangeException</span>(<span class="pl-c1">null</span>, min, min, max);
      }
    }
    <span class="pl-c1">this</span><span class="pl-k">.</span>min <span class="pl-k">=</span> min;
    <span class="pl-c1">this</span><span class="pl-k">.</span>max <span class="pl-k">=</span> max;
  }

  <span class="pl-k">public</span> <span class="pl-smi">V</span> <span class="pl-en">getMin</span>() ...
  <span class="pl-k">public</span> <span class="pl-smi">V</span> <span class="pl-en">getMax</span>() ...</pre></div>
</div>
</div>
</div>
</div>
</div>
<div>
<h2 id="user-content-stateful-validation">
<a aria-hidden="true" class="anchor" href="#stateful-validation" id="user-content-stateful-validation"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Stateful Validation</h2>
<div>
<div>
<p>For complex and stateful business validations we do not use BV (possible with groups and context, etc.) but follow KISS and just implement this on the server in a straight forward manner.
An example is the deletion of a table in the example application. Here the state of the table must be checked first:</p>
</div>
<div>
<div><strong>UcManageTableImpl.java</strong></div>
<div>
<div class="highlight highlight-source-java"><pre>  <span class="pl-k">public</span> <span class="pl-k">boolean</span> deleteTable(<span class="pl-smi">Long</span> tableId) {

    <span class="pl-smi">TableEntity</span> table <span class="pl-k">=</span> getTableDao()<span class="pl-k">.</span>find(tableId);
    <span class="pl-k">if</span> (<span class="pl-k">!</span>table<span class="pl-k">.</span>getState()<span class="pl-k">.</span>isFree()) {
      <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">IllegalEntityStateException</span>(table, table<span class="pl-k">.</span>getState());
    }
    getTableDao()<span class="pl-k">.</span>delete(table);
    <span class="pl-k">return</span> <span class="pl-c1">true</span>;
  }</pre></div>
</div>
</div>
<div>
<p>Implementing this small check with BV would be a lot more effort.</p>
</div>
</div>
</div>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow"><img alt="Creative Commons License Agreement" data-canonical-src="http://i.creativecommons.org/l/by-nd/4.0/88x31.png" src="https://camo.githubusercontent.com/171d004f9ccb9199e35ac8ec3d99ede916037a9f/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d6e642f342e302f38387833312e706e67"/></a><br/><span>This documentation</span> is licensed under the <a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow">Creative Commons License (Attribution-NoDerivatives 4.0 International)</a>.</p>

          </div>
        </div>
    </div>]