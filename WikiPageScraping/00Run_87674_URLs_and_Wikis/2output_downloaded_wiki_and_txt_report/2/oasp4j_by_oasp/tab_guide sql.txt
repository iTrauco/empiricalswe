[<div class="wiki-body gollum-asciidoc-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <div>
<div>Table of Contents</div>
<ul>
<li>
<a href="#sql">SQL</a>
<ul>
<li>
<a href="#naming-conventions">Naming Conventions</a>
<ul>
<li><a href="#ddl">DDL</a></li>
<li><a href="#data">Data</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<h1 id="user-content-sql">
<a aria-hidden="true" class="anchor" href="#sql" id="user-content-sql"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>SQL</h1>
<div>
<p>For general guides on dealing or avoiding SQL, preventing SQL-injection, etc. you should study <a href="guide-dataaccess-layer">data-access layer</a>.</p>
</div>
<div>
<h2 id="user-content-naming-conventions">
<a aria-hidden="true" class="anchor" href="#naming-conventions" id="user-content-naming-conventions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Naming Conventions</h2>
<div>
<div>
<p>Here we define naming conventions that you should follow whenever you write SQL files:</p>
</div>
<div>
<ul>
<li>
<p>All SQL-Keywords in UPPER CASE</p>
</li>
<li>
<p>Table names in upper CamlCase (e.g. <code>RestaurantOrder</code>)</p>
</li>
<li>
<p>Column names in camlCase (e.g. <code>drinkState</code>)</p>
</li>
<li>
<p>Indentation should be 2 spaces as suggested by OASP for every format.</p>
</li>
</ul>
</div>
<div>
<h3 id="user-content-ddl">
<a aria-hidden="true" class="anchor" href="#ddl" id="user-content-ddl"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>DDL</h3>
<div>
<p>For DDLs follow these additional guidelines:</p>
</div>
<div>
<ul>
<li>
<p>ID column names without underscore (e.g. <code>tableId</code>)</p>
</li>
<li>
<p>Define columns and constraints inline in the statement to create the table</p>
</li>
<li>
<p>Indent column types so they all start in the same text column</p>
</li>
<li>
<p>Constraints should be named explicitly (to get a reasonable hint error messages) with:</p>
<div>
<ul>
<li>
<p><code>PK_{table}</code> for primary key (name optional here as PK constraint are fundamental)</p>
</li>
<li>
<p><code>FK_{table}_{property}</code> for foreign keys (<code>{table}</code> and <code>{property}</code> are both on the source where the foreign key is defined)</p>
</li>
<li>
<p><code>UC_{table}_{property}[_{propertyN}]*</code> for unique constraints</p>
</li>
<li>
<p><code>CK_{table}_{check}</code> for check constraints (<code>{check}</code> describes the check, if it is defined on a single property it should start with the property).</p>
</li>
</ul>
</div>
</li>
<li>
<p>Databases have hard limitations for names (e.g. 30 characters). If you have to shorten names try to define common abbreviations in your project for according (business) terms. Especially do not just truncate the names at the limit.</p>
</li>
<li>
<p>If possible add comments on table and columns to help DBAs understanding your schema. This is also honored by many tools (not only DBA-tools).</p>
</li>
</ul>
</div>
<div>
<p>Here is a brief example of a DDL:</p>
</div>
<div>
<div>
<div class="highlight highlight-source-sql"><pre><span class="pl-k">CREATE</span> <span class="pl-k">SEQUENCE</span> <span class="pl-en">HIBERNATE_SEQUENCE</span> START WITH <span class="pl-c1">100000000000</span>;

<span class="pl-k">CREATE</span> <span class="pl-k">TABLE</span> <span class="pl-en">RevInfo</span> (
  id            <span class="pl-k">NUMBER</span>(<span class="pl-c1">19</span>),
  <span class="pl-s"><span class="pl-pds">"</span>timestamp<span class="pl-pds">"</span></span>   <span class="pl-k">NUMBER</span>(<span class="pl-c1">19</span>,<span class="pl-c1">0</span>),
  <span class="pl-s"><span class="pl-pds">"</span>user<span class="pl-pds">"</span></span>        <span class="pl-k">VARCHAR2</span>(<span class="pl-c1">255</span> <span class="pl-k">CHAR</span>),
  <span class="pl-k">CONSTRAINT</span> PK_RevInfo_id <span class="pl-k">PRIMARY KEY</span> (id)
);
<span class="pl-k">COMMENT ON TABLE RevInfo is </span><span class="pl-s"><span class="pl-pds">'</span>Table with revisions for audit history<span class="pl-pds">'</span></span>;
<span class="pl-k">COMMENT ON COLUMN RevInfo.id is </span><span class="pl-s"><span class="pl-pds">'</span>Primary key of revision (changing transaction)<span class="pl-pds">'</span></span>;
<span class="pl-k">COMMENT ON COLUMN RevInfo."timestamp" is </span><span class="pl-s"><span class="pl-pds">'</span>Date and time of the change<span class="pl-pds">'</span></span>;
<span class="pl-k">COMMENT ON COLUMN RevInfo."user" is </span><span class="pl-s"><span class="pl-pds">'</span>Login of the user who triggered the change<span class="pl-pds">'</span></span>;

<span class="pl-k">CREATE</span> <span class="pl-k">TABLE</span> <span class="pl-en">StaffMember</span>(
  id                  <span class="pl-k">NUMBER</span>(<span class="pl-c1">19</span>,<span class="pl-c1">0</span>),
  modificationCounter <span class="pl-k">NUMBER</span>(<span class="pl-c1">10</span>,<span class="pl-c1">0</span>) <span class="pl-k">NOT NULL</span>,
  firstname           <span class="pl-k">VARCHAR2</span>(<span class="pl-c1">255</span> <span class="pl-k">CHAR</span>),
  lastname            <span class="pl-k">VARCHAR2</span>(<span class="pl-c1">255</span> <span class="pl-k">CHAR</span>),
  login               <span class="pl-k">VARCHAR2</span>(<span class="pl-c1">255</span> <span class="pl-k">CHAR</span>) <span class="pl-k">NOT NULL</span>,
  role                <span class="pl-k">VARCHAR2</span>(<span class="pl-c1">10</span> <span class="pl-k">CHAR</span>),
  <span class="pl-k">CONSTRAINT</span> PK_StaffMember_id <span class="pl-k">PRIMARY KEY</span> (id),
  <span class="pl-k">CONSTRAINT</span> UK_StaffMember_role UNIQUE (role)
);
<span class="pl-k">COMMENT ON TABLE StaffMember is </span><span class="pl-s"><span class="pl-pds">'</span>The employees of the restaurant<span class="pl-pds">'</span></span>;
...</pre></div>
</div>
</div>
</div>
<div>
<h3 id="user-content-data">
<a aria-hidden="true" class="anchor" href="#data" id="user-content-data"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Data</h3>
<div>
<p>For insert, update, delete, etc. of data SQL scripts should additionally follow these guidelines:</p>
</div>
<div>
<ul>
<li>
<p>Inserts always with the same order of columns in blocks for each table.</p>
</li>
<li>
<p>Insert column values always starting with id, modificationCounter, [dtype, ] …​</p>
</li>
<li>
<p>List columns with fixed length values (boolean, number, enums, etc.) before columns with free text to support alignment of multiple insert statements</p>
</li>
<li>
<p>Pro Tip: Get familiar with column mode of <code>notepad++</code> when editing large blocks of similar insert statements.</p>
</li>
</ul>
</div>
<div>
<div>
<div class="highlight highlight-source-sql"><pre><span class="pl-k">INSERT INTO</span> StaffMember(id, modificationCounter, login, role, firstname, lastname) <span class="pl-k">VALUES</span> (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">'</span>chief<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>CHIEF<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Charly<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Chief<span class="pl-pds">'</span></span>);
<span class="pl-k">INSERT INTO</span> StaffMember(id, modificationCounter, login, role, firstname, lastname) <span class="pl-k">VALUES</span> (<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">'</span>cook<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>COOK<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Carl<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Cook<span class="pl-pds">'</span></span>);
<span class="pl-k">INSERT INTO</span> StaffMember(id, modificationCounter, login, role, firstname, lastname) <span class="pl-k">VALUES</span> (<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">'</span>waiter<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>WAITER<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Willy<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Waiter<span class="pl-pds">'</span></span>);
<span class="pl-k">INSERT INTO</span> StaffMember(id, modificationCounter, login, role, firstname, lastname) <span class="pl-k">VALUES</span> (<span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">'</span>barkeeper<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>BARKEEPER<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Bianca<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Barkeeper<span class="pl-pds">'</span></span>);

<span class="pl-k">INSERT INTO</span> Product(id, modificationCounter, dtype, description) <span class="pl-k">VALUES</span> (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>Meal<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Schnitzel<span class="pl-pds">'</span></span>);
<span class="pl-k">INSERT INTO</span> Product(id, modificationCounter, dtype, description) <span class="pl-k">VALUES</span> (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>Meal<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Goulasch<span class="pl-pds">'</span></span>);
<span class="pl-k">INSERT INTO</span> Product(id, modificationCounter, dtype, description) <span class="pl-k">VALUES</span> (<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>Meal<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Pfifferlinge<span class="pl-pds">'</span></span>);
<span class="pl-k">INSERT INTO</span> Product(id, modificationCounter, dtype, description) <span class="pl-k">VALUES</span> (<span class="pl-c1">4</span>, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>Meal<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Salat<span class="pl-pds">'</span></span>);
<span class="pl-k">INSERT INTO</span> Product(id, modificationCounter, dtype, description) <span class="pl-k">VALUES</span> (<span class="pl-c1">5</span>, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>Meal<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Pizza<span class="pl-pds">'</span></span>);
<span class="pl-k">INSERT INTO</span> Product(id, modificationCounter, dtype, description) <span class="pl-k">VALUES</span> (<span class="pl-c1">6</span>, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>Meal<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Flammkuchen<span class="pl-pds">'</span></span>);
...</pre></div>
</div>
</div>
<div>
<p>See also <a href="guide-database-migration">Database Migrations</a>.</p>
</div>
</div>
</div>
</div>
        </div>

        <div class="wiki-footer gollum-markdown-content boxed-group" id="wiki-footer">
          <div class="boxed-group-inner wiki-auxiliary-content markdown-body">
            <p><a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow"><img alt="Creative Commons License Agreement" data-canonical-src="http://i.creativecommons.org/l/by-nd/4.0/88x31.png" src="https://camo.githubusercontent.com/171d004f9ccb9199e35ac8ec3d99ede916037a9f/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d6e642f342e302f38387833312e706e67"/></a><br/><span>This documentation</span> is licensed under the <a href="http://creativecommons.org/licenses/by-nd/4.0/" rel="nofollow">Creative Commons License (Attribution-NoDerivatives 4.0 International)</a>.</p>

          </div>
        </div>
    </div>]