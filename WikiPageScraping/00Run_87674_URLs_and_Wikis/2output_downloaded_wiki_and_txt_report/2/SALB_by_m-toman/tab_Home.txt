[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#salb" id="user-content-salb"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>SALB</h1>
<h2>
<a aria-hidden="true" class="anchor" href="#usage" id="user-content-usage"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Usage</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#api" id="user-content-api"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>API</h3>
<p>Code sample:</p>
<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>TTSManager.h<span class="pl-pds">"</span></span>

<span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">htstts</span><span class="pl-k">;</span>
 
<span class="pl-k">int</span> <span class="pl-en">main</span>() {
   std::string input = <span class="pl-s"><span class="pl-pds">"</span>Hello world.<span class="pl-pds">"</span></span>;
   TTSManager tts;

   FragmentPropertiesPtr properties = std::make_shared&lt;FragmentProperties&gt;();         
   (*properties)[PROPERTY_KEY_SYNTHESIZER] = PROPERTY_VALUE_HTSENGINE;
   (*properties)[PROPERTY_KEY_TEXTANALYZER] = PROPERTY_VALUE_AUTOMATIC;  
   (*properties)[PROPERTY_KEY_TEXTANALYZER_RULES] = <span class="pl-s"><span class="pl-pds">"</span>leo.rules<span class="pl-pds">"</span></span>;
   (*properties)[PROPERTY_KEY_VOICE_PATH]  = <span class="pl-s"><span class="pl-pds">"</span>leo.htsvoice<span class="pl-pds">"</span></span>;
   (*properties)[PROPERTY_KEY_LANGUAGE]    = <span class="pl-s"><span class="pl-pds">"</span>de-at<span class="pl-pds">"</span></span>; 
   (*properties)[PROPERTY_KEY_VOICE_NAME]  = <span class="pl-s"><span class="pl-pds">"</span>Leo<span class="pl-pds">"</span></span>;

   <span class="pl-c"><span class="pl-c">//</span> create a text fragment with given input text and properties</span>
   TextFragmentPtr tf = std::make_shared&lt;TextFragment&gt;(input, properties);
   TTSResultPtr result = tts.<span class="pl-c1">SynthesizeTextFragment</span>(tf);
   <span class="pl-c1">save_result_riff</span>(result, <span class="pl-s"><span class="pl-pds">"</span>out.wav<span class="pl-pds">"</span></span>);

   <span class="pl-k">return</span> <span class="pl-c1">0</span>;
}</pre></div>
<p>Possible property key-value string pairs can be found in engine/manager/include/common.h:</p>
<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_KEY_SYNTHESIZER</span> <span class="pl-s"><span class="pl-pds">"</span>synthesizer<span class="pl-pds">"</span></span>      <span class="pl-c"><span class="pl-c">//</span>/&lt; property defining which synthesizer to use</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_KEY_TEXTANALYZER</span> <span class="pl-s"><span class="pl-pds">"</span>tanalyzer<span class="pl-pds">"</span></span>       <span class="pl-c"><span class="pl-c">//</span>/&lt; property defining which text analyzer to use</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_KEY_TEXTANALYZER_RULES</span> <span class="pl-s"><span class="pl-pds">"</span>trules<span class="pl-pds">"</span></span>    <span class="pl-c"><span class="pl-c">//</span>/&lt; property defining path to a file with text analysis    rules</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_KEY_LANGUAGE</span> <span class="pl-s"><span class="pl-pds">"</span>lang<span class="pl-pds">"</span></span>                <span class="pl-c"><span class="pl-c">//</span>/&lt; property defining the language of the text fragment</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_KEY_VOICE_NAME</span> <span class="pl-s"><span class="pl-pds">"</span>vName<span class="pl-pds">"</span></span>             <span class="pl-c"><span class="pl-c">//</span>/&lt; property defining the name of the voice to use</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_KEY_VOICE_PATH</span> <span class="pl-s"><span class="pl-pds">"</span>vPath<span class="pl-pds">"</span></span>             <span class="pl-c"><span class="pl-c">//</span>/&lt; property defining the path to the voice model</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_KEY_VOLUME</span> <span class="pl-s"><span class="pl-pds">"</span>vol<span class="pl-pds">"</span></span>                   <span class="pl-c"><span class="pl-c">//</span>/&lt; property defining the synthesis volume (0-100)</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_KEY_RATE</span>   <span class="pl-s"><span class="pl-pds">"</span>rate<span class="pl-pds">"</span></span>                  <span class="pl-c"><span class="pl-c">//</span>/&lt; property defining the synthesis speaking rate (~0.5-2.0)</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_KEY_PITCH</span>  <span class="pl-s"><span class="pl-pds">"</span>pitch<span class="pl-pds">"</span></span>                 <span class="pl-c"><span class="pl-c">//</span>/&lt; property defining the synthesis pitch (0.0 - no change)</span>

#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_VALUE_AUTOMATIC</span> <span class="pl-s"><span class="pl-pds">"</span>automatic<span class="pl-pds">"</span></span>        <span class="pl-c"><span class="pl-c">//</span>/&lt; property value for automatic choices</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_VALUE_FLITE</span> <span class="pl-s"><span class="pl-pds">"</span>flite<span class="pl-pds">"</span></span>                <span class="pl-c"><span class="pl-c">//</span>/&lt; property value for flite as text analyzer</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_VALUE_INTERNAL</span> <span class="pl-s"><span class="pl-pds">"</span>internal<span class="pl-pds">"</span></span>          <span class="pl-c"><span class="pl-c">//</span>/&lt; property value for using the internal text analyzer</span>
#<span class="pl-k">define</span> <span class="pl-en">PROPERTY_VALUE_HTSENGINE</span> <span class="pl-s"><span class="pl-pds">"</span>htsengine<span class="pl-pds">"</span></span>        <span class="pl-c"><span class="pl-c">//</span>/&lt; property value for hts_engine as synthesis engine</span></pre></div>
<p>Notes:</p>
<ul>
<li>PROPERTY_KEY_SYNTHESIZER defines the synthesizer to use, currently only PROPERTY_VALUE_HTSENGINE for hts_engine.</li>
<li>PROPERTY_KEY_TEXTANALYZER defines the text analysis to use, currently this can be either PROPERTY_VALUE_FLITE to use flite or PROPERTY_VALUE_INTERNAL to use the internal text analyzer. PROPERTY_VALUE_AUTOMATIC selects either flite or the internal text analyzer based on the language used.</li>
<li>PROPERTY_KEY_TEXTANALYZER_RULES is only needed for the internal text analyzer, as flite contains everything for english in code.</li>
<li>PROPERTY_KEY_LANGUAGE is a language shortcut. Examples: "en-us", "en-gb", "de-at".</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#creating-and-using-a-custom-voice" id="user-content-creating-and-using-a-custom-voice"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Creating and using a custom voice</h2>
<p>A straightforward approach is to use the "Speaker dependent training demo/English/Normal demo" package at <a href="http://hts.sp.nitech.ac.jp/hts-users/spool/2012/msg00393.html" rel="nofollow">HTS 2.3 alpha</a>, direct download: <a href="http://hts.sp.nitech.ac.jp/archives/2.3alpha/HTS-demo_CMU-ARCTIC-SLT.tar.bz2" rel="nofollow">http://hts.sp.nitech.ac.jp/archives/2.3alpha/HTS-demo_CMU-ARCTIC-SLT.tar.bz2</a> .
This results in an htsvoice voice model file that can be used with the SALB system.
Please note that the phone set for English should be the same as used in the demo package, so it works with the flite text analysis.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#adding-a-new-language" id="user-content-adding-a-new-language"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Adding a new language</h2>
<h3>
<a aria-hidden="true" class="anchor" href="#voice-model" id="user-content-voice-model"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Voice model</h3>
<p>A voice model for a new language can be trained as described previously.
It is important to use the label format as specified in the HTS demo packages (you can also find it <a href="https://github.com/m-toman/SALB/blob/master/doc/lab_format.pdf?raw=true">here</a>).</p>
<h3>
<a aria-hidden="true" class="anchor" href="#text-analysis-rules" id="user-content-text-analysis-rules"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Text analysis rules</h3>
<p>The SALB system uses lexica and LTS rules in <a href="http://www.cstr.ed.ac.uk/projects/festival/manual/festival_13.html" rel="nofollow">Festival format</a>.
Take a look at the provided data/leo.rules (<a href="https://raw.githubusercontent.com/m-toman/SALB/master/data/mini.rules" rel="nofollow">another example</a> for reference.</p>
<p>The first line is always "MNCL", then the lexicon follows.
The last lexicon entry is followed by a line containing only "ENDLEX".</p>
<p>The following LTS rules have to be in the form:</p>
<pre><code>;; LTS rules 
(set! XYZ '
... RULES ...
)
</code></pre>
<p>as produced by several helper tools for <a href="http://www.cstr.ed.ac.uk/projects/festival/" rel="nofollow">Festival</a>.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#text-normalization" id="user-content-text-normalization"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Text normalization</h3>
<p>Once you have the model and text rules file, you can already try to synthesize a text sentence using the command line interface. Note to use a language shortcut not equal to "en-*", so that the internal text analyzer is used instead of flite.
Given an unknown language shortcut, the text normalization just passes each word through without modification.</p>
<p>A good starting point to add a Normalizer for your language is by copying text/internal/src/AustrianGermanNormalizer.cpp and text/internal/include/AustrianGermanNormalizer.h, adapt them for your language and add the call to text/internal/src/Normalizer.cpp.
But basically you can call any function or method from text/internal/src/Normalizer.cpp, you just have to return the normalized string from Normalizer::Normalize if the language shortcut matches your new language.</p>

        </div>

    </div>]