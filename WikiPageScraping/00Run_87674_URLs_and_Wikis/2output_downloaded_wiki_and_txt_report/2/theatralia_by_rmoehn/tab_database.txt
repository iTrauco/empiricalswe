[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>four different kind of elements</p>
<ul>
<li><em>Is this tested somewhere? What is the rationale behind this? I want
justifications! ;-)</em></li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#single-user-features" id="user-content-single-user-features"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>SINGLE-USER features</h2>
<p>lowlevel: materials are consisting mainly of a TEXT &amp; a BINARY and can be of a TYPE (str)
metadata being stored: KEYWORDS and a (work) STATUS, and copyright Status LICENCE, LINK
that is core data,
as a user-dependent sphere data REMARKS, STATUS
metadata automatically collected: who modified last</p>
<p>remarks etc. user dependent</p>
<p>fronts: list, single (new, edit), browse</p>
<p>usecase D1.1: store away material  (whether being in a library, an archive or online quickly store a book title, an image or a scan with some remarks and tag it with some keywords and a status mark)</p>
<p>usecase D1.2: quickly find some material stored away earlier: while writing a paper or preparing a seminar quickly look up some image, book title or scan that one has stored later, or by searching for a keyword find all materials collected to some theme</p>
<p>usecase D1.3: browse through a set of materials (like images)</p>
<p>usecase D1.4: rework/update infos</p>
<p>advanced D1.α: guess TYPE of materials by input (and define types internally ) ask for affirmation</p>
<p>advanced D1.β check if material already in database</p>
<p>advanced D1.ψ check external databases to complement information of material (if a book title get the from…)</p>
<p>advanced D1.ψ history…</p>
<p>midlevel: entities have NAMES (str) and are supposed to be given TYPES (str), most important are the relations defined between them (m:m) and their references to materials (m:m), additionally as with materials they have explicit metadata like KEYWORDS, REMARKS, a STATUS and PRIVILEGES and implicit metadata like OWNER, MODIFICATIONdate, ACCESScount, access history</p>
<p>usecase D2.1: add an entity</p>
<p>usecase D2.2: find an entity and edit/update/expand information</p>
<p>browse through entities</p>
<p>add a material</p>
<p>add a link to another entity</p>
<p>advanced D2α : a strength of the relation</p>
<p>adavnced D2β: implicit relations when a user</p>
<p>advanced : propose type on past experience</p>
<p>define links to external</p>
<p>D3.1</p>
<p>highlevel: topics are groups of entities and materials, maybe later organised, for now only sets, and are to projects</p>
<h2>
<a aria-hidden="true" class="anchor" href="#multiuser" id="user-content-multiuser"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>MULTIUSER</h2>
<ul>
<li>
<p>elements</p>
</li>
<li>
<p>elements connected by links, the links can be strong, weak , explicit or implicit</p>
</li>
<li>
<p>each element has a core and a sphere: the core stores the objects essentials, the sphere data reflects the individual use</p>
</li>
<li>
<p>each material can be:
a. private – it has a single owner who is the only one who can see and edit it
b. shared – it has a group of owners who are working with the same data
c. public – everybody can view and edit it, it has no owner only editors (only the core)</p>
</li>
<li>
<p>therefore there are three realms: private data, shared data and public data</p>
</li>
<li>
<p>accordingly the links between elements can also be private, shared or public</p>
</li>
<li>
<p>there can be diverse links between the three: a shared topic that includes a public entity and links to it some private materials
links private, shared and public too.</p>
</li>
<li>
<p>materials can be private, shared or public and they generally have no links</p>
</li>
<li>
<p>entities can be private, shared or public and their links to other entities or materials can be private
private entity -&gt; private link to all kinds of entities or items
shared entity -&gt; shared link to shared or public entities or items or private link to all kinds of entities or items
public entity -&gt; public link to public items or shared or private … ???</p>
</li>
<li>
<p>topics
shared topic -&gt; links to entities and materials are shared as well, entities and materials are shared if not public
private topic -&gt; links to entities and materials are private as well, entities and materials can be private, public or shared
all the links to entities and items of a shared topic are shared as well</p>
</li>
<li>
<p>projects can be private or shared
shared project -&gt; links to topics shared as well, linked topics shared as well, no private link or linked topic possible
private project -&gt; links to topics private as well, linked topics can be private, public or shared</p>
</li>
<li>
<p>on adding a new element:
(α) on entering data see whether there is a private or public element similar to it and offer a list of possibilities
(α-1) if element from list is chosen continue with -&gt; editing that element
(α-2) if no element is chosen continue editing, assigning private state to start of with incomplete data</p>
</li>
<li>
<p>on committing an element:
() check with the completeness of the data and according to the state propose turning it public</p>
</li>
<li>
<p>on editing an element
() check again whether there is a similar public element</p>
</li>
<li>
<p>on sharing an element change the ownership to a group so the element is accessible (and editable) by a group of other users, who can view and edit the shared element and its links, (sharing an element the links and linked elements are also shared)</p>
</li>
<li>
<p>on unsharing an element
() ask whether to turn it public? -&gt; publish
() if not create two identical private copies for each user that might be discarded</p>
</li>
<li>
<p>by publishing an item enters the common realm and becomes public property, everybody can view and edit it and its links,
publishing an entity one has to choose between publishing only the entity itself and links to public elements as well as the private elements it is linked to …. recursively,</p>
</li>
<li>
<p>the unpublishing of an element is only possible as long as no one has edited or linked to the element</p>
</li>
<li>
<p>on deleting an element:
if private -&gt; delete
if shared -&gt; ask group to confirm (?)
if public -&gt; negatively mark in rating the deletion request</p>
</li>
<li>
<p>every element has a user-dependent and a global RATING
the rating relates: (1) lifetime, (2) #of accesses (3) # of search results, (4) #of accessors and their status, (5) #of edits, (6) #of editors and their status, (7) #of likes, (8)#of confirmations and status, (9) #of corrections and status, (10), #of links to, (11) #of links from, (12) delete request</p>
</li>
<li>
<p>every link has a user-dependent and a global RATING
usage of link</p>
</li>
</ul>

        </div>

    </div>]