[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#request-lifecycle" id="user-content-request-lifecycle"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Request lifecycle</h1>
<ol>
<li>Incoming request hits <code>./web/index.php</code> which is entry point for all requests, whether they are from browser or console,</li>
<li>
<code>App</code> is started and receives configuration (optional)</li>
<li>Creates instances of the following components (available from <code>App</code> under lowercase names):
<ul>
<li>
<code>Config</code> - where all framework configuration is held,</li>
<li>
<code>Container</code> which provides access to other components and services,</li>
<li>
<code>Dispatcher</code> - that handles all events and their listeners,</li>
<li>
<code>Router</code> - responsible for URL handling,</li>
<li>
<code>Request</code> - represents received request (with <code>Session</code>, <code>Cookie</code>),</li>
<li>
<code>Session</code> - session wrapper</li>
<li>
<code>Cookie</code> - cookie wrapper</li>
</ul>
</li>
<li>Before received request <code>Request</code> is passed to router - <code>kernel.request</code> event is fired,</li>
<li>
<code>Router</code> tries to match <code>Request</code> to one of registered <code>Route</code> instances, if found - fires <code>kernel.route</code> event, otherwise <code>kernel.404</code> is fired,</li>
<li>Then <code>App</code> fires <code>kernel.controller</code> event, and calls controller from matching <code>Route</code> - either as closure or other callable,</li>
<li>
<code>Controller</code> returns instance of <code>ResponseInterface</code> <code>kernel.response</code> event is fired,</li>
<li>Just before sending response back to user <code>App</code> fires <code>kernel.send</code> and returns response to <code>index.php</code> where it should be sent back tu user.</li>
</ol>
<h2>
<a aria-hidden="true" class="anchor" href="#events" id="user-content-events"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Events</h2>
<p>All internal kernel event handlers - ie those that handle above events - must return <code>null</code> or <code>ResponseInterface</code>.
When <code>null</code> is returned, nothing happens and frameworks works as mentioned above.
In case when <code>ResponseInterface</code> is returned - framework jumps to last step (just before <code>kernel.send</code>) and sends returned <code>Response</code> to user.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#exceptions" id="user-content-exceptions"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Exceptions</h2>
<p>When framework fails to fulfill request because requested route is missing or user has no access to requested resource an exception is thrown.</p>
<p>If route is missing - <code>NotFoundException</code> will be thrown.
All <code>NotFoundExceptions</code> are handled by firing <code>kernel.404</code> event.</p>
<p>In case missing access rights <code>ForbiddenException</code> is thrown, and <code>kernel.403</code> event is fired.</p>
<p>This is handy, because <code>ForbiddenException</code> and <code>NotFoundException</code> can be also used in other places to force requested behaviour.</p>
<p>Every other exception fires <code>kernel.500</code> event.</p>

        </div>

    </div>]