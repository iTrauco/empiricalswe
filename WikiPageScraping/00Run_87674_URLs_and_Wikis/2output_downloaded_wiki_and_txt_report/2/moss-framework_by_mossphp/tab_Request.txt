[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h1>
<a aria-hidden="true" class="anchor" href="#request" id="user-content-request"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Request</h1>
<p>The <code>Request</code> object represents incoming request with all handy properties and stuff.
Usually request is created in frameworks kernel, so there is no need to do it manually but if such case arises:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$request</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-c1">Request</span>(<span class="pl-smi">$session</span>);</span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#basic-methods" id="user-content-basic-methods"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Basic methods</h2>
<ul>
<li>
<code>isAjax</code> - will return <code>true</code> if request was sent with <code>XMLHttpRequest</code> header</li>
<li>
<code>baseName</code> - returns basename - if available,</li>
<li>
<code>clientIp</code> - tries to resolve clients ip or his proxy</li>
<li>
<code>controller</code> - will return controller resolved from route</li>
<li>
<code>uri</code> - returns requested uri</li>
<li>
<code>path</code> - returns requested path (relative to script location)</li>
<li>
<code>referrer</code> - from where did request came</li>
<li>
<code>language</code> - requested language (one with highest quality/priority in <code>Accept-Language</code> header)</li>
<li>
<code>languages</code> - all accepted languages</li>
<li>
<code>format</code> - requested format - mainly <code>null</code> - which means any format, handy for apis</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#headers-and-server" id="user-content-headers-and-server"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Headers and server</h2>
<p>Request headers are available via the <code>::header()-&gt;get($header)</code> method, where <code>$header</code> is headers.
Header names are case insensitive, and there is no difference if its <code>-</code> or <code>_</code>.
Internally they are stored as lowercase string with <code>_</code>.
Eg: <code>$Request-&gt;header()-&gt;get('content_type')</code> will return the same as <code>$Request-&gt;header()-&gt;get('Content-Type')</code> and this would be value of <code>Content-Type</code> header or <code>null</code> if header not set.</p>
<p>Environment variables (<code>$_SERVER</code>) are accessible via <code>::server-&gt;get($server)</code> method. Their names are same as in <code>$_SERVER</code> superglobal. The <code>::server()-&gt;get('some_var')</code> method will return <code>null</code> if environment variable is not set.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#get-post-put-and-delete" id="user-content-get-post-put-and-delete"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>GET, POST, PUT and DELETE</h2>
<p>To access query (<code>GET</code>) arguments use <code>::query()-&gt;get($key)</code> method
For <code>POST</code>, <code>PUT</code>, <code>DELETE</code> arguments call <code>::body()-&gt;get($key)</code> method.</p>
<p>Both methods allow access to multidimensional arrays in dot notation - just separate keys with <code>.</code> eg:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$yada</span> <span class="pl-k">=</span> <span class="pl-smi">$request</span><span class="pl-k">-&gt;</span>body()<span class="pl-k">-&gt;</span>get(<span class="pl-s"><span class="pl-pds">'</span>foo.bar.yada<span class="pl-pds">'</span></span>); <span class="pl-c"><span class="pl-c">//</span> $_POST['foo']['bar']['yada'];</span></span></pre></div>
<p>Also both methods have second argument <code>$default</code> that holds value returned when requested key is not set - by default its <code>null</code>.
Below example will return <code>bar</code> if <code>foo</code> does not exists.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$yada</span> <span class="pl-k">=</span> <span class="pl-smi">$request</span><span class="pl-k">-&gt;</span>body()<span class="pl-k">-&gt;</span>get(<span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>bar);</span></span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#consolecli-method" id="user-content-consolecli-method"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Console/CLI method</h2>
<p>Framework can be run from console, just type:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-c1">php</span> <span class="pl-k">.</span><span class="pl-k">/</span><span class="pl-c1">web</span><span class="pl-k">/</span><span class="pl-c1">index</span><span class="pl-k">.</span><span class="pl-c1">php</span> [<span class="pl-c1">arguments</span>]</span></pre></div>
<p>First unnamed argument will be put in the <code>path</code> property and resolved by <code>Router</code> just like requested url.
All other arguments will be available in the same way as <code>GET</code> arguments.
Named arguments without value are treated as true flags.</p>
<ul>
<li>
<code>foo</code> - unnamed argument</li>
<li>
<code>-foo</code> - named argument without value (resolved as <code>true</code>), to treat argument as named, there must be at least one <code>-</code>
</li>
<li>
<code>--foo=bar</code> - named argument with string value <code>bar</code>
</li>
</ul>
<p>Eg:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-c1">php</span> <span class="pl-k">.</span><span class="pl-k">/</span><span class="pl-c1">web</span><span class="pl-k">/</span><span class="pl-c1">index</span><span class="pl-k">.</span><span class="pl-c1">php</span> <span class="pl-k">/</span><span class="pl-c1">foo</span><span class="pl-k">/</span><span class="pl-c1">bar</span> <span class="pl-c1">foo</span> <span class="pl-k">-</span><span class="pl-c1">bar</span> <span class="pl-k">--</span><span class="pl-c1">yada</span><span class="pl-k">=</span><span class="pl-c1">yada</span></span></pre></div>
<p>Will request <code>/foo/bar</code> route with arguments:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    [</span>
<span class="pl-s1">        <span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">foo</span>,</span>
<span class="pl-s1">        <span class="pl-s"><span class="pl-pds">'</span>bar<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,</span>
<span class="pl-s1">        <span class="pl-s"><span class="pl-pds">'</span>yada<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>yada<span class="pl-pds">'</span></span></span>
<span class="pl-s1">    ]</span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#files" id="user-content-files"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Files</h2>
<p>The <code>::files()-&gt;get($key)</code> method grants access to <code>FilesBag</code>, which represents a little bit modified <code>$_FILES</code> superglobal.
Structure has been modified as follows:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-c"><span class="pl-c">//</span> &lt;input type="file" name="foo[bar][yada]"/&gt;</span></span>
<span class="pl-s1">    <span class="pl-smi">$tmp_name</span> <span class="pl-k">=</span> <span class="pl-smi">$_FILES</span>[<span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>][<span class="pl-s"><span class="pl-pds">'</span>tmp_name<span class="pl-pds">'</span></span>][<span class="pl-s"><span class="pl-pds">'</span>bar<span class="pl-pds">'</span></span>][<span class="pl-s"><span class="pl-pds">'</span>yada<span class="pl-pds">'</span></span>];</span>
<span class="pl-s1">    <span class="pl-smi">$tmp_name</span> <span class="pl-k">=</span> <span class="pl-smi">$Request</span><span class="pl-k">-&gt;</span>files()<span class="pl-k">-&gt;</span>get(<span class="pl-s"><span class="pl-pds">'</span>foo.bar.yada.tmp_name<span class="pl-pds">'</span></span>); <span class="pl-c"><span class="pl-c">//</span> as $tmp_name = $_files['foo']['bar']['yada']['tmp_name'];</span></span></pre></div>
<p>To upload file (to move uploaded file) from above field, just call:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$Request</span><span class="pl-k">-&gt;</span>files()<span class="pl-k">-&gt;</span>uploaded(<span class="pl-s"><span class="pl-pds">'</span>foo.bar.yada<span class="pl-pds">'</span></span>)<span class="pl-k">-&gt;</span>move(<span class="pl-s"><span class="pl-pds">'</span>./some/directory/<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>newFileName<span class="pl-pds">'</span></span>);</span></pre></div>
<p>The <code>::uploaded()</code> method returns instance of <code>UploadedFile</code> which simplifies file upload.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#cookies-and-session" id="user-content-cookies-and-session"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Cookies and session</h2>
<p>By default, framework uses its own session wrapper that - for compliance with <code>$_SESSION</code> and <code>$_COOKIE</code> superglobals - implement ArrayAccess interface.
If those are not passed in <code>::__constructor</code> - <code>Request</code> will use native superglobals.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1">    <span class="pl-smi">$request</span><span class="pl-k">-&gt;</span>session()<span class="pl-k">-&gt;</span>get(<span class="pl-smi">$key</span>, <span class="pl-smi">$default</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>);</span>
<span class="pl-s1">    <span class="pl-smi">$request</span><span class="pl-k">-&gt;</span>session()<span class="pl-k">-&gt;</span>set(<span class="pl-smi">$key</span>, <span class="pl-smi">$value</span>);</span>
<span class="pl-s1">    <span class="pl-smi">$request</span><span class="pl-k">-&gt;</span>cookie()<span class="pl-k">-&gt;</span>get(<span class="pl-smi">$key</span>, <span class="pl-smi">$default</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>);</span>
<span class="pl-s1">    <span class="pl-smi">$request</span><span class="pl-k">-&gt;</span>cookie()<span class="pl-k">-&gt;</span>set(<span class="pl-smi">$key</span>, <span class="pl-smi">$value</span>);</span></pre></div>
<h2>
<a aria-hidden="true" class="anchor" href="#additional-methods" id="user-content-additional-methods"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Additional methods</h2>
<ul>
<li>
<code>method()</code> - returns request method</li>
<li>
<code>schema()</code> - returns request protocol</li>
<li>
<code>host()</code> - returns host on which request is handled</li>
<li>
<code>dir()</code> - returns directory (relative to baseName)</li>
</ul>

        </div>

    </div>]