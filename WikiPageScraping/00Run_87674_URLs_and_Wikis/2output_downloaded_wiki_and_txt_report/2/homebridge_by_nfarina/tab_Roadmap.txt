[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#roadmap" id="user-content-roadmap"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Roadmap</h2>
<h4>
<a aria-hidden="true" class="anchor" href="#higher-level-api-for-implementing-accessories" id="user-content-higher-level-api-for-implementing-accessories"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Higher level API for implementing accessories</h4>
<p><em>Almost Done. See the <a href="https://github.com/KhaosT/HAP-NodeJS#api">New API</a> in HAP-NodeJS that will be exposed to Homebridge shortly.</em></p>
<p>Previously:</p>
<blockquote>
<p>Right now implementing an accessory involves a copying and pasting a large amount of boilerplate code, tweaking it, then grafting it onto a class. There are many roads to a much more developer-friendly API.</p>
<ul>
<li>Creating objects then adding callbacks and emitters <a href="/nfarina/homebridge/issues/57">proposal</a>
</li>
<li>Subclassing accessory-specific classes (e.g. <code>class HueLight extends Accessory.Light</code>).</li>
<li>Others?</li>
</ul>
</blockquote>
<h4>
<a aria-hidden="true" class="anchor" href="#explore-bridged-mode" id="user-content-explore-bridged-mode"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Explore "Bridged Mode"</h4>
<p><em>Done (in master).</em></p>
<p>Previously:</p>
<blockquote>
<p>Right now HomeBridge creates a separate "server" for each accessory, meaning it advertises itself as an independent "object" on your network. The implication is that you now must add each accessory to HomeKit separately, typing in the same PIN code over and over.</p>
<p>HomeKit supports "bridged" accessories where you can add a single bridge that exposes an (arbitrary?) number of "bridged accessories". This way you can add the bridge, enter one PIN code, and get all your accessories into HomeKit in one shot. However, this needs to be tested. And for instance, what happens when the list of accessories changes? Does HomeKit figure this out automatically?</p>
<p><a href="/nfarina/homebridge/pull/54#issuecomment-118391501">Some discussion below the merge here</a></p>
</blockquote>
<h4>
<a aria-hidden="true" class="anchor" href="#unify-accessories-and-platforms" id="user-content-unify-accessories-and-platforms"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Unify Accessories and Platforms?</h4>
<p>Accessories were initially designed to be created synchronously from <code>config.json</code>, then spun up immediately. This implies that your config file must have all the information needed to create the accessory without any "discovery".</p>
<p>Later, Platforms were added, to provide a means to discover accessories asynchronously at runtime. This is especially useful in situations where adding accessories to <code>config.json</code> manually would be prohibitively painful (like adding 80 Hue bulbs).</p>
<p>Upon reviewing the current set of accessories, it feels like most would make more sense as a Platform than as a single accessory.</p>
<p>It might be simpler to just remove Accessories altogether and force developers to implement a Platform for their device, even if it only returns a single accessory.</p>
<p><a href="/nfarina/homebridge/issues/53">Some rationale for this</a></p>
<h4>
<a aria-hidden="true" class="anchor" href="#real-plugin-architecture" id="user-content-real-plugin-architecture"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Real plugin architecture</h4>
<p>The "core" of HomeBridge should just contain the server itself and HAP-NodeJS dependency. It should not have any knowledge of specific devices like LiftMaster, Hue, etc. Those should all be provided by separate plugins, installed on-demand to suit whatever is actually in your home.</p>
<p>We don't need to require separate repos for each accessory, but it might be appropriate to have each accessory published in a separate npm module with a standardized prefix like <code>homebridge-philips-hue</code>, <code>homebridge-liftmaster</code>, etc.</p>
<p><a href="/nfarina/homebridge/issues/41">More discussion here</a></p>
<h4>
<a aria-hidden="true" class="anchor" href="#user-friendly-web-ui" id="user-content-user-friendly-web-ui"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>User-friendly Web UI</h4>
<p>Right now the only "UI" is manually editing your <code>config.json</code> file (<a href="/nfarina/homebridge/issues/49#issuecomment-118875337">which can be error-prone</a>). It would be nice to be able to simply download HomeBridge and run it, then setup your devices and monitor status via a web UI.</p>
<ul>
<li>Same NodeJS backend, but now exposing a RESTful API</li>
<li>Add/remove devices, automatically manage plugins</li>
<li>One-click updates for HomeBridge and plugins</li>
<li>Notification area for surfacing warning states, upgrade prompts, etc.</li>
</ul>

        </div>

    </div>]