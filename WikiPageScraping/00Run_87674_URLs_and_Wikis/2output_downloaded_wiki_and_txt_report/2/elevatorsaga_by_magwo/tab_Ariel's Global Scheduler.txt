[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>The global scheduler algorithm is a "dream" I had long ago, and this game finally gave me the medium to test it out! The algorithm's performance metrics were measured on level 17 to yield:</p>
<p>Elapsed Time: 1000s<br/>
Transport / sec: <strong>2.46</strong><br/>
Avg wait time: 12.4 sec<br/>
Max wait time: 36.9<br/>
Moves: 6216</p>
<p><strong>Algorithm Concept</strong><br/>
Model the behavior of an elevator as a graph and assign costs to navigation of the elevator.  Using a simple BFS-style divide &amp; conquer, each elevator finds an individual optimal plan.  This plan is periodically updated as new requests arrive (either on-board the elevator or on the floors).  An elevator is assigned request by a higher level arbiter.  This arbiter evaluates which elevator will endure the least cost to take on any new requests before making a judgement call.</p>
<p>** Issues **<br/>
Even though this algorithm works pretty well... It's quite dumb.  In fact, it'd probably be BAD in the real world given my current heuristics.  There are circumstances in which an individual can get stuck on an elevator indefinitely (but that's ok because it's not part of the metrics :P).  With some fine heuristic tuning and adjustments to the elevator modeling steps, this could be on hell of an algorithm.  Final note:  it will demolish your processor because it's one big sloppy un-optimized BFS.</p>
<p>But until then... Enjoy :)</p>
<h1>
<a aria-hidden="true" class="anchor" href="#janky-code" id="user-content-janky-code"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>JANKY CODE</h1>
<div class="highlight highlight-source-js"><pre>      {
  scheduler<span class="pl-k">:</span> <span class="pl-c1">null</span>,

  <span class="pl-en">init</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">elevators</span>, <span class="pl-smi">floors</span>) {
    <span class="pl-k">var</span> <span class="pl-en">log</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {
      <span class="pl-c"><span class="pl-c">//</span>console.log(Array.prototype.slice.call(arguments));</span>
    };

    <span class="pl-c"><span class="pl-c">/*</span> Assign an elevator this new request <span class="pl-c">*/</span></span>
    <span class="pl-k">var</span> <span class="pl-en">assignElevator</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">req</span>) {
      <span class="pl-k">var</span> minPlan <span class="pl-k">=</span> <span class="pl-c1">null</span>;
      <span class="pl-k">var</span> minElev <span class="pl-k">=</span> <span class="pl-c1">null</span>;
      <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">elevators</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
        <span class="pl-k">var</span> elevator <span class="pl-k">=</span> elevators[i];
        <span class="pl-k">var</span> theoreticalRequests <span class="pl-k">=</span> <span class="pl-smi">elevator</span>.<span class="pl-en">allRequests</span>().<span class="pl-c1">slice</span>();
        <span class="pl-smi">theoreticalRequests</span>.<span class="pl-c1">push</span>(req);
        <span class="pl-k">var</span> plan <span class="pl-k">=</span> <span class="pl-smi">elevator</span>.<span class="pl-en">navigationPlan</span>(<span class="pl-smi">elevator</span>.<span class="pl-en">currentFloor</span>(), <span class="pl-smi">elevator</span>.<span class="pl-en">loadFactor</span>(), theoreticalRequests);

        <span class="pl-k">if</span> (minElev <span class="pl-k">==</span> <span class="pl-c1">null</span>) {
          minPlan <span class="pl-k">=</span> plan;
          minElev <span class="pl-k">=</span> elevator;
        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">plan</span>.<span class="pl-smi">cost</span> <span class="pl-k">&lt;</span> <span class="pl-smi">minPlan</span>.<span class="pl-smi">cost</span>) {
          minPlan <span class="pl-k">=</span> plan;
          minElev <span class="pl-k">=</span> elevator;
        }
      }
      <span class="pl-smi">minElev</span>.<span class="pl-en">addCallRequest</span>(req);
      <span class="pl-en">log</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt; Assigned <span class="pl-pds">"</span></span>, req, <span class="pl-s"><span class="pl-pds">"</span> to elevator <span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">minElev</span>.<span class="pl-smi">_id</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span> &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="pl-pds">"</span></span>);
      <span class="pl-c"><span class="pl-c">//</span> TODO: On new floor or call requests, the elevator should offer up old call requests just in case there are more optimal divisions of labor.</span>
      <span class="pl-c"><span class="pl-c">//</span> TODO: Model floor request likelyhood</span>
    };

    <span class="pl-c"><span class="pl-c">/*</span> Call request object <span class="pl-c">*/</span></span>
    <span class="pl-k">var</span> <span class="pl-en">callRequest</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">floor</span>, <span class="pl-smi">isUp</span>) {
      <span class="pl-k">return</span> {
        callRequest<span class="pl-k">:</span> <span class="pl-c1">true</span>,
        up<span class="pl-k">:</span> isUp,
        down<span class="pl-k">:</span> <span class="pl-k">!</span>isUp,
        destFloor<span class="pl-k">:</span> <span class="pl-smi">floor</span>.<span class="pl-en">floorNum</span>(),
        startTime<span class="pl-k">:</span> (<span class="pl-k">+</span><span class="pl-k">new</span> <span class="pl-en">Date</span>())
      };
    };

    <span class="pl-c"><span class="pl-c">/*</span> Listen for floor button pushes <span class="pl-c">*/</span></span>
    <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">floors</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
      (<span class="pl-k">function</span>(<span class="pl-smi">floor</span>) {
        <span class="pl-smi">floor</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>up_button_pressed<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
          <span class="pl-k">var</span> request <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">callRequest</span>(<span class="pl-c1">this</span>, <span class="pl-c1">true</span>);
          <span class="pl-en">assignElevator</span>(request);
        });
        <span class="pl-smi">floor</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>down_button_pressed<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
          <span class="pl-k">var</span> request <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">callRequest</span>(<span class="pl-c1">this</span>, <span class="pl-c1">false</span>);
          <span class="pl-en">assignElevator</span>(request);
        });
      })(floors[i]);
    }

    <span class="pl-c"><span class="pl-c">/*</span> Floor request object <span class="pl-c">*/</span></span>
    <span class="pl-k">var</span> <span class="pl-en">floorRequest</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">num</span>) {
      <span class="pl-k">return</span> {
        floorRequest<span class="pl-k">:</span> <span class="pl-c1">true</span>,
        destFloor<span class="pl-k">:</span> num,
        startTime<span class="pl-k">:</span> (<span class="pl-k">+</span><span class="pl-k">new</span> <span class="pl-en">Date</span>())
      };
    };

    <span class="pl-k">var</span> <span class="pl-en">Node</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">state</span>) {
      <span class="pl-k">var</span> obj <span class="pl-k">=</span> {};
      <span class="pl-k">for</span> (<span class="pl-k">var</span> attr <span class="pl-k">in</span> state) {
        obj[attr] <span class="pl-k">=</span> state[attr];
      }
      <span class="pl-k">return</span> obj;
    };

    <span class="pl-c"><span class="pl-c">/*</span> ELEVATOR MIXINS <span class="pl-c">*/</span></span>
    <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">elevators</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
      (<span class="pl-k">function</span>(<span class="pl-smi">elevator</span>) {
        <span class="pl-smi">elevator</span>.<span class="pl-smi">_id</span> <span class="pl-k">=</span> i;

        <span class="pl-smi">elevator</span>.<span class="pl-smi">deferredPlans</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;
        <span class="pl-smi">elevator</span>.<span class="pl-smi">floorRequests</span> <span class="pl-k">=</span> [];
        <span class="pl-smi">elevator</span>.<span class="pl-smi">callRequests</span> <span class="pl-k">=</span> [];

        <span class="pl-smi">elevator</span>.<span class="pl-en">prioritize</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {
          <span class="pl-c"><span class="pl-c">//</span> Optimal personal plan using current requests</span>
          <span class="pl-k">var</span> requests <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-en">allRequests</span>();
          <span class="pl-k">var</span> plan <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-en">navigationPlan</span>(<span class="pl-c1">this</span>.<span class="pl-en">currentFloor</span>(), <span class="pl-c1">this</span>.<span class="pl-en">loadFactor</span>(), requests);

          <span class="pl-en">log</span>(<span class="pl-s"><span class="pl-pds">"</span>-------ELEVATOR[<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-c1">this</span>.<span class="pl-smi">_id</span><span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>]----------<span class="pl-pds">"</span></span>);
          <span class="pl-en">log</span>(<span class="pl-s"><span class="pl-pds">"</span>REQUESTS<span class="pl-pds">"</span></span>, requests);
          <span class="pl-en">log</span>(<span class="pl-s"><span class="pl-pds">"</span>PLAN<span class="pl-pds">"</span></span>, plan);

          <span class="pl-c1">this</span>.<span class="pl-smi">deferredPlans</span> <span class="pl-k">=</span> <span class="pl-smi">plan</span>.<span class="pl-smi">path</span>;
        };

        <span class="pl-smi">elevator</span>.<span class="pl-en">allRequests</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {
          <span class="pl-k">var</span> requests <span class="pl-k">=</span> [];
          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">this</span>.<span class="pl-smi">floorRequests</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
            <span class="pl-smi">requests</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">floorRequests</span>[i]);
          }
          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">this</span>.<span class="pl-smi">callRequests</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
            <span class="pl-smi">requests</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">callRequests</span>[i]);
          }
          <span class="pl-c"><span class="pl-c">//</span> reduce duplicates or invalids</span>
          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">requests</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
            <span class="pl-k">if</span> (requests[i].<span class="pl-smi">destFloor</span> <span class="pl-k">==</span> <span class="pl-c1">this</span>.<span class="pl-en">currentFloor</span>()) {
              <span class="pl-smi">requests</span>.<span class="pl-c1">splice</span>(i, <span class="pl-c1">1</span>);
              i<span class="pl-k">--</span>;
              <span class="pl-k">continue</span>;
            }
            <span class="pl-k">for</span> (<span class="pl-k">var</span> j <span class="pl-k">=</span> i <span class="pl-k">+</span> <span class="pl-c1">1</span>; j <span class="pl-k">&lt;</span> <span class="pl-smi">requests</span>.<span class="pl-c1">length</span>; j<span class="pl-k">++</span>) {
              <span class="pl-k">if</span> (requests[i].<span class="pl-smi">destFloor</span> <span class="pl-k">==</span> requests[j].<span class="pl-smi">destFloor</span>) {
                <span class="pl-smi">requests</span>.<span class="pl-c1">splice</span>(j, <span class="pl-c1">1</span>);
                j<span class="pl-k">--</span>;
                <span class="pl-k">continue</span>;
              }
            }
          }
          <span class="pl-k">return</span> requests;
        };

        <span class="pl-smi">elevator</span>.<span class="pl-en">addFloorRequest</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">req</span>) {
          <span class="pl-c1">this</span>.<span class="pl-smi">floorRequests</span>.<span class="pl-c1">push</span>(req);
          <span class="pl-c1">this</span>.<span class="pl-en">prioritize</span>();
        };

        <span class="pl-smi">elevator</span>.<span class="pl-en">addCallRequest</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">req</span>) {
          <span class="pl-c1">this</span>.<span class="pl-smi">callRequests</span>.<span class="pl-c1">push</span>(req);
          <span class="pl-c1">this</span>.<span class="pl-en">prioritize</span>();
        };

        <span class="pl-smi">elevator</span>.<span class="pl-en">serviceRequests</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">floorNum</span>) {
          <span class="pl-c"><span class="pl-c">//</span> Remove floor requests</span>
          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">this</span>.<span class="pl-smi">floorRequests</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
            <span class="pl-k">var</span> floorRequest <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">floorRequests</span>[i];
            <span class="pl-k">if</span> (<span class="pl-smi">floorRequest</span>.<span class="pl-smi">destFloor</span> <span class="pl-k">==</span> floorNum) {
              <span class="pl-c1">this</span>.<span class="pl-smi">floorRequests</span>.<span class="pl-c1">splice</span>(i,<span class="pl-c1">1</span>);
              i<span class="pl-k">--</span>;
            }
          }
          <span class="pl-c"><span class="pl-c">//</span> Remove call requests</span>
          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">this</span>.<span class="pl-smi">callRequests</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
            <span class="pl-k">var</span> callRequest <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">callRequests</span>[i];
            <span class="pl-k">if</span> (<span class="pl-smi">callRequest</span>.<span class="pl-smi">destFloor</span> <span class="pl-k">==</span> floorNum) {
              <span class="pl-c1">this</span>.<span class="pl-smi">callRequests</span>.<span class="pl-c1">splice</span>(i, <span class="pl-c1">1</span>);
              i<span class="pl-k">--</span>;
            }
          }
        };

        <span class="pl-smi">elevator</span>.<span class="pl-en">navigationPlan</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">currentFloor</span>, <span class="pl-smi">currentLoad</span>, <span class="pl-smi">allRequests</span>) {
          <span class="pl-c"><span class="pl-c">//</span> Grab necessary local methods</span>
          <span class="pl-k">var</span> estimatedTravelTime <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">estimatedTravelTime</span>;
          <span class="pl-k">var</span> maxClientWaitTime <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">maxClientWaitTime</span>;
          <span class="pl-k">var</span> minLeaf <span class="pl-k">=</span> <span class="pl-c1">null</span>;

          <span class="pl-c"><span class="pl-c">//</span> Create a navigation graph</span>
          <span class="pl-k">var</span> root <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Node</span>({
            floor<span class="pl-k">:</span> currentFloor,
            requests<span class="pl-k">:</span> allRequests,
            estimatedLoad<span class="pl-k">:</span> currentLoad,
            estimatedTime<span class="pl-k">:</span> (<span class="pl-k">+</span><span class="pl-k">new</span> <span class="pl-en">Date</span>()),
            parent<span class="pl-k">:</span> <span class="pl-c1">null</span>,
            cost<span class="pl-k">:</span> <span class="pl-c1">0</span>
          });

          <span class="pl-c"><span class="pl-c">//</span> Recursive construction</span>
          <span class="pl-k">var</span> <span class="pl-en">stepLayer</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">current</span>) {
            <span class="pl-k">var</span> requests <span class="pl-k">=</span> <span class="pl-smi">current</span>.<span class="pl-smi">requests</span>;

            <span class="pl-k">if</span> (<span class="pl-smi">requests</span>.<span class="pl-c1">length</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>) {
              <span class="pl-k">if</span> (minLeaf <span class="pl-k">===</span> <span class="pl-c1">null</span>) {
                minLeaf <span class="pl-k">=</span> current;
              } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">current</span>.<span class="pl-smi">cost</span> <span class="pl-k">&lt;</span> <span class="pl-smi">minLeaf</span>.<span class="pl-smi">cost</span>) {
                minLeaf <span class="pl-k">=</span> current;
              }
              <span class="pl-k">return</span>;
            }

            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">requests</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
              <span class="pl-k">var</span> request <span class="pl-k">=</span> requests[i];

              <span class="pl-k">var</span> pathTime <span class="pl-k">=</span> <span class="pl-en">estimatedTravelTime</span>(<span class="pl-smi">current</span>.<span class="pl-smi">floor</span>, <span class="pl-smi">request</span>.<span class="pl-smi">destFloor</span>);
              <span class="pl-k">var</span> maxWaitTime <span class="pl-k">=</span> <span class="pl-en">maxClientWaitTime</span>(<span class="pl-smi">current</span>.<span class="pl-smi">estimatedTime</span>, requests);
              <span class="pl-k">var</span> deltaCost <span class="pl-k">=</span> pathTime <span class="pl-k">+</span> <span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(maxWaitTime<span class="pl-k">/</span><span class="pl-c1">4.0</span>, <span class="pl-c1">2</span>);

              <span class="pl-k">var</span> deltaLoad <span class="pl-k">=</span> <span class="pl-c1">0</span>;
              <span class="pl-c"><span class="pl-c">//</span> TODO: make an adaptive load model</span>
              <span class="pl-k">if</span> (<span class="pl-smi">request</span>.<span class="pl-smi">floorRequest</span>) {
                deltaLoad <span class="pl-k">-=</span> <span class="pl-c1">0.3</span>;
              } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">request</span>.<span class="pl-smi">callRequest</span>) {
                deltaLoad <span class="pl-k">+=</span> <span class="pl-c1">0.25</span>;
              }
              <span class="pl-k">var</span> nextLoad <span class="pl-k">=</span> <span class="pl-smi">current</span>.<span class="pl-smi">estimatedLoad</span> <span class="pl-k">+</span> deltaLoad;
              <span class="pl-k">if</span> (nextLoad <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>) {
                nextLoad <span class="pl-k">=</span> <span class="pl-c1">1</span>;
              } <span class="pl-k">else</span> <span class="pl-k">if</span> (nextLoad <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {
                nextLoad <span class="pl-k">=</span> <span class="pl-c1">0</span>;
              }
              deltaCost <span class="pl-k">+=</span> <span class="pl-c1">5</span> <span class="pl-k">*</span> (nextLoad <span class="pl-k">-</span> <span class="pl-c1">0.5</span>) <span class="pl-k">*</span> (nextLoad <span class="pl-k">-</span> <span class="pl-c1">0.5</span>);

              <span class="pl-k">var</span> otherRequests <span class="pl-k">=</span> <span class="pl-smi">requests</span>.<span class="pl-c1">slice</span>();
              <span class="pl-smi">otherRequests</span>.<span class="pl-c1">splice</span>(i, <span class="pl-c1">1</span>);

              <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Node</span>({
                floor<span class="pl-k">:</span> <span class="pl-smi">request</span>.<span class="pl-smi">destFloor</span>,
                requests<span class="pl-k">:</span> <span class="pl-smi">otherRequests</span>.<span class="pl-c1">slice</span>(),
                estimatedLoad<span class="pl-k">:</span> <span class="pl-smi">current</span>.<span class="pl-smi">estimatedLoad</span> <span class="pl-k">+</span> deltaLoad,
                estimatedTime<span class="pl-k">:</span> <span class="pl-smi">current</span>.<span class="pl-smi">estimatedTime</span> <span class="pl-k">+</span> pathTime <span class="pl-k">*</span> <span class="pl-c1">1000.0</span>,
                parent<span class="pl-k">:</span> current,
                cost<span class="pl-k">:</span> <span class="pl-smi">current</span>.<span class="pl-smi">cost</span> <span class="pl-k">+</span> deltaCost
              });

              <span class="pl-en">stepLayer</span>(node);
            }
          };
          <span class="pl-en">stepLayer</span>(root);

          <span class="pl-c"><span class="pl-c">//</span> No requests</span>
          <span class="pl-k">if</span> (minLeaf <span class="pl-k">==</span> <span class="pl-c1">null</span>) {
            <span class="pl-k">return</span> {
              path<span class="pl-k">:</span> [],
              cost<span class="pl-k">:</span> <span class="pl-c1">9999999</span>,
            };
          }

          <span class="pl-c"><span class="pl-c">//</span> Backtrace</span>
          <span class="pl-k">var</span> path <span class="pl-k">=</span> [];
          <span class="pl-k">var</span> cost <span class="pl-k">=</span> <span class="pl-smi">minLeaf</span>.<span class="pl-smi">cost</span>;
          <span class="pl-k">while</span> (minLeaf <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {
            <span class="pl-smi">path</span>.<span class="pl-c1">push</span>(<span class="pl-smi">minLeaf</span>.<span class="pl-smi">floor</span>);
            minLeaf <span class="pl-k">=</span> <span class="pl-smi">minLeaf</span>.<span class="pl-c1">parent</span>;
          }
          <span class="pl-smi">path</span>.<span class="pl-c1">reverse</span>();
          <span class="pl-k">if</span> (path[<span class="pl-c1">0</span>] <span class="pl-k">==</span> currentFloor) {
            <span class="pl-smi">path</span>.<span class="pl-c1">splice</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);
          }

          <span class="pl-k">return</span> {
            path<span class="pl-k">:</span> path,
            cost<span class="pl-k">:</span> cost
          };
        };

        <span class="pl-smi">elevator</span>.<span class="pl-en">estimatedTravelTime</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">from</span>, <span class="pl-smi">to</span>) {
          <span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(from<span class="pl-k">-</span>to) <span class="pl-k">*</span> <span class="pl-c1">0.5</span>;
        };

        <span class="pl-smi">elevator</span>.<span class="pl-en">maxClientWaitTime</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">estimatedTime</span>, <span class="pl-smi">requests</span>) {
          <span class="pl-k">var</span> maxTime <span class="pl-k">=</span> <span class="pl-c1">0</span>;
          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">requests</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
            <span class="pl-k">if</span> (requests[i].<span class="pl-smi">callRequest</span>) {
              <span class="pl-k">var</span> diff <span class="pl-k">=</span> estimatedTime <span class="pl-k">-</span> requests[i].<span class="pl-smi">startTime</span>;
              <span class="pl-k">if</span> (diff <span class="pl-k">&gt;</span> maxTime) {
                maxTime <span class="pl-k">=</span> diff;
              }
            }
          }
          <span class="pl-k">return</span> maxTime <span class="pl-k">/</span> <span class="pl-c1">1000.0</span>;
        };

        <span class="pl-smi">elevator</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>idle<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
          <span class="pl-c1">this</span>.<span class="pl-en">prioritize</span>();
          <span class="pl-c1">this</span>.<span class="pl-en">goToFloor</span>(<span class="pl-c1">this</span>.<span class="pl-en">currentFloor</span>());
        });

        <span class="pl-smi">elevator</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>floor_button_pressed<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>(<span class="pl-smi">num</span>) {
          <span class="pl-c1">this</span>.<span class="pl-en">addFloorRequest</span>(<span class="pl-k">new</span> <span class="pl-en">floorRequest</span>(num));
          <span class="pl-c1">this</span>.<span class="pl-en">prioritize</span>();
        });

        <span class="pl-smi">elevator</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>passing_floor<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>(<span class="pl-smi">num</span>, <span class="pl-smi">dir</span>) {
          <span class="pl-c1">this</span>.<span class="pl-en">prioritize</span>();
        });

        <span class="pl-smi">elevator</span>.<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>stopped_at_floor<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>(<span class="pl-smi">num</span>) {
          <span class="pl-c1">this</span>.<span class="pl-en">serviceRequests</span>(num);
          <span class="pl-c1">this</span>.<span class="pl-en">prioritize</span>();

          <span class="pl-c"><span class="pl-c">//</span> Queue maneuvers</span>
          <span class="pl-k">if</span> (<span class="pl-c1">this</span>.<span class="pl-smi">deferredPlans</span>) {
            <span class="pl-smi">elevator</span>.<span class="pl-smi">destinationQueue</span> <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">deferredPlans</span>;
            <span class="pl-smi">elevator</span>.<span class="pl-en">checkDestinationQueue</span>();
            <span class="pl-c1">this</span>.<span class="pl-smi">deferredPlans</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;
          }

          <span class="pl-c"><span class="pl-c">//</span> Mission planner throwback</span>
          <span class="pl-k">if</span> (<span class="pl-c1">this</span>.<span class="pl-en">loadFactor</span>() <span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span>) {
            <span class="pl-k">var</span> callRequests <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">callRequests</span>.<span class="pl-c1">slice</span>();
            <span class="pl-c1">this</span>.<span class="pl-smi">callRequests</span> <span class="pl-k">=</span> [];
            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">callRequests</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {
              <span class="pl-en">assignElevator</span>(callRequests[i]);
            }
          }
        });
      })(elevators[i]);
    }
  },

  <span class="pl-en">update</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">dt</span>, <span class="pl-smi">elevators</span>, <span class="pl-smi">floors</span>) {
  }
}</pre></div>

        </div>

    </div>]