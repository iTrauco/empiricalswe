[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>This solution does work solve every challenge so far (1 through 16) although struggles with 2, 5 and 16 and requires a little luck, about 33% to 50% of the time it works other times it just misses.</p>
<p>It abuses the url of the page to know when to switch to using fewest move mode. I'm also taking advantage of the fact every person that boards the lift presses the button for their floor regardless of if it is already pressed, this allows both waiting for a full lift without the variance of the loadFactor() function and choosing a next floor that will offload the most people.</p>
<p>My JS is pretty poor so there are probably some neat solutions to solve some of the more long winded bits of code. If anyone has any suggestions on how to make it more reliable with the problematic challenges please leave a comment.</p>
<div class="highlight highlight-source-js"><pre>{
    <span class="pl-en">init</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">elevators</span>, <span class="pl-smi">floors</span>) {
        <span class="pl-k">var</span> <span class="pl-c1">LIFT_MAX_PERSON</span> <span class="pl-k">=</span> <span class="pl-c1">4</span>;
        <span class="pl-k">var</span> <span class="pl-c1">LIFT_CONSIDER_FULL</span> <span class="pl-k">=</span> <span class="pl-c1">0.7</span>;
        <span class="pl-k">var</span> <span class="pl-c1">GROUND_FLOOR_WEIGHT</span> <span class="pl-k">=</span> <span class="pl-c1">0.3</span>;
        
        <span class="pl-k">var</span> minimum_wait_challenges <span class="pl-k">=</span> [<span class="pl-c1">8</span>, <span class="pl-c1">9</span>, <span class="pl-c1">10</span>, <span class="pl-c1">11</span>, <span class="pl-c1">12</span>, <span class="pl-c1">13</span>, <span class="pl-c1">14</span>, <span class="pl-c1">15</span>, <span class="pl-c1">16</span>];
        <span class="pl-k">var</span> move_or_less_challenges <span class="pl-k">=</span> [<span class="pl-c1">6</span>, <span class="pl-c1">7</span>];
        <span class="pl-k">var</span> challenge <span class="pl-k">=</span> <span class="pl-c1">parseInt</span>(<span class="pl-c1">document</span>.<span class="pl-c1">URL</span>.<span class="pl-c1">substr</span>(<span class="pl-c1">document</span>.<span class="pl-c1">URL</span>.<span class="pl-c1">lastIndexOf</span>(<span class="pl-s"><span class="pl-pds">"</span>=<span class="pl-pds">"</span></span>)<span class="pl-k">+</span><span class="pl-c1">1</span>));
        <span class="pl-k">var</span> wait_mode <span class="pl-k">=</span> <span class="pl-smi">move_or_less_challenges</span>.<span class="pl-c1">indexOf</span>( challenge ) <span class="pl-k">!=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;
        <span class="pl-k">var</span> short_mode <span class="pl-k">=</span> <span class="pl-smi">minimum_wait_challenges</span>.<span class="pl-c1">indexOf</span>( challenge ) <span class="pl-k">!=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;
        
        <span class="pl-k">var</span> requests <span class="pl-k">=</span> [];

        <span class="pl-k">var</span> <span class="pl-en">requestElevator</span> <span class="pl-k">=</span> <span class="pl-k">function</span>( <span class="pl-smi">floorNum</span>, <span class="pl-smi">direction</span> ) {
            <span class="pl-k">var</span> distance <span class="pl-k">=</span> <span class="pl-smi">floors</span>.<span class="pl-c1">length</span>;
            <span class="pl-k">var</span> nearest <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;

            <span class="pl-k">for</span>( i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">elevators</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i )
            {
                <span class="pl-k">if</span>( elevators[i].<span class="pl-smi">fast</span>
                   <span class="pl-k">||</span> (<span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span> <span class="pl-k">!=</span> elevators[i].<span class="pl-smi">direction</span> <span class="pl-k">&amp;&amp;</span> direction <span class="pl-k">!=</span> elevators[i].<span class="pl-smi">direction</span>)
                   <span class="pl-k">||</span> <span class="pl-c1">LIFT_CONSIDER_FULL</span> <span class="pl-k">&lt;</span> elevators[i].<span class="pl-en">loadFactor</span>() ) { <span class="pl-k">continue</span>; }
                
                <span class="pl-k">var</span> current <span class="pl-k">=</span> elevators[i].<span class="pl-en">currentFloor</span>();
                
                <span class="pl-k">if</span>( ( <span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span> <span class="pl-k">==</span> elevators[i].<span class="pl-smi">direction</span>
                           <span class="pl-k">||</span> ((<span class="pl-s"><span class="pl-pds">"</span>up<span class="pl-pds">"</span></span> <span class="pl-k">==</span> direction <span class="pl-k">&amp;&amp;</span> floorNum <span class="pl-k">&gt;</span> current)
                           <span class="pl-k">||</span> (<span class="pl-s"><span class="pl-pds">"</span>down<span class="pl-pds">"</span></span> <span class="pl-k">==</span> direction <span class="pl-k">&amp;&amp;</span> floorNum <span class="pl-k">&lt;</span> current)) ) 
                        <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>( floorNum <span class="pl-k">-</span> current ) <span class="pl-k">&lt;</span> distance ) {
                    distance <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>( floorNum <span class="pl-k">-</span> current );
                    nearest <span class="pl-k">=</span> i;
                }
            }
            
            <span class="pl-k">if</span>( (distance <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">||</span> <span class="pl-k">!</span>wait_mode) <span class="pl-k">&amp;&amp;</span> nearest <span class="pl-k">!=</span> <span class="pl-k">-</span><span class="pl-c1">1</span> ) {
                elevators[nearest].<span class="pl-en">injectFloor</span>( floorNum, direction );
            }
            <span class="pl-k">else</span> {
                <span class="pl-smi">requests</span>.<span class="pl-c1">push</span>({ floor<span class="pl-k">:</span>floorNum, direction<span class="pl-k">:</span>direction });
            }
        };
        
        <span class="pl-k">for</span>( i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">floors</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i )
        {
            floors[i].<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">"</span>up_button_pressed<span class="pl-pds">"</span></span>, <span class="pl-k">function</span>() {
                <span class="pl-en">requestElevator</span>( <span class="pl-c1">this</span>.<span class="pl-en">floorNum</span>(), <span class="pl-s"><span class="pl-pds">"</span>up<span class="pl-pds">"</span></span> );
            });
            floors[i].<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">"</span>down_button_pressed<span class="pl-pds">"</span></span>, <span class="pl-k">function</span>() {
                <span class="pl-en">requestElevator</span>( <span class="pl-c1">this</span>.<span class="pl-en">floorNum</span>(), <span class="pl-s"><span class="pl-pds">"</span>down<span class="pl-pds">"</span></span> );
            });
        }
        <span class="pl-k">for</span>( i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">elevators</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i )
        {
            elevators[i].<span class="pl-smi">pendingQueue</span> <span class="pl-k">=</span> [];
            elevators[i].<span class="pl-smi">fast</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;
            elevators[i].<span class="pl-smi">direction</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span>;
            
            elevators[i].<span class="pl-en">injectFloor</span> <span class="pl-k">=</span> <span class="pl-k">function</span>( <span class="pl-smi">floorNum</span>, <span class="pl-smi">direction</span> ) {
                <span class="pl-k">if</span>( <span class="pl-c1">0</span> <span class="pl-k">==</span> <span class="pl-c1">this</span>.<span class="pl-smi">destinationQueue</span>.<span class="pl-c1">length</span> ) {
                    <span class="pl-k">var</span> travel <span class="pl-k">=</span> (floorNum <span class="pl-k">==</span> <span class="pl-c1">this</span>.<span class="pl-en">currentFloor</span>()) <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span> <span class="pl-k">:</span> ((floorNum <span class="pl-k">&lt;</span> <span class="pl-c1">this</span>.<span class="pl-en">currentFloor</span>()) <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>down<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>up<span class="pl-pds">"</span></span>);
                    
                    <span class="pl-k">if</span>( <span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span> <span class="pl-k">==</span> direction ) { direction <span class="pl-k">=</span> travel; }
                    <span class="pl-k">if</span>( travel <span class="pl-k">!=</span> direction <span class="pl-k">&amp;&amp;</span> floorNum <span class="pl-k">!=</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> floorNum <span class="pl-k">!=</span> <span class="pl-smi">floors</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span> ) { <span class="pl-c1">this</span>.<span class="pl-smi">fast</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>; }
                    
                    <span class="pl-c1">this</span>.<span class="pl-smi">direction</span> <span class="pl-k">=</span> direction;
                    <span class="pl-k">if</span>( <span class="pl-k">!</span>wait_mode ) {
                        <span class="pl-c1">this</span>.<span class="pl-en">goingUpIndicator</span>( <span class="pl-s"><span class="pl-pds">"</span>up<span class="pl-pds">"</span></span> <span class="pl-k">==</span> <span class="pl-c1">this</span>.<span class="pl-smi">direction</span> <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span> <span class="pl-k">==</span> <span class="pl-c1">this</span>.<span class="pl-smi">direction</span> );
                        <span class="pl-c1">this</span>.<span class="pl-en">goingDownIndicator</span>( <span class="pl-s"><span class="pl-pds">"</span>down<span class="pl-pds">"</span></span> <span class="pl-k">==</span> <span class="pl-c1">this</span>.<span class="pl-smi">direction</span> <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span> <span class="pl-k">==</span> <span class="pl-c1">this</span>.<span class="pl-smi">direction</span> );
                    }
                    
                    <span class="pl-c1">this</span>.<span class="pl-en">goToFloor</span>( floorNum );
                    <span class="pl-k">return</span>;
                }
                
                <span class="pl-k">for</span>( i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">this</span>.<span class="pl-smi">destinationQueue</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i ) {
                    <span class="pl-k">if</span>( floorNum <span class="pl-k">==</span> <span class="pl-c1">this</span>.<span class="pl-smi">destinationQueue</span>[i] ) { <span class="pl-k">return</span>; } <span class="pl-c"><span class="pl-c">//</span> no change</span>
                    <span class="pl-k">if</span>((<span class="pl-s"><span class="pl-pds">"</span>up<span class="pl-pds">"</span></span><span class="pl-k">==</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span> <span class="pl-k">&amp;&amp;</span> floorNum<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">destinationQueue</span>[i]) <span class="pl-k">||</span> (<span class="pl-s"><span class="pl-pds">"</span>down<span class="pl-pds">"</span></span><span class="pl-k">==</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span> <span class="pl-k">&amp;&amp;</span> floorNum<span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">destinationQueue</span>[i])){
                        <span class="pl-c1">this</span>.<span class="pl-smi">destinationQueue</span>.<span class="pl-c1">splice</span>( i, <span class="pl-c1">0</span>, floorNum );
                        <span class="pl-c1">this</span>.<span class="pl-en">checkDestinationQueue</span>();
                        <span class="pl-k">return</span>;
                    }
                }
                
                <span class="pl-c1">this</span>.<span class="pl-en">goToFloor</span>( floorNum );
            };
            elevators[i].<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span>, <span class="pl-k">function</span>( <span class="pl-smi">floorNum</span> ) {
                <span class="pl-c1">this</span>.<span class="pl-smi">direction</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span>;
                <span class="pl-c1">this</span>.<span class="pl-en">goingUpIndicator</span>(<span class="pl-c1">true</span>);
                <span class="pl-c1">this</span>.<span class="pl-en">goingDownIndicator</span>(<span class="pl-c1">true</span>);
                
                <span class="pl-k">if</span>( wait_mode ) {
                    <span class="pl-c1">this</span>.<span class="pl-en">goToFloor</span>( <span class="pl-c1">this</span>.<span class="pl-en">currentFloor</span>() );
                }
                <span class="pl-k">else</span> <span class="pl-k">if</span>( short_mode <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">requests</span>.<span class="pl-c1">length</span> ) {
                    <span class="pl-k">var</span> target <span class="pl-k">=</span> <span class="pl-smi">requests</span>.<span class="pl-c1">shift</span>();
                    <span class="pl-c1">this</span>.<span class="pl-en">injectFloor</span>( <span class="pl-smi">target</span>.<span class="pl-smi">floor</span>, <span class="pl-smi">target</span>.<span class="pl-smi">direction</span> );
                }
                <span class="pl-k">else</span> <span class="pl-k">if</span>( <span class="pl-smi">requests</span>.<span class="pl-c1">length</span> ) {
                    <span class="pl-k">var</span> distance <span class="pl-k">=</span> <span class="pl-smi">floors</span>.<span class="pl-c1">length</span>;
                    <span class="pl-k">var</span> index <span class="pl-k">=</span> <span class="pl-c1">0</span>;
                    
                    <span class="pl-k">for</span>( i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">requests</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i ) {
                        <span class="pl-k">var</span> d <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-en">currentFloor</span>() <span class="pl-k">-</span> requests[i].<span class="pl-smi">floor</span>);
                        <span class="pl-k">if</span>( requests[i].<span class="pl-smi">floor</span> <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> d <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> ) { d <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">max</span>( <span class="pl-c1">1</span>, d <span class="pl-k">-</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">floors</span>.<span class="pl-c1">length</span> <span class="pl-k">*</span> <span class="pl-c1">GROUND_FLOOR_WEIGHT</span>) ) };
                        
                        <span class="pl-k">if</span>( d <span class="pl-k">&lt;</span> distance ) {
                            distance <span class="pl-k">=</span> d;
                            index <span class="pl-k">=</span> i;
                        }
                    }
                    
                    <span class="pl-c1">this</span>.<span class="pl-en">injectFloor</span>( requests[index].<span class="pl-smi">floor</span>, requests[index].<span class="pl-smi">direction</span> );
                    <span class="pl-smi">requests</span>.<span class="pl-c1">splice</span>( index, <span class="pl-c1">1</span> );
                }
            });
            elevators[i].<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">"</span>floor_button_pressed<span class="pl-pds">"</span></span>, <span class="pl-k">function</span>( <span class="pl-smi">floorNum</span> ) {
                <span class="pl-k">if</span>( wait_mode ) { 
                    <span class="pl-c1">this</span>.<span class="pl-smi">pendingQueue</span>.<span class="pl-c1">push</span>( floorNum );
                    <span class="pl-k">if</span>( <span class="pl-c1">this</span>.<span class="pl-smi">pendingQueue</span>.<span class="pl-c1">length</span> <span class="pl-k">&lt;</span> <span class="pl-c1">LIFT_MAX_PERSON</span> ) { <span class="pl-k">return</span>; }
                    
                    <span class="pl-k">var</span> counts <span class="pl-k">=</span> [];
                    <span class="pl-k">var</span> best <span class="pl-k">=</span> <span class="pl-c1">0</span>;
                    
                    <span class="pl-c"><span class="pl-c">//</span> The next block of code finds the most popular floor among our cargo</span>
                    <span class="pl-k">for</span>( i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">this</span>.<span class="pl-smi">pendingQueue</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i ) {
                        floorNum <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">pendingQueue</span>[i];
                        counts[floorNum] <span class="pl-k">=</span> (<span class="pl-k">typeof</span> counts[floorNum] <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">'</span>undefined<span class="pl-pds">'</span></span>) <span class="pl-k">?</span> counts[floorNum] <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">1</span>;
                    }
                    <span class="pl-k">for</span>( i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">counts</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i ) {
                        <span class="pl-k">if</span>( <span class="pl-k">typeof</span> counts[i] <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">'</span>undefined<span class="pl-pds">'</span></span> <span class="pl-k">&amp;&amp;</span> counts[i] <span class="pl-k">&gt;</span> best ) {
                            best <span class="pl-k">=</span> counts[i];
                            floorNum <span class="pl-k">=</span> i;
                        }                            
                    }
                    <span class="pl-k">for</span>( i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">this</span>.<span class="pl-smi">pendingQueue</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i )
                    {
                        <span class="pl-k">if</span>( <span class="pl-c1">this</span>.<span class="pl-smi">pendingQueue</span>[i] <span class="pl-k">==</span> floorNum ) {
                            <span class="pl-c1">this</span>.<span class="pl-smi">pendingQueue</span>.<span class="pl-c1">splice</span>( i, <span class="pl-c1">1</span> );
                            <span class="pl-k">--</span>i;
                        }
                    }
                }
                
                <span class="pl-c1">this</span>.<span class="pl-en">injectFloor</span>( floorNum, <span class="pl-s"><span class="pl-pds">"</span>idle<span class="pl-pds">"</span></span> );
            });
            elevators[i].<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">"</span>passing_floor<span class="pl-pds">"</span></span>, <span class="pl-k">function</span>( <span class="pl-smi">floorNum</span>, <span class="pl-smi">direction</span> ) {
                <span class="pl-k">if</span>( wait_mode <span class="pl-k">||</span> <span class="pl-c1">this</span>.<span class="pl-smi">fast</span> <span class="pl-k">||</span> <span class="pl-c1">LIFT_CONSIDER_FULL</span> <span class="pl-k">&lt;</span> <span class="pl-c1">this</span>.<span class="pl-en">loadFactor</span>() ) { <span class="pl-k">return</span>; }
                
                <span class="pl-k">for</span>( i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">requests</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i ) {
                    <span class="pl-k">if</span>( <span class="pl-smi">requests</span>.<span class="pl-smi">floor</span> <span class="pl-k">==</span> floorNum <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">requests</span>.<span class="pl-smi">direction</span> <span class="pl-k">==</span> direction ) {
                        <span class="pl-c1">this</span>.<span class="pl-en">goToFloor</span>( requests[i].<span class="pl-smi">floor</span>, <span class="pl-c1">true</span> );
                        <span class="pl-smi">requests</span>.<span class="pl-c1">splice</span>( i, <span class="pl-c1">1</span> );
                        <span class="pl-k">break</span>;
                    }
                }
            });
            elevators[i].<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">"</span>stopped_at_floor<span class="pl-pds">"</span></span>, <span class="pl-k">function</span>( <span class="pl-smi">floorNum</span> ) {
                <span class="pl-c1">this</span>.<span class="pl-smi">fast</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;
            });
        }
        
    },
    <span class="pl-en">update</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">dt</span>, <span class="pl-smi">elevators</span>, <span class="pl-smi">floors</span>) {
        <span class="pl-c"><span class="pl-c">//</span> We normally don't need to do anything here</span>
    }
}</pre></div>

        </div>

    </div>]