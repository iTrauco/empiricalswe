[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <p>This page is intended to just be a dumping ground for interesting details and features of jsqsh that are probably pretty easy to miss unless you take the time to read all of the built-in help (which you should, I spent a lot of time writing it!)</p>
<p><strong>Table of Contents</strong></p>
<ul>
<li>
<a class="internal present" href="/scgray/jsqsh/wiki/Tips-and-Tricks#configuration-variables">Configuration variables</a>
<ul>
<li><a class="internal present" href="/scgray/jsqsh/wiki/Tips-and-Tricks#prompt">prompt</a></li>
<li><a class="internal present" href="/scgray/jsqsh/wiki/Tips-and-Tricks#timer">timer</a></li>
</ul>
</li>
<li>
<a class="internal present" href="/scgray/jsqsh/wiki/Tips-and-Tricks#calling-stored-procedures">Calling stored procedures</a>
<ul>
<li><a class="internal present" href="/scgray/jsqsh/wiki/Tips-and-Tricks#jdbc-escape-syntax">JDBC escape syntax</a></li>
<li><a class="internal present" href="/scgray/jsqsh/wiki/Tips-and-Tricks#the-call-statement">The CALL statement</a></li>
<li><a class="internal present" href="/scgray/jsqsh/wiki/Tips-and-Tricks#output-cursors">Output cursors</a></li>
</ul>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#configuration-variables" id="user-content-configuration-variables"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Configuration variables</h2>
<p>This section covers some of the more interesting configuration variables in jsqsh.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#prompt" id="user-content-prompt"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>prompt</h3>
<p>The contents of the <strong>$prompt</strong> variable is used to construct the jsqsh prompt.  This variable may, itself, contain references to jsqsh variables and <a href="http://velocity.apache.org/engine/devel/user-guide.html" rel="nofollow">Velocity</a> macros, which are expanded immediately prior to display.  For example, the default value for the jsqsh prompt is:</p>
<pre><code>#if($connected==true)[$server][$user] #end$lineno&gt;
</code></pre>
<p>so what does this confusing mess do?</p>
<ul>
<li>The <code>#if($connected==true)...#end</code> is a velocity macro. It checks the jsqsh <strong>$connected</strong> variable (see <code>\help connected</code> for details), and if the variable has a value of <strong>true</strong> then the contents up to the <code>#end</code> are left in place, otherwise they are removed.</li>
<li>The <strong>$server</strong> will expand to the hostname that was used for the current connection and <strong>$user</strong> will refer to the username used for the connection (see <code>\help server</code> and <code>\help user</code>)</li>
<li>The <strong>$lineno</strong> variable always expands to be the line number you are typing into in the current <a class="internal present" href="/scgray/jsqsh/wiki/Users-Guide#editing">SQL Buffer</a>.</li>
</ul>
<p>All of the above means that when you are not connected to a data source, you'll have a prompt of:</p>
<pre><code>1&gt;
</code></pre>
<p>but after connection you'll see:</p>
<pre><code>[mydb2.mydomain.com][gray] 1&gt; 
</code></pre>
<p>JSqsh has a number of additional variables that are useful to display in the prompt:</p>
<ul>
<li>
<strong>$database</strong> - The current working database</li>
<li>
<strong>$driver</strong> - The driver you are connected with</li>
<li>
<strong>$histid</strong> - The id of the current SQL buffer you are editing (useful for history recall)</li>
<li>
<strong>$jdbc_url</strong> - The JDBC URL currently in use</li>
<li>
<strong>$name</strong> - The logical name used for the connection</li>
<li>
<strong>$port</strong> - The port on which the connection was established</li>
</ul>
<p>When you are setting the prompt, do not forget to wrap the value in single quotes, otherwise jsqsh will expand the variables before executing the <code>\set</code> command, which isn't what you want:</p>
<pre><code>1&gt; \set prompt='$histid:$lineno&gt;'
31:1&gt; 
</code></pre>
<p>Also, you can set the value for the prompt in a persistent fashion by adding your set command to your <a class="internal present" href="/scgray/jsqsh/wiki/Users-Guide#the-sqshrc-file">$HOME/.jsqsh/sqshrc</a> file.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#timer" id="user-content-timer"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>timer</h3>
<p>The <strong>$timer</strong> variable is used to control jsqsh's display of a running timer of the current query's execution.  The timer doesn't appear until the current query has been running for 5 seconds or longer:</p>
<pre><code>[db2inst1][gray] 1&gt; \set timer=true
[db2inst1][gray] 1&gt; select count(*) from really_large_table
Elapsed time: 01:31:15
</code></pre>
<h2>
<a aria-hidden="true" class="anchor" href="#calling-stored-procedures" id="user-content-calling-stored-procedures"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Calling stored procedures</h2>
<p>JSqsh provides special support for calling stored procedures that require output (OUT) or input/output (INOUT) parameters. Such procedures can be executed in one of two fashions:</p>
<ul>
<li>Using the JDBC escape syntax</li>
<li>Using the CALL statement</li>
</ul>
<p>These are detailed below.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#jdbc-escape-syntax" id="user-content-jdbc-escape-syntax"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>JDBC escape syntax</h3>
<p>The JDBC standard defines a canonical way of executing stored procedures in a manner that abstracts away the specifics of how procedures are invoked for a given platform.  The following example executes a procedure passing one input argument and retrieving one output argument using this syntax:</p>
<pre><code>1&gt; { call my_test_proc(10, ?) };
+-------------+
| Param #1    |
+-------------+
| Fred        |
+-------------+
</code></pre>
<p>here, a question mark ("?") is used to denote an output parameter. After execution, the contents of that output parameter is displayed as shown.</p>
<p>In addition, many platforms allow you to also get a return value from the stored procedure.  To do this in JDBC escape syntax do:</p>
<pre><code>1&gt; { ?= call my_test_proc(10, ?) };
+-------------+-------------+
| Return Code | Param #2    |
+-------------+-------------+
|           0 | Fred        |
+-------------+-------------+
</code></pre>
<p>In the case of input/output parameters, jsqsh slightly extends the JDBC standard with "?=" which indicates that the parameter is an INOUT parameter, and that the initial input value should be "", like so:</p>
<pre><code>1&gt; { ?= call double_my_inout_param_value(10, ?=321) };
+-------------+-------------+
| Return Code | Param #2    |
+-------------+-------------+
|           0 | 642         |
+-------------+-------------+
</code></pre>
<p>The CALL statement</p>
<p>The JDBC escape syntax above is awkward to work with, so jsqsh will attempt to automatically recognize when you are trying to call a procedure.  It does so according to the following rules:</p>
<ol>
<li>The first keyword in your statement is CALL</li>
<li>There are one or more parameter markers ("?") following the CALL keyword ("?" characters contained in comments or string constants are ignored)</li>
</ol>
<p>If both of these are true, then jsqsh automatically takes your statement and attempts to make it a JDBC escape syntax statement.  For example, executing the following:</p>
<pre><code>1&gt; call my_proc(10, ?);
</code></pre>
<p>will cause jsqsh to turn it into:</p>
<pre><code>{ ?= call my_proc(10, ?) }
</code></pre>
<p>and execute the statement.</p>
<h3>
<a aria-hidden="true" class="anchor" href="#output-cursors" id="user-content-output-cursors"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Output cursors</h3>
<p>Unfortunately, there is no standard in JDBC for the handling of CURSOR output parameter types, so each JDBC driver deals with them differently. As a result, jsqsh currently only has an understanding of how to handle CURSOR output parameters for IBM DB2 and Informix, and Oracle.</p>
<p>When faced with an OUTPUT parameter of type cursor, jsqsh will display the results like so:</p>
<pre><code>1&gt; call my_cursor_output(?);
  
Parameter #2 CURSOR:
+---+
| 1 |
+---+
| 5 |
+---+

+-------------+
| Return Code |
+-------------+
|           0 |
+-------------+
</code></pre>

        </div>

    </div>]