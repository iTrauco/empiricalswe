[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#variable" id="user-content-variable"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Variable</h2>
<p><code>style</code> - Controls the output display style.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#description" id="user-content-description"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Description</h2>
<p>The <code>${style}</code> variable can be set to switch how jsqsh displays its results
to the user.  This variable is a little different from most jsqsh variables,
please read the NOTES section, below carefully.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#sql-styles" id="user-content-sql-styles"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>SQL styles</h2>
<p>The following styles may be set for a SQL (JDBC) session established
using <code>\connect</code>, or may be set when no session has been started.</p>
<ul>
<li>
<p><code>csv</code><br/>
Displays the output as a set of comma separated values suitable for
loading into, say, Excel. For example:</p>
<p>1&gt; select DB_ID, OWNER, TBL_NAME from TBLS LIMIT 3
2&gt; go -m csv
DB_ID,OWNER,TBL_NAME
1,gray,struct_simple1
1,gray,struct_nested3
81,gray,dist_inventory_fact</p>
<p>When displaying the output:</p>
<ul>
<li>Unless headers are suppressed with the <code>${headers}</code> variable or
via the <code>--no-headers</code> (<code>-H</code>) option to <code>\go</code>, the first row in the
file will contain the column headers.</li>
<li>A NULL value is represented by a completely empty field (this is
may be changed with the <code>${csv_null}</code> configuration variable)</li>
<li>A zero-length string is quoted to differentate it from NULL (unless
a specific NULL representation has been set with $<a class="internal absent" href="/scgray/jsqsh/wiki/%7Bcsv_null%7D">{csv_null}</a>)</li>
<li>A value will be wrapped in quotes (which are double-quotes (") by default
but can be changed with <code>${csv_quote}</code>) if the value contains:
<ul>
<li>The quoting character (in which case the quoting character will be
escaped (see <code>${cvs_quote_esc}</code> for details)</li>
<li>Leading or trailing white space</li>
<li>The delimiter character</li>
<li>A newline</li>
</ul>
</li>
</ul>
<p>The following jsqsh configuration variables can be used to alter
the behavior of the <code>csv</code> display output:</p>
<ul>
<li>${<a class="internal present" href="/scgray/jsqsh/wiki/csv_delimiter">csv_delimiter</a>}<br/>
Controls the delimiter used between columns</li>
<li>${<a class="internal present" href="/scgray/jsqsh/wiki/csv_quote">csv_quote</a>}<br/>
Controls which character or string is used to quote the value of a column</li>
<li>${<a class="internal present" href="/scgray/jsqsh/wiki/csv_quote_esc">csv_quote_esc</a>}<br/>
Controls how a column containing the quoting
character is escaped</li>
<li>${<a class="internal present" href="/scgray/jsqsh/wiki/csv_null">csv_null</a>}<br/>
Controls how NULL values are represented in the final output</li>
</ul>
<p>Each of these variables has its own dedicated help page for more details.
The variables may either be explicitly set via the <a class="internal present" href="/scgray/jsqsh/wiki/set">\set</a> command, or
they can be specified at the time the query is executed via the <a class="internal present" href="/scgray/jsqsh/wiki/go">\go</a>
command, like so:</p>
<pre><code> 1&gt; values('"Hello Scott!", she said', cast(null as varchar(3)), 'c')
 2&gt; \go -H -m csv --var csv_delimiter='|' --var csv_quote_esc=\\ --var csv_null=NULL
 "\"Hello Scott!\", she said",NULL,c
</code></pre>
</li>
<li>
<p><code>discard</code><br/>
This causes all rows to be retrieved from the query but to
be discarded (i.e. not displayed). This is primarily useful only
for timing queries that return rows where you want to discount
(most of) the overhead involved in formatting and displaying the
final rows (this overhead can be quite high for some display formats!).</p>
</li>
<li>
<p><code>graphical</code><br/>
Displays the results in a graphical window (GUI). This will
only work on environments where the graphical interface is
available to the JVM.</p>
<p>Note: the variable <code>${window_size}</code> can be used to control the size
of the window that is opened to display results.</p>
</li>
<li>
<p><code>graph</code><br/>
A synonym for <code>graphical</code>.</p>
</li>
<li>
<p><code>isql</code><br/>
This formats its output in a fashion similar to that of Sybase's (or
Microsoft SQL Server's) <code>isql</code> program.  For example:</p>
<p>1&gt; select DB_ID, OWNER, TBL_NAME from TBLS LIMIT 3
2&gt; go -m isql
DB_ID
OWNER
TBL_NAME
----------------------
-----------------------------------------------
-----------------------------------------------
1
gray
struct_simple1
1
gray
struct_nested3
81
gray
dist_inventory_fact</p>
</li>
<li>
<p><code>json</code>
Displays results as an array of JSON records (<a href="http://json.org" rel="nofollow">http://json.org</a>). For
example:</p>
<p>1&gt; select DB_ID, OWNER, TBL_NAME from TBLS LIMIT 3
2&gt; go -m json
[
{
"DB_ID": 1,
"OWNER": "gray",
"TBL_NAME": "struct_simple1"
},
{
"DB_ID": 1,
"OWNER": "gray",
"TBL_NAME": "struct_nested3"
},
{
"DB_ID": 81,
"OWNER": "gray",
"TBL_NAME": "dist_inventory_fact"
}
]</p>
</li>
<li>
<p><code>perfect</code><br/>
This is the default display style and is very similar to how tools like
the mySQL client display their output. The output is contained in a
text-based grid, like so:</p>
<p>+----------+----------+
| COLUMN 1 | COLUMN 2 |
+----------+----------+
|     1234 | hello    |
+----------+----------+</p>
<p>The <code>perfect</code> display style is so called because it holds rows
in memory prior to display, then analyzes the maximum amount of
data to be displayed in each column and attempts to adjust the
display accordingly so that as much data as possible fits cleanly
on the display. To avoid consuming too much memory, the variable
<code>${perfect_sample_rows}</code> is used to determine how many rows are
sampled before the display  process begins--after which point
no more rows are held in memory and results are streamed to the
display as they arrive. For example:</p>
<p>\set perfect_sample_rows=20</p>
<p>indicates that the first 20 rows of the results will be held in
memory for analysis before display begins. Setting this variable
to a value less than one will cause all rows to be sampled.</p>
</li>
<li>
<p><code>pretty</code><br/>
This is visually identical to <code>perfect</code> except that it does not
attempt to perform a perfect fit on the data before display and,
thus, does not need to hold the results in memory during display.
Use this style when you need to work with very large result sets.</p>
</li>
<li>
<p><code>simple</code>
The <code>simple</code> style is a simpler form of <code>pretty</code>. With it, the
outer borders are dropped providing a simpler, tighter output
like so:</p>
<p>COLUMN 1 | COLUMN 2
---------+---------
1234 | hello</p>
</li>
<li>
<p><code>tight</code>
The <code>tight</code> style is the same as <code>simple</code> except that it follows
the same logic as <code>perfect</code> to try to "perfect" the space
consumed on the final output.  Just like perfect, it consumes
memory buffering sample rows (dictated by <a class="internal present" href="/scgray/jsqsh/wiki/perfect_sample_rows">perfect_sample_rows</a>)
in its attempt to maximize screen real estate.</p>
</li>
<li>
<p><code>vertical</code><br/>
The vert (or vertical) style rotates the output, so that every
line is represented by a column name followed by a column value. This
is nice for looking at particularly wide output.  For example:</p>
<p>1&gt; select DB_ID, OWNER, TBL_NAME from TBLS LIMIT 3
2&gt; go -m vertical
DB_ID:    1
OWNER:    gray
TBL_NAME: struct_simple1</p>
<p>DB_ID:    1
OWNER:    gray
TBL_NAME: struct_nested3</p>
<p>DB_ID:    81
OWNER:    gray
TBL_NAME: dist_inventory_fact</p>
</li>
<li>
<p><code>vert</code><br/>
A synonym for <code>vertical</code>.</p>
</li>
<li>
<p><code>tree</code><br/>
Displays the results in a graphical window (GUI).  Just like graphical
except it  displays the resuts in a tree syle format.</p>
<p>Note: the variable <code>${window_size}</code> can be used to control the size
of the window that is opened to display results.</p>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#notes" id="user-content-notes"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Notes</h2>
<p>This variable is a little odd in that it has slightly different
behavior in different contexts:</p>
<ul>
<li>If no session/connection is established, then the style name provided
must be a valid SQL display style.</li>
<li>If a session is established, then the style name must be a valid
display style for that type of session.</li>
</ul>
<p>This means that you cannot use <code>${style}</code> to set the display style of a non-
SQL session type before the session is started, and when the session ends
the value of <code>${style}</code> will revert to the current SQL display style.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#see-also" id="user-content-see-also"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>See also</h2>
<p><a class="internal present" href="/scgray/jsqsh/wiki/maxrows">maxrows</a>, <a class="internal present" href="/scgray/jsqsh/wiki/maxlen">maxlen</a>, <a class="internal present" href="/scgray/jsqsh/wiki/perfect_sample_rows">perfect_sample_rows</a></p>

        </div>

    </div>]