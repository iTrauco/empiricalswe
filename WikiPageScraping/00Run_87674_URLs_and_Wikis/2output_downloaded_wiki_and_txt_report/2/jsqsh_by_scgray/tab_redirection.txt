[<div class="wiki-body gollum-markdown-content instapaper_body" id="wiki-body">
        <div class="markdown-body">
          <h2>
<a aria-hidden="true" class="anchor" href="#command-line-redirection" id="user-content-command-line-redirection"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Command line redirection</h2>
<p>As with standard Bourne shell (and most other shells, for that
matter), a command's output may be redirected using a special
notation interpreted by the jsqsh. The following may appear anywhere
on the command line, but only redirection that is specified prior
to a pipe (<code>|</code>) actually has any effect on the behavior of internal
jsqsh commands.</p>
<ul>
<li>
<p><code>[n]&gt;file</code></p>
<p>Causes the output of the command to be redirected to a
file.  Following standard shell conventions, the <code>n</code> is
an optional number that can be used to indicate which
output of the command is redirected to the file.  A <code>1</code>
indicates the regular output should be redirected, and
a <code>2</code> indicates only the errors should be redirected.
If no number is provided, then regular output is diverted.</p>
<p>For example:</p>
<pre><code>  \go &gt;tmp.out
</code></pre>
<p>Sends the output of the <code>\go</code> command to a file called
<code>tmp.out</code>. Errors will still go to your screen.</p>
<pre><code>  \go 1&gt;tmp.out
</code></pre>
<p>Synonym for the above.</p>
<pre><code>  \go 2&gt;tmp.out 
</code></pre>
<p>The results from the <code>\go</code> will go to your screen but errors
will be captured in tmp.out.</p>
</li>
<li>
<p><code>[n]&gt;&gt;file</code></p>
<p>This is identical to the above except that if the file
exists, it is appended to rather than overwritten.</p>
</li>
<li>
<p><code>[m]&gt;&amp;[n]</code></p>
<p>This allows one type of output stream (regular output
or errors) to be redirected to the other type of stream.
For example:</p>
<pre><code>  \go 2&gt;&amp;1
</code></pre>
<p>Causes errors from the SQL to go to the regular output
stream</p>
<pre><code>  \echo "Error!" 1&gt;&amp;2 
</code></pre>
<p>Causes the output of the \echo command to be send to the error
stream.</p>
<pre><code>  \echo "Error!" &gt;&amp;2 
</code></pre>
<p>A synonym for the above.</p>
</li>
<li>
<p><code>&gt;+[id]</code></p>
<p>This syntax is specific to jsqsh and is used to redirect the output
from the current command to the context of another session (specified
by <code>id</code>). If no session id is provided, then the output of the current
session is "looped back" to itself. See <strong>Session redirection</strong>, below
for details.</p>
</li>
</ul>
<h2>
<a aria-hidden="true" class="anchor" href="#pipes-and-redirection" id="user-content-pipes-and-redirection"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Pipes and redirection</h2>
<p>It is important to understand that jsqsh handles pipes very differently
from that of a typical shell. In jsqsh anything following a pipe
character (<code>|</code>) is passed directly to the operating system shell, which
means that any I/O redirection following the pipe character is being
performed by your local operating system shell and not by jsqsh and will
therefore follow whatever rules are defined by your O/S shell.</p>
<h2>
<a aria-hidden="true" class="anchor" href="#session-redirection" id="user-content-session-redirection"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"></path></svg></a>Session redirection</h2>
<p>Session redirection is indicated by the special syntax <code>&gt;+[id]</code> where
<code>id</code> is the id of the session that you wish to re-direct the output to.
If the id is not specified then the output is sent back to your current
session for subsequent processing.</p>
<p>When jsqsh encounters a session redirection the following takes place:</p>
<ol>
<li>
<p>A temporary file is created and the commands output is sent to
that file.</p>
</li>
<li>
<p>If the command involves a pipe, the output of the pipe is sent to
that file.</p>
</li>
<li>
<p>After the command completes, the contents of the file is executed
in the context of the target session as if:</p>
<pre><code> \eval tmp_file
</code></pre>
<p>was executed in the target session.</p>
</li>
</ol>
<p>The important item to note is that any output from the command being
directed is treated <em>exactly</em> as if the user had typed it into the
prompt in the context of the target session.</p>
<p>Here's why this is so important to understand:</p>
<pre><code>1&gt; echo 'select 1' &gt;+2 
</code></pre>
<p>will <em>not</em> cause a <code>select 1</code> to be executed in session #2. All that
will happen is that jsqsh will switch to the context of session #2,
pretend that the user has typed <code>select 1</code>, and then switch back to the
current session.  The end result, is that a <code>select 1</code> will be appended
to the current SQL buffer (the SQL buffer is independant of sessions).</p>
<p>If you actually want to execute the command then you can do one of two
things:</p>
<pre><code>1&gt; echo 'select 1;' &gt;+ 2
</code></pre>
<p>or</p>
<pre><code>1&gt; echo 'select 1' &gt;+2
2&gt; \echo 'go' &gt;+2
</code></pre>
<p>In the first case, the semicolon causes the execution of the SQL
and in the second, the <code>go</code> executed in the context of session #2
causes the execution.</p>

        </div>

    </div>]